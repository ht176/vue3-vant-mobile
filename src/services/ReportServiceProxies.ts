/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import {ServiceProxyBase} from './ServiceProxyBase'
import axios, { AxiosError, type AxiosInstance, type AxiosRequestConfig, type AxiosResponse, type CancelToken } from 'axios';

import dayjs from 'dayjs';

export class QualityControlReportServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析用水生物污染检验合格率
     * @param startStr (optional)
     * @param endStr (optional)
     * @return Success
     */
    queryHospitalInfectionDialysateCompletion(startStr: number | undefined, endStr: number | undefined , cancelToken?: CancelToken | undefined): Promise<NewQualityControlHospitalInfectionReportViewResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryHospitalInfectionDialysateCompletionAsync?";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryHospitalInfectionDialysateCompletion(_response));
        });
    }

    protected processQueryHospitalInfectionDialysateCompletion(response: AxiosResponse): Promise<NewQualityControlHospitalInfectionReportViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = NewQualityControlHospitalInfectionReportViewResult.fromJS(resultData200);
            return Promise.resolve<NewQualityControlHospitalInfectionReportViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewQualityControlHospitalInfectionReportViewResult>(null as any);
    }

    /**
     * 血液透析治疗室消毒合格率
     * @param startStr (optional)
     * @param endStr (optional)
     * @return Success
     */
    queryTreatDisinfectCompletion(startStr: number | undefined, endStr: number | undefined , cancelToken?: CancelToken | undefined): Promise<NewQualityControlHospitalInfectionReportViewResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryTreatDisinfectCompletionAsync?";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryTreatDisinfectCompletion(_response));
        });
    }

    protected processQueryTreatDisinfectCompletion(response: AxiosResponse): Promise<NewQualityControlHospitalInfectionReportViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = NewQualityControlHospitalInfectionReportViewResult.fromJS(resultData200);
            return Promise.resolve<NewQualityControlHospitalInfectionReportViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewQualityControlHospitalInfectionReportViewResult>(null as any);
    }

    /**
     * 新入血液透析患者血源性传染病标志物检验完成率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryBloodInfectiousDiseaseCompletion(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryBloodInfectiousDiseaseCompletionAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryBloodInfectiousDiseaseCompletion(_response));
        });
    }

    protected processQueryBloodInfectiousDiseaseCompletion(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * 新入血液透析患者血源性传染病标志物检验完成率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryBloodInfectiousDiseaseCompletionDetail(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<NewQualityControlDetailViewResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryBloodInfectiousDiseaseCompletionDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryBloodInfectiousDiseaseCompletionDetail(_response));
        });
    }

    protected processQueryBloodInfectiousDiseaseCompletionDetail(response: AxiosResponse): Promise<NewQualityControlDetailViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = NewQualityControlDetailViewResult.fromJS(resultData200);
            return Promise.resolve<NewQualityControlDetailViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewQualityControlDetailViewResult>(null as any);
    }

    /**
     * 质控类报表 --新入血液透析患者血源性传染病标志物检验完成率 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryBloodInfectiousDiseaseCompletionDetailExport(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryBloodInfectiousDiseaseCompletionDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryBloodInfectiousDiseaseCompletionDetailExport(_response));
        });
    }

    protected processQueryBloodInfectiousDiseaseCompletionDetailExport(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者血源性传染病标志物检验完成率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryBloodInfectiousDiseaseTimingCompletion(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryBloodInfectiousDiseaseTimingCompletionAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryBloodInfectiousDiseaseTimingCompletion(_response));
        });
    }

    protected processQueryBloodInfectiousDiseaseTimingCompletion(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * 维持性血液透析患者血源性传染病标志物检验完成率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryBloodInfectiousDiseaseTimingCompletionDetail(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<NewQualityControlDetailViewResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryBloodInfectiousDiseaseTimingCompletionDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryBloodInfectiousDiseaseTimingCompletionDetail(_response));
        });
    }

    protected processQueryBloodInfectiousDiseaseTimingCompletionDetail(response: AxiosResponse): Promise<NewQualityControlDetailViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = NewQualityControlDetailViewResult.fromJS(resultData200);
            return Promise.resolve<NewQualityControlDetailViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewQualityControlDetailViewResult>(null as any);
    }

    /**
     * /维持性血液透析患者血源性传染病标志物检验完成率 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryBloodInfectiousDiseaseTimingCompletionDetailExport(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryBloodInfectiousDiseaseTimingCompletionDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryBloodInfectiousDiseaseTimingCompletionDetailExport(_response));
        });
    }

    protected processQueryBloodInfectiousDiseaseTimingCompletionDetailExport(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者β2微球蛋白定时检验完成率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryBetaTwoMicroglobulinTimingCompletion(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryBetaTwoMicroglobulinTimingCompletionAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryBetaTwoMicroglobulinTimingCompletion(_response));
        });
    }

    protected processQueryBetaTwoMicroglobulinTimingCompletion(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * 维持性血液透析患者β2微球蛋白定时检验完成率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryBetaTwoMicroglobulinTimingCompletionDetail(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<NewQualityControlDetailViewResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryBetaTwoMicroglobulinTimingCompletionDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryBetaTwoMicroglobulinTimingCompletionDetail(_response));
        });
    }

    protected processQueryBetaTwoMicroglobulinTimingCompletionDetail(response: AxiosResponse): Promise<NewQualityControlDetailViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = NewQualityControlDetailViewResult.fromJS(resultData200);
            return Promise.resolve<NewQualityControlDetailViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewQualityControlDetailViewResult>(null as any);
    }

    /**
     * 维持性血液透析患者β2微球蛋白定时检验完成率明细 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryBetaTwoMicroglobulinTimingCompletionDetailExport(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryBetaTwoMicroglobulinTimingCompletionDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryBetaTwoMicroglobulinTimingCompletionDetailExport(_response));
        });
    }

    protected processQueryBetaTwoMicroglobulinTimingCompletionDetailExport(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者血清铁蛋白和转铁蛋白饱和度定时检验完成率
     * @param year (optional)
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    querySerumFerritinTransferrinSaturationTimingCompletion(year: number | undefined, format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<NewQualityControlSpecialReportViewResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QuerySerumFerritinTransferrinSaturationTimingCompletionAsync?";
        if (year === null)
            throw new Error("The parameter 'year' cannot be null.");
        else if (year !== undefined)
            url_ += "year=" + encodeURIComponent("" + year) + "&";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQuerySerumFerritinTransferrinSaturationTimingCompletion(_response));
        });
    }

    protected processQuerySerumFerritinTransferrinSaturationTimingCompletion(response: AxiosResponse): Promise<NewQualityControlSpecialReportViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = NewQualityControlSpecialReportViewResult.fromJS(resultData200);
            return Promise.resolve<NewQualityControlSpecialReportViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewQualityControlSpecialReportViewResult>(null as any);
    }

    /**
     * 维持性血液透析患者血清铁蛋白和转铁蛋白饱和度定时检验完成率明细
     * @param format (optional)
     * @param itemCode (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    querySerumFerritinTransferrinSaturationTimingCompletionDetail(format: string | undefined, itemCode: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<NewQualityControlDetailViewResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QuerySerumFerritinTransferrinSaturationTimingCompletionDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (itemCode === null)
            throw new Error("The parameter 'itemCode' cannot be null.");
        else if (itemCode !== undefined)
            url_ += "itemCode=" + encodeURIComponent("" + itemCode) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQuerySerumFerritinTransferrinSaturationTimingCompletionDetail(_response));
        });
    }

    protected processQuerySerumFerritinTransferrinSaturationTimingCompletionDetail(response: AxiosResponse): Promise<NewQualityControlDetailViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = NewQualityControlDetailViewResult.fromJS(resultData200);
            return Promise.resolve<NewQualityControlDetailViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewQualityControlDetailViewResult>(null as any);
    }

    /**
     * 维持性血液透析患者血清铁蛋白和转铁蛋白饱和度定时检验完成率明细 - 导出
     * @param format (optional)
     * @param itemCode (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    querySerumFerritinTransferrinSaturationTimingCompletionDetailExport(format: string | undefined, itemCode: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QuerySerumFerritinTransferrinSaturationTimingCompletionDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (itemCode === null)
            throw new Error("The parameter 'itemCode' cannot be null.");
        else if (itemCode !== undefined)
            url_ += "itemCode=" + encodeURIComponent("" + itemCode) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQuerySerumFerritinTransferrinSaturationTimingCompletionDetailExport(_response));
        });
    }

    protected processQuerySerumFerritinTransferrinSaturationTimingCompletionDetailExport(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者血清前白蛋白定时检测完成率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    querySerumPrealbuminTimingCompletion(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QuerySerumPrealbuminTimingCompletionAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQuerySerumPrealbuminTimingCompletion(_response));
        });
    }

    protected processQuerySerumPrealbuminTimingCompletion(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * 维持性血液透析患者血清前白蛋白定时检测完成率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    querySerumPrealbuminTimingCompletionDetail(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<NewQualityControlDetailViewResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QuerySerumPrealbuminTimingCompletionDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQuerySerumPrealbuminTimingCompletionDetail(_response));
        });
    }

    protected processQuerySerumPrealbuminTimingCompletionDetail(response: AxiosResponse): Promise<NewQualityControlDetailViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = NewQualityControlDetailViewResult.fromJS(resultData200);
            return Promise.resolve<NewQualityControlDetailViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewQualityControlDetailViewResult>(null as any);
    }

    /**
     * 维持性血液透析患者血清前白蛋白定时检测完成率明细 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    querySerumPrealbuminTimingCompletionDetailExport(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QuerySerumPrealbuminTimingCompletionDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQuerySerumPrealbuminTimingCompletionDetailExport(_response));
        });
    }

    protected processQuerySerumPrealbuminTimingCompletionDetailExport(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者C 反应蛋白（CRP）定时检测完成率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryCRPTimingCompletion(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryCRPTimingCompletionAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryCRPTimingCompletion(_response));
        });
    }

    protected processQueryCRPTimingCompletion(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * 维持性血液透析患者C 反应蛋白（CRP）定时检测完成率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryCRPTimingCompletionDetail(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<NewQualityControlDetailViewResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryCRPTimingCompletionDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryCRPTimingCompletionDetail(_response));
        });
    }

    protected processQueryCRPTimingCompletionDetail(response: AxiosResponse): Promise<NewQualityControlDetailViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = NewQualityControlDetailViewResult.fromJS(resultData200);
            return Promise.resolve<NewQualityControlDetailViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewQualityControlDetailViewResult>(null as any);
    }

    /**
     * /维持性血液透析患者C 反应蛋白（CRP）定时检测完成率明细 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryCRPTimingCompletionDetailExport(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryCRPTimingCompletionDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryCRPTimingCompletionDetailExport(_response));
        });
    }

    protected processQueryCRPTimingCompletionDetailExport(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者血常规定时检验完成率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryRegularBloodTestTimingCompletion(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryRegularBloodTestTimingCompletionAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryRegularBloodTestTimingCompletion(_response));
        });
    }

    protected processQueryRegularBloodTestTimingCompletion(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * 维持性血液透析患者血常规定时检验完成率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryRegularBloodTestTimingCompletionDetail(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<NewQualityControlDetailViewResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryRegularBloodTestTimingCompletionDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryRegularBloodTestTimingCompletionDetail(_response));
        });
    }

    protected processQueryRegularBloodTestTimingCompletionDetail(response: AxiosResponse): Promise<NewQualityControlDetailViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = NewQualityControlDetailViewResult.fromJS(resultData200);
            return Promise.resolve<NewQualityControlDetailViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewQualityControlDetailViewResult>(null as any);
    }

    /**
     * 维持性血液透析患者血常规定时检验完成率明细 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryRegularBloodTestTimingCompletionDetailExport(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryRegularBloodTestTimingCompletionDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryRegularBloodTestTimingCompletionDetailExport(_response));
        });
    }

    protected processQueryRegularBloodTestTimingCompletionDetailExport(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者血液生化定时检验完成率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryBloodBiochemicalTimingCompletion(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryBloodBiochemicalTimingCompletionAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryBloodBiochemicalTimingCompletion(_response));
        });
    }

    protected processQueryBloodBiochemicalTimingCompletion(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * /维持性血液透析患者血液生化定时检验完成率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryBloodBiochemicalTimingCompletionDetail(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<NewQualityControlDetailViewResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryBloodBiochemicalTimingCompletionDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryBloodBiochemicalTimingCompletionDetail(_response));
        });
    }

    protected processQueryBloodBiochemicalTimingCompletionDetail(response: AxiosResponse): Promise<NewQualityControlDetailViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = NewQualityControlDetailViewResult.fromJS(resultData200);
            return Promise.resolve<NewQualityControlDetailViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewQualityControlDetailViewResult>(null as any);
    }

    /**
     * 维持性血液透析患者血液生化定时检验完成率明细 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryBloodBiochemicalTimingCompletionDetailExport(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryBloodBiochemicalTimingCompletionDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryBloodBiochemicalTimingCompletionDetailExport(_response));
        });
    }

    protected processQueryBloodBiochemicalTimingCompletionDetailExport(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者全段甲状旁腺素(iPTH)定时检验完成率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryIPTHTimingCompletion(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryIPTHTimingCompletionAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryIPTHTimingCompletion(_response));
        });
    }

    protected processQueryIPTHTimingCompletion(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * 维持性血液透析患者全段甲状旁腺素(iPTH)定时检验完成率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryIPTHTimingCompletionDetail(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<NewQualityControlDetailViewResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryIPTHTimingCompletionDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryIPTHTimingCompletionDetail(_response));
        });
    }

    protected processQueryIPTHTimingCompletionDetail(response: AxiosResponse): Promise<NewQualityControlDetailViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = NewQualityControlDetailViewResult.fromJS(resultData200);
            return Promise.resolve<NewQualityControlDetailViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewQualityControlDetailViewResult>(null as any);
    }

    /**
     * 维持性血液透析患者全段甲状旁腺素(iPTH)定时检验完成率明细 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryIPTHTimingCompletionDetailExport(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryIPTHTimingCompletionDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryIPTHTimingCompletionDetailExport(_response));
        });
    }

    protected processQueryIPTHTimingCompletionDetailExport(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者的乙型肝炎和丙型肝炎发病率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryIncidenceHepatitis(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryIncidenceHepatitisAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryIncidenceHepatitis(_response));
        });
    }

    protected processQueryIncidenceHepatitis(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * 维持性血液透析患者的乙型肝炎和丙型肝炎发病率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryIncidenceHepatitisDetail(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<NewQualityControlDetailViewResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryIncidenceHepatitisDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryIncidenceHepatitisDetail(_response));
        });
    }

    protected processQueryIncidenceHepatitisDetail(response: AxiosResponse): Promise<NewQualityControlDetailViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = NewQualityControlDetailViewResult.fromJS(resultData200);
            return Promise.resolve<NewQualityControlDetailViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewQualityControlDetailViewResult>(null as any);
    }

    /**
     * 维持性血液透析患者的乙型肝炎和丙型肝炎发病率明细 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryIncidenceHepatitisDetailExport(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryIncidenceHepatitisDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryIncidenceHepatitisDetailExport(_response));
        });
    }

    protected processQueryIncidenceHepatitisDetailExport(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者血清白蛋白控制率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    querySerumAlbuminControl(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QuerySerumAlbuminControlAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQuerySerumAlbuminControl(_response));
        });
    }

    protected processQuerySerumAlbuminControl(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * 维持性血液透析患者血清白蛋白控制率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    querySerumAlbuminControlDetail(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<NewQualityControlDetailViewResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QuerySerumAlbuminControlDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQuerySerumAlbuminControlDetail(_response));
        });
    }

    protected processQuerySerumAlbuminControlDetail(response: AxiosResponse): Promise<NewQualityControlDetailViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = NewQualityControlDetailViewResult.fromJS(resultData200);
            return Promise.resolve<NewQualityControlDetailViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewQualityControlDetailViewResult>(null as any);
    }

    /**
     * 维持性血液透析患者血清白蛋白控制率明细 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    querySerumAlbuminControlDetailExport(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QuerySerumAlbuminControlDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQuerySerumAlbuminControlDetailExport(_response));
        });
    }

    protected processQuerySerumAlbuminControlDetailExport(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者肾性贫血控制率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryRenalAnemiaControl(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryRenalAnemiaControlAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryRenalAnemiaControl(_response));
        });
    }

    protected processQueryRenalAnemiaControl(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * 维持性血液透析患者肾性贫血控制率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryRenalAnemiaControlDetail(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<NewQualityControlDetailViewResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryRenalAnemiaControlDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryRenalAnemiaControlDetail(_response));
        });
    }

    protected processQueryRenalAnemiaControlDetail(response: AxiosResponse): Promise<NewQualityControlDetailViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = NewQualityControlDetailViewResult.fromJS(resultData200);
            return Promise.resolve<NewQualityControlDetailViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewQualityControlDetailViewResult>(null as any);
    }

    /**
     * 维持性血液透析患者肾性贫血控制率明细 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryRenalAnemiaControlDetailExport(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryRenalAnemiaControlDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryRenalAnemiaControlDetailExport(_response));
        });
    }

    protected processQueryRenalAnemiaControlDetailExport(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者慢性肾脏病-矿物质与骨异常(CKD-MBD)指标控制率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryCKDMBDControl(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryCKDMBDControlAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryCKDMBDControl(_response));
        });
    }

    protected processQueryCKDMBDControl(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * 维持性血液透析患者慢性肾脏病-矿物质与骨异常(CKD-MBD)指标控制率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryCKDMBDControlDetail(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<NewQualityControlDetailViewResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryCKDMBDControlDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryCKDMBDControlDetail(_response));
        });
    }

    protected processQueryCKDMBDControlDetail(response: AxiosResponse): Promise<NewQualityControlDetailViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = NewQualityControlDetailViewResult.fromJS(resultData200);
            return Promise.resolve<NewQualityControlDetailViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewQualityControlDetailViewResult>(null as any);
    }

    /**
     * 维持性血液透析患者慢性肾脏病-矿物质与骨异常(CKD-MBD)指标控制率明细 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryCKDMBDControlDetailExport(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryCKDMBDControlDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryCKDMBDControlDetailExport(_response));
        });
    }

    protected processQueryCKDMBDControlDetailExport(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者高血压控制率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryHypertensionControl(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryHypertensionControlAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryHypertensionControl(_response));
        });
    }

    protected processQueryHypertensionControl(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * 维持性血液透析患者高血压控制率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryHypertensionControlDetail(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<NewQualityControlDetailViewResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryHypertensionControlDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryHypertensionControlDetail(_response));
        });
    }

    protected processQueryHypertensionControlDetail(response: AxiosResponse): Promise<NewQualityControlDetailViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = NewQualityControlDetailViewResult.fromJS(resultData200);
            return Promise.resolve<NewQualityControlDetailViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewQualityControlDetailViewResult>(null as any);
    }

    /**
     * 维持性血液透析患者高血压控制率明细 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryHypertensionControlDetailExport(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryHypertensionControlDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryHypertensionControlDetailExport(_response));
        });
    }

    protected processQueryHypertensionControlDetailExport(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者透析间期体重增长控制率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryDialysisWeightGainControl(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryDialysisWeightGainControlAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryDialysisWeightGainControl(_response));
        });
    }

    protected processQueryDialysisWeightGainControl(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * 维持性血液透析患者透析间期体重增长控制率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryDialysisWeightGainControlDetail(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<NewQualityControlDetailViewResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryDialysisWeightGainControlDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryDialysisWeightGainControlDetail(_response));
        });
    }

    protected processQueryDialysisWeightGainControlDetail(response: AxiosResponse): Promise<NewQualityControlDetailViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = NewQualityControlDetailViewResult.fromJS(resultData200);
            return Promise.resolve<NewQualityControlDetailViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewQualityControlDetailViewResult>(null as any);
    }

    /**
     * 维持性血液透析患者透析间期体重增长控制率明细 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryDialysisWeightGainControlDetailExport(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryDialysisWeightGainControlDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryDialysisWeightGainControlDetailExport(_response));
        });
    }

    protected processQueryDialysisWeightGainControlDetailExport(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者尿素清除指数（Kt/V）和尿素下降率（URR）控制率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryKtvUrrControl(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryKtvUrrControlAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryKtvUrrControl(_response));
        });
    }

    protected processQueryKtvUrrControl(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * 维持性血液透析患者尿素清除指数（Kt/V）和尿素下降率（URR）控制率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryKtvUrrControlDetail(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<NewQualityControlDetailViewResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryKtvUrrControlDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryKtvUrrControlDetail(_response));
        });
    }

    protected processQueryKtvUrrControlDetail(response: AxiosResponse): Promise<NewQualityControlDetailViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = NewQualityControlDetailViewResult.fromJS(resultData200);
            return Promise.resolve<NewQualityControlDetailViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewQualityControlDetailViewResult>(null as any);
    }

    /**
     * 维持性血液透析患者尿素清除指数（Kt/V）和尿素下降率（URR）控制率明细 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryKtvUrrControlDetailExport(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryKtvUrrControlDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryKtvUrrControlDetailExport(_response));
        });
    }

    protected processQueryKtvUrrControlDetailExport(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者尿素清除指数(Kt/v)和尿素下降率(URR)定时记录完成率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryKtvUrrTimingCompletion(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryKtvUrrTimingCompletionAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryKtvUrrTimingCompletion(_response));
        });
    }

    protected processQueryKtvUrrTimingCompletion(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * 维持性血液透析患者尿素清除指数(Kt/v)和尿素下降率(URR)定时记录完成率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryKtvUrrTimingCompletionDetail(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<NewQualityControlDetailViewResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryKtvUrrTimingCompletionDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryKtvUrrTimingCompletionDetail(_response));
        });
    }

    protected processQueryKtvUrrTimingCompletionDetail(response: AxiosResponse): Promise<NewQualityControlDetailViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = NewQualityControlDetailViewResult.fromJS(resultData200);
            return Promise.resolve<NewQualityControlDetailViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewQualityControlDetailViewResult>(null as any);
    }

    /**
     * 维持性血液透析患者尿素清除指数(Kt/v)和尿素下降率(URR)定时记录完成率明细 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryKtvUrrTimingCompletionDetailExport(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryKtvUrrTimingCompletionDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryKtvUrrTimingCompletionDetailExport(_response));
        });
    }

    protected processQueryKtvUrrTimingCompletionDetailExport(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者动静脉内瘘长期生存率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryVascularAccessSurvival(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryVascularAccessSurvivalAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryVascularAccessSurvival(_response));
        });
    }

    protected processQueryVascularAccessSurvival(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * 维持性血液透析患者动静脉内瘘长期生存率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryVascularAccessSurvivalDetail(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<NewQualityControlDetailViewResult> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryVascularAccessSurvivalDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryVascularAccessSurvivalDetail(_response));
        });
    }

    protected processQueryVascularAccessSurvivalDetail(response: AxiosResponse): Promise<NewQualityControlDetailViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = NewQualityControlDetailViewResult.fromJS(resultData200);
            return Promise.resolve<NewQualityControlDetailViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewQualityControlDetailViewResult>(null as any);
    }

    /**
     * 维持性血液透析患者动静脉内瘘长期生存率明细 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryVascularAccessSurvivalDetailExport(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReport/QueryVascularAccessSurvivalDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryVascularAccessSurvivalDetailExport(_response));
        });
    }

    protected processQueryVascularAccessSurvivalDetailExport(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class QualityControlReportNewServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析用水生物污染检验合格率
     * @param startStr (optional)
     * @param endStr (optional)
     * @return Success
     */
    queryHospitalInfectionDialysateCompletionAsync2(startStr: number | undefined, endStr: number | undefined , cancelToken?: CancelToken | undefined): Promise<NewQualityControlHospitalInfectionReportViewResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryHospitalInfectionDialysateCompletionAsync?";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryHospitalInfectionDialysateCompletionAsync2(_response));
        });
    }

    protected processQueryHospitalInfectionDialysateCompletionAsync2(response: AxiosResponse): Promise<NewQualityControlHospitalInfectionReportViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = NewQualityControlHospitalInfectionReportViewResult.fromJS(resultData200);
            return Promise.resolve<NewQualityControlHospitalInfectionReportViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewQualityControlHospitalInfectionReportViewResult>(null as any);
    }

    /**
     * 血液透析治疗室消毒合格率
     * @param startStr (optional)
     * @param endStr (optional)
     * @return Success
     */
    queryTreatDisinfectCompletionAsync2(startStr: number | undefined, endStr: number | undefined , cancelToken?: CancelToken | undefined): Promise<NewQualityControlHospitalInfectionReportViewResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryTreatDisinfectCompletionAsync?";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryTreatDisinfectCompletionAsync2(_response));
        });
    }

    protected processQueryTreatDisinfectCompletionAsync2(response: AxiosResponse): Promise<NewQualityControlHospitalInfectionReportViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = NewQualityControlHospitalInfectionReportViewResult.fromJS(resultData200);
            return Promise.resolve<NewQualityControlHospitalInfectionReportViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewQualityControlHospitalInfectionReportViewResult>(null as any);
    }

    /**
     * 新入血液透析患者血源性传染病标志物检验完成率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryBloodInfectiousDiseaseCompletionAsync2(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryBloodInfectiousDiseaseCompletionAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryBloodInfectiousDiseaseCompletionAsync2(_response));
        });
    }

    protected processQueryBloodInfectiousDiseaseCompletionAsync2(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * 新入血液透析患者血源性传染病标志物检验完成率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryBloodInfectiousDiseaseCompletionDetailAsync2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlDetailResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryBloodInfectiousDiseaseCompletionDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryBloodInfectiousDiseaseCompletionDetailAsync2(_response));
        });
    }

    protected processQueryBloodInfectiousDiseaseCompletionDetailAsync2(response: AxiosResponse): Promise<QualityControlDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlDetailResult.fromJS(resultData200);
            return Promise.resolve<QualityControlDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlDetailResult>(null as any);
    }

    /**
     * 质控类报表 --新入血液透析患者血源性传染病标志物检验完成率 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryBloodInfectiousDiseaseCompletionDetailExport2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryBloodInfectiousDiseaseCompletionDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryBloodInfectiousDiseaseCompletionDetailExport2(_response));
        });
    }

    protected processQueryBloodInfectiousDiseaseCompletionDetailExport2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者血源性传染病标志物检验完成率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryBloodInfectiousDiseaseTimingCompletionAsync2(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryBloodInfectiousDiseaseTimingCompletionAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryBloodInfectiousDiseaseTimingCompletionAsync2(_response));
        });
    }

    protected processQueryBloodInfectiousDiseaseTimingCompletionAsync2(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * 维持性血液透析患者血源性传染病标志物检验完成率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryBloodInfectiousDiseaseTimingCompletionDetailAsync2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlDetailResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryBloodInfectiousDiseaseTimingCompletionDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryBloodInfectiousDiseaseTimingCompletionDetailAsync2(_response));
        });
    }

    protected processQueryBloodInfectiousDiseaseTimingCompletionDetailAsync2(response: AxiosResponse): Promise<QualityControlDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlDetailResult.fromJS(resultData200);
            return Promise.resolve<QualityControlDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlDetailResult>(null as any);
    }

    /**
     * /维持性血液透析患者血源性传染病标志物检验完成率 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryBloodInfectiousDiseaseTimingCompletionDetailExport2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryBloodInfectiousDiseaseTimingCompletionDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryBloodInfectiousDiseaseTimingCompletionDetailExport2(_response));
        });
    }

    protected processQueryBloodInfectiousDiseaseTimingCompletionDetailExport2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者β2微球蛋白定时检验完成率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryBetaTwoMicroglobulinTimingCompletionAsync2(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryBetaTwoMicroglobulinTimingCompletionAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryBetaTwoMicroglobulinTimingCompletionAsync2(_response));
        });
    }

    protected processQueryBetaTwoMicroglobulinTimingCompletionAsync2(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * 维持性血液透析患者β2微球蛋白定时检验完成率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryBetaTwoMicroglobulinTimingCompletionDetailAsync2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlDetailResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryBetaTwoMicroglobulinTimingCompletionDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryBetaTwoMicroglobulinTimingCompletionDetailAsync2(_response));
        });
    }

    protected processQueryBetaTwoMicroglobulinTimingCompletionDetailAsync2(response: AxiosResponse): Promise<QualityControlDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlDetailResult.fromJS(resultData200);
            return Promise.resolve<QualityControlDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlDetailResult>(null as any);
    }

    /**
     * 维持性血液透析患者β2微球蛋白定时检验完成率明细 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryBetaTwoMicroglobulinTimingCompletionDetailExport2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryBetaTwoMicroglobulinTimingCompletionDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryBetaTwoMicroglobulinTimingCompletionDetailExport2(_response));
        });
    }

    protected processQueryBetaTwoMicroglobulinTimingCompletionDetailExport2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者血清铁蛋白和转铁蛋白饱和度定时检验完成率
     * @param year (optional)
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    querySerumFerritinTransferrinSaturationTimingCompletionAsync2(year: number | undefined, format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QuerySerumFerritinTransferrinSaturationTimingCompletionAsync?";
        if (year === null)
            throw new Error("The parameter 'year' cannot be null.");
        else if (year !== undefined)
            url_ += "year=" + encodeURIComponent("" + year) + "&";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQuerySerumFerritinTransferrinSaturationTimingCompletionAsync2(_response));
        });
    }

    protected processQuerySerumFerritinTransferrinSaturationTimingCompletionAsync2(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * 维持性血液透析患者血清铁蛋白和转铁蛋白饱和度定时检验完成率明细
     * @param format (optional)
     * @param itemCode (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    querySerumFerritinTransferrinSaturationTimingCompletionDetailAsync2(format: string | undefined, itemCode: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlDetailResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QuerySerumFerritinTransferrinSaturationTimingCompletionDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (itemCode === null)
            throw new Error("The parameter 'itemCode' cannot be null.");
        else if (itemCode !== undefined)
            url_ += "itemCode=" + encodeURIComponent("" + itemCode) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQuerySerumFerritinTransferrinSaturationTimingCompletionDetailAsync2(_response));
        });
    }

    protected processQuerySerumFerritinTransferrinSaturationTimingCompletionDetailAsync2(response: AxiosResponse): Promise<QualityControlDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlDetailResult.fromJS(resultData200);
            return Promise.resolve<QualityControlDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlDetailResult>(null as any);
    }

    /**
     * 维持性血液透析患者血清铁蛋白和转铁蛋白饱和度定时检验完成率明细 - 导出
     * @param format (optional)
     * @param itemCode (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    querySerumFerritinTransferrinSaturationTimingCompletionDetailExport2(format: string | undefined, itemCode: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QuerySerumFerritinTransferrinSaturationTimingCompletionDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (itemCode === null)
            throw new Error("The parameter 'itemCode' cannot be null.");
        else if (itemCode !== undefined)
            url_ += "itemCode=" + encodeURIComponent("" + itemCode) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQuerySerumFerritinTransferrinSaturationTimingCompletionDetailExport2(_response));
        });
    }

    protected processQuerySerumFerritinTransferrinSaturationTimingCompletionDetailExport2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者血清前白蛋白定时检测完成率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    querySerumPrealbuminTimingCompletionAsync2(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QuerySerumPrealbuminTimingCompletionAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQuerySerumPrealbuminTimingCompletionAsync2(_response));
        });
    }

    protected processQuerySerumPrealbuminTimingCompletionAsync2(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * 维持性血液透析患者血清前白蛋白定时检测完成率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    querySerumPrealbuminTimingCompletionDetailAsync2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlDetailResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QuerySerumPrealbuminTimingCompletionDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQuerySerumPrealbuminTimingCompletionDetailAsync2(_response));
        });
    }

    protected processQuerySerumPrealbuminTimingCompletionDetailAsync2(response: AxiosResponse): Promise<QualityControlDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlDetailResult.fromJS(resultData200);
            return Promise.resolve<QualityControlDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlDetailResult>(null as any);
    }

    /**
     * 维持性血液透析患者血清前白蛋白定时检测完成率明细 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    querySerumPrealbuminTimingCompletionDetailExport2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QuerySerumPrealbuminTimingCompletionDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQuerySerumPrealbuminTimingCompletionDetailExport2(_response));
        });
    }

    protected processQuerySerumPrealbuminTimingCompletionDetailExport2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者C 反应蛋白（CRP）定时检测完成率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryCRPTimingCompletionAsync2(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryCRPTimingCompletionAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryCRPTimingCompletionAsync2(_response));
        });
    }

    protected processQueryCRPTimingCompletionAsync2(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * 维持性血液透析患者C 反应蛋白（CRP）定时检测完成率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryCRPTimingCompletionDetailAsync2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlDetailResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryCRPTimingCompletionDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryCRPTimingCompletionDetailAsync2(_response));
        });
    }

    protected processQueryCRPTimingCompletionDetailAsync2(response: AxiosResponse): Promise<QualityControlDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlDetailResult.fromJS(resultData200);
            return Promise.resolve<QualityControlDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlDetailResult>(null as any);
    }

    /**
     * /维持性血液透析患者C 反应蛋白（CRP）定时检测完成率明细 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryCRPTimingCompletionDetailExport2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryCRPTimingCompletionDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryCRPTimingCompletionDetailExport2(_response));
        });
    }

    protected processQueryCRPTimingCompletionDetailExport2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者血常规定时检验完成率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryRegularBloodTestTimingCompletionAsync2(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryRegularBloodTestTimingCompletionAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryRegularBloodTestTimingCompletionAsync2(_response));
        });
    }

    protected processQueryRegularBloodTestTimingCompletionAsync2(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * 维持性血液透析患者血常规定时检验完成率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryRegularBloodTestTimingCompletionDetailAsync2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlDetailResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryRegularBloodTestTimingCompletionDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryRegularBloodTestTimingCompletionDetailAsync2(_response));
        });
    }

    protected processQueryRegularBloodTestTimingCompletionDetailAsync2(response: AxiosResponse): Promise<QualityControlDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlDetailResult.fromJS(resultData200);
            return Promise.resolve<QualityControlDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlDetailResult>(null as any);
    }

    /**
     * 维持性血液透析患者血常规定时检验完成率明细 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryRegularBloodTestTimingCompletionDetailExport2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryRegularBloodTestTimingCompletionDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryRegularBloodTestTimingCompletionDetailExport2(_response));
        });
    }

    protected processQueryRegularBloodTestTimingCompletionDetailExport2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者血液生化定时检验完成率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryBloodBiochemicalTimingCompletionAsync2(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryBloodBiochemicalTimingCompletionAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryBloodBiochemicalTimingCompletionAsync2(_response));
        });
    }

    protected processQueryBloodBiochemicalTimingCompletionAsync2(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * /维持性血液透析患者血液生化定时检验完成率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryBloodBiochemicalTimingCompletionDetailAsync2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlDetailResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryBloodBiochemicalTimingCompletionDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryBloodBiochemicalTimingCompletionDetailAsync2(_response));
        });
    }

    protected processQueryBloodBiochemicalTimingCompletionDetailAsync2(response: AxiosResponse): Promise<QualityControlDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlDetailResult.fromJS(resultData200);
            return Promise.resolve<QualityControlDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlDetailResult>(null as any);
    }

    /**
     * 维持性血液透析患者血液生化定时检验完成率明细 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryBloodBiochemicalTimingCompletionDetailExport2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryBloodBiochemicalTimingCompletionDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryBloodBiochemicalTimingCompletionDetailExport2(_response));
        });
    }

    protected processQueryBloodBiochemicalTimingCompletionDetailExport2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者全段甲状旁腺素(iPTH)定时检验完成率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryIPTHTimingCompletionAsync2(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryIPTHTimingCompletionAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryIPTHTimingCompletionAsync2(_response));
        });
    }

    protected processQueryIPTHTimingCompletionAsync2(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * 维持性血液透析患者全段甲状旁腺素(iPTH)定时检验完成率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryIPTHTimingCompletionDetailAsync2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlDetailResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryIPTHTimingCompletionDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryIPTHTimingCompletionDetailAsync2(_response));
        });
    }

    protected processQueryIPTHTimingCompletionDetailAsync2(response: AxiosResponse): Promise<QualityControlDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlDetailResult.fromJS(resultData200);
            return Promise.resolve<QualityControlDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlDetailResult>(null as any);
    }

    /**
     * 维持性血液透析患者全段甲状旁腺素(iPTH)定时检验完成率明细 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryIPTHTimingCompletionDetailExport2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryIPTHTimingCompletionDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryIPTHTimingCompletionDetailExport2(_response));
        });
    }

    protected processQueryIPTHTimingCompletionDetailExport2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者的乙型肝炎和丙型肝炎发病率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryIncidenceHepatitisAsync2(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryIncidenceHepatitisAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryIncidenceHepatitisAsync2(_response));
        });
    }

    protected processQueryIncidenceHepatitisAsync2(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * 维持性血液透析患者的乙型肝炎和丙型肝炎发病率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryIncidenceHepatitisDetailAsync2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlDetailResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryIncidenceHepatitisDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryIncidenceHepatitisDetailAsync2(_response));
        });
    }

    protected processQueryIncidenceHepatitisDetailAsync2(response: AxiosResponse): Promise<QualityControlDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlDetailResult.fromJS(resultData200);
            return Promise.resolve<QualityControlDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlDetailResult>(null as any);
    }

    /**
     * 维持性血液透析患者的乙型肝炎和丙型肝炎发病率明细 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryIncidenceHepatitisDetailExport2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryIncidenceHepatitisDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryIncidenceHepatitisDetailExport2(_response));
        });
    }

    protected processQueryIncidenceHepatitisDetailExport2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者血清白蛋白控制率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    querySerumAlbuminControlAsync2(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QuerySerumAlbuminControlAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQuerySerumAlbuminControlAsync2(_response));
        });
    }

    protected processQuerySerumAlbuminControlAsync2(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * 维持性血液透析患者血清白蛋白控制率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    querySerumAlbuminControlDetailAsync2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlDetailResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QuerySerumAlbuminControlDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQuerySerumAlbuminControlDetailAsync2(_response));
        });
    }

    protected processQuerySerumAlbuminControlDetailAsync2(response: AxiosResponse): Promise<QualityControlDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlDetailResult.fromJS(resultData200);
            return Promise.resolve<QualityControlDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlDetailResult>(null as any);
    }

    /**
     * 维持性血液透析患者血清白蛋白控制率明细 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    querySerumAlbuminControlDetailExport2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QuerySerumAlbuminControlDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQuerySerumAlbuminControlDetailExport2(_response));
        });
    }

    protected processQuerySerumAlbuminControlDetailExport2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者肾性贫血控制率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryRenalAnemiaControlAsync2(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryRenalAnemiaControlAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryRenalAnemiaControlAsync2(_response));
        });
    }

    protected processQueryRenalAnemiaControlAsync2(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * 维持性血液透析患者肾性贫血控制率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryRenalAnemiaControlDetailAsync2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlDetailResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryRenalAnemiaControlDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryRenalAnemiaControlDetailAsync2(_response));
        });
    }

    protected processQueryRenalAnemiaControlDetailAsync2(response: AxiosResponse): Promise<QualityControlDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlDetailResult.fromJS(resultData200);
            return Promise.resolve<QualityControlDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlDetailResult>(null as any);
    }

    /**
     * 维持性血液透析患者肾性贫血控制率明细 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryRenalAnemiaControlDetailExport2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryRenalAnemiaControlDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryRenalAnemiaControlDetailExport2(_response));
        });
    }

    protected processQueryRenalAnemiaControlDetailExport2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者慢性肾脏病-矿物质与骨异常(CKD-MBD)指标控制率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryCKDMBDControlAsync2(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryCKDMBDControlAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryCKDMBDControlAsync2(_response));
        });
    }

    protected processQueryCKDMBDControlAsync2(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * 维持性血液透析患者慢性肾脏病-矿物质与骨异常(CKD-MBD)指标控制率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryCKDMBDControlDetailAsync2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlDetailResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryCKDMBDControlDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryCKDMBDControlDetailAsync2(_response));
        });
    }

    protected processQueryCKDMBDControlDetailAsync2(response: AxiosResponse): Promise<QualityControlDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlDetailResult.fromJS(resultData200);
            return Promise.resolve<QualityControlDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlDetailResult>(null as any);
    }

    /**
     * 维持性血液透析患者慢性肾脏病-矿物质与骨异常(CKD-MBD)指标控制率明细 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryCKDMBDControlDetailExport2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryCKDMBDControlDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryCKDMBDControlDetailExport2(_response));
        });
    }

    protected processQueryCKDMBDControlDetailExport2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者高血压控制率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryHypertensionControlAsync2(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryHypertensionControlAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryHypertensionControlAsync2(_response));
        });
    }

    protected processQueryHypertensionControlAsync2(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * 维持性血液透析患者高血压控制率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryHypertensionControlDetailAsync2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlDetailResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryHypertensionControlDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryHypertensionControlDetailAsync2(_response));
        });
    }

    protected processQueryHypertensionControlDetailAsync2(response: AxiosResponse): Promise<QualityControlDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlDetailResult.fromJS(resultData200);
            return Promise.resolve<QualityControlDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlDetailResult>(null as any);
    }

    /**
     * 维持性血液透析患者高血压控制率明细 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryHypertensionControlDetailExport2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryHypertensionControlDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryHypertensionControlDetailExport2(_response));
        });
    }

    protected processQueryHypertensionControlDetailExport2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者透析间期体重增长控制率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryDialysisWeightGainControlAsync2(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryDialysisWeightGainControlAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryDialysisWeightGainControlAsync2(_response));
        });
    }

    protected processQueryDialysisWeightGainControlAsync2(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * 维持性血液透析患者透析间期体重增长控制率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryDialysisWeightGainControlDetailAsync2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlDetailResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryDialysisWeightGainControlDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryDialysisWeightGainControlDetailAsync2(_response));
        });
    }

    protected processQueryDialysisWeightGainControlDetailAsync2(response: AxiosResponse): Promise<QualityControlDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlDetailResult.fromJS(resultData200);
            return Promise.resolve<QualityControlDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlDetailResult>(null as any);
    }

    /**
     * 维持性血液透析患者透析间期体重增长控制率明细 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryDialysisWeightGainControlDetailExport2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryDialysisWeightGainControlDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryDialysisWeightGainControlDetailExport2(_response));
        });
    }

    protected processQueryDialysisWeightGainControlDetailExport2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者尿素清除指数（Kt/V）和尿素下降率（URR）控制率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryKtvUrrControlAsync2(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryKtvUrrControlAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryKtvUrrControlAsync2(_response));
        });
    }

    protected processQueryKtvUrrControlAsync2(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * 维持性血液透析患者尿素清除指数（Kt/V）和尿素下降率（URR）控制率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryKtvUrrControlDetailAsync2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlKtvUrrDetailResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryKtvUrrControlDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryKtvUrrControlDetailAsync2(_response));
        });
    }

    protected processQueryKtvUrrControlDetailAsync2(response: AxiosResponse): Promise<QualityControlKtvUrrDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlKtvUrrDetailResult.fromJS(resultData200);
            return Promise.resolve<QualityControlKtvUrrDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlKtvUrrDetailResult>(null as any);
    }

    /**
     * 维持性血液透析患者尿素清除指数（Kt/V）和尿素下降率（URR）控制率明细 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryKtvUrrControlDetailExport2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryKtvUrrControlDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryKtvUrrControlDetailExport2(_response));
        });
    }

    protected processQueryKtvUrrControlDetailExport2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者尿素清除指数(Kt/v)和尿素下降率(URR)定时记录完成率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryKtvUrrTimingCompletionAsync2(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryKtvUrrTimingCompletionAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryKtvUrrTimingCompletionAsync2(_response));
        });
    }

    protected processQueryKtvUrrTimingCompletionAsync2(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * 维持性血液透析患者尿素清除指数(Kt/v)和尿素下降率(URR)定时记录完成率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryKtvUrrTimingCompletionDetailAsync2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlDetailResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryKtvUrrTimingCompletionDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryKtvUrrTimingCompletionDetailAsync2(_response));
        });
    }

    protected processQueryKtvUrrTimingCompletionDetailAsync2(response: AxiosResponse): Promise<QualityControlDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlDetailResult.fromJS(resultData200);
            return Promise.resolve<QualityControlDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlDetailResult>(null as any);
    }

    /**
     * 维持性血液透析患者尿素清除指数(Kt/v)和尿素下降率(URR)定时记录完成率明细 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryKtvUrrTimingCompletionDetailExport2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryKtvUrrTimingCompletionDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryKtvUrrTimingCompletionDetailExport2(_response));
        });
    }

    protected processQueryKtvUrrTimingCompletionDetailExport2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维持性血液透析患者动静脉内瘘长期生存率
     * @param format (optional)
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryVascularAccessSurvivalAsync2(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlReportResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryVascularAccessSurvivalAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryVascularAccessSurvivalAsync2(_response));
        });
    }

    protected processQueryVascularAccessSurvivalAsync2(response: AxiosResponse): Promise<QualityControlReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlReportResult.fromJS(resultData200);
            return Promise.resolve<QualityControlReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlReportResult>(null as any);
    }

    /**
     * 维持性血液透析患者动静脉内瘘长期生存率明细
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryVascularAccessSurvivalDetailAsync2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<QualityControlVascularAccessSurvivalDetailResult> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryVascularAccessSurvivalDetailAsync?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryVascularAccessSurvivalDetailAsync2(_response));
        });
    }

    protected processQueryVascularAccessSurvivalDetailAsync2(response: AxiosResponse): Promise<QualityControlVascularAccessSurvivalDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityControlVascularAccessSurvivalDetailResult.fromJS(resultData200);
            return Promise.resolve<QualityControlVascularAccessSurvivalDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityControlVascularAccessSurvivalDetailResult>(null as any);
    }

    /**
     * 维持性血液透析患者动静脉内瘘长期生存率明细 - 导出
     * @param format (optional)
     * @param filter (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param source (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @return Success
     */
    queryVascularAccessSurvivalDetailExport2(format: string | undefined, filter: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, source: number | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/QualityControlReportNew/QueryVascularAccessSurvivalDetailExport?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryVascularAccessSurvivalDetailExport2(_response));
        });
    }

    protected processQueryVascularAccessSurvivalDetailExport2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class ReportServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者类 -- 患者首页
     * @return Success
     */
    index(  cancelToken?: CancelToken | undefined): Promise<PatientIndexResultEntry> {
        let url_ = this.baseUrl + "/api/Report/Patient/Index";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processIndex(_response));
        });
    }

    protected processIndex(response: AxiosResponse): Promise<PatientIndexResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientIndexResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientIndexResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientIndexResultEntry>(null as any);
    }

    /**
     * 统计首页
     * @return Success
     */
    statisticIndex(  cancelToken?: CancelToken | undefined): Promise<StatisticIndexResultEntry> {
        let url_ = this.baseUrl + "/api/Report/Patient/StatisticIndex";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processStatisticIndex(_response));
        });
    }

    protected processStatisticIndex(response: AxiosResponse): Promise<StatisticIndexResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = StatisticIndexResultEntry.fromJS(resultData200);
            return Promise.resolve<StatisticIndexResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<StatisticIndexResultEntry>(null as any);
    }

    /**
     * 患者类 -- 性别
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    gender(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientGenderResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/Gender?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGender(_response));
        });
    }

    protected processGender(response: AxiosResponse): Promise<PatientGenderResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientGenderResult.fromJS(resultData200);
            return Promise.resolve<PatientGenderResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientGenderResult>(null as any);
    }

    /**
     * 患者类 -- 性别 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/Gender/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET(_response));
        });
    }

    protected processExportGET(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 性别 -- 详情
     * @param gender 性别 1.男 2.女
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    genderDetail(gender: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientGenderDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/GenderDetail/{gender}?";
        if (gender === undefined || gender === null)
            throw new Error("The parameter 'gender' must be defined.");
        url_ = url_.replace("{gender}", encodeURIComponent("" + gender));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGenderDetail(_response));
        });
    }

    protected processGenderDetail(response: AxiosResponse): Promise<PatientGenderDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientGenderDetailResult.fromJS(resultData200);
            return Promise.resolve<PatientGenderDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientGenderDetailResult>(null as any);
    }

    /**
     * 患者类 -- 性别 -- 详情 -- 导出
     * @param gender 性别 1.男 2.女
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET2(gender: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/GenderDetail/{gender}/Export?";
        if (gender === undefined || gender === null)
            throw new Error("The parameter 'gender' must be defined.");
        url_ = url_.replace("{gender}", encodeURIComponent("" + gender));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET2(_response));
        });
    }

    protected processExportGET2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 年龄段统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    age(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientAgeResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/Age?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAge(_response));
        });
    }

    protected processAge(response: AxiosResponse): Promise<PatientAgeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientAgeResult.fromJS(resultData200);
            return Promise.resolve<PatientAgeResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientAgeResult>(null as any);
    }

    /**
     * 患者类 -- 年龄段统计 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET3(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/Age/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET3(_response));
        });
    }

    protected processExportGET3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 年龄段统计 -- 详情
     * @param age 年龄段
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    ageDetail(age: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientAgeDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/AgeDetail/{age}?";
        if (age === undefined || age === null)
            throw new Error("The parameter 'age' must be defined.");
        url_ = url_.replace("{age}", encodeURIComponent("" + age));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAgeDetail(_response));
        });
    }

    protected processAgeDetail(response: AxiosResponse): Promise<PatientAgeDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientAgeDetailResult.fromJS(resultData200);
            return Promise.resolve<PatientAgeDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientAgeDetailResult>(null as any);
    }

    /**
     * 患者类 -- 年龄段统计 -- 详情 -- 导出
     * @param age 年龄段
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET4(age: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/AgeDetail/{age}/Export?";
        if (age === undefined || age === null)
            throw new Error("The parameter 'age' must be defined.");
        url_ = url_.replace("{age}", encodeURIComponent("" + age));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET4(_response));
        });
    }

    protected processExportGET4(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 透析龄统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    dialysisAge(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientDialysisAgeResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/DialysisAge?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDialysisAge(_response));
        });
    }

    protected processDialysisAge(response: AxiosResponse): Promise<PatientDialysisAgeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDialysisAgeResult.fromJS(resultData200);
            return Promise.resolve<PatientDialysisAgeResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDialysisAgeResult>(null as any);
    }

    /**
     * 患者类 -- 透析龄统计 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET5(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/DialysisAge/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET5(_response));
        });
    }

    protected processExportGET5(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 透析龄统计 -- 详情
     * @param age 透析龄段
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    dialysisAgeDetail(age: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientDialysisAgeDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/DialysisAgeDetail/{age}?";
        if (age === undefined || age === null)
            throw new Error("The parameter 'age' must be defined.");
        url_ = url_.replace("{age}", encodeURIComponent("" + age));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDialysisAgeDetail(_response));
        });
    }

    protected processDialysisAgeDetail(response: AxiosResponse): Promise<PatientDialysisAgeDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDialysisAgeDetailResult.fromJS(resultData200);
            return Promise.resolve<PatientDialysisAgeDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDialysisAgeDetailResult>(null as any);
    }

    /**
     * 患者类 -- 透析龄统计 -- 详情 -- 导出
     * @param age 透析龄段
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET6(age: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/DialysisAgeDetail/{age}/Export?";
        if (age === undefined || age === null)
            throw new Error("The parameter 'age' must be defined.");
        url_ = url_.replace("{age}", encodeURIComponent("" + age));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET6(_response));
        });
    }

    protected processExportGET6(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 民族统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    nationality(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientNationalityResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/Nationality?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processNationality(_response));
        });
    }

    protected processNationality(response: AxiosResponse): Promise<PatientNationalityResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientNationalityResult.fromJS(resultData200);
            return Promise.resolve<PatientNationalityResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientNationalityResult>(null as any);
    }

    /**
     * 患者类 -- 民族统计 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET7(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/Nationality/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET7(_response));
        });
    }

    protected processExportGET7(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 民族统计 -- 详情
     * @param nationality (optional) 民族统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    nationalityDetail(nationality: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientNationalityDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/NationalityDetail?";
        if (nationality === null)
            throw new Error("The parameter 'nationality' cannot be null.");
        else if (nationality !== undefined)
            url_ += "nationality=" + encodeURIComponent("" + nationality) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processNationalityDetail(_response));
        });
    }

    protected processNationalityDetail(response: AxiosResponse): Promise<PatientNationalityDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientNationalityDetailResult.fromJS(resultData200);
            return Promise.resolve<PatientNationalityDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientNationalityDetailResult>(null as any);
    }

    /**
     * 患者类 -- 民族统计 -- 详情 -- 导出
     * @param nationality (optional) 民族统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional)
     * @return Success
     */
    exportGET8(nationality: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/NationalityDetail/Export?";
        if (nationality === null)
            throw new Error("The parameter 'nationality' cannot be null.");
        else if (nationality !== undefined)
            url_ += "nationality=" + encodeURIComponent("" + nationality) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET8(_response));
        });
    }

    protected processExportGET8(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 医保统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    medicare(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientMedicareResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/Medicare?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMedicare(_response));
        });
    }

    protected processMedicare(response: AxiosResponse): Promise<PatientMedicareResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientMedicareResult.fromJS(resultData200);
            return Promise.resolve<PatientMedicareResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientMedicareResult>(null as any);
    }

    /**
     * 患者类 -- 医保统计 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional)
     * @return Success
     */
    exportGET9(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/Medicare/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET9(_response));
        });
    }

    protected processExportGET9(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 医保统计 -- 详情
     * @param medicare (optional) 医保
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    medicareDetail(medicare: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientMedicareDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/MedicareDetail?";
        if (medicare === null)
            throw new Error("The parameter 'medicare' cannot be null.");
        else if (medicare !== undefined)
            url_ += "medicare=" + encodeURIComponent("" + medicare) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMedicareDetail(_response));
        });
    }

    protected processMedicareDetail(response: AxiosResponse): Promise<PatientMedicareDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientMedicareDetailResult.fromJS(resultData200);
            return Promise.resolve<PatientMedicareDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientMedicareDetailResult>(null as any);
    }

    /**
     * 患者类 -- 医保统计 -- 详情 -- 导出
     * @param medicare (optional) 医保
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional)
     * @return Success
     */
    exportGET10(medicare: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/MedicareDetail/Export?";
        if (medicare === null)
            throw new Error("The parameter 'medicare' cannot be null.");
        else if (medicare !== undefined)
            url_ += "medicare=" + encodeURIComponent("" + medicare) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET10(_response));
        });
    }

    protected processExportGET10(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 学历统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    educationalLevel(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientEducationalLevelResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/EducationalLevel?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processEducationalLevel(_response));
        });
    }

    protected processEducationalLevel(response: AxiosResponse): Promise<PatientEducationalLevelResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientEducationalLevelResult.fromJS(resultData200);
            return Promise.resolve<PatientEducationalLevelResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientEducationalLevelResult>(null as any);
    }

    /**
     * 患者类 -- 学历统计 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET11(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/EducationalLevel/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET11(_response));
        });
    }

    protected processExportGET11(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 学历统计 -- 详情
     * @param educationalLevel (optional) 学历
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    educationalLevelDetail(educationalLevel: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientEducationalLevelDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/EducationalLevelDetail?";
        if (educationalLevel === null)
            throw new Error("The parameter 'educationalLevel' cannot be null.");
        else if (educationalLevel !== undefined)
            url_ += "educationalLevel=" + encodeURIComponent("" + educationalLevel) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processEducationalLevelDetail(_response));
        });
    }

    protected processEducationalLevelDetail(response: AxiosResponse): Promise<PatientEducationalLevelDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientEducationalLevelDetailResult.fromJS(resultData200);
            return Promise.resolve<PatientEducationalLevelDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientEducationalLevelDetailResult>(null as any);
    }

    /**
     * 患者类 -- 学历统计 -- 详情 -- 导出
     * @param educationalLevel (optional) 学历
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET12(educationalLevel: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/EducationalLevelDetail/Export?";
        if (educationalLevel === null)
            throw new Error("The parameter 'educationalLevel' cannot be null.");
        else if (educationalLevel !== undefined)
            url_ += "educationalLevel=" + encodeURIComponent("" + educationalLevel) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET12(_response));
        });
    }

    protected processExportGET12(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 患者来源统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    source(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientSourceResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/Source?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSource(_response));
        });
    }

    protected processSource(response: AxiosResponse): Promise<PatientSourceResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientSourceResult.fromJS(resultData200);
            return Promise.resolve<PatientSourceResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientSourceResult>(null as any);
    }

    /**
     * 患者类 -- 患者来源统计 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET13(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/Source/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET13(_response));
        });
    }

    protected processExportGET13(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 患者来源统计 -- 详情
     * @param source 患者来源
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    sourceDetail(source: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientSourceDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/SourceDetail/{source}?";
        if (source === undefined || source === null)
            throw new Error("The parameter 'source' must be defined.");
        url_ = url_.replace("{source}", encodeURIComponent("" + source));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSourceDetail(_response));
        });
    }

    protected processSourceDetail(response: AxiosResponse): Promise<PatientSourceDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientSourceDetailResult.fromJS(resultData200);
            return Promise.resolve<PatientSourceDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientSourceDetailResult>(null as any);
    }

    /**
     * 患者类 -- 患者来源统计 -- 详情 -- 导出
     * @param source 患者来源
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET14(source: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/SourceDetail/{source}/Export?";
        if (source === undefined || source === null)
            throw new Error("The parameter 'source' must be defined.");
        url_ = url_.replace("{source}", encodeURIComponent("" + source));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET14(_response));
        });
    }

    protected processExportGET14(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 患者标签统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    label(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientLabelResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/Label?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processLabel(_response));
        });
    }

    protected processLabel(response: AxiosResponse): Promise<PatientLabelResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientLabelResult.fromJS(resultData200);
            return Promise.resolve<PatientLabelResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientLabelResult>(null as any);
    }

    /**
     * 患者类 -- 患者标签统计 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET15(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/Label/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET15(_response));
        });
    }

    protected processExportGET15(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 患者标签统计 -- 详情
     * @param label 患者标签
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    labelDetail(label: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientLabelDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/LabelDetail/{label}?";
        if (label === undefined || label === null)
            throw new Error("The parameter 'label' must be defined.");
        url_ = url_.replace("{label}", encodeURIComponent("" + label));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processLabelDetail(_response));
        });
    }

    protected processLabelDetail(response: AxiosResponse): Promise<PatientLabelDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientLabelDetailResult.fromJS(resultData200);
            return Promise.resolve<PatientLabelDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientLabelDetailResult>(null as any);
    }

    /**
     * 患者类 -- 患者标签统计 -- 详情 -- 导出
     * @param label 患者标签
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET16(label: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/LabelDetail/{label}/Export?";
        if (label === undefined || label === null)
            throw new Error("The parameter 'label' must be defined.");
        url_ = url_.replace("{label}", encodeURIComponent("" + label));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET16(_response));
        });
    }

    protected processExportGET16(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 患者登记本
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    patientRegister(startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientRegisterResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/PatientRegister?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientRegister(_response));
        });
    }

    protected processPatientRegister(response: AxiosResponse): Promise<PatientRegisterResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientRegisterResult.fromJS(resultData200);
            return Promise.resolve<PatientRegisterResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientRegisterResult>(null as any);
    }

    /**
     * 患者类 -- 患者登记本-导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET17(startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/PatientRegister/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET17(_response));
        });
    }

    protected processExportGET17(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 患者转归统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    prognosis(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientPrognosisResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/Prognosis?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPrognosis(_response));
        });
    }

    protected processPrognosis(response: AxiosResponse): Promise<PatientPrognosisResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientPrognosisResult.fromJS(resultData200);
            return Promise.resolve<PatientPrognosisResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientPrognosisResult>(null as any);
    }

    /**
     * 患者类 -- 患者转归统计 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET18(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/Prognosis/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET18(_response));
        });
    }

    protected processExportGET18(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者转归信息导出
     * @param body (optional)
     * @return Success
     */
    exportPOST(body: ExportFilterBase[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/Prognosis/Export";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportPOST(_response));
        });
    }

    protected processExportPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 患者转归统计 -- 详情
     * @param date 日期(yyyy-MM)
     * @param prognosis (optional) 患者转归
     * @param filter (optional) 查询条件
     * @return Success
     */
    prognosisDetail(date: string, prognosis: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientPrognosisDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/PrognosisDetail/{date}?";
        if (date === undefined || date === null)
            throw new Error("The parameter 'date' must be defined.");
        url_ = url_.replace("{date}", encodeURIComponent("" + date));
        if (prognosis === null)
            throw new Error("The parameter 'prognosis' cannot be null.");
        else if (prognosis !== undefined)
            url_ += "prognosis=" + encodeURIComponent("" + prognosis) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPrognosisDetail(_response));
        });
    }

    protected processPrognosisDetail(response: AxiosResponse): Promise<PatientPrognosisDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientPrognosisDetailResult.fromJS(resultData200);
            return Promise.resolve<PatientPrognosisDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientPrognosisDetailResult>(null as any);
    }

    /**
     * 患者类 -- 患者转归统计 -- 详情 -- 导出
     * @param date 日期(yyyy-MM)
     * @param prognosis (optional) 患者转归
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET19(date: string, prognosis: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/PrognosisDetail/Export/{date}?";
        if (date === undefined || date === null)
            throw new Error("The parameter 'date' must be defined.");
        url_ = url_.replace("{date}", encodeURIComponent("" + date));
        if (prognosis === null)
            throw new Error("The parameter 'prognosis' cannot be null.");
        else if (prognosis !== undefined)
            url_ += "prognosis=" + encodeURIComponent("" + prognosis) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET19(_response));
        });
    }

    protected processExportGET19(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 患者转归统计 -- 转出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    out(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientPrognosisOutResultEntry> {
        let url_ = this.baseUrl + "/api/Report/Patient/Prognosis/Out?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processOut(_response));
        });
    }

    protected processOut(response: AxiosResponse): Promise<PatientPrognosisOutResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientPrognosisOutResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientPrognosisOutResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientPrognosisOutResultEntry>(null as any);
    }

    /**
     * 患者类 -- 患者转归统计 -- 转出 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET20(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/Prognosis/Out/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET20(_response));
        });
    }

    protected processExportGET20(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 患者转归统计 -- 转出 -- 详情
     * @param location (optional) 地点
     * @param cause (optional) 原因
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    outDetail(location: string | undefined, cause: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientPrognosisDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/Prognosis/OutDetail?";
        if (location === null)
            throw new Error("The parameter 'location' cannot be null.");
        else if (location !== undefined)
            url_ += "location=" + encodeURIComponent("" + location) + "&";
        if (cause === null)
            throw new Error("The parameter 'cause' cannot be null.");
        else if (cause !== undefined)
            url_ += "cause=" + encodeURIComponent("" + cause) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processOutDetail(_response));
        });
    }

    protected processOutDetail(response: AxiosResponse): Promise<PatientPrognosisDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientPrognosisDetailResult.fromJS(resultData200);
            return Promise.resolve<PatientPrognosisDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientPrognosisDetailResult>(null as any);
    }

    /**
     * 患者类 -- 患者转归统计 -- 转出 -- 详情 -- 导出
     * @param location (optional) 地点
     * @param cause (optional) 原因
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET21(location: string | undefined, cause: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/Prognosis/OutDetail/Export?";
        if (location === null)
            throw new Error("The parameter 'location' cannot be null.");
        else if (location !== undefined)
            url_ += "location=" + encodeURIComponent("" + location) + "&";
        if (cause === null)
            throw new Error("The parameter 'cause' cannot be null.");
        else if (cause !== undefined)
            url_ += "cause=" + encodeURIComponent("" + cause) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET21(_response));
        });
    }

    protected processExportGET21(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 患者转归统计 -- 类型
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    type(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientPrognosisTypeResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/Prognosis/Type?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processType(_response));
        });
    }

    protected processType(response: AxiosResponse): Promise<PatientPrognosisTypeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientPrognosisTypeResult.fromJS(resultData200);
            return Promise.resolve<PatientPrognosisTypeResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientPrognosisTypeResult>(null as any);
    }

    /**
     * 患者类 -- 患者转归统计 -- 类型 -- 详情
     * @param cause (optional) 原因
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    typeDetail(cause: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientPrognosisDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/Prognosis/TypeDetail?";
        if (cause === null)
            throw new Error("The parameter 'cause' cannot be null.");
        else if (cause !== undefined)
            url_ += "cause=" + encodeURIComponent("" + cause) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTypeDetail(_response));
        });
    }

    protected processTypeDetail(response: AxiosResponse): Promise<PatientPrognosisDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientPrognosisDetailResult.fromJS(resultData200);
            return Promise.resolve<PatientPrognosisDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientPrognosisDetailResult>(null as any);
    }

    /**
     * 患者类 -- 患者转归统计 -- 退出 -- 详情 -- 导出
     * @param cause (optional) 原因
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET22(cause: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/Prognosis/TypeDetail/Export?";
        if (cause === null)
            throw new Error("The parameter 'cause' cannot be null.");
        else if (cause !== undefined)
            url_ += "cause=" + encodeURIComponent("" + cause) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET22(_response));
        });
    }

    protected processExportGET22(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 患者转归统计 -- 退出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    quit(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientPrognosisQuitResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/Prognosis/Quit?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQuit(_response));
        });
    }

    protected processQuit(response: AxiosResponse): Promise<PatientPrognosisQuitResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientPrognosisQuitResult.fromJS(resultData200);
            return Promise.resolve<PatientPrognosisQuitResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientPrognosisQuitResult>(null as any);
    }

    /**
     * 患者类 -- 患者转归统计 -- 退出 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET23(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/Prognosis/Quit/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET23(_response));
        });
    }

    protected processExportGET23(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 患者转归统计 -- 退出 -- 详情
     * @param cause (optional) 原因
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    quitDetail(cause: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientPrognosisDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/Prognosis/QuitDetail?";
        if (cause === null)
            throw new Error("The parameter 'cause' cannot be null.");
        else if (cause !== undefined)
            url_ += "cause=" + encodeURIComponent("" + cause) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQuitDetail(_response));
        });
    }

    protected processQuitDetail(response: AxiosResponse): Promise<PatientPrognosisDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientPrognosisDetailResult.fromJS(resultData200);
            return Promise.resolve<PatientPrognosisDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientPrognosisDetailResult>(null as any);
    }

    /**
     * 患者类 -- 患者转归统计 -- 退出 -- 详情 -- 导出
     * @param cause (optional) 原因
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET24(cause: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/Prognosis/QuitDetail/Export?";
        if (cause === null)
            throw new Error("The parameter 'cause' cannot be null.");
        else if (cause !== undefined)
            url_ += "cause=" + encodeURIComponent("" + cause) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET24(_response));
        });
    }

    protected processExportGET24(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者退出统计 -- 永鼎三甲评审
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional) 查询条件
     * @return Success
     */
    patientTransferOut(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientTransferOutResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/PatientTransferOut?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientTransferOut(_response));
        });
    }

    protected processPatientTransferOut(response: AxiosResponse): Promise<PatientTransferOutResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientTransferOutResult.fromJS(resultData200);
            return Promise.resolve<PatientTransferOutResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientTransferOutResult>(null as any);
    }

    /**
     * 患者退出统计 -- 永鼎三甲评审 -- 详情
     * @param date (optional)
     * @param prognosis (optional)
     * @param filter (optional)
     * @return Success
     */
    quitDetail2(date: string | undefined, prognosis: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientPrognosisDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/PatientTransferOut/QuitDetail?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (prognosis === null)
            throw new Error("The parameter 'prognosis' cannot be null.");
        else if (prognosis !== undefined)
            url_ += "prognosis=" + encodeURIComponent("" + prognosis) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQuitDetail2(_response));
        });
    }

    protected processQuitDetail2(response: AxiosResponse): Promise<PatientPrognosisDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientPrognosisDetailResult.fromJS(resultData200);
            return Promise.resolve<PatientPrognosisDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientPrognosisDetailResult>(null as any);
    }

    /**
     * 患者类 -- 既往病史/既往肾脏替代治疗史统计
     * @param type (optional) 类型 1:既往病史 2:既往肾脏替代治疗史
     * @param has (optional) 为空返回全部 0:无 1:有 2:未填
     * @param pmh (optional) 病史类型(isHave==1 时必填)
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    patientPmhInfo(type: string | undefined, has: string | undefined, pmh: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<ObjectResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/PatientPmhInfo?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (has === null)
            throw new Error("The parameter 'has' cannot be null.");
        else if (has !== undefined)
            url_ += "has=" + encodeURIComponent("" + has) + "&";
        if (pmh === null)
            throw new Error("The parameter 'pmh' cannot be null.");
        else if (pmh !== undefined)
            url_ += "pmh=" + encodeURIComponent("" + pmh) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientPmhInfo(_response));
        });
    }

    protected processPatientPmhInfo(response: AxiosResponse): Promise<ObjectResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ObjectResult.fromJS(resultData200);
            return Promise.resolve<ObjectResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ObjectResult>(null as any);
    }

    /**
     * 患者类 -- 既往病史/既往肾脏替代治疗史统计 -- 导出
     * @param type (optional) 类型 1:既往病史 2:既往肾脏替代治疗史
     * @param has (optional) 为空返回全部 0:无 1:有 2:未填
     * @param pmh (optional) 病史类型(isHave==1 时必填)
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET25(type: string | undefined, has: string | undefined, pmh: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/PatientPmhInfo/Export?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (has === null)
            throw new Error("The parameter 'has' cannot be null.");
        else if (has !== undefined)
            url_ += "has=" + encodeURIComponent("" + has) + "&";
        if (pmh === null)
            throw new Error("The parameter 'pmh' cannot be null.");
        else if (pmh !== undefined)
            url_ += "pmh=" + encodeURIComponent("" + pmh) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET25(_response));
        });
    }

    protected processExportGET25(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 诊断统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    diagnosis(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientDiagnosisResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/Diagnosis?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDiagnosis(_response));
        });
    }

    protected processDiagnosis(response: AxiosResponse): Promise<PatientDiagnosisResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDiagnosisResult.fromJS(resultData200);
            return Promise.resolve<PatientDiagnosisResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDiagnosisResult>(null as any);
    }

    /**
     * 患者类 -- 诊断统计
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional)
     * @return Success
     */
    diagnosisNew(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientDiagnosisNewResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/DiagnosisNew?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDiagnosisNew(_response));
        });
    }

    protected processDiagnosisNew(response: AxiosResponse): Promise<PatientDiagnosisNewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDiagnosisNewResult.fromJS(resultData200);
            return Promise.resolve<PatientDiagnosisNewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDiagnosisNewResult>(null as any);
    }

    /**
     * 患者类 -- 诊断统计 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET26(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/Diagnosis/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET26(_response));
        });
    }

    protected processExportGET26(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者诊断信息导出
     * @param body (optional)
     * @return Success
     */
    exportPOST2(body: ExportFilterBase[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/Diagnosis/Export";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportPOST2(_response));
        });
    }

    protected processExportPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 诊断分类统计
     * @param type (optional) 诊断大类
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    diagnosisClassify(type: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientDiagnosisResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/DiagnosisClassify?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDiagnosisClassify(_response));
        });
    }

    protected processDiagnosisClassify(response: AxiosResponse): Promise<PatientDiagnosisResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDiagnosisResult.fromJS(resultData200);
            return Promise.resolve<PatientDiagnosisResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDiagnosisResult>(null as any);
    }

    /**
     * 患者类 -- 诊断分类统计 -- 导出
     * @param type (optional) 诊断大类
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET27(type: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/DiagnosisClassify/Export?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET27(_response));
        });
    }

    protected processExportGET27(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 诊断分类统计 -- 详情
     * @param diagnosis 诊断大类
     * @param type (optional) 诊断小类
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    diagnosisDetail(diagnosis: string, type: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientDiagnosisDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/DiagnosisDetail/{diagnosis}?";
        if (diagnosis === undefined || diagnosis === null)
            throw new Error("The parameter 'diagnosis' must be defined.");
        url_ = url_.replace("{diagnosis}", encodeURIComponent("" + diagnosis));
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDiagnosisDetail(_response));
        });
    }

    protected processDiagnosisDetail(response: AxiosResponse): Promise<PatientDiagnosisDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDiagnosisDetailResult.fromJS(resultData200);
            return Promise.resolve<PatientDiagnosisDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDiagnosisDetailResult>(null as any);
    }

    /**
     * 患者类 -- 诊断分类统计 -- 详情
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional)
     * @return Success
     */
    diagnosisDetailNew(diagnosis: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientDiagnosisDetailNewResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/DiagnosisDetailNew/{diagnosis}?";
        if (diagnosis === undefined || diagnosis === null)
            throw new Error("The parameter 'diagnosis' must be defined.");
        url_ = url_.replace("{diagnosis}", encodeURIComponent("" + diagnosis));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDiagnosisDetailNew(_response));
        });
    }

    protected processDiagnosisDetailNew(response: AxiosResponse): Promise<PatientDiagnosisDetailNewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDiagnosisDetailNewResult.fromJS(resultData200);
            return Promise.resolve<PatientDiagnosisDetailNewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDiagnosisDetailNewResult>(null as any);
    }

    /**
     * 患者类 -- 诊断分类统计 -- 详情 -- 导出
     * @param diagnosis 诊断大类
     * @param type (optional) 诊断小类
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET28(diagnosis: string, type: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/DiagnosisDetail/{diagnosis}/Export?";
        if (diagnosis === undefined || diagnosis === null)
            throw new Error("The parameter 'diagnosis' must be defined.");
        url_ = url_.replace("{diagnosis}", encodeURIComponent("" + diagnosis));
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET28(_response));
        });
    }

    protected processExportGET28(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 诊断 -- 详情 -- 导出
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional)
     * @return Success
     */
    exportGET29(diagnosis: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/DiagnosisDetailNew/{diagnosis}/Export?";
        if (diagnosis === undefined || diagnosis === null)
            throw new Error("The parameter 'diagnosis' must be defined.");
        url_ = url_.replace("{diagnosis}", encodeURIComponent("" + diagnosis));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET29(_response));
        });
    }

    protected processExportGET29(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 新增患者统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    new(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientNewResultEntry> {
        let url_ = this.baseUrl + "/api/Report/Patient/New?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processNew(_response));
        });
    }

    protected processNew(response: AxiosResponse): Promise<PatientNewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientNewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientNewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientNewResultEntry>(null as any);
    }

    /**
     * 患者类 -- 阶段评估
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    appraise(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientAppraiseResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/Appraise?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAppraise(_response));
        });
    }

    protected processAppraise(response: AxiosResponse): Promise<PatientAppraiseResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientAppraiseResult.fromJS(resultData200);
            return Promise.resolve<PatientAppraiseResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientAppraiseResult>(null as any);
    }

    /**
     * 患者类 -- 阶段评估 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET30(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/Appraise/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET30(_response));
        });
    }

    protected processExportGET30(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 干体重统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    dryWeight(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientDryWeightResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/DryWeight?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDryWeight(_response));
        });
    }

    protected processDryWeight(response: AxiosResponse): Promise<PatientDryWeightResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDryWeightResult.fromJS(resultData200);
            return Promise.resolve<PatientDryWeightResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDryWeightResult>(null as any);
    }

    /**
     * 患者类 -- 干体重统计 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET31(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/DryWeight/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET31(_response));
        });
    }

    protected processExportGET31(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- idwg统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    idwg(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientWeightResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/Idwg?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processIdwg(_response));
        });
    }

    protected processIdwg(response: AxiosResponse): Promise<PatientWeightResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientWeightResult.fromJS(resultData200);
            return Promise.resolve<PatientWeightResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientWeightResult>(null as any);
    }

    /**
     * 患者类 -- Idwg统计 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET32(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/Idwg/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET32(_response));
        });
    }

    protected processExportGET32(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- Idwg统计 -- 详情
     * @param weight 体重区间
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    idwgDetail(weight: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientIdwgDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/IdwgDetail/{weight}?";
        if (weight === undefined || weight === null)
            throw new Error("The parameter 'weight' must be defined.");
        url_ = url_.replace("{weight}", encodeURIComponent("" + weight));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processIdwgDetail(_response));
        });
    }

    protected processIdwgDetail(response: AxiosResponse): Promise<PatientIdwgDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientIdwgDetailResult.fromJS(resultData200);
            return Promise.resolve<PatientIdwgDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientIdwgDetailResult>(null as any);
    }

    /**
     * 患者类 -- Idwg统计 -- 详情 -- 导出
     * @param weight 体重区间
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET33(weight: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/IdwgDetail/{weight}/Export?";
        if (weight === undefined || weight === null)
            throw new Error("The parameter 'weight' must be defined.");
        url_ = url_.replace("{weight}", encodeURIComponent("" + weight));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET33(_response));
        });
    }

    protected processExportGET33(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 体重统计
     * @param step (optional) 透前：before 透后：after 干体重：best
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    weight(step: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientWeightResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/Weight?";
        if (step === null)
            throw new Error("The parameter 'step' cannot be null.");
        else if (step !== undefined)
            url_ += "step=" + encodeURIComponent("" + step) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processWeight(_response));
        });
    }

    protected processWeight(response: AxiosResponse): Promise<PatientWeightResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientWeightResult.fromJS(resultData200);
            return Promise.resolve<PatientWeightResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientWeightResult>(null as any);
    }

    /**
     * 患者类 -- 体重统计 -- 导出
     * @param step (optional) 透前：before 透后：after 干体重：best
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET34(step: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/Weight/Export?";
        if (step === null)
            throw new Error("The parameter 'step' cannot be null.");
        else if (step !== undefined)
            url_ += "step=" + encodeURIComponent("" + step) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET34(_response));
        });
    }

    protected processExportGET34(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者体重信息导出
     * @param body (optional)
     * @return Success
     */
    exportPOST3(body: ExportFilterBase[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/Weight/Export";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportPOST3(_response));
        });
    }

    protected processExportPOST3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 体重统计 -- 详情
     * @param step (optional) 透前：before 透后：after 干体重：best
     * @param weight 体重区间
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    weightDetail(step: string | undefined, weight: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientWeightDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/WeightDetail/{weight}?";
        if (weight === undefined || weight === null)
            throw new Error("The parameter 'weight' must be defined.");
        url_ = url_.replace("{weight}", encodeURIComponent("" + weight));
        if (step === null)
            throw new Error("The parameter 'step' cannot be null.");
        else if (step !== undefined)
            url_ += "step=" + encodeURIComponent("" + step) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processWeightDetail(_response));
        });
    }

    protected processWeightDetail(response: AxiosResponse): Promise<PatientWeightDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientWeightDetailResult.fromJS(resultData200);
            return Promise.resolve<PatientWeightDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientWeightDetailResult>(null as any);
    }

    /**
     * 患者类 -- 体重统计 -- 详情 -- 导出
     * @param step (optional) 透前：before 透后：after 干体重：best
     * @param weight 体重区间
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET35(step: string | undefined, weight: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/WeightDetail/{weight}/Export?";
        if (weight === undefined || weight === null)
            throw new Error("The parameter 'weight' must be defined.");
        url_ = url_.replace("{weight}", encodeURIComponent("" + weight));
        if (step === null)
            throw new Error("The parameter 'step' cannot be null.");
        else if (step !== undefined)
            url_ += "step=" + encodeURIComponent("" + step) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET35(_response));
        });
    }

    protected processExportGET35(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 血压统计
     * @param step 透前：before 透后：after
     * @param sbpGroup (optional) 脉搏：pulse 收缩压：sbp 舒张压：dbp
     * @param dbpGroup (optional) 脉搏：pulse 收缩压：sbp 舒张压：dbp
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    bloodPressure(step: string, sbpGroup: string | undefined, dbpGroup: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientBloodPressureResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/BloodPressure/{step}?";
        if (step === undefined || step === null)
            throw new Error("The parameter 'step' must be defined.");
        url_ = url_.replace("{step}", encodeURIComponent("" + step));
        if (sbpGroup === null)
            throw new Error("The parameter 'sbpGroup' cannot be null.");
        else if (sbpGroup !== undefined)
            url_ += "sbpGroup=" + encodeURIComponent("" + sbpGroup) + "&";
        if (dbpGroup === null)
            throw new Error("The parameter 'dbpGroup' cannot be null.");
        else if (dbpGroup !== undefined)
            url_ += "dbpGroup=" + encodeURIComponent("" + dbpGroup) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBloodPressure(_response));
        });
    }

    protected processBloodPressure(response: AxiosResponse): Promise<PatientBloodPressureResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientBloodPressureResult.fromJS(resultData200);
            return Promise.resolve<PatientBloodPressureResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientBloodPressureResult>(null as any);
    }

    /**
     * 血压指标
     * @param sbpGroup (optional)
     * @param dbpGroup (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional)
     * @return Success
     */
    bloodPressureTarget(sbpGroup: string | undefined, dbpGroup: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientBloodPressureTargetResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/BloodPressureTarget?";
        if (sbpGroup === null)
            throw new Error("The parameter 'sbpGroup' cannot be null.");
        else if (sbpGroup !== undefined)
            url_ += "sbpGroup=" + encodeURIComponent("" + sbpGroup) + "&";
        if (dbpGroup === null)
            throw new Error("The parameter 'dbpGroup' cannot be null.");
        else if (dbpGroup !== undefined)
            url_ += "dbpGroup=" + encodeURIComponent("" + dbpGroup) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBloodPressureTarget(_response));
        });
    }

    protected processBloodPressureTarget(response: AxiosResponse): Promise<PatientBloodPressureTargetResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientBloodPressureTargetResult.fromJS(resultData200);
            return Promise.resolve<PatientBloodPressureTargetResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientBloodPressureTargetResult>(null as any);
    }

    /**
     * 患者类 -- 血压统计 -- 导出
     * @param step 透前：before 透后：after
     * @param sbpGroup (optional)
     * @param dbpGroup (optional)
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET36(step: string, sbpGroup: string | undefined, dbpGroup: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined, type: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/BloodPressure/{step}/{type}/Export?";
        if (step === undefined || step === null)
            throw new Error("The parameter 'step' must be defined.");
        url_ = url_.replace("{step}", encodeURIComponent("" + step));
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined.");
        url_ = url_.replace("{type}", encodeURIComponent("" + type));
        if (sbpGroup === null)
            throw new Error("The parameter 'sbpGroup' cannot be null.");
        else if (sbpGroup !== undefined)
            url_ += "sbpGroup=" + encodeURIComponent("" + sbpGroup) + "&";
        if (dbpGroup === null)
            throw new Error("The parameter 'dbpGroup' cannot be null.");
        else if (dbpGroup !== undefined)
            url_ += "dbpGroup=" + encodeURIComponent("" + dbpGroup) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET36(_response));
        });
    }

    protected processExportGET36(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 血压统计 -- 详情
     * @param step 透前：before 透后：after
     * @param sbpGroup (optional)
     * @param dbpGroup (optional)
     * @param bp (optional) 血压区间
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    bloodPressureDetail(step: string, sbpGroup: string | undefined, dbpGroup: string | undefined, bp: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientBloodPressureDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/BloodPressureDetail/{step}?";
        if (step === undefined || step === null)
            throw new Error("The parameter 'step' must be defined.");
        url_ = url_.replace("{step}", encodeURIComponent("" + step));
        if (sbpGroup === null)
            throw new Error("The parameter 'sbpGroup' cannot be null.");
        else if (sbpGroup !== undefined)
            url_ += "sbpGroup=" + encodeURIComponent("" + sbpGroup) + "&";
        if (dbpGroup === null)
            throw new Error("The parameter 'dbpGroup' cannot be null.");
        else if (dbpGroup !== undefined)
            url_ += "dbpGroup=" + encodeURIComponent("" + dbpGroup) + "&";
        if (bp === null)
            throw new Error("The parameter 'bp' cannot be null.");
        else if (bp !== undefined)
            url_ += "bp=" + encodeURIComponent("" + bp) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBloodPressureDetail(_response));
        });
    }

    protected processBloodPressureDetail(response: AxiosResponse): Promise<PatientBloodPressureDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientBloodPressureDetailResult.fromJS(resultData200);
            return Promise.resolve<PatientBloodPressureDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientBloodPressureDetailResult>(null as any);
    }

    /**
     * 患者类 -- 血压统计 -- 详情 -- 导出
     * @param step 透前：before 透后：after
     * @param sbpGroup (optional)
     * @param dbpGroup (optional)
     * @param bp (optional) 血压区间
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET37(step: string, sbpGroup: string | undefined, dbpGroup: string | undefined, bp: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/BloodPressureDetail/{step}/Export?";
        if (step === undefined || step === null)
            throw new Error("The parameter 'step' must be defined.");
        url_ = url_.replace("{step}", encodeURIComponent("" + step));
        if (sbpGroup === null)
            throw new Error("The parameter 'sbpGroup' cannot be null.");
        else if (sbpGroup !== undefined)
            url_ += "sbpGroup=" + encodeURIComponent("" + sbpGroup) + "&";
        if (dbpGroup === null)
            throw new Error("The parameter 'dbpGroup' cannot be null.");
        else if (dbpGroup !== undefined)
            url_ += "dbpGroup=" + encodeURIComponent("" + dbpGroup) + "&";
        if (bp === null)
            throw new Error("The parameter 'bp' cannot be null.");
        else if (bp !== undefined)
            url_ += "bp=" + encodeURIComponent("" + bp) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET37(_response));
        });
    }

    protected processExportGET37(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 死亡患者
     * @param dateStr 返回的日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd)
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    death(dateStr: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientDeathResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/Death/{dateStr}?";
        if (dateStr === undefined || dateStr === null)
            throw new Error("The parameter 'dateStr' must be defined.");
        url_ = url_.replace("{dateStr}", encodeURIComponent("" + dateStr));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeath(_response));
        });
    }

    protected processDeath(response: AxiosResponse): Promise<PatientDeathResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDeathResult.fromJS(resultData200);
            return Promise.resolve<PatientDeathResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDeathResult>(null as any);
    }

    /**
     * 患者类 -- 死亡患者 -- 导出
     * @param dateStr 返回的日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd)
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET38(dateStr: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/Death/{dateStr}/Export?";
        if (dateStr === undefined || dateStr === null)
            throw new Error("The parameter 'dateStr' must be defined.");
        url_ = url_.replace("{dateStr}", encodeURIComponent("" + dateStr));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET38(_response));
        });
    }

    protected processExportGET38(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 死亡患者 -- 详情
     * @param dateStr 返回的日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd)
     * @param date (optional) 日期
     * @param filter (optional) 查询条件
     * @return Success
     */
    deathDetail(dateStr: string, date: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientDeathDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/DeathDetail/{dateStr}?";
        if (dateStr === undefined || dateStr === null)
            throw new Error("The parameter 'dateStr' must be defined.");
        url_ = url_.replace("{dateStr}", encodeURIComponent("" + dateStr));
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeathDetail(_response));
        });
    }

    protected processDeathDetail(response: AxiosResponse): Promise<PatientDeathDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDeathDetailResult.fromJS(resultData200);
            return Promise.resolve<PatientDeathDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDeathDetailResult>(null as any);
    }

    /**
     * 患者类 -- 死亡患者 -- 详情 -- 导出
     * @param dateStr 返回的日期格式(年：yyyy/月：yyyy-MM/日：yyyy-MM-dd)
     * @param date (optional) 日期
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET39(dateStr: string, date: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/DeathDetail/{dateStr}/Export?";
        if (dateStr === undefined || dateStr === null)
            throw new Error("The parameter 'dateStr' must be defined.");
        url_ = url_.replace("{dateStr}", encodeURIComponent("" + dateStr));
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET39(_response));
        });
    }

    protected processExportGET39(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 死亡原因
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    deathCause(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientDeathCauseResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/DeathCause?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeathCause(_response));
        });
    }

    protected processDeathCause(response: AxiosResponse): Promise<PatientDeathCauseResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDeathCauseResult.fromJS(resultData200);
            return Promise.resolve<PatientDeathCauseResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDeathCauseResult>(null as any);
    }

    /**
     * 患者类 -- 死亡原因 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET40(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/DeathCause/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET40(_response));
        });
    }

    protected processExportGET40(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 死亡原因 -- 详情
     * @param cause 死亡原因
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    deathCauseDetail(cause: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientDeathCauseDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/DeathCauseDetail/{cause}?";
        if (cause === undefined || cause === null)
            throw new Error("The parameter 'cause' must be defined.");
        url_ = url_.replace("{cause}", encodeURIComponent("" + cause));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeathCauseDetail(_response));
        });
    }

    protected processDeathCauseDetail(response: AxiosResponse): Promise<PatientDeathCauseDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDeathCauseDetailResult.fromJS(resultData200);
            return Promise.resolve<PatientDeathCauseDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDeathCauseDetailResult>(null as any);
    }

    /**
     * 患者类 -- 死亡原因 -- 详情 -- 导出
     * @param cause 死亡原因
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET41(cause: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/DeathCauseDetail/{cause}/Export?";
        if (cause === undefined || cause === null)
            throw new Error("The parameter 'cause' must be defined.");
        url_ = url_.replace("{cause}", encodeURIComponent("" + cause));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET41(_response));
        });
    }

    protected processExportGET41(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 - 在透患者 - 汇总
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional)
     * @return Success
     */
    inProcessPatient(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<InProcessPatientResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/InProcessPatient?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processInProcessPatient(_response));
        });
    }

    protected processInProcessPatient(response: AxiosResponse): Promise<InProcessPatientResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = InProcessPatientResult.fromJS(resultData200);
            return Promise.resolve<InProcessPatientResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<InProcessPatientResult>(null as any);
    }

    /**
     * 患者类 - 在透患者 - 汇总 - 导出
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional) 过滤条件
     * @return Success
     */
    exportGET42(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/InProcessPatient/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET42(_response));
        });
    }

    protected processExportGET42(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 - 在透患者 -  详细
     * @param date (optional)
     * @param filter (optional)
     * @return Success
     */
    inProcessPatientDetail(date: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<InProcessPatientDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/InProcessPatientDetail?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processInProcessPatientDetail(_response));
        });
    }

    protected processInProcessPatientDetail(response: AxiosResponse): Promise<InProcessPatientDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = InProcessPatientDetailResult.fromJS(resultData200);
            return Promise.resolve<InProcessPatientDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<InProcessPatientDetailResult>(null as any);
    }

    /**
     * 患者类 - 在透患者 - 详细 - 导出
     * @param date (optional) 日期
     * @param filter (optional) 过滤条件
     * @return Success
     */
    exportGET43(date: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/InProcessPatientDetail/Export?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET43(_response));
        });
    }

    protected processExportGET43(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 - 患者排床导出 - 汇总
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional)
     * @return Success
     */
    cureSchedulePatient(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureSchedulePatientResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/CureSchedulePatient?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureSchedulePatient(_response));
        });
    }

    protected processCureSchedulePatient(response: AxiosResponse): Promise<CureSchedulePatientResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureSchedulePatientResult.fromJS(resultData200);
            return Promise.resolve<CureSchedulePatientResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureSchedulePatientResult>(null as any);
    }

    /**
     * 患者类 - 患者排床导出 - 汇总 - 导出
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional) 过滤条件
     * @return Success
     */
    exportGET44(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/CureSchedulePatient/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET44(_response));
        });
    }

    protected processExportGET44(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 - 患者排床导出 -  详细
     * @param patientId (optional)
     * @param areaId (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional)
     * @return Success
     */
    cureSchedulePatientDetail(patientId: string | undefined, areaId: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureSchedulePatientDetailResultEntry> {
        let url_ = this.baseUrl + "/api/Report/Patient/CureSchedulePatientDetail?";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        if (areaId === null)
            throw new Error("The parameter 'areaId' cannot be null.");
        else if (areaId !== undefined)
            url_ += "areaId=" + encodeURIComponent("" + areaId) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureSchedulePatientDetail(_response));
        });
    }

    protected processCureSchedulePatientDetail(response: AxiosResponse): Promise<CureSchedulePatientDetailResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureSchedulePatientDetailResultEntry.fromJS(resultData200);
            return Promise.resolve<CureSchedulePatientDetailResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureSchedulePatientDetailResultEntry>(null as any);
    }

    /**
     * 患者类 - 患者排床导出 - 详细 - 导出
     * @param patientId (optional)
     * @param areaId (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional) 过滤条件
     * @return Success
     */
    exportGET45(patientId: string | undefined, areaId: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/CureSchedulePatientDetail/Export?";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        if (areaId === null)
            throw new Error("The parameter 'areaId' cannot be null.");
        else if (areaId !== undefined)
            url_ += "areaId=" + encodeURIComponent("" + areaId) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET45(_response));
        });
    }

    protected processExportGET45(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 疾病相关并发症统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    complication(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientComplicationResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/Complication?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processComplication(_response));
        });
    }

    protected processComplication(response: AxiosResponse): Promise<PatientComplicationResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientComplicationResult.fromJS(resultData200);
            return Promise.resolve<PatientComplicationResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientComplicationResult>(null as any);
    }

    /**
     * 患者类 -- 疾病相关并发症统计 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET46(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/Complication/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET46(_response));
        });
    }

    protected processExportGET46(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 -- 疾病相关并发症统计 -- 详情
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param complication (optional)
     * @param filter (optional) 查询条件
     * @return Success
     */
    complicationDetail(startDate: string | undefined, endDate: string | undefined, complication: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientComplicationDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/ComplicationDetail?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (complication === null)
            throw new Error("The parameter 'complication' cannot be null.");
        else if (complication !== undefined)
            url_ += "complication=" + encodeURIComponent("" + complication) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processComplicationDetail(_response));
        });
    }

    protected processComplicationDetail(response: AxiosResponse): Promise<PatientComplicationDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientComplicationDetailResult.fromJS(resultData200);
            return Promise.resolve<PatientComplicationDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientComplicationDetailResult>(null as any);
    }

    /**
     * 患者类 -- 疾病相关并发症统计 -- 详情 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param complication (optional)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET47(startDate: string | undefined, endDate: string | undefined, complication: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/ComplicationDetail/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (complication === null)
            throw new Error("The parameter 'complication' cannot be null.");
        else if (complication !== undefined)
            url_ += "complication=" + encodeURIComponent("" + complication) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET47(_response));
        });
    }

    protected processExportGET47(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者基本信息导出
     * @param body (optional)
     * @return Success
     */
    exportPOST4(body: ExportFilterBase[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/Info/Export";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportPOST4(_response));
        });
    }

    protected processExportPOST4(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 新增患者信息导出
     * @param body (optional)
     * @return Success
     */
    exportPOST5(body: ExportFilterBase[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/New/Export";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportPOST5(_response));
        });
    }

    protected processExportPOST5(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 治疗管理导出
     * @param body (optional)
     * @return Success
     */
    exportPOST6(body: ExportFilterBase[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/Management/Export";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportPOST6(_response));
        });
    }

    protected processExportPOST6(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析管理导出
     * @param body (optional)
     * @return Success
     */
    exportPOST7(body: ExportFilterBase[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dialysis/Management/Export";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportPOST7(_response));
        });
    }

    protected processExportPOST7(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析指标导出
     * @param sbpGroup (optional) 收缩压
     * @param dbpGroup (optional) 舒张压
     * @param body (optional)
     * @return Success
     */
    exportPOST8(sbpGroup: string | undefined, dbpGroup: string | undefined, body: ExportFilterBase[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dialysis/Target/Export?";
        if (sbpGroup === null)
            throw new Error("The parameter 'sbpGroup' cannot be null.");
        else if (sbpGroup !== undefined)
            url_ += "sbpGroup=" + encodeURIComponent("" + sbpGroup) + "&";
        if (dbpGroup === null)
            throw new Error("The parameter 'dbpGroup' cannot be null.");
        else if (dbpGroup !== undefined)
            url_ += "dbpGroup=" + encodeURIComponent("" + dbpGroup) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportPOST8(_response));
        });
    }

    protected processExportPOST8(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 通路管理导出
     * @param body (optional)
     * @return Success
     */
    exportPOST9(body: ExportFilterBase[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Access/Management/Export";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportPOST9(_response));
        });
    }

    protected processExportPOST9(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 是否展示感染统计
     * @return Success
     */
    showInfected(  cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/ShowInfected";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processShowInfected(_response));
        });
    }

    protected processShowInfected(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 感染总计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    infected(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureInfectedReportResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/Infected?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processInfected(_response));
        });
    }

    protected processInfected(response: AxiosResponse): Promise<CureInfectedReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInfectedReportResult.fromJS(resultData200);
            return Promise.resolve<CureInfectedReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInfectedReportResult>(null as any);
    }

    /**
     * 透析类 -- 感染统计（天）
     * @param dateStr (optional) 返回的日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd)
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    infectedDay(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureDayInfectedResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/InfectedDay?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processInfectedDay(_response));
        });
    }

    protected processInfectedDay(response: AxiosResponse): Promise<CureDayInfectedResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDayInfectedResult.fromJS(resultData200);
            return Promise.resolve<CureDayInfectedResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDayInfectedResult>(null as any);
    }

    /**
     * 透析类 -- 感染统计明细
     * @param dialysisDate (optional) 日期
     * @param startDate (optional) 开始日期
     * @param endDate (optional) 结束日期
     * @param infectedWay (optional) 感染名称
     * @param filter (optional) 查询条件
     * @return Success
     */
    infectedDetail(dialysisDate: string | undefined, startDate: string | undefined, endDate: string | undefined, infectedWay: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureInfectedReportItemResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/InfectedDetail?";
        if (dialysisDate === null)
            throw new Error("The parameter 'dialysisDate' cannot be null.");
        else if (dialysisDate !== undefined)
            url_ += "dialysisDate=" + encodeURIComponent("" + dialysisDate) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (infectedWay === null)
            throw new Error("The parameter 'infectedWay' cannot be null.");
        else if (infectedWay !== undefined)
            url_ += "infectedWay=" + encodeURIComponent("" + infectedWay) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processInfectedDetail(_response));
        });
    }

    protected processInfectedDetail(response: AxiosResponse): Promise<CureInfectedReportItemResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInfectedReportItemResult.fromJS(resultData200);
            return Promise.resolve<CureInfectedReportItemResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInfectedReportItemResult>(null as any);
    }

    /**
     * 透析类 -- 渗血统计
     * @param startDate (optional) 开始日期
     * @param endDate (optional) 结束日期
     * @param filter (optional) 查询条件
     * @return Success
     */
    oozingOfBlood(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureOozingOfBloodResultEntry> {
        let url_ = this.baseUrl + "/api/Report/Cure/OozingOfBlood?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processOozingOfBlood(_response));
        });
    }

    protected processOozingOfBlood(response: AxiosResponse): Promise<CureOozingOfBloodResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureOozingOfBloodResultEntry.fromJS(resultData200);
            return Promise.resolve<CureOozingOfBloodResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureOozingOfBloodResultEntry>(null as any);
    }

    /**
     * 透析类 -- 渗血统计 -- 导出
     * @param startDate (optional) 开始日期
     * @param endDate (optional) 结束日期
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET48(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/OozingOfBlood/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET48(_response));
        });
    }

    protected processExportGET48(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 渗血统计--详情
     * @param startDate (optional) 开始日期
     * @param endDate (optional) 结束日期
     * @param type (optional)
     * @param filter (optional) 查询条件
     * @return Success
     */
    oozingOfBloodItem(startDate: string | undefined, endDate: string | undefined, type: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureOozingOfBloodItemResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/OozingOfBloodItem?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processOozingOfBloodItem(_response));
        });
    }

    protected processOozingOfBloodItem(response: AxiosResponse): Promise<CureOozingOfBloodItemResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureOozingOfBloodItemResult.fromJS(resultData200);
            return Promise.resolve<CureOozingOfBloodItemResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureOozingOfBloodItemResult>(null as any);
    }

    /**
     * 透析类 -- 渗血统计--详情 导出
     * @param startDate (optional)
     * @param endDate (optional)
     * @param type (optional)
     * @param filter (optional)
     * @return Success
     */
    exportGET49(startDate: string | undefined, endDate: string | undefined, type: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/OozingOfBloodItem/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET49(_response));
        });
    }

    protected processExportGET49(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 透后评估并发症统计
     * @param dateStr (optional) 返回的日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd)
     * @param startDate (optional) 开始日期
     * @param endDate (optional) 结束日期
     * @param filter (optional) 查询条件
     * @return Success
     */
    complicationAssessment(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureComplicationAssessmentResultEntry> {
        let url_ = this.baseUrl + "/api/Report/Cure/ComplicationAssessment?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processComplicationAssessment(_response));
        });
    }

    protected processComplicationAssessment(response: AxiosResponse): Promise<CureComplicationAssessmentResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureComplicationAssessmentResultEntry.fromJS(resultData200);
            return Promise.resolve<CureComplicationAssessmentResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureComplicationAssessmentResultEntry>(null as any);
    }

    /**
     * 透析类 -- 透后评估并发症统计 -- 导出
     * @param dateStr (optional) 返回的日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd)
     * @param startDate (optional) 开始日期
     * @param endDate (optional) 结束日期
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET50(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/ComplicationAssessment/Export?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET50(_response));
        });
    }

    protected processExportGET50(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 透后评估并发症统计 -- 详情
     * @param date (optional)
     * @param type (optional)
     * @param filter (optional) 查询条件
     * @return Success
     */
    complicationAssessmentItem(date: string | undefined, type: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureComplicationAssessmentItemResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/ComplicationAssessmentItem?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processComplicationAssessmentItem(_response));
        });
    }

    protected processComplicationAssessmentItem(response: AxiosResponse): Promise<CureComplicationAssessmentItemResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureComplicationAssessmentItemResult.fromJS(resultData200);
            return Promise.resolve<CureComplicationAssessmentItemResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureComplicationAssessmentItemResult>(null as any);
    }

    /**
     * 透析类 -- 透后评估并发症统计 -- 详情 导出
     * @param date (optional)
     * @param type (optional)
     * @param filter (optional)
     * @return Success
     */
    exportGET51(date: string | undefined, type: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/ComplicationAssessmentItem/Export?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET51(_response));
        });
    }

    protected processExportGET51(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 并发症统计
     * @param dateStr 返回的日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd)
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @param type (optional) 并发症人数（默认1）
     * @param custom (optional) 是否自定义 0否 1是
     * @return Success
     */
    complication2(dateStr: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined, type: string | undefined, custom: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureComplicationReportResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/Complication/{dateStr}?";
        if (dateStr === undefined || dateStr === null)
            throw new Error("The parameter 'dateStr' must be defined.");
        url_ = url_.replace("{dateStr}", encodeURIComponent("" + dateStr));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (custom === null)
            throw new Error("The parameter 'custom' cannot be null.");
        else if (custom !== undefined)
            url_ += "custom=" + encodeURIComponent("" + custom) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processComplication2(_response));
        });
    }

    protected processComplication2(response: AxiosResponse): Promise<CureComplicationReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureComplicationReportResult.fromJS(resultData200);
            return Promise.resolve<CureComplicationReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureComplicationReportResult>(null as any);
    }

    /**
     * 透析类 -- 并发症统计 -- 导出
     * @param dateStr 返回的日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd)
     * @param startDate (optional) 开始日期（yyyy-MM-dd）
     * @param endDate (optional) 结束日期（yyyy-MM-dd）
     * @param filter (optional) 查询条件
     * @param type (optional) 并发症人数（默认1）
     * @param custom (optional) 是否自定义 0否 1是
     * @return Success
     */
    exportGET52(dateStr: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined, type: string | undefined, custom: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/Complication/{dateStr}/Export?";
        if (dateStr === undefined || dateStr === null)
            throw new Error("The parameter 'dateStr' must be defined.");
        url_ = url_.replace("{dateStr}", encodeURIComponent("" + dateStr));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (custom === null)
            throw new Error("The parameter 'custom' cannot be null.");
        else if (custom !== undefined)
            url_ += "custom=" + encodeURIComponent("" + custom) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET52(_response));
        });
    }

    protected processExportGET52(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 并发症统计 -- 详细
     * @param dateStr 返回的日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd)
     * @param date (optional) 日期
     * @param complication (optional) 并发症
     * @param filter (optional) 查询条件
     * @param type (optional) 并发症人数（默认1）
     * @return Success
     */
    complicationDetail2(dateStr: string, date: string | undefined, complication: string | undefined, filter: string | undefined, type: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureComplicationDetailReportResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/ComplicationDetail/{dateStr}?";
        if (dateStr === undefined || dateStr === null)
            throw new Error("The parameter 'dateStr' must be defined.");
        url_ = url_.replace("{dateStr}", encodeURIComponent("" + dateStr));
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (complication === null)
            throw new Error("The parameter 'complication' cannot be null.");
        else if (complication !== undefined)
            url_ += "complication=" + encodeURIComponent("" + complication) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processComplicationDetail2(_response));
        });
    }

    protected processComplicationDetail2(response: AxiosResponse): Promise<CureComplicationDetailReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureComplicationDetailReportResult.fromJS(resultData200);
            return Promise.resolve<CureComplicationDetailReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureComplicationDetailReportResult>(null as any);
    }

    /**
     * 透析类 -- 并发症统计 -- 详细 -- 导出
     * @param dateStr 返回的日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd)
     * @param date (optional) 日期
     * @param complication (optional) 并发症
     * @param filter (optional) 查询条件
     * @param type (optional) 并发症人数（默认1）
     * @return Success
     */
    exportGET53(dateStr: string, date: string | undefined, complication: string | undefined, filter: string | undefined, type: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/ComplicationDetail/{dateStr}/Export?";
        if (dateStr === undefined || dateStr === null)
            throw new Error("The parameter 'dateStr' must be defined.");
        url_ = url_.replace("{dateStr}", encodeURIComponent("" + dateStr));
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (complication === null)
            throw new Error("The parameter 'complication' cannot be null.");
        else if (complication !== undefined)
            url_ += "complication=" + encodeURIComponent("" + complication) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET53(_response));
        });
    }

    protected processExportGET53(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 透析频次统计
     * @param weekTimes (optional) 传递参数格式 2:1;1:1;2:2
     * @param startDate (optional) 一周的开始日期（yyyy-MM-dd）
     * @param endDate (optional) 一周的结束日期（yyyy-MM-dd）
     * @param filter (optional) 查询条件
     * @return Success
     */
    interval(weekTimes: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureIntervalResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/Interval?";
        if (weekTimes === null)
            throw new Error("The parameter 'weekTimes' cannot be null.");
        else if (weekTimes !== undefined)
            url_ += "weekTimes=" + encodeURIComponent("" + weekTimes) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processInterval(_response));
        });
    }

    protected processInterval(response: AxiosResponse): Promise<CureIntervalResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureIntervalResult.fromJS(resultData200);
            return Promise.resolve<CureIntervalResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureIntervalResult>(null as any);
    }

    /**
     * 透析类 -- 透析频次统计 -- 导出
     * @param weekTimes (optional) 周次数：2:1 一周两次
     * @param startDate (optional) 一周的开始日期（yyyy-MM-dd）
     * @param endDate (optional) 一周的结束日期（yyyy-MM-dd）
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET54(weekTimes: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/Interval/Export?";
        if (weekTimes === null)
            throw new Error("The parameter 'weekTimes' cannot be null.");
        else if (weekTimes !== undefined)
            url_ += "weekTimes=" + encodeURIComponent("" + weekTimes) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET54(_response));
        });
    }

    protected processExportGET54(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 透析频次统计 -- 详细
     * @param mode 透析方式（字典值）
     * @param times (optional) 频次
     * @param weeks (optional) 周数
     * @param startDate (optional) 一周的开始日期（yyyy-MM-dd）
     * @param endDate (optional) 一周的结束日期（yyyy-MM-dd）
     * @param filter (optional) 查询条件
     * @return Success
     */
    interval2(mode: string, times: number | undefined, weeks: number | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureIntervalDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/Interval/{mode}?";
        if (mode === undefined || mode === null)
            throw new Error("The parameter 'mode' must be defined.");
        url_ = url_.replace("{mode}", encodeURIComponent("" + mode));
        if (times === null)
            throw new Error("The parameter 'times' cannot be null.");
        else if (times !== undefined)
            url_ += "times=" + encodeURIComponent("" + times) + "&";
        if (weeks === null)
            throw new Error("The parameter 'weeks' cannot be null.");
        else if (weeks !== undefined)
            url_ += "weeks=" + encodeURIComponent("" + weeks) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processInterval2(_response));
        });
    }

    protected processInterval2(response: AxiosResponse): Promise<CureIntervalDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureIntervalDetailResult.fromJS(resultData200);
            return Promise.resolve<CureIntervalDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureIntervalDetailResult>(null as any);
    }

    /**
     * 透析类 -- 透析频次统计 -- 详细 -- 导出
     * @param mode 透析方式（字典值）
     * @param times (optional) 频次
     * @param weeks (optional) 周数
     * @param startDate (optional) 一周的开始日期（yyyy-MM-dd）
     * @param endDate (optional) 一周的结束日期（yyyy-MM-dd）
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET55(mode: string, times: number | undefined, weeks: number | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/Interval/{mode}/Export?";
        if (mode === undefined || mode === null)
            throw new Error("The parameter 'mode' must be defined.");
        url_ = url_.replace("{mode}", encodeURIComponent("" + mode));
        if (times === null)
            throw new Error("The parameter 'times' cannot be null.");
        else if (times !== undefined)
            url_ += "times=" + encodeURIComponent("" + times) + "&";
        if (weeks === null)
            throw new Error("The parameter 'weeks' cannot be null.");
        else if (weeks !== undefined)
            url_ += "weeks=" + encodeURIComponent("" + weeks) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET55(_response));
        });
    }

    protected processExportGET55(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 透析例次统计
     * @param dateStr (optional) 日期格式（年份汇总：传空 年：yyyy 月：yyyy-MM 日：yyyy-MM-dd）
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param source (optional) 患者来源
     * @param filter (optional) 查询条件
     * @return Success
     */
    casetimes(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, source: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureCasetimesResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/Casetimes?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCasetimes(_response));
        });
    }

    protected processCasetimes(response: AxiosResponse): Promise<CureCasetimesResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureCasetimesResult.fromJS(resultData200);
            return Promise.resolve<CureCasetimesResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureCasetimesResult>(null as any);
    }

    /**
     * 透析类 -- 透析例次统计 -- 导出
     * @param dateStr (optional) 日期格式（年份汇总：传空 年：yyyy 月：yyyy-MM 日：yyyy-MM-dd）
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param source (optional) 患者来源
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET56(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, source: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/Casetimes/Export?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET56(_response));
        });
    }

    protected processExportGET56(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 透析例次统计 -- 详情
     * @param date (optional) 日期
     * @param dialysisModel (optional) 透析方式
     * @param source (optional) 患者来源
     * @param filter (optional) 查询条件
     * @return Success
     */
    casetimesDetail(date: string | undefined, dialysisModel: string | undefined, source: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureCasetimesDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/CasetimesDetail?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (dialysisModel === null)
            throw new Error("The parameter 'dialysisModel' cannot be null.");
        else if (dialysisModel !== undefined)
            url_ += "dialysisModel=" + encodeURIComponent("" + dialysisModel) + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCasetimesDetail(_response));
        });
    }

    protected processCasetimesDetail(response: AxiosResponse): Promise<CureCasetimesDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureCasetimesDetailResult.fromJS(resultData200);
            return Promise.resolve<CureCasetimesDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureCasetimesDetailResult>(null as any);
    }

    /**
     * 透析类 -- 透析例次统计 -- 详情 -- 导出
     * @param date (optional) 日期
     * @param dialysisModel (optional) 透析方式
     * @param source (optional) 患者来源
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET57(date: string | undefined, dialysisModel: string | undefined, source: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/CasetimesDetail/Export?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (dialysisModel === null)
            throw new Error("The parameter 'dialysisModel' cannot be null.");
        else if (dialysisModel !== undefined)
            url_ += "dialysisModel=" + encodeURIComponent("" + dialysisModel) + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET57(_response));
        });
    }

    protected processExportGET57(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 临时导管位置统计
     * @param dateStr (optional) 日期格式（年份汇总：传空 年：yyyy 月：yyyy-MM 日：yyyy-MM-dd）
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    temporaryconduitlocation(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<TemporaryconduitlocationResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/Temporaryconduitlocation?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTemporaryconduitlocation(_response));
        });
    }

    protected processTemporaryconduitlocation(response: AxiosResponse): Promise<TemporaryconduitlocationResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TemporaryconduitlocationResult.fromJS(resultData200);
            return Promise.resolve<TemporaryconduitlocationResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TemporaryconduitlocationResult>(null as any);
    }

    /**
     * 透析类 -- 临时导管位置统计 -- 导出
     * @param dateStr (optional) 日期格式（年份汇总：传空 年：yyyy 月：yyyy-MM 日：yyyy-MM-dd）
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET58(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/Temporaryconduitlocation/Export?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET58(_response));
        });
    }

    protected processExportGET58(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 临时导管位置统计 -- 详情
     * @param date (optional) 日期
     * @param positionType (optional) 类型
     * @param filter (optional) 查询条件
     * @return Success
     */
    temporaryconduitlocationDetail(date: string | undefined, positionType: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureTemporaryconduitlocationDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/TemporaryconduitlocationDetail?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (positionType === null)
            throw new Error("The parameter 'positionType' cannot be null.");
        else if (positionType !== undefined)
            url_ += "PositionType=" + encodeURIComponent("" + positionType) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTemporaryconduitlocationDetail(_response));
        });
    }

    protected processTemporaryconduitlocationDetail(response: AxiosResponse): Promise<CureTemporaryconduitlocationDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureTemporaryconduitlocationDetailResult.fromJS(resultData200);
            return Promise.resolve<CureTemporaryconduitlocationDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureTemporaryconduitlocationDetailResult>(null as any);
    }

    /**
     * 透析类 -- 临时导管位置统计 -- 详情 -- 导出
     * @param date (optional) 日期
     * @param positionType (optional) 类型
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET59(date: string | undefined, positionType: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/TemporaryconduitlocationDetail/Export?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (positionType === null)
            throw new Error("The parameter 'positionType' cannot be null.");
        else if (positionType !== undefined)
            url_ += "PositionType=" + encodeURIComponent("" + positionType) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET59(_response));
        });
    }

    protected processExportGET59(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 透析时长统计
     * @param startDate (optional) 开始日期（yyyy-MM-dd）
     * @param endDate (optional) 结束日期（yyyy-MM-dd）
     * @param filter (optional) 查询条件
     * @return Success
     */
    duration(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureDurationResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/Duration?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDuration(_response));
        });
    }

    protected processDuration(response: AxiosResponse): Promise<CureDurationResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDurationResult.fromJS(resultData200);
            return Promise.resolve<CureDurationResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDurationResult>(null as any);
    }

    /**
     * 透析类 -- 透析时长统计 -- 导出
     * @param startDate (optional) 开始日期（yyyy-MM-dd）
     * @param endDate (optional) 结束日期（yyyy-MM-dd）
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET60(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/Duration/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET60(_response));
        });
    }

    protected processExportGET60(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 透析时长统计 -- 详细
     * @param mode 透析方式（字典值）
     * @param duration 透析时长段
     * @param startDate (optional) 开始日期（yyyy-MM-dd）
     * @param endDate (optional) 结束日期（yyyy-MM-dd）
     * @param filter (optional) 查询条件
     * @return Success
     */
    duration2(mode: string, duration: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureDurationDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/Duration/{mode}/{duration}?";
        if (mode === undefined || mode === null)
            throw new Error("The parameter 'mode' must be defined.");
        url_ = url_.replace("{mode}", encodeURIComponent("" + mode));
        if (duration === undefined || duration === null)
            throw new Error("The parameter 'duration' must be defined.");
        url_ = url_.replace("{duration}", encodeURIComponent("" + duration));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDuration2(_response));
        });
    }

    protected processDuration2(response: AxiosResponse): Promise<CureDurationDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDurationDetailResult.fromJS(resultData200);
            return Promise.resolve<CureDurationDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDurationDetailResult>(null as any);
    }

    /**
     * 透析类 -- 透析时长统计 -- 详细 -- 导出
     * @param mode 透析方式（字典值）
     * @param duration 透析时长段
     * @param startDate (optional) 开始日期（yyyy-MM-dd）
     * @param endDate (optional) 结束日期（yyyy-MM-dd）
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET61(mode: string, duration: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/Duration/{mode}/{duration}/Export?";
        if (mode === undefined || mode === null)
            throw new Error("The parameter 'mode' must be defined.");
        url_ = url_.replace("{mode}", encodeURIComponent("" + mode));
        if (duration === undefined || duration === null)
            throw new Error("The parameter 'duration' must be defined.");
        url_ = url_.replace("{duration}", encodeURIComponent("" + duration));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET61(_response));
        });
    }

    protected processExportGET61(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 超滤总量统计
     * @param dateStr (optional) 需要返回的日期格式（yyyy, yyyy-MM, yyyy-MM-dd)
     * @param startDate (optional) 开始日期
     * @param endDate (optional) 结束日期
     * @param filter (optional) 查询条件
     * @return Success
     */
    ultrafiltration(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureUltrafiltrationResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/Ultrafiltration?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUltrafiltration(_response));
        });
    }

    protected processUltrafiltration(response: AxiosResponse): Promise<CureUltrafiltrationResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureUltrafiltrationResult.fromJS(resultData200);
            return Promise.resolve<CureUltrafiltrationResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureUltrafiltrationResult>(null as any);
    }

    /**
     * 透析类 -- 超滤总量统计 -- 导出
     * @param dateStr (optional) 需要返回的日期格式（yyyy, yyyy-MM, yyyy-MM-dd)
     * @param startDate (optional) 开始日期
     * @param endDate (optional) 结束日期
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET62(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/Ultrafiltration/Export?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET62(_response));
        });
    }

    protected processExportGET62(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 超滤总量统计 -- 详细
     * @param date (optional) 查询日期
     * @param ufv (optional) 超滤量
     * @param filter (optional) 查询条件
     * @return Success
     */
    ultrafiltrationDetail(date: string | undefined, ufv: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureUltrafiltrationDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/UltrafiltrationDetail?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (ufv === null)
            throw new Error("The parameter 'ufv' cannot be null.");
        else if (ufv !== undefined)
            url_ += "ufv=" + encodeURIComponent("" + ufv) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUltrafiltrationDetail(_response));
        });
    }

    protected processUltrafiltrationDetail(response: AxiosResponse): Promise<CureUltrafiltrationDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureUltrafiltrationDetailResult.fromJS(resultData200);
            return Promise.resolve<CureUltrafiltrationDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureUltrafiltrationDetailResult>(null as any);
    }

    /**
     * 透析类 -- 超滤总量统计 -- 详细 -- 导出
     * @param date (optional) 查询日期
     * @param ufv (optional) 超滤量
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET63(date: string | undefined, ufv: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/UltrafiltrationDetail/Export?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (ufv === null)
            throw new Error("The parameter 'ufv' cannot be null.");
        else if (ufv !== undefined)
            url_ += "ufv=" + encodeURIComponent("" + ufv) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET63(_response));
        });
    }

    protected processExportGET63(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 - 血流量 - 汇总统计
     * @param dateStr (optional) 日期格式（yyyy, yyyy-MM, yyyy-MM-dd)
     * @param startDate (optional) 开始日期
     * @param endDate (optional) 结束日期
     * @param filter (optional) 查询条件
     * @return Success
     */
    bloodFlow(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureBloodFlowResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/BloodFlow?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBloodFlow(_response));
        });
    }

    protected processBloodFlow(response: AxiosResponse): Promise<CureBloodFlowResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureBloodFlowResult.fromJS(resultData200);
            return Promise.resolve<CureBloodFlowResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureBloodFlowResult>(null as any);
    }

    /**
     * 透析类 - 血流量 - 汇总统计 - 导出
     * @param dateStr (optional) 日期格式（yyyy, yyyy-MM, yyyy-MM-dd)
     * @param startDate (optional) 开始日期
     * @param endDate (optional) 结束日期
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET64(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/BloodFlow/Export?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET64(_response));
        });
    }

    protected processExportGET64(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 血流量统计
     * @param date (optional) 查询日期 - 日期格式（yyyy, yyyy-MM, yyyy-MM-dd)
     * @param bloodFlow (optional) 血流量
     * @param filter (optional) 查询条件
     * @return Success
     */
    detail(date: string | undefined, bloodFlow: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureBloodFlowDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/BloodFlow/Detail?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (bloodFlow === null)
            throw new Error("The parameter 'bloodFlow' cannot be null.");
        else if (bloodFlow !== undefined)
            url_ += "BloodFlow=" + encodeURIComponent("" + bloodFlow) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetail(_response));
        });
    }

    protected processDetail(response: AxiosResponse): Promise<CureBloodFlowDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureBloodFlowDetailResult.fromJS(resultData200);
            return Promise.resolve<CureBloodFlowDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureBloodFlowDetailResult>(null as any);
    }

    /**
     * 透析类 -- 血流量统计 -- 导出
     * @param date (optional) 查询日期
     * @param bloodFlow (optional) 血流量
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET65(date: string | undefined, bloodFlow: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/BloodFlow/Detail/Export?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (bloodFlow === null)
            throw new Error("The parameter 'bloodFlow' cannot be null.");
        else if (bloodFlow !== undefined)
            url_ += "BloodFlow=" + encodeURIComponent("" + bloodFlow) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET65(_response));
        });
    }

    protected processExportGET65(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 抗凝剂统计
     * @param dateStr (optional) 日期类型 - 日期格式(yyyy, yyyy-MM, yyyy-MM-dd)
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    anticoagulant(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureAnticoagulantResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/Anticoagulant?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAnticoagulant(_response));
        });
    }

    protected processAnticoagulant(response: AxiosResponse): Promise<CureAnticoagulantResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureAnticoagulantResult.fromJS(resultData200);
            return Promise.resolve<CureAnticoagulantResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureAnticoagulantResult>(null as any);
    }

    /**
     * 透析类 -- 抗凝剂统计 -- 导出
     * @param dateStr (optional) 日期类型 - 日期格式(yyyy, yyyy-MM, yyyy-MM-dd)
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional)
     * @return Success
     */
    exportGET66(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/Anticoagulant/Export?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET66(_response));
        });
    }

    protected processExportGET66(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 - 抗凝剂 - 详细查询
     * @param date (optional) 日期 - 日期格式（yyyy-MM-dd, yyyy-MM, yyyy)
     * @param anticoagulant (optional) 抗凝剂名称
     * @param filter (optional) 查询条件
     * @return Success
     */
    detail2(date: string | undefined, anticoagulant: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureAnticoagulantDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/Anticoagulant/Detail?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (anticoagulant === null)
            throw new Error("The parameter 'anticoagulant' cannot be null.");
        else if (anticoagulant !== undefined)
            url_ += "Anticoagulant=" + encodeURIComponent("" + anticoagulant) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetail2(_response));
        });
    }

    protected processDetail2(response: AxiosResponse): Promise<CureAnticoagulantDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureAnticoagulantDetailResult.fromJS(resultData200);
            return Promise.resolve<CureAnticoagulantDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureAnticoagulantDetailResult>(null as any);
    }

    /**
     * 透析类 - 抗凝剂 - 详细查询 - 导出
     * @param date (optional) 查询日期
     * @param anticoagulant (optional) 抗凝剂名称
     * @param filter (optional)
     * @return Success
     */
    exportGET67(date: string | undefined, anticoagulant: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/Anticoagulant/Detail/Export?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (anticoagulant === null)
            throw new Error("The parameter 'anticoagulant' cannot be null.");
        else if (anticoagulant !== undefined)
            url_ += "Anticoagulant=" + encodeURIComponent("" + anticoagulant) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET67(_response));
        });
    }

    protected processExportGET67(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 - 透析液 - 汇总查询
     * @param dateStr (optional) 日期格式(yyyy,yyyy-MM-dd,yyyy-MM)
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    dialysisate(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureDialysisateResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/Dialysisate?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDialysisate(_response));
        });
    }

    protected processDialysisate(response: AxiosResponse): Promise<CureDialysisateResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDialysisateResult.fromJS(resultData200);
            return Promise.resolve<CureDialysisateResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDialysisateResult>(null as any);
    }

    /**
     * 透析类- 透析液 - 汇总导出
     * @param dateStr (optional) 日期格式(yyyy,yyyy-MM-dd,yyyy-MM)
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET68(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/Dialysisate/Export?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET68(_response));
        });
    }

    protected processExportGET68(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 透析液统计 - 详细
     * @param date (optional) 日期(yyyy ,yyyy-MM, yyyy-MM-dd)
     * @param ca (optional) 钙离子浓度
     * @param filter (optional) 查询条件
     * @return Success
     */
    detail3(date: string | undefined, ca: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureDialysisateDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/Dialysisate/Detail?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (ca === null)
            throw new Error("The parameter 'ca' cannot be null.");
        else if (ca !== undefined)
            url_ += "Ca=" + encodeURIComponent("" + ca) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetail3(_response));
        });
    }

    protected processDetail3(response: AxiosResponse): Promise<CureDialysisateDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDialysisateDetailResult.fromJS(resultData200);
            return Promise.resolve<CureDialysisateDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDialysisateDetailResult>(null as any);
    }

    /**
     * 透析类 -- 透析液统计 - 详细 - 导出
     * @param date (optional) 日期(yyyy ,yyyy-MM, yyyy-MM-dd)
     * @param ca (optional) 钙离子浓度
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET69(date: string | undefined, ca: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/Dialysisate/Detail/Export?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (ca === null)
            throw new Error("The parameter 'ca' cannot be null.");
        else if (ca !== undefined)
            url_ += "Ca=" + encodeURIComponent("" + ca) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET69(_response));
        });
    }

    protected processExportGET69(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 透析充分性统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    dialysisAdequacy(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureDialysisAdequacyResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/DialysisAdequacy?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDialysisAdequacy(_response));
        });
    }

    protected processDialysisAdequacy(response: AxiosResponse): Promise<CureDialysisAdequacyResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDialysisAdequacyResult.fromJS(resultData200);
            return Promise.resolve<CureDialysisAdequacyResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDialysisAdequacyResult>(null as any);
    }

    /**
     * 透析类 -- 透析充分性指标
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional)
     * @return Success
     */
    dialysisAdequacyTarget(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureDialysisAdequacyTargetResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/DialysisAdequacyTarget?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDialysisAdequacyTarget(_response));
        });
    }

    protected processDialysisAdequacyTarget(response: AxiosResponse): Promise<CureDialysisAdequacyTargetResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDialysisAdequacyTargetResult.fromJS(resultData200);
            return Promise.resolve<CureDialysisAdequacyTargetResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDialysisAdequacyTargetResult>(null as any);
    }

    /**
     * 透析类 -- 透析充分性统计 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET70(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/DialysisAdequacy/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET70(_response));
        });
    }

    protected processExportGET70(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 - 透析充分性 - 详细查询
     * @param type (optional) 分析维度类型（“URR”，“spKt/V”）
     * @param standrd (optional) （“达标”，“不达标”，“超标”，“未检测”）
     * @param startDate (optional) 开始日期
     * @param endDate (optional) 结束日期
     * @param filter (optional) 查询条件
     * @return Success
     */
    detail4(type: string | undefined, standrd: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureDialysisAdequacyDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/DialysisAdequacy/Detail?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (standrd === null)
            throw new Error("The parameter 'standrd' cannot be null.");
        else if (standrd !== undefined)
            url_ += "Standrd=" + encodeURIComponent("" + standrd) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetail4(_response));
        });
    }

    protected processDetail4(response: AxiosResponse): Promise<CureDialysisAdequacyDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDialysisAdequacyDetailResult.fromJS(resultData200);
            return Promise.resolve<CureDialysisAdequacyDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDialysisAdequacyDetailResult>(null as any);
    }

    /**
     * 透析类 - 透析充分性指标 - 详细查询
     * @param type (optional) URR、spKt、URRspKt
     * @param standrd (optional) 未检测、未达标、达标
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional)
     * @return Success
     */
    detail5(type: string | undefined, standrd: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureDialysisAdequacyTargetDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/DialysisAdequacyTarget/Detail?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (standrd === null)
            throw new Error("The parameter 'standrd' cannot be null.");
        else if (standrd !== undefined)
            url_ += "Standrd=" + encodeURIComponent("" + standrd) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetail5(_response));
        });
    }

    protected processDetail5(response: AxiosResponse): Promise<CureDialysisAdequacyTargetDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDialysisAdequacyTargetDetailResult.fromJS(resultData200);
            return Promise.resolve<CureDialysisAdequacyTargetDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDialysisAdequacyTargetDetailResult>(null as any);
    }

    /**
     * 透析类 - 透析充分性 - 详细查询 - 导出
     * @param type (optional) 分析维度类型（“URR”，“spKt/V”）
     * @param standrd (optional) （“达标”，“不达标”，“超标”，“未检测”）
     * @param startDate (optional) 开始日期
     * @param endDate (optional) 结束日期
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET71(type: string | undefined, standrd: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/DialysisAdequacy/Detail/Export?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (standrd === null)
            throw new Error("The parameter 'standrd' cannot be null.");
        else if (standrd !== undefined)
            url_ += "Standrd=" + encodeURIComponent("" + standrd) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET71(_response));
        });
    }

    protected processExportGET71(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 - 透析充分性指标 - 详细查询 - 导出
     * @param type (optional) URR、spKt、URRspKt
     * @param standrd (optional) 未检测、未达标、达标
     * @param startDate (optional) 开始日期
     * @param endDate (optional) 结束日期
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET72(type: string | undefined, standrd: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/DialysisAdequacyTarget/Detail/Export?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (standrd === null)
            throw new Error("The parameter 'standrd' cannot be null.");
        else if (standrd !== undefined)
            url_ += "Standrd=" + encodeURIComponent("" + standrd) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET72(_response));
        });
    }

    protected processExportGET72(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 提前下机统计
     * @param dateStr (optional) 日期格式（yyyy, yyyy-MM, yyyy-MM-dd)
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    off(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureOffResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/Off?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processOff(_response));
        });
    }

    protected processOff(response: AxiosResponse): Promise<CureOffResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureOffResult.fromJS(resultData200);
            return Promise.resolve<CureOffResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureOffResult>(null as any);
    }

    /**
     * 透析类 -- 提前下机统计 -- 导出
     * @param dateStr (optional) 日期格式（yyyy, yyyy-MM, yyyy-MM-dd)
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET73(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/Off/Export?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET73(_response));
        });
    }

    protected processExportGET73(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 提前下机统计 -- 详细
     * @param date (optional) 日期
     * @param filter (optional) 查询条件
     * @return Success
     */
    offDetail(date: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureOffDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/OffDetail?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processOffDetail(_response));
        });
    }

    protected processOffDetail(response: AxiosResponse): Promise<CureOffDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureOffDetailResult.fromJS(resultData200);
            return Promise.resolve<CureOffDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureOffDetailResult>(null as any);
    }

    /**
     * 透析类 -- 提前下机统计 -- 详细 -- 导出
     * @param date (optional) 日期
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET74(date: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/OffDetail/Export?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET74(_response));
        });
    }

    protected processExportGET74(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 取消透析统计
     * @param dateStr (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional)
     * @return Success
     */
    cancel(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureCancelResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/Cancel?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCancel(_response));
        });
    }

    protected processCancel(response: AxiosResponse): Promise<CureCancelResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureCancelResult.fromJS(resultData200);
            return Promise.resolve<CureCancelResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureCancelResult>(null as any);
    }

    /**
     * 透析类 -- 取消透析统计 -- 详细
     * @param date (optional) 日期
     * @param filter (optional) 查询条件
     * @return Success
     */
    cancelDetail(date: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureCancelDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/CancelDetail?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCancelDetail(_response));
        });
    }

    protected processCancelDetail(response: AxiosResponse): Promise<CureCancelDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureCancelDetailResult.fromJS(resultData200);
            return Promise.resolve<CureCancelDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureCancelDetailResult>(null as any);
    }

    /**
     * 透析类 -- 取消透析统计 -- 详细 -- 导出
     * @param date (optional) 日期
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET75(date: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/CancelDetail/Export?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET75(_response));
        });
    }

    protected processExportGET75(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 体重统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param num (optional) 自定义达标值
     * @param filter (optional) 查询条件
     * @return Success
     */
    weight2(startDate: string | undefined, endDate: string | undefined, num: number | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureWeightResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/Weight?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (num === null)
            throw new Error("The parameter 'num' cannot be null.");
        else if (num !== undefined)
            url_ += "Num=" + encodeURIComponent("" + num) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processWeight2(_response));
        });
    }

    protected processWeight2(response: AxiosResponse): Promise<CureWeightResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureWeightResult.fromJS(resultData200);
            return Promise.resolve<CureWeightResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureWeightResult>(null as any);
    }

    /**
     * 透析类 -- 体重统计 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param num (optional) 自定义达标值
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET76(startDate: string | undefined, endDate: string | undefined, num: number | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/Weight/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (num === null)
            throw new Error("The parameter 'num' cannot be null.");
        else if (num !== undefined)
            url_ += "Num=" + encodeURIComponent("" + num) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET76(_response));
        });
    }

    protected processExportGET76(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 体重统计 - 详细
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param standard (optional) 指标
     * @param mode (optional) 参数（“透前体重”，“透后体重”）
     * @param num (optional) 自定义达标值
     * @param filter (optional) 查询条件
     * @return Success
     */
    detail6(startDate: string | undefined, endDate: string | undefined, standard: string | undefined, mode: string | undefined, num: number | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureWeightDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/Weight/Detail?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (standard === null)
            throw new Error("The parameter 'standard' cannot be null.");
        else if (standard !== undefined)
            url_ += "Standard=" + encodeURIComponent("" + standard) + "&";
        if (mode === null)
            throw new Error("The parameter 'mode' cannot be null.");
        else if (mode !== undefined)
            url_ += "mode=" + encodeURIComponent("" + mode) + "&";
        if (num === null)
            throw new Error("The parameter 'num' cannot be null.");
        else if (num !== undefined)
            url_ += "Num=" + encodeURIComponent("" + num) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetail6(_response));
        });
    }

    protected processDetail6(response: AxiosResponse): Promise<CureWeightDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureWeightDetailResult.fromJS(resultData200);
            return Promise.resolve<CureWeightDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureWeightDetailResult>(null as any);
    }

    /**
     * 透析类 -- 体重统计 - 详细 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param standard (optional) 指标
     * @param mode (optional) 参数（“透前体重”，“透后体重”）
     * @param num (optional)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET77(startDate: string | undefined, endDate: string | undefined, standard: string | undefined, mode: string | undefined, num: number | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/Weight/Detail/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (standard === null)
            throw new Error("The parameter 'standard' cannot be null.");
        else if (standard !== undefined)
            url_ += "Standard=" + encodeURIComponent("" + standard) + "&";
        if (mode === null)
            throw new Error("The parameter 'mode' cannot be null.");
        else if (mode !== undefined)
            url_ += "mode=" + encodeURIComponent("" + mode) + "&";
        if (num === null)
            throw new Error("The parameter 'num' cannot be null.");
        else if (num !== undefined)
            url_ += "Num=" + encodeURIComponent("" + num) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET77(_response));
        });
    }

    protected processExportGET77(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 - 预脱汇总统计
     * @param dateStr (optional) 日期类型 - 日期格式(yyyy, yyyy-MM, yyyy-MM-dd)
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件（分组条件）
     * @return Success
     */
    ufg(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureUfgResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/Ufg?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUfg(_response));
        });
    }

    protected processUfg(response: AxiosResponse): Promise<CureUfgResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureUfgResult.fromJS(resultData200);
            return Promise.resolve<CureUfgResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureUfgResult>(null as any);
    }

    /**
     * 透析类 - 预脱汇总统计 - 导出
     * @param dateStr (optional) 日期类型 - 日期格式(yyyy, yyyy-MM, yyyy-MM-dd)
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET78(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/Ufg/Export?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET78(_response));
        });
    }

    protected processExportGET78(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 - 预脱详细查询
     * @param date (optional) 查询日期 - 日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd)
     * @param ufg (optional) ufg
     * @param filter (optional) 查询条件
     * @return Success
     */
    detail7(date: string | undefined, ufg: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureUfgDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/Ufg/Detail?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (ufg === null)
            throw new Error("The parameter 'ufg' cannot be null.");
        else if (ufg !== undefined)
            url_ += "ufg=" + encodeURIComponent("" + ufg) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetail7(_response));
        });
    }

    protected processDetail7(response: AxiosResponse): Promise<CureUfgDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureUfgDetailResult.fromJS(resultData200);
            return Promise.resolve<CureUfgDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureUfgDetailResult>(null as any);
    }

    /**
     * 透析类 - 预脱详细查询 - 导出
     * @param date (optional) 查询日期 - 日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd)
     * @param ufg (optional) ufg
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET79(date: string | undefined, ufg: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/Ufg/Detail/Export?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (ufg === null)
            throw new Error("The parameter 'ufg' cannot be null.");
        else if (ufg !== undefined)
            url_ += "ufg=" + encodeURIComponent("" + ufg) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET79(_response));
        });
    }

    protected processExportGET79(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 - 实脱汇总统计
     * @param dateStr (optional) 日期类型 - 日期格式(yyyy, yyyy-MM, yyyy-MM-dd)
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件（分组条件）
     * @return Success
     */
    ufv(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureUfvResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/Ufv?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUfv(_response));
        });
    }

    protected processUfv(response: AxiosResponse): Promise<CureUfvResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureUfvResult.fromJS(resultData200);
            return Promise.resolve<CureUfvResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureUfvResult>(null as any);
    }

    /**
     * 透析类 - 实脱汇总统计 - 导出
     * @param dateStr (optional) 日期类型 - 日期格式(yyyy, yyyy-MM, yyyy-MM-dd)
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET80(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/Ufv/Export?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET80(_response));
        });
    }

    protected processExportGET80(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 - 实脱详细查询
     * @param date (optional) 查询日期 - 日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd)
     * @param ufv (optional) ufg
     * @param filter (optional) 查询条件
     * @return Success
     */
    detail8(date: string | undefined, ufv: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureUfvDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/Ufv/Detail?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (ufv === null)
            throw new Error("The parameter 'ufv' cannot be null.");
        else if (ufv !== undefined)
            url_ += "ufv=" + encodeURIComponent("" + ufv) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetail8(_response));
        });
    }

    protected processDetail8(response: AxiosResponse): Promise<CureUfvDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureUfvDetailResult.fromJS(resultData200);
            return Promise.resolve<CureUfvDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureUfvDetailResult>(null as any);
    }

    /**
     * 透析类 - 实脱详细查询 - 导出
     * @param date (optional) 查询日期 - 日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd)
     * @param ufv (optional) ufg
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET81(date: string | undefined, ufv: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/Ufv/Detail/Export?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (ufv === null)
            throw new Error("The parameter 'ufv' cannot be null.");
        else if (ufv !== undefined)
            url_ += "ufv=" + encodeURIComponent("" + ufv) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET81(_response));
        });
    }

    protected processExportGET81(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 血压统计
     * @param step 透前：before 透后：after
     * @param type 脉搏：pulse 收缩压：sbp 舒张压：dbp
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    bloodPressure2(step: string, type: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientBloodPressureResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/BloodPressure/{step}/{type}?";
        if (step === undefined || step === null)
            throw new Error("The parameter 'step' must be defined.");
        url_ = url_.replace("{step}", encodeURIComponent("" + step));
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined.");
        url_ = url_.replace("{type}", encodeURIComponent("" + type));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBloodPressure2(_response));
        });
    }

    protected processBloodPressure2(response: AxiosResponse): Promise<PatientBloodPressureResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientBloodPressureResult.fromJS(resultData200);
            return Promise.resolve<PatientBloodPressureResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientBloodPressureResult>(null as any);
    }

    /**
     * 透析类 -- 血压统计 -- 导出
     * @param step 透前：before 透后：after
     * @param type 脉搏：pulse 收缩压：sbp 舒张压：dbp
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET82(step: string, type: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/BloodPressure/{step}/{type}/Export?";
        if (step === undefined || step === null)
            throw new Error("The parameter 'step' must be defined.");
        url_ = url_.replace("{step}", encodeURIComponent("" + step));
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined.");
        url_ = url_.replace("{type}", encodeURIComponent("" + type));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET82(_response));
        });
    }

    protected processExportGET82(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 血压统计 -- 详情
     * @param step 透前：before 透后：after
     * @param type 脉搏：pulse 收缩压：sbp 舒张压：dbp
     * @param bp 血压区间
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    bloodPressureDetail2(step: string, type: string, bp: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureBloodPressureDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/BloodPressureDetail/{step}/{type}/{bp}?";
        if (step === undefined || step === null)
            throw new Error("The parameter 'step' must be defined.");
        url_ = url_.replace("{step}", encodeURIComponent("" + step));
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined.");
        url_ = url_.replace("{type}", encodeURIComponent("" + type));
        if (bp === undefined || bp === null)
            throw new Error("The parameter 'bp' must be defined.");
        url_ = url_.replace("{bp}", encodeURIComponent("" + bp));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBloodPressureDetail2(_response));
        });
    }

    protected processBloodPressureDetail2(response: AxiosResponse): Promise<CureBloodPressureDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureBloodPressureDetailResult.fromJS(resultData200);
            return Promise.resolve<CureBloodPressureDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureBloodPressureDetailResult>(null as any);
    }

    /**
     * 透析类 -- 血压统计 -- 详情 -- 导出
     * @param step 透前：before 透后：after
     * @param type 脉搏：pulse 收缩压：sbp 舒张压：dbp
     * @param bp 血压区间
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET83(step: string, type: string, bp: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/BloodPressureDetail/{step}/{type}/{bp}/Export?";
        if (step === undefined || step === null)
            throw new Error("The parameter 'step' must be defined.");
        url_ = url_.replace("{step}", encodeURIComponent("" + step));
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined.");
        url_ = url_.replace("{type}", encodeURIComponent("" + type));
        if (bp === undefined || bp === null)
            throw new Error("The parameter 'bp' must be defined.");
        url_ = url_.replace("{bp}", encodeURIComponent("" + bp));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET83(_response));
        });
    }

    protected processExportGET83(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 - 治疗汇总统计
     * @param dateStr (optional) 日期类型 - 日期格式(yyyy, yyyy-MM, yyyy-MM-dd)
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    summary(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureSummaryResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/Summary?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSummary(_response));
        });
    }

    protected processSummary(response: AxiosResponse): Promise<CureSummaryResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureSummaryResult.fromJS(resultData200);
            return Promise.resolve<CureSummaryResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureSummaryResult>(null as any);
    }

    /**
     * 透析类 - 治疗汇总统计 - 导出
     * @param dateStr (optional) 日期类型 - 日期格式(yyyy, yyyy-MM, yyyy-MM-dd)
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET84(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/Summary/Export?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET84(_response));
        });
    }

    protected processExportGET84(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 - 治疗汇总详细查询
     * @param date (optional) 查询日期 - 日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd)
     * @param mode (optional) 透析方式
     * @param filter (optional) 查询条件
     * @return Success
     */
    detail9(date: string | undefined, mode: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureSummaryDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/Summary/Detail?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (mode === null)
            throw new Error("The parameter 'mode' cannot be null.");
        else if (mode !== undefined)
            url_ += "Mode=" + encodeURIComponent("" + mode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetail9(_response));
        });
    }

    protected processDetail9(response: AxiosResponse): Promise<CureSummaryDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureSummaryDetailResult.fromJS(resultData200);
            return Promise.resolve<CureSummaryDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureSummaryDetailResult>(null as any);
    }

    /**
     * 透析类 - 治疗汇总详细查询 - 导出
     * @param date (optional) 查询日期 - 日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd)
     * @param mode (optional) 透析方式
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET85(date: string | undefined, mode: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/Summary/Detail/Export?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (mode === null)
            throw new Error("The parameter 'mode' cannot be null.");
        else if (mode !== undefined)
            url_ += "Mode=" + encodeURIComponent("" + mode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET85(_response));
        });
    }

    protected processExportGET85(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 - 排床汇总统计
     * @param dateStr (optional) 返回的日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd)
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    schedules(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureScheduleShiftResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/Schedules?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSchedules(_response));
        });
    }

    protected processSchedules(response: AxiosResponse): Promise<CureScheduleShiftResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureScheduleShiftResult.fromJS(resultData200);
            return Promise.resolve<CureScheduleShiftResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureScheduleShiftResult>(null as any);
    }

    /**
     * 透析类 - 排床汇总统计 - 导出
     * @param dateStr (optional) 返回的日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd)
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET86(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/Schedules/Export?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET86(_response));
        });
    }

    protected processExportGET86(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 - 排床详细统计
     * @param date (optional) 日期
     * @param cureShiftName (optional) 班次
     * @param filter (optional) 查询条件
     * @return Success
     */
    detail10(date: string | undefined, cureShiftName: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureScheduleShiftDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/Schedules/Detail?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (cureShiftName === null)
            throw new Error("The parameter 'cureShiftName' cannot be null.");
        else if (cureShiftName !== undefined)
            url_ += "cureShiftName=" + encodeURIComponent("" + cureShiftName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetail10(_response));
        });
    }

    protected processDetail10(response: AxiosResponse): Promise<CureScheduleShiftDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureScheduleShiftDetailResult.fromJS(resultData200);
            return Promise.resolve<CureScheduleShiftDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureScheduleShiftDetailResult>(null as any);
    }

    /**
     * 透析类 - 排床详细统计导出
     * @param date (optional) 日期
     * @param cureShiftName (optional) 班次
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET87(date: string | undefined, cureShiftName: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/Schedules/Detail/Export?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (cureShiftName === null)
            throw new Error("The parameter 'cureShiftName' cannot be null.");
        else if (cureShiftName !== undefined)
            url_ += "cureShiftName=" + encodeURIComponent("" + cureShiftName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET87(_response));
        });
    }

    protected processExportGET87(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 - 空余床位汇总统计
     * @param dateStr (optional) 返回的日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd)
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    emptyBed(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureScheduleShiftResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/EmptyBed?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processEmptyBed(_response));
        });
    }

    protected processEmptyBed(response: AxiosResponse): Promise<CureScheduleShiftResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureScheduleShiftResult.fromJS(resultData200);
            return Promise.resolve<CureScheduleShiftResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureScheduleShiftResult>(null as any);
    }

    /**
     * 透析类 - 空余床位汇总统计 - 导出
     * @param dateStr (optional) 返回的日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd)
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET88(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/EmptyBed/Export?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET88(_response));
        });
    }

    protected processExportGET88(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 - 空余床位详细统计
     * @param date (optional) 日期
     * @param cureShiftName (optional) 班次
     * @param filter (optional) 查询条件
     * @return Success
     */
    detail11(date: string | undefined, cureShiftName: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureEmptyBedDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/EmptyBed/Detail?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (cureShiftName === null)
            throw new Error("The parameter 'cureShiftName' cannot be null.");
        else if (cureShiftName !== undefined)
            url_ += "cureShiftName=" + encodeURIComponent("" + cureShiftName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetail11(_response));
        });
    }

    protected processDetail11(response: AxiosResponse): Promise<CureEmptyBedDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureEmptyBedDetailResult.fromJS(resultData200);
            return Promise.resolve<CureEmptyBedDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureEmptyBedDetailResult>(null as any);
    }

    /**
     * 透析类 - 空余床位详细统计 - 导出
     * @param date (optional) 日期
     * @param cureShiftName (optional) 班次
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET89(date: string | undefined, cureShiftName: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/EmptyBed/Detail/Export?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (cureShiftName === null)
            throw new Error("The parameter 'cureShiftName' cannot be null.");
        else if (cureShiftName !== undefined)
            url_ += "cureShiftName=" + encodeURIComponent("" + cureShiftName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET89(_response));
        });
    }

    protected processExportGET89(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 血管通路
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param rtype (optional) 血管通路：0 新增血管通路：1
     * @param dateStr (optional) 日期格式:yyyy-MM-dd;yyyy-MM;yyyy
     * @param filter (optional) 查询条件
     * @return Success
     */
    vascularAccess(startDate: string | undefined, endDate: string | undefined, rtype: number | undefined, dateStr: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureVascularAccessResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/VascularAccess?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (rtype === null)
            throw new Error("The parameter 'rtype' cannot be null.");
        else if (rtype !== undefined)
            url_ += "rtype=" + encodeURIComponent("" + rtype) + "&";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processVascularAccess(_response));
        });
    }

    protected processVascularAccess(response: AxiosResponse): Promise<CureVascularAccessResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureVascularAccessResult.fromJS(resultData200);
            return Promise.resolve<CureVascularAccessResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureVascularAccessResult>(null as any);
    }

    /**
     * 透析类 -- 血管通路手术
     * @param dateStr (optional)
     * @param startDate (optional) 开始日期(yyyy-MM)
     * @param endDate (optional) 结束日期(yyyy-MM)
     * @param filter (optional) 查询条件
     * @return Success
     */
    vascularAccessSurgery(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureVascularAccessSurgeryResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/VascularAccessSurgery?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processVascularAccessSurgery(_response));
        });
    }

    protected processVascularAccessSurgery(response: AxiosResponse): Promise<CureVascularAccessSurgeryResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureVascularAccessSurgeryResult.fromJS(resultData200);
            return Promise.resolve<CureVascularAccessSurgeryResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureVascularAccessSurgeryResult>(null as any);
    }

    /**
     * 透析类 -- 血管通路手术 - 导出
     * @param dataStr (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional)
     * @return Success
     */
    exportGET90(dataStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/VascularAccessSurgery/Export?";
        if (dataStr === null)
            throw new Error("The parameter 'dataStr' cannot be null.");
        else if (dataStr !== undefined)
            url_ += "dataStr=" + encodeURIComponent("" + dataStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET90(_response));
        });
    }

    protected processExportGET90(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 血管通路 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM)
     * @param endDate (optional) 结束日期(yyyy-MM)
     * @param rtype (optional) 血管通路：0 新增血管通路：1
     * @param dateStr (optional) 日期格式:yyyy-MM-dd;yyyy-MM;yyyy
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET91(startDate: string | undefined, endDate: string | undefined, rtype: number | undefined, dateStr: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/VascularAccess/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (rtype === null)
            throw new Error("The parameter 'rtype' cannot be null.");
        else if (rtype !== undefined)
            url_ += "rtype=" + encodeURIComponent("" + rtype) + "&";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET91(_response));
        });
    }

    protected processExportGET91(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 血管通路详细
     * @param type (optional) 血管通路类型
     * @param date (optional) 查询日期（yyyy-mm-dd)
     * @param rtype (optional) 血管通路：0 新增血管通路：1
     * @param filter (optional) 查询条件
     * @return Success
     */
    vascularAccessDetail(type: string | undefined, date: string | undefined, rtype: number | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureVascularAccessDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/VascularAccessDetail?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (rtype === null)
            throw new Error("The parameter 'rtype' cannot be null.");
        else if (rtype !== undefined)
            url_ += "rtype=" + encodeURIComponent("" + rtype) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processVascularAccessDetail(_response));
        });
    }

    protected processVascularAccessDetail(response: AxiosResponse): Promise<CureVascularAccessDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureVascularAccessDetailResult.fromJS(resultData200);
            return Promise.resolve<CureVascularAccessDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureVascularAccessDetailResult>(null as any);
    }

    /**
     * 透析类 -- 血管通路手术详细
     * @param type (optional) 血管通路类型
     * @param date (optional) 查询日期（yyyy-mm-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    vascularAccessSurgeryDetail(type: string | undefined, date: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureVascularAccessSurgeryDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/VascularAccessSurgeryDetail?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processVascularAccessSurgeryDetail(_response));
        });
    }

    protected processVascularAccessSurgeryDetail(response: AxiosResponse): Promise<CureVascularAccessSurgeryDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureVascularAccessSurgeryDetailResult.fromJS(resultData200);
            return Promise.resolve<CureVascularAccessSurgeryDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureVascularAccessSurgeryDetailResult>(null as any);
    }

    /**
     * 透析类 -- 血管通路手术详细 -- 导出
     * @param type (optional) 血管通路类型
     * @param date (optional) 查询日期（yyyy-mm-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET92(type: string | undefined, date: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/VascularAccessSurgeryDetail/Export?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET92(_response));
        });
    }

    protected processExportGET92(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 血管通路详细 -- 导出
     * @param type (optional) 血管通路类型
     * @param date (optional) 查询日期
     * @param rtype (optional) 血管通路：0 新增血管通路：1
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET93(type: string | undefined, date: string | undefined, rtype: number | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/VascularAccessDetail/Export?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (rtype === null)
            throw new Error("The parameter 'rtype' cannot be null.");
        else if (rtype !== undefined)
            url_ += "rtype=" + encodeURIComponent("" + rtype) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET93(_response));
        });
    }

    protected processExportGET93(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 - 使用中血管通路数量统计
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @param added (optional) 血管通路：0 新增血管通路：1
     * @return Success
     */
    queryPatientVascularAccess(startDate: string | undefined, endDate: string | undefined, filter: string | undefined, added: number | undefined , cancelToken?: CancelToken | undefined): Promise<CureVascularAccessItemResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/QueryPatientVascularAccess?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (added === null)
            throw new Error("The parameter 'added' cannot be null.");
        else if (added !== undefined)
            url_ += "added=" + encodeURIComponent("" + added) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryPatientVascularAccess(_response));
        });
    }

    protected processQueryPatientVascularAccess(response: AxiosResponse): Promise<CureVascularAccessItemResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureVascularAccessItemResult.fromJS(resultData200);
            return Promise.resolve<CureVascularAccessItemResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureVascularAccessItemResult>(null as any);
    }

    /**
     * 透析类 - 使用中血管通路数量统计
     * @param dateStr (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional)
     * @param added (optional) 血管通路：0 新增血管通路：1
     * @return Success
     */
    queryVascularAccessPatient(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined, added: number | undefined , cancelToken?: CancelToken | undefined): Promise<CureVascularAccessResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/QueryVascularAccessPatient?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (added === null)
            throw new Error("The parameter 'added' cannot be null.");
        else if (added !== undefined)
            url_ += "added=" + encodeURIComponent("" + added) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryVascularAccessPatient(_response));
        });
    }

    protected processQueryVascularAccessPatient(response: AxiosResponse): Promise<CureVascularAccessResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureVascularAccessResult.fromJS(resultData200);
            return Promise.resolve<CureVascularAccessResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureVascularAccessResult>(null as any);
    }

    /**
     * 透析类 - 使用中血管通路（患者）数量统计 - 导出
     * @param dateStr (optional) 时间格式
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional)
     * @param added (optional) 血管通路：0 新增血管通路：1
     * @return Success
     */
    exportGET94(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined, added: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/VascularAccessPatient/Export?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (added === null)
            throw new Error("The parameter 'added' cannot be null.");
        else if (added !== undefined)
            url_ += "added=" + encodeURIComponent("" + added) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET94(_response));
        });
    }

    protected processExportGET94(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 - 使用中血管通路数量统计 - 导出
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional)
     * @param added (optional) 血管通路：0 新增血管通路：1
     * @return Success
     */
    exportGET95(startDate: string | undefined, endDate: string | undefined, filter: string | undefined, added: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/QueryPatientVascularAccess/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (added === null)
            throw new Error("The parameter 'added' cannot be null.");
        else if (added !== undefined)
            url_ += "added=" + encodeURIComponent("" + added) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET95(_response));
        });
    }

    protected processExportGET95(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 - 患者血管通路明细
     * @param type (optional)
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional)
     * @param added (optional) 血管通路：0 新增血管通路：1
     * @return Success
     */
    queryPatientVascularAccessDetial(type: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined, added: number | undefined , cancelToken?: CancelToken | undefined): Promise<PatientDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/QueryPatientVascularAccessDetial?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (added === null)
            throw new Error("The parameter 'added' cannot be null.");
        else if (added !== undefined)
            url_ += "added=" + encodeURIComponent("" + added) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryPatientVascularAccessDetial(_response));
        });
    }

    protected processQueryPatientVascularAccessDetial(response: AxiosResponse): Promise<PatientDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDetailResult.fromJS(resultData200);
            return Promise.resolve<PatientDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDetailResult>(null as any);
    }

    /**
     * 透析类 - 患者血管通路明细 - 导出
     * @param type (optional)
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional)
     * @param added (optional) 血管通路：0 新增血管通路：1
     * @return Success
     */
    exportGET96(type: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined, added: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/QueryPatientVascularAccessDetial/Export?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (added === null)
            throw new Error("The parameter 'added' cannot be null.");
        else if (added !== undefined)
            url_ += "added=" + encodeURIComponent("" + added) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET96(_response));
        });
    }

    protected processExportGET96(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 - 通路转归
     * @param dateStr (optional)
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    cureVascularAccessChangeCause(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureVascularAccessChangeCauseResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/CureVascularAccessChangeCause?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureVascularAccessChangeCause(_response));
        });
    }

    protected processCureVascularAccessChangeCause(response: AxiosResponse): Promise<CureVascularAccessChangeCauseResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureVascularAccessChangeCauseResult.fromJS(resultData200);
            return Promise.resolve<CureVascularAccessChangeCauseResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureVascularAccessChangeCauseResult>(null as any);
    }

    /**
     * 透析类 - 通路转归 - 导出
     * @param dateStr (optional)
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET97(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/CureVascularAccessChangeCause/Export?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET97(_response));
        });
    }

    protected processExportGET97(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 - 通路转归详细
     * @param type (optional) 通路转归原因类型
     * @param date (optional) 查询日期（yyyy-MM-dd, yyyy-MM, yyyy）
     * @param filter (optional) 查询条件
     * @return Success
     */
    cureVascularAccessChangeCauseDetail(type: string | undefined, date: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureVascularAccessDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/CureVascularAccessChangeCauseDetail?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureVascularAccessChangeCauseDetail(_response));
        });
    }

    protected processCureVascularAccessChangeCauseDetail(response: AxiosResponse): Promise<CureVascularAccessDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureVascularAccessDetailResult.fromJS(resultData200);
            return Promise.resolve<CureVascularAccessDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureVascularAccessDetailResult>(null as any);
    }

    /**
     * 透析类 - 通路转归详细 - 导出
     * @param type (optional) 通路转归原因类型
     * @param date (optional) 查询日期（yyyy-MM-dd, yyyy-MM, yyyy)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET98(type: string | undefined, date: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/CureVascularAccessChangeCauseDetail/Export?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET98(_response));
        });
    }

    protected processExportGET98(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 - 患者透析次数 - 汇总
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional)
     * @param key (optional)
     * @return Success
     */
    patientTimesOfDialysis(startDate: string | undefined, endDate: string | undefined, filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientTimesOfDialysisViewResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/PatientTimesOfDialysis?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientTimesOfDialysis(_response));
        });
    }

    protected processPatientTimesOfDialysis(response: AxiosResponse): Promise<PatientTimesOfDialysisViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientTimesOfDialysisViewResult.fromJS(resultData200);
            return Promise.resolve<PatientTimesOfDialysisViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientTimesOfDialysisViewResult>(null as any);
    }

    /**
     * 患者类 - 患者透析次数 - 汇总 - 导出
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional) 过滤条件
     * @param key (optional)
     * @return Success
     */
    exportGET99(startDate: string | undefined, endDate: string | undefined, filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/PatientTimesOfDialysis/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET99(_response));
        });
    }

    protected processExportGET99(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者类 - 患者透析次数 -  详细
     * @param patientId (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param modeType (optional)
     * @param filter (optional)
     * @return Success
     */
    timesOfDialysisDetail(patientId: string | undefined, startDate: string | undefined, endDate: string | undefined, modeType: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientTimesOfDialysisDetailViewResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/TimesOfDialysisDetail?";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (modeType === null)
            throw new Error("The parameter 'modeType' cannot be null.");
        else if (modeType !== undefined)
            url_ += "ModeType=" + encodeURIComponent("" + modeType) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTimesOfDialysisDetail(_response));
        });
    }

    protected processTimesOfDialysisDetail(response: AxiosResponse): Promise<PatientTimesOfDialysisDetailViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientTimesOfDialysisDetailViewResult.fromJS(resultData200);
            return Promise.resolve<PatientTimesOfDialysisDetailViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientTimesOfDialysisDetailViewResult>(null as any);
    }

    /**
     * 患者类 - 患者透析次数 - 详细 - 导出
     * @param patientId (optional) 日期
     * @param startDate (optional)
     * @param endDate (optional)
     * @param modeType (optional)
     * @param filter (optional) 过滤条件
     * @return Success
     */
    exportGET100(patientId: string | undefined, startDate: string | undefined, endDate: string | undefined, modeType: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/TimesOfDialysisDetail/Export?";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (modeType === null)
            throw new Error("The parameter 'modeType' cannot be null.");
        else if (modeType !== undefined)
            url_ += "ModeType=" + encodeURIComponent("" + modeType) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET100(_response));
        });
    }

    protected processExportGET100(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 透析次数
     * @param dateStr (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional)
     * @return Success
     */
    frequency(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureFrequencyViewResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/Frequency?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFrequency(_response));
        });
    }

    protected processFrequency(response: AxiosResponse): Promise<CureFrequencyViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureFrequencyViewResult.fromJS(resultData200);
            return Promise.resolve<CureFrequencyViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureFrequencyViewResult>(null as any);
    }

    /**
     * 治疗管理
     * @param dateStr (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional)
     * @return Success
     */
    management(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureManagementViewResultEntry> {
        let url_ = this.baseUrl + "/api/Report/Cure/Management?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processManagement(_response));
        });
    }

    protected processManagement(response: AxiosResponse): Promise<CureManagementViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureManagementViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureManagementViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureManagementViewResultEntry>(null as any);
    }

    /**
     * 排床统计(患者)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional)
     * @param key (optional)
     * @return Success
     */
    patientTimesOfDialysisForSchedule(startDate: string | undefined, endDate: string | undefined, filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientTimesOfDialysisViewResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/PatientTimesOfDialysisForSchedule?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientTimesOfDialysisForSchedule(_response));
        });
    }

    protected processPatientTimesOfDialysisForSchedule(response: AxiosResponse): Promise<PatientTimesOfDialysisViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientTimesOfDialysisViewResult.fromJS(resultData200);
            return Promise.resolve<PatientTimesOfDialysisViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientTimesOfDialysisViewResult>(null as any);
    }

    /**
     * 排床统计(患者) - 导出
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional) 过滤条件
     * @param key (optional)
     * @return Success
     */
    exportGET101(startDate: string | undefined, endDate: string | undefined, filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/PatientTimesOfDialysisForSchedule/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET101(_response));
        });
    }

    protected processExportGET101(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 排床统计(患者) -  详细
     * @param patientId (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional)
     * @return Success
     */
    timesOfDialysisDetailForSchedule(patientId: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientTimesOfDialysisDetailViewResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/TimesOfDialysisDetailForSchedule?";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTimesOfDialysisDetailForSchedule(_response));
        });
    }

    protected processTimesOfDialysisDetailForSchedule(response: AxiosResponse): Promise<PatientTimesOfDialysisDetailViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientTimesOfDialysisDetailViewResult.fromJS(resultData200);
            return Promise.resolve<PatientTimesOfDialysisDetailViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientTimesOfDialysisDetailViewResult>(null as any);
    }

    /**
     * 排床统计(患者) -  详细 - 导出
     * @param patientId (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional)
     * @return Success
     */
    exportGET102(patientId: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/TimesOfDialysisDetailForSchedule/Export?";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET102(_response));
        });
    }

    protected processExportGET102(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 医嘱用法统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param patientKey (optional) 患者
     * @param usage (optional) 用法
     * @param filter (optional) 查询条件
     * @return Success
     */
    dialysisOrder(startDate: string | undefined, endDate: string | undefined, patientKey: string | undefined, usage: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DialysisOrderResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/DialysisOrder?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (patientKey === null)
            throw new Error("The parameter 'patientKey' cannot be null.");
        else if (patientKey !== undefined)
            url_ += "patientKey=" + encodeURIComponent("" + patientKey) + "&";
        if (usage === null)
            throw new Error("The parameter 'usage' cannot be null.");
        else if (usage !== undefined)
            url_ += "usage=" + encodeURIComponent("" + usage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDialysisOrder(_response));
        });
    }

    protected processDialysisOrder(response: AxiosResponse): Promise<DialysisOrderResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DialysisOrderResult.fromJS(resultData200);
            return Promise.resolve<DialysisOrderResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DialysisOrderResult>(null as any);
    }

    /**
     * 透析类 -- 医嘱用法统计 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param patientKey (optional) 患者
     * @param usage (optional) 用法
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET103(startDate: string | undefined, endDate: string | undefined, patientKey: string | undefined, usage: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/DialysisOrder/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (patientKey === null)
            throw new Error("The parameter 'patientKey' cannot be null.");
        else if (patientKey !== undefined)
            url_ += "patientKey=" + encodeURIComponent("" + patientKey) + "&";
        if (usage === null)
            throw new Error("The parameter 'usage' cannot be null.");
        else if (usage !== undefined)
            url_ += "usage=" + encodeURIComponent("" + usage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET103(_response));
        });
    }

    protected processExportGET103(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 医嘱用法统计 -- 详情
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param patientId (optional) 患者标识
     * @param usage (optional) 用法
     * @param filter (optional) 查询条件
     * @return Success
     */
    dialysisOrderDetail(startDate: string | undefined, endDate: string | undefined, patientId: string | undefined, usage: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DialysisOrderDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/DialysisOrderDetail?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        if (usage === null)
            throw new Error("The parameter 'usage' cannot be null.");
        else if (usage !== undefined)
            url_ += "usage=" + encodeURIComponent("" + usage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDialysisOrderDetail(_response));
        });
    }

    protected processDialysisOrderDetail(response: AxiosResponse): Promise<DialysisOrderDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DialysisOrderDetailResult.fromJS(resultData200);
            return Promise.resolve<DialysisOrderDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DialysisOrderDetailResult>(null as any);
    }

    /**
     * 透析类 -- 医嘱用法统计 -- 详情 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param patientId (optional) 患者标识
     * @param usage (optional) 用法
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET104(startDate: string | undefined, endDate: string | undefined, patientId: string | undefined, usage: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Cure/DialysisOrderDetail/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        if (usage === null)
            throw new Error("The parameter 'usage' cannot be null.");
        else if (usage !== undefined)
            url_ += "usage=" + encodeURIComponent("" + usage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET104(_response));
        });
    }

    protected processExportGET104(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析类 -- 门诊血液透析患者月报表
     * @param year (optional)
     * @param month (optional)
     * @param source (optional)
     * @param filter (optional)
     * @return Success
     */
    patientDialysis(year: number | undefined, month: number | undefined, source: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientDialysisViewResultEntry> {
        let url_ = this.baseUrl + "/api/Report/Cure/PatientDialysis?";
        if (year === null)
            throw new Error("The parameter 'year' cannot be null.");
        else if (year !== undefined)
            url_ += "year=" + encodeURIComponent("" + year) + "&";
        if (month === null)
            throw new Error("The parameter 'month' cannot be null.");
        else if (month !== undefined)
            url_ += "month=" + encodeURIComponent("" + month) + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "source=" + encodeURIComponent("" + source) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDialysis(_response));
        });
    }

    protected processPatientDialysis(response: AxiosResponse): Promise<PatientDialysisViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDialysisViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientDialysisViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDialysisViewResultEntry>(null as any);
    }

    /**
     * 化验类 -- 年度统计
     * @param year (optional) 年份:yyyy
     * @param itemCode (optional) 检验子项编码
     * @param patientTags (optional) 患者标签(多选 ; 分隔)
     * @param dialysisState (optional) 患者透析状态(临时/长期)
     * @param resultValue (optional) 结果值(最新/最大/最小/平均)
     * @param complianceraterange (optional) 达标率范围
     * @param filter (optional) 查询条件
     * @return Success
     */
    year(year: string | undefined, itemCode: string | undefined, patientTags: string | undefined, dialysisState: string | undefined, resultValue: string | undefined, complianceraterange: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<TestReportItemResult> {
        let url_ = this.baseUrl + "/api/Report/Test/Year?";
        if (year === null)
            throw new Error("The parameter 'year' cannot be null.");
        else if (year !== undefined)
            url_ += "year=" + encodeURIComponent("" + year) + "&";
        if (itemCode === null)
            throw new Error("The parameter 'itemCode' cannot be null.");
        else if (itemCode !== undefined)
            url_ += "itemCode=" + encodeURIComponent("" + itemCode) + "&";
        if (patientTags === null)
            throw new Error("The parameter 'patientTags' cannot be null.");
        else if (patientTags !== undefined)
            url_ += "patientTags=" + encodeURIComponent("" + patientTags) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (resultValue === null)
            throw new Error("The parameter 'resultValue' cannot be null.");
        else if (resultValue !== undefined)
            url_ += "resultValue=" + encodeURIComponent("" + resultValue) + "&";
        if (complianceraterange === null)
            throw new Error("The parameter 'complianceraterange' cannot be null.");
        else if (complianceraterange !== undefined)
            url_ += "complianceraterange=" + encodeURIComponent("" + complianceraterange) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processYear(_response));
        });
    }

    protected processYear(response: AxiosResponse): Promise<TestReportItemResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TestReportItemResult.fromJS(resultData200);
            return Promise.resolve<TestReportItemResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TestReportItemResult>(null as any);
    }

    /**
     * 化验类 -- 统计
     * @param format (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param itemCode (optional)
     * @param resultValue (optional)
     * @param complianceraterange (optional)
     * @param filter (optional)
     * @return Success
     */
    statistics(format: string | undefined, startDate: string | undefined, endDate: string | undefined, itemCode: string | undefined, resultValue: string | undefined, complianceraterange: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<TestReportItemViewResult> {
        let url_ = this.baseUrl + "/api/Report/Test/Statistics?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (itemCode === null)
            throw new Error("The parameter 'itemCode' cannot be null.");
        else if (itemCode !== undefined)
            url_ += "itemCode=" + encodeURIComponent("" + itemCode) + "&";
        if (resultValue === null)
            throw new Error("The parameter 'resultValue' cannot be null.");
        else if (resultValue !== undefined)
            url_ += "resultValue=" + encodeURIComponent("" + resultValue) + "&";
        if (complianceraterange === null)
            throw new Error("The parameter 'complianceraterange' cannot be null.");
        else if (complianceraterange !== undefined)
            url_ += "complianceraterange=" + encodeURIComponent("" + complianceraterange) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processStatistics(_response));
        });
    }

    protected processStatistics(response: AxiosResponse): Promise<TestReportItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TestReportItemViewResult.fromJS(resultData200);
            return Promise.resolve<TestReportItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TestReportItemViewResult>(null as any);
    }

    /**
     * 化验类 -- 统计明细
     * @param type (optional)
     * @param format (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param itemCode (optional)
     * @param resultValue (optional)
     * @param complianceraterange (optional)
     * @param filter (optional)
     * @return Success
     */
    detail12(type: string | undefined, format: string | undefined, startDate: string | undefined, endDate: string | undefined, itemCode: string | undefined, resultValue: string | undefined, complianceraterange: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<TestReportItemDetailViewResult> {
        let url_ = this.baseUrl + "/api/Report/Test/Detail?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (itemCode === null)
            throw new Error("The parameter 'itemCode' cannot be null.");
        else if (itemCode !== undefined)
            url_ += "itemCode=" + encodeURIComponent("" + itemCode) + "&";
        if (resultValue === null)
            throw new Error("The parameter 'resultValue' cannot be null.");
        else if (resultValue !== undefined)
            url_ += "resultValue=" + encodeURIComponent("" + resultValue) + "&";
        if (complianceraterange === null)
            throw new Error("The parameter 'complianceraterange' cannot be null.");
        else if (complianceraterange !== undefined)
            url_ += "complianceraterange=" + encodeURIComponent("" + complianceraterange) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetail12(_response));
        });
    }

    protected processDetail12(response: AxiosResponse): Promise<TestReportItemDetailViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TestReportItemDetailViewResult.fromJS(resultData200);
            return Promise.resolve<TestReportItemDetailViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TestReportItemDetailViewResult>(null as any);
    }

    /**
     * 化验类 -- 统计明细 导出
     * @param type (optional)
     * @param format (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param itemCode (optional)
     * @param resultValue (optional)
     * @param complianceraterange (optional)
     * @param filter (optional)
     * @return Success
     */
    exportGET105(type: string | undefined, format: string | undefined, startDate: string | undefined, endDate: string | undefined, itemCode: string | undefined, resultValue: string | undefined, complianceraterange: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Test/Detail/Export?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (itemCode === null)
            throw new Error("The parameter 'itemCode' cannot be null.");
        else if (itemCode !== undefined)
            url_ += "itemCode=" + encodeURIComponent("" + itemCode) + "&";
        if (resultValue === null)
            throw new Error("The parameter 'resultValue' cannot be null.");
        else if (resultValue !== undefined)
            url_ += "resultValue=" + encodeURIComponent("" + resultValue) + "&";
        if (complianceraterange === null)
            throw new Error("The parameter 'complianceraterange' cannot be null.");
        else if (complianceraterange !== undefined)
            url_ += "complianceraterange=" + encodeURIComponent("" + complianceraterange) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET105(_response));
        });
    }

    protected processExportGET105(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 化验类 -- 统计 -- 更新达标范围
     * @param complianceRateRange (optional)
     * @param body (optional)
     * @return Success
     */
    updateMapLisComplianceRateRange(complianceRateRange: string | undefined, body: string[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Test/UpdateMapLisComplianceRateRange?";
        if (complianceRateRange === null)
            throw new Error("The parameter 'complianceRateRange' cannot be null.");
        else if (complianceRateRange !== undefined)
            url_ += "ComplianceRateRange=" + encodeURIComponent("" + complianceRateRange) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdateMapLisComplianceRateRange(_response));
        });
    }

    protected processUpdateMapLisComplianceRateRange(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 化验类 -- 年度统计 -- 导出
     * @param year (optional) 年份:yyyy
     * @param itemCode (optional) 检验子项编码
     * @param patientTags (optional) 患者标签(多选 ; 分隔)
     * @param dialysisState (optional) 患者透析状态
     * @param resultValue (optional) 结果值(最新/最大/最小/平均)
     * @param complianceraterange (optional) 达标率范围
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET106(year: string | undefined, itemCode: string | undefined, patientTags: string | undefined, dialysisState: string | undefined, resultValue: string | undefined, complianceraterange: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Test/Year/Export?";
        if (year === null)
            throw new Error("The parameter 'year' cannot be null.");
        else if (year !== undefined)
            url_ += "year=" + encodeURIComponent("" + year) + "&";
        if (itemCode === null)
            throw new Error("The parameter 'itemCode' cannot be null.");
        else if (itemCode !== undefined)
            url_ += "itemCode=" + encodeURIComponent("" + itemCode) + "&";
        if (patientTags === null)
            throw new Error("The parameter 'patientTags' cannot be null.");
        else if (patientTags !== undefined)
            url_ += "patientTags=" + encodeURIComponent("" + patientTags) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (resultValue === null)
            throw new Error("The parameter 'resultValue' cannot be null.");
        else if (resultValue !== undefined)
            url_ += "resultValue=" + encodeURIComponent("" + resultValue) + "&";
        if (complianceraterange === null)
            throw new Error("The parameter 'complianceraterange' cannot be null.");
        else if (complianceraterange !== undefined)
            url_ += "complianceraterange=" + encodeURIComponent("" + complianceraterange) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET106(_response));
        });
    }

    protected processExportGET106(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 化验类 -- 统计 -- 导出
     * @param format (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param itemCode (optional)
     * @param resultValue (optional)
     * @param complianceraterange (optional)
     * @param filter (optional)
     * @return Success
     */
    exportGET107(format: string | undefined, startDate: string | undefined, endDate: string | undefined, itemCode: string | undefined, resultValue: string | undefined, complianceraterange: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Test/Statistics/Export?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (itemCode === null)
            throw new Error("The parameter 'itemCode' cannot be null.");
        else if (itemCode !== undefined)
            url_ += "itemCode=" + encodeURIComponent("" + itemCode) + "&";
        if (resultValue === null)
            throw new Error("The parameter 'resultValue' cannot be null.");
        else if (resultValue !== undefined)
            url_ += "resultValue=" + encodeURIComponent("" + resultValue) + "&";
        if (complianceraterange === null)
            throw new Error("The parameter 'complianceraterange' cannot be null.");
        else if (complianceraterange !== undefined)
            url_ += "complianceraterange=" + encodeURIComponent("" + complianceraterange) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET107(_response));
        });
    }

    protected processExportGET107(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 化验类 -- 年度统计详情/阶段统计
     * @param month (optional) 月份:yyyy-MM -- 年度统计详情必传
     * @param itemCode (optional) 检验子项编码
     * @param patientTags (optional) 患者标签(多选 ; 分隔)
     * @param dialysisState (optional) 患者透析状态
     * @param resultValue (optional) 结果值(最新/最大/最小/平均)
     * @param complianceraterange (optional) 达标率范围
     * @param startDate (optional) 开始日期(yyyy-MM-dd) -- 阶段统计时必传
     * @param endDate (optional) 结束日期(yyyy-MM-dd) -- 阶段统计时必传
     * @param filter (optional) 查询条件
     * @return Success
     */
    type2(month: string | undefined, itemCode: string | undefined, patientTags: string | undefined, dialysisState: string | undefined, resultValue: string | undefined, complianceraterange: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<TestTypeReportResult> {
        let url_ = this.baseUrl + "/api/Report/Test/Type?";
        if (month === null)
            throw new Error("The parameter 'month' cannot be null.");
        else if (month !== undefined)
            url_ += "month=" + encodeURIComponent("" + month) + "&";
        if (itemCode === null)
            throw new Error("The parameter 'itemCode' cannot be null.");
        else if (itemCode !== undefined)
            url_ += "itemCode=" + encodeURIComponent("" + itemCode) + "&";
        if (patientTags === null)
            throw new Error("The parameter 'patientTags' cannot be null.");
        else if (patientTags !== undefined)
            url_ += "patientTags=" + encodeURIComponent("" + patientTags) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (resultValue === null)
            throw new Error("The parameter 'resultValue' cannot be null.");
        else if (resultValue !== undefined)
            url_ += "resultValue=" + encodeURIComponent("" + resultValue) + "&";
        if (complianceraterange === null)
            throw new Error("The parameter 'complianceraterange' cannot be null.");
        else if (complianceraterange !== undefined)
            url_ += "complianceraterange=" + encodeURIComponent("" + complianceraterange) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processType2(_response));
        });
    }

    protected processType2(response: AxiosResponse): Promise<TestTypeReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TestTypeReportResult.fromJS(resultData200);
            return Promise.resolve<TestTypeReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TestTypeReportResult>(null as any);
    }

    /**
     * 化验类 -- 年度统计详情/阶段统计 -- 导出
     * @param month (optional) 月份:yyyy-MM -- 年度统计详情必传
     * @param itemCode (optional) 检验子项编码
     * @param patientTags (optional) 患者标签(多选 ; 分隔)
     * @param dialysisState (optional) 患者透析状态
     * @param resultValue (optional) 结果值(最新/最大/最小/平均)
     * @param complianceraterange (optional) 达标率范围
     * @param startDate (optional) 开始日期(yyyy-MM-dd) -- 阶段统计时必传
     * @param endDate (optional) 结束日期(yyyy-MM-dd) -- 阶段统计时必传
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET108(month: string | undefined, itemCode: string | undefined, patientTags: string | undefined, dialysisState: string | undefined, resultValue: string | undefined, complianceraterange: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Test/Type/Export?";
        if (month === null)
            throw new Error("The parameter 'month' cannot be null.");
        else if (month !== undefined)
            url_ += "month=" + encodeURIComponent("" + month) + "&";
        if (itemCode === null)
            throw new Error("The parameter 'itemCode' cannot be null.");
        else if (itemCode !== undefined)
            url_ += "itemCode=" + encodeURIComponent("" + itemCode) + "&";
        if (patientTags === null)
            throw new Error("The parameter 'patientTags' cannot be null.");
        else if (patientTags !== undefined)
            url_ += "patientTags=" + encodeURIComponent("" + patientTags) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (resultValue === null)
            throw new Error("The parameter 'resultValue' cannot be null.");
        else if (resultValue !== undefined)
            url_ += "resultValue=" + encodeURIComponent("" + resultValue) + "&";
        if (complianceraterange === null)
            throw new Error("The parameter 'complianceraterange' cannot be null.");
        else if (complianceraterange !== undefined)
            url_ += "complianceraterange=" + encodeURIComponent("" + complianceraterange) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET108(_response));
        });
    }

    protected processExportGET108(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 化验类 -- 年度统计详情/阶段统计 -- 详情
     * @param month (optional) 月份:yyyy-MM -- 年度统计详情必传
     * @param type (optional) 达标/未达标/超标
     * @param itemCode (optional) 检验子项编码
     * @param patientTags (optional) 患者标签(多选 ; 分隔)
     * @param dialysisState (optional) 患者透析状态
     * @param resultValue (optional) 结果值(最新/最大/最小/平均)
     * @param complianceraterange (optional) 达标率范围
     * @param startDate (optional) 开始日期(yyyy-MM-dd) -- 阶段统计时必传
     * @param endDate (optional) 结束日期(yyyy-MM-dd) -- 阶段统计时必传
     * @param filter (optional) 查询条件
     * @return Success
     */
    typeDetail2(month: string | undefined, type: string | undefined, itemCode: string | undefined, patientTags: string | undefined, dialysisState: string | undefined, resultValue: string | undefined, complianceraterange: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<TestTypeDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Test/TypeDetail?";
        if (month === null)
            throw new Error("The parameter 'month' cannot be null.");
        else if (month !== undefined)
            url_ += "month=" + encodeURIComponent("" + month) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (itemCode === null)
            throw new Error("The parameter 'itemCode' cannot be null.");
        else if (itemCode !== undefined)
            url_ += "itemCode=" + encodeURIComponent("" + itemCode) + "&";
        if (patientTags === null)
            throw new Error("The parameter 'patientTags' cannot be null.");
        else if (patientTags !== undefined)
            url_ += "patientTags=" + encodeURIComponent("" + patientTags) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (resultValue === null)
            throw new Error("The parameter 'resultValue' cannot be null.");
        else if (resultValue !== undefined)
            url_ += "resultValue=" + encodeURIComponent("" + resultValue) + "&";
        if (complianceraterange === null)
            throw new Error("The parameter 'complianceraterange' cannot be null.");
        else if (complianceraterange !== undefined)
            url_ += "complianceraterange=" + encodeURIComponent("" + complianceraterange) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTypeDetail2(_response));
        });
    }

    protected processTypeDetail2(response: AxiosResponse): Promise<TestTypeDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TestTypeDetailResult.fromJS(resultData200);
            return Promise.resolve<TestTypeDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TestTypeDetailResult>(null as any);
    }

    /**
     * 化验类 -- 年度统计详情/阶段统计 -- 详情 -- 导出
     * @param month (optional) 月份:yyyy-MM -- 年度统计详情必传
     * @param type (optional) 达标/未达标/超标
     * @param itemCode (optional) 检验子项编码
     * @param patientTags (optional) 患者标签(多选 ; 分隔)
     * @param dialysisState (optional) 患者透析状态
     * @param startDate (optional) 开始日期(yyyy-MM-dd) -- 阶段统计时必传
     * @param endDate (optional) 结束日期(yyyy-MM-dd) -- 阶段统计时必传
     * @param resultValue (optional) 结果值(最新/最大/最小/平均)
     * @param complianceraterange (optional) 达标率范围
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET109(month: string | undefined, type: string | undefined, itemCode: string | undefined, patientTags: string | undefined, dialysisState: string | undefined, startDate: string | undefined, endDate: string | undefined, resultValue: string | undefined, complianceraterange: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Test/TypeDetail/Export?";
        if (month === null)
            throw new Error("The parameter 'month' cannot be null.");
        else if (month !== undefined)
            url_ += "month=" + encodeURIComponent("" + month) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (itemCode === null)
            throw new Error("The parameter 'itemCode' cannot be null.");
        else if (itemCode !== undefined)
            url_ += "itemCode=" + encodeURIComponent("" + itemCode) + "&";
        if (patientTags === null)
            throw new Error("The parameter 'patientTags' cannot be null.");
        else if (patientTags !== undefined)
            url_ += "patientTags=" + encodeURIComponent("" + patientTags) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (resultValue === null)
            throw new Error("The parameter 'resultValue' cannot be null.");
        else if (resultValue !== undefined)
            url_ += "resultValue=" + encodeURIComponent("" + resultValue) + "&";
        if (complianceraterange === null)
            throw new Error("The parameter 'complianceraterange' cannot be null.");
        else if (complianceraterange !== undefined)
            url_ += "complianceraterange=" + encodeURIComponent("" + complianceraterange) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET109(_response));
        });
    }

    protected processExportGET109(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 化验类 -- 分组统计
     * @param itemCode (optional) 检验子项编码
     * @param patientTags (optional) 患者标签(多选 ; 分隔)
     * @param dialysisState (optional) 患者透析状态
     * @param resultValue (optional) 结果值(最新/最大/最小/平均)
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    group(itemCode: string | undefined, patientTags: string | undefined, dialysisState: string | undefined, resultValue: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<TestGroupTypeResult> {
        let url_ = this.baseUrl + "/api/Report/Test/Group?";
        if (itemCode === null)
            throw new Error("The parameter 'itemCode' cannot be null.");
        else if (itemCode !== undefined)
            url_ += "itemCode=" + encodeURIComponent("" + itemCode) + "&";
        if (patientTags === null)
            throw new Error("The parameter 'patientTags' cannot be null.");
        else if (patientTags !== undefined)
            url_ += "patientTags=" + encodeURIComponent("" + patientTags) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (resultValue === null)
            throw new Error("The parameter 'resultValue' cannot be null.");
        else if (resultValue !== undefined)
            url_ += "resultValue=" + encodeURIComponent("" + resultValue) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGroup(_response));
        });
    }

    protected processGroup(response: AxiosResponse): Promise<TestGroupTypeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TestGroupTypeResult.fromJS(resultData200);
            return Promise.resolve<TestGroupTypeResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TestGroupTypeResult>(null as any);
    }

    /**
     * 化验类 -- 分组统计 -- 导出
     * @param itemCode (optional) 检验子项编码
     * @param patientTags (optional) 患者标签(多选 ; 分隔)
     * @param dialysisState (optional) 患者透析状态
     * @param resultValue (optional) 结果值(最新/最大/最小/平均)
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET110(itemCode: string | undefined, patientTags: string | undefined, dialysisState: string | undefined, resultValue: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Test/Group/Export?";
        if (itemCode === null)
            throw new Error("The parameter 'itemCode' cannot be null.");
        else if (itemCode !== undefined)
            url_ += "itemCode=" + encodeURIComponent("" + itemCode) + "&";
        if (patientTags === null)
            throw new Error("The parameter 'patientTags' cannot be null.");
        else if (patientTags !== undefined)
            url_ += "patientTags=" + encodeURIComponent("" + patientTags) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (resultValue === null)
            throw new Error("The parameter 'resultValue' cannot be null.");
        else if (resultValue !== undefined)
            url_ += "resultValue=" + encodeURIComponent("" + resultValue) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET110(_response));
        });
    }

    protected processExportGET110(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 化验类 -- 分组详情
     * @param group (optional) 分组类型
     * @param itemCode (optional) 检验子项编码
     * @param patientTags (optional) 患者标签(多选 ; 分隔)
     * @param dialysisState (optional) 患者透析状态
     * @param resultValue (optional) 结果值(最新/最大/最小/平均)
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    groupDetail(group: string | undefined, itemCode: string | undefined, patientTags: string | undefined, dialysisState: string | undefined, resultValue: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<TestTypeDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Test/GroupDetail?";
        if (group === null)
            throw new Error("The parameter 'group' cannot be null.");
        else if (group !== undefined)
            url_ += "group=" + encodeURIComponent("" + group) + "&";
        if (itemCode === null)
            throw new Error("The parameter 'itemCode' cannot be null.");
        else if (itemCode !== undefined)
            url_ += "itemCode=" + encodeURIComponent("" + itemCode) + "&";
        if (patientTags === null)
            throw new Error("The parameter 'patientTags' cannot be null.");
        else if (patientTags !== undefined)
            url_ += "patientTags=" + encodeURIComponent("" + patientTags) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (resultValue === null)
            throw new Error("The parameter 'resultValue' cannot be null.");
        else if (resultValue !== undefined)
            url_ += "resultValue=" + encodeURIComponent("" + resultValue) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGroupDetail(_response));
        });
    }

    protected processGroupDetail(response: AxiosResponse): Promise<TestTypeDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TestTypeDetailResult.fromJS(resultData200);
            return Promise.resolve<TestTypeDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TestTypeDetailResult>(null as any);
    }

    /**
     * 化验类 -- 分组详情 -- 导出
     * @param group (optional) 分组类型
     * @param itemCode (optional) 检验子项编码
     * @param patientTags (optional) 患者标签(多选 ; 分隔)
     * @param dialysisState (optional) 患者透析状态
     * @param resultValue (optional) 结果值(最新/最大/最小/平均)
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET111(group: string | undefined, itemCode: string | undefined, patientTags: string | undefined, dialysisState: string | undefined, resultValue: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Test/GroupDetail/Export?";
        if (group === null)
            throw new Error("The parameter 'group' cannot be null.");
        else if (group !== undefined)
            url_ += "group=" + encodeURIComponent("" + group) + "&";
        if (itemCode === null)
            throw new Error("The parameter 'itemCode' cannot be null.");
        else if (itemCode !== undefined)
            url_ += "itemCode=" + encodeURIComponent("" + itemCode) + "&";
        if (patientTags === null)
            throw new Error("The parameter 'patientTags' cannot be null.");
        else if (patientTags !== undefined)
            url_ += "patientTags=" + encodeURIComponent("" + patientTags) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (resultValue === null)
            throw new Error("The parameter 'resultValue' cannot be null.");
        else if (resultValue !== undefined)
            url_ += "resultValue=" + encodeURIComponent("" + resultValue) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET111(_response));
        });
    }

    protected processExportGET111(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 化验类 -- 化验结果统计
     * @param itemCodes (optional) 检验子项编码
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional)
     * @return Success
     */
    result(itemCodes: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<ExpandoObjectResult> {
        let url_ = this.baseUrl + "/api/Report/Test/Result?";
        if (itemCodes === null)
            throw new Error("The parameter 'itemCodes' cannot be null.");
        else if (itemCodes !== undefined)
            url_ += "itemCodes=" + encodeURIComponent("" + itemCodes) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processResult(_response));
        });
    }

    protected processResult(response: AxiosResponse): Promise<ExpandoObjectResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ExpandoObjectResult.fromJS(resultData200);
            return Promise.resolve<ExpandoObjectResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ExpandoObjectResult>(null as any);
    }

    /**
     * 化验类 -- 化验结果统计
     * @param itemCodes (optional) 检验子项编码
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional)
     * @return Success
     */
    exportGET112(itemCodes: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Test/Result/Export?";
        if (itemCodes === null)
            throw new Error("The parameter 'itemCodes' cannot be null.");
        else if (itemCodes !== undefined)
            url_ += "itemCodes=" + encodeURIComponent("" + itemCodes) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET112(_response));
        });
    }

    protected processExportGET112(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 获取感染筛查患者
     * @param filter (optional)
     * @param key (optional)
     * @param type (optional)
     * @param inBeginDate (optional)
     * @param inEndDate (optional)
     * @param prognosisState (optional) 转归状态
     * @return Success
     */
    queryInfectionPatients(filter: string | undefined, key: string | undefined, type: string | undefined, inBeginDate: dayjs.Dayjs | undefined, inEndDate: dayjs.Dayjs | undefined, prognosisState: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientDataViewResult> {
        let url_ = this.baseUrl + "/api/Report/Test/QueryInfectionPatients?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (inBeginDate === null)
            throw new Error("The parameter 'inBeginDate' cannot be null.");
        else if (inBeginDate !== undefined)
            url_ += "inBeginDate=" + encodeURIComponent(inBeginDate ? "" + inBeginDate.toISOString() : "") + "&";
        if (inEndDate === null)
            throw new Error("The parameter 'inEndDate' cannot be null.");
        else if (inEndDate !== undefined)
            url_ += "inEndDate=" + encodeURIComponent(inEndDate ? "" + inEndDate.toISOString() : "") + "&";
        if (prognosisState === null)
            throw new Error("The parameter 'prognosisState' cannot be null.");
        else if (prognosisState !== undefined)
            url_ += "prognosisState=" + encodeURIComponent("" + prognosisState) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryInfectionPatients(_response));
        });
    }

    protected processQueryInfectionPatients(response: AxiosResponse): Promise<PatientDataViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDataViewResult.fromJS(resultData200);
            return Promise.resolve<PatientDataViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDataViewResult>(null as any);
    }

    /**
     * 获取患者感染筛查检验数据
     * @param filter (optional)
     * @param reportBeginDate (optional)
     * @param reportEndDate (optional)
     * @param patientId (optional)
     * @param rangeStart (optional) 检查时间范围开始时间
     * @param rangeEnd (optional) 检查时间范围结束时间
     * @return Success
     */
    queryInfectionLisReportItems(filter: string | undefined, reportBeginDate: dayjs.Dayjs | undefined, reportEndDate: dayjs.Dayjs | undefined, patientId: string | undefined, rangeStart: dayjs.Dayjs | undefined, rangeEnd: dayjs.Dayjs | undefined , cancelToken?: CancelToken | undefined): Promise<PatientInfectionScreenViewResult> {
        let url_ = this.baseUrl + "/api/Report/Test/QueryInfectionLisReportItems?";
        if (reportBeginDate === null)
            throw new Error("The parameter 'reportBeginDate' cannot be null.");
        else if (reportBeginDate !== undefined)
            url_ += "reportBeginDate=" + encodeURIComponent(reportBeginDate ? "" + reportBeginDate.toISOString() : "") + "&";
        if (reportEndDate === null)
            throw new Error("The parameter 'reportEndDate' cannot be null.");
        else if (reportEndDate !== undefined)
            url_ += "reportEndDate=" + encodeURIComponent(reportEndDate ? "" + reportEndDate.toISOString() : "") + "&";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        if (rangeStart === null)
            throw new Error("The parameter 'rangeStart' cannot be null.");
        else if (rangeStart !== undefined)
            url_ += "rangeStart=" + encodeURIComponent(rangeStart ? "" + rangeStart.toISOString() : "") + "&";
        if (rangeEnd === null)
            throw new Error("The parameter 'rangeEnd' cannot be null.");
        else if (rangeEnd !== undefined)
            url_ += "rangeEnd=" + encodeURIComponent(rangeEnd ? "" + rangeEnd.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryInfectionLisReportItems(_response));
        });
    }

    protected processQueryInfectionLisReportItems(response: AxiosResponse): Promise<PatientInfectionScreenViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientInfectionScreenViewResult.fromJS(resultData200);
            return Promise.resolve<PatientInfectionScreenViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientInfectionScreenViewResult>(null as any);
    }

    /**
     * 导出患者感染筛查检验数据
     * @param inBeginDate (optional)
     * @param inEndDate (optional)
     * @param reportBeginDate (optional)
     * @param reportEndDate (optional)
     * @param key (optional)
     * @param type (optional)
     * @param prognosisState (optional)
     * @param rangeStart (optional)
     * @param rangeEnd (optional)
     * @param filter (optional)
     * @return Success
     */
    exportInfectionLisReportItems(inBeginDate: dayjs.Dayjs | undefined, inEndDate: dayjs.Dayjs | undefined, reportBeginDate: dayjs.Dayjs | undefined, reportEndDate: dayjs.Dayjs | undefined, key: string | undefined, type: string | undefined, prognosisState: string | undefined, rangeStart: dayjs.Dayjs | undefined, rangeEnd: dayjs.Dayjs | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Test/ExportInfectionLisReportItems?";
        if (inBeginDate === null)
            throw new Error("The parameter 'inBeginDate' cannot be null.");
        else if (inBeginDate !== undefined)
            url_ += "inBeginDate=" + encodeURIComponent(inBeginDate ? "" + inBeginDate.toISOString() : "") + "&";
        if (inEndDate === null)
            throw new Error("The parameter 'inEndDate' cannot be null.");
        else if (inEndDate !== undefined)
            url_ += "inEndDate=" + encodeURIComponent(inEndDate ? "" + inEndDate.toISOString() : "") + "&";
        if (reportBeginDate === null)
            throw new Error("The parameter 'reportBeginDate' cannot be null.");
        else if (reportBeginDate !== undefined)
            url_ += "reportBeginDate=" + encodeURIComponent(reportBeginDate ? "" + reportBeginDate.toISOString() : "") + "&";
        if (reportEndDate === null)
            throw new Error("The parameter 'reportEndDate' cannot be null.");
        else if (reportEndDate !== undefined)
            url_ += "reportEndDate=" + encodeURIComponent(reportEndDate ? "" + reportEndDate.toISOString() : "") + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (prognosisState === null)
            throw new Error("The parameter 'prognosisState' cannot be null.");
        else if (prognosisState !== undefined)
            url_ += "prognosisState=" + encodeURIComponent("" + prognosisState) + "&";
        if (rangeStart === null)
            throw new Error("The parameter 'rangeStart' cannot be null.");
        else if (rangeStart !== undefined)
            url_ += "rangeStart=" + encodeURIComponent(rangeStart ? "" + rangeStart.toISOString() : "") + "&";
        if (rangeEnd === null)
            throw new Error("The parameter 'rangeEnd' cannot be null.");
        else if (rangeEnd !== undefined)
            url_ += "rangeEnd=" + encodeURIComponent(rangeEnd ? "" + rangeEnd.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportInfectionLisReportItems(_response));
        });
    }

    protected processExportInfectionLisReportItems(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 费用类 -- 费用日报/周报/月报
     * @param dateStr (optional) 返回的日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd 周：yyyy-MM-dd ~ yyyy-MM-dd)
     * @param startDate (optional) 开始日期
     * @param endDate (optional) 结束日期
     * @param filter (optional) 查询条件
     * @return Success
     */
    statistics2(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<ChargeStatisticsResult> {
        let url_ = this.baseUrl + "/api/Report/Charge/Statistics?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processStatistics2(_response));
        });
    }

    protected processStatistics2(response: AxiosResponse): Promise<ChargeStatisticsResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ChargeStatisticsResult.fromJS(resultData200);
            return Promise.resolve<ChargeStatisticsResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ChargeStatisticsResult>(null as any);
    }

    /**
     * 费用类 -- 费用日报/周报/月报 -- 导出
     * @param dateStr (optional) 返回的日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd 周：yyyy-MM-dd ~ yyyy-MM-dd)
     * @param startDate (optional) 开始日期
     * @param endDate (optional) 结束日期
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET113(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Charge/Statistics/Export?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET113(_response));
        });
    }

    protected processExportGET113(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 费用类 -- 费用数量统计
     * @param dateStr (optional) 返回的日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd 周：yyyy-MM-dd ~ yyyy-MM-dd)
     * @param startDate (optional) 开始日期
     * @param endDate (optional) 结束日期
     * @param filter (optional) 查询条件
     * @return Success
     */
    deduction(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CostDeductionResult> {
        let url_ = this.baseUrl + "/api/Report/Charge/Deduction?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeduction(_response));
        });
    }

    protected processDeduction(response: AxiosResponse): Promise<CostDeductionResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CostDeductionResult.fromJS(resultData200);
            return Promise.resolve<CostDeductionResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CostDeductionResult>(null as any);
    }

    /**
     * 费用类 -- 费用数量统计
     * @param filter (optional) 查询条件
     * @param date (optional) 返回的日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd 周：yyyy-MM-dd ~ yyyy-MM-dd)
     * @param roomItemListId (optional) 返回的日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd 周：yyyy-MM-dd ~ yyyy-MM-dd)
     * @return Success
     */
    deductionDetail(filter: string | undefined, date: string | undefined, roomItemListId: string | undefined , cancelToken?: CancelToken | undefined): Promise<CostDeductionDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Charge/DeductionDetail?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (roomItemListId === null)
            throw new Error("The parameter 'roomItemListId' cannot be null.");
        else if (roomItemListId !== undefined)
            url_ += "roomItemListId=" + encodeURIComponent("" + roomItemListId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeductionDetail(_response));
        });
    }

    protected processDeductionDetail(response: AxiosResponse): Promise<CostDeductionDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CostDeductionDetailResult.fromJS(resultData200);
            return Promise.resolve<CostDeductionDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CostDeductionDetailResult>(null as any);
    }

    /**
     * 费用类 -- 费用统计
     * @param dateStr (optional) 返回的日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd 周：yyyy-MM-dd ~ yyyy-MM-dd)
     * @param startDate (optional) 开始日期
     * @param endDate (optional) 结束日期
     * @param filter (optional) 查询条件
     * @return Success
     */
    total(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<ChargeTotalResult> {
        let url_ = this.baseUrl + "/api/Report/Charge/Total?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTotal(_response));
        });
    }

    protected processTotal(response: AxiosResponse): Promise<ChargeTotalResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ChargeTotalResult.fromJS(resultData200);
            return Promise.resolve<ChargeTotalResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ChargeTotalResult>(null as any);
    }

    /**
     * 费用类 -- 费用统计-- 导出
     * @param dateStr (optional) 返回的日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd 周：yyyy-MM-dd ~ yyyy-MM-dd)
     * @param startDate (optional) 开始日期
     * @param endDate (optional) 结束日期
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET114(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Charge/Total/Export?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET114(_response));
        });
    }

    protected processExportGET114(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 费用类 -- 费用统计详情
     * @param dateStr (optional) 返回的日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd),目前仅支持yyyy-MM-dd按天返回
     * @param date (optional) 日期（yyyy-MM-dd）
     * @param type (optional) 类型,0缴费，1扣费
     * @param filter (optional) 查询条件
     * @return Success
     */
    totalDetail(dateStr: string | undefined, date: string | undefined, type: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<ChargeTotalDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Charge/TotalDetail?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTotalDetail(_response));
        });
    }

    protected processTotalDetail(response: AxiosResponse): Promise<ChargeTotalDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ChargeTotalDetailResult.fromJS(resultData200);
            return Promise.resolve<ChargeTotalDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ChargeTotalDetailResult>(null as any);
    }

    /**
     * 费用类 -- 费用统计详情-- 导出
     * @param date (optional) 返回的日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd 周：yyyy-MM-dd ~ yyyy-MM-dd)
     * @param roomItemListId (optional) 返回的日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd 周：yyyy-MM-dd ~ yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET115(date: string | undefined, roomItemListId: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Charge/TotalDetail/Export?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (roomItemListId === null)
            throw new Error("The parameter 'roomItemListId' cannot be null.");
        else if (roomItemListId !== undefined)
            url_ += "roomItemListId=" + encodeURIComponent("" + roomItemListId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET115(_response));
        });
    }

    protected processExportGET115(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 药品类 - 周促红素 - 汇总查询
     * @param months (optional) 月份
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    erythropoietinWeek(months: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DrugErythropoietinWeekResult> {
        let url_ = this.baseUrl + "/api/Report/Drug/ErythropoietinWeek?";
        if (months === null)
            throw new Error("The parameter 'months' cannot be null.");
        else if (months !== undefined)
            url_ += "months=" + encodeURIComponent("" + months) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processErythropoietinWeek(_response));
        });
    }

    protected processErythropoietinWeek(response: AxiosResponse): Promise<DrugErythropoietinWeekResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DrugErythropoietinWeekResult.fromJS(resultData200);
            return Promise.resolve<DrugErythropoietinWeekResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DrugErythropoietinWeekResult>(null as any);
    }

    /**
     * 药品类 -- 周促红素 -- 导出
     * @param months (optional) 月份
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET116(months: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Drug/ErythropoietinWeek/Export?";
        if (months === null)
            throw new Error("The parameter 'months' cannot be null.");
        else if (months !== undefined)
            url_ += "months=" + encodeURIComponent("" + months) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET116(_response));
        });
    }

    protected processExportGET116(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 药品类 - 常用药品月报 - 查询
     * @param strDate (optional)
     * @param endDate (optional)
     * @param filter (optional) 查询条件
     * @return Success
     */
    commonUse(strDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CommonDrugsReportResult> {
        let url_ = this.baseUrl + "/api/Report/Drug/Month/CommonUse?";
        if (strDate === null)
            throw new Error("The parameter 'strDate' cannot be null.");
        else if (strDate !== undefined)
            url_ += "strDate=" + encodeURIComponent("" + strDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCommonUse(_response));
        });
    }

    protected processCommonUse(response: AxiosResponse): Promise<CommonDrugsReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CommonDrugsReportResult.fromJS(resultData200);
            return Promise.resolve<CommonDrugsReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CommonDrugsReportResult>(null as any);
    }

    /**
     * 药品类 - 常用药品月报 - 导出
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET117(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Drug/Month/CommonUse/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET117(_response));
        });
    }

    protected processExportGET117(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 药品类 -- 药品类型统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    usageType(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DrugTypeUsageResult> {
        let url_ = this.baseUrl + "/api/Report/Drug/UsageType?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUsageType(_response));
        });
    }

    protected processUsageType(response: AxiosResponse): Promise<DrugTypeUsageResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DrugTypeUsageResult.fromJS(resultData200);
            return Promise.resolve<DrugTypeUsageResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DrugTypeUsageResult>(null as any);
    }

    /**
     * 药品类 -- 药品类型统计 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET118(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Drug/UsageType/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET118(_response));
        });
    }

    protected processExportGET118(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 药品类 -- 药品名称统计 -- 详情
     * @param code (optional) 药品类型code
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    usageName(code: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DrugUsageResult> {
        let url_ = this.baseUrl + "/api/Report/Drug/UsageName?";
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUsageName(_response));
        });
    }

    protected processUsageName(response: AxiosResponse): Promise<DrugUsageResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DrugUsageResult.fromJS(resultData200);
            return Promise.resolve<DrugUsageResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DrugUsageResult>(null as any);
    }

    /**
     * 药品类 -- 药品名称统计 -- 详情 -- 导出
     * @param code (optional) 药品类型code
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET119(code: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Drug/UsageName/Export?";
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET119(_response));
        });
    }

    protected processExportGET119(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 药品类 -- 患者统计 -- 详情
     * @param id (optional) 药品id
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param patientName (optional) 患者
     * @param filter (optional) 查询条件
     * @return Success
     */
    patient(id: string | undefined, startDate: string | undefined, endDate: string | undefined, patientName: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DrugPatientResult> {
        let url_ = this.baseUrl + "/api/Report/Drug/Patient?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (patientName === null)
            throw new Error("The parameter 'patientName' cannot be null.");
        else if (patientName !== undefined)
            url_ += "patientName=" + encodeURIComponent("" + patientName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatient(_response));
        });
    }

    protected processPatient(response: AxiosResponse): Promise<DrugPatientResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DrugPatientResult.fromJS(resultData200);
            return Promise.resolve<DrugPatientResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DrugPatientResult>(null as any);
    }

    /**
     * 药品类 -- 患者统计 -- 详情 -- 导出
     * @param id (optional) 药品名称
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param patientName (optional) 患者
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET120(id: string | undefined, startDate: string | undefined, endDate: string | undefined, patientName: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Drug/Patient/Export?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (patientName === null)
            throw new Error("The parameter 'patientName' cannot be null.");
        else if (patientName !== undefined)
            url_ += "patientName=" + encodeURIComponent("" + patientName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET120(_response));
        });
    }

    protected processExportGET120(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 药品类 -- 药品出入库统计
     * @param dateStr (optional) 日期（年份汇总：传空 年：yyyy 月：yyyy-MM 日：yyyy-MM-dd）
     * @param type (optional) 出入库类型（全部：传空 出库：out 入库：in)
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    inventory(dateStr: string | undefined, type: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DrugInResult> {
        let url_ = this.baseUrl + "/api/Report/Drug/Inventory?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processInventory(_response));
        });
    }

    protected processInventory(response: AxiosResponse): Promise<DrugInResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DrugInResult.fromJS(resultData200);
            return Promise.resolve<DrugInResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DrugInResult>(null as any);
    }

    /**
     * 药品类 -- 药品出入库统计 -- 导出
     * @param date (optional) 日期（年份汇总：传空 年：yyyy 月：yyyy-MM 日：yyyy-MM-dd）
     * @param type (optional) 出入库类型（全部：传空 出库：out 入库：in)
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET121(date: string | undefined, type: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Drug/Inventory/Export?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET121(_response));
        });
    }

    protected processExportGET121(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 药品类 -- 药品出入库详细 - 查询
     * @param date (optional) 日期（年份汇总：传空 年：yyyy 月：yyyy-MM 日：yyyy-MM-dd）
     * @param type (optional) 出入库类型（全部：传空 出库：out 入库：in)
     * @param drugType (optional) 药品类型 促红素：chs；抗凝剂：knj；左卡尼汀：zknt；注射剂：zsj
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    detail13(date: string | undefined, type: string | undefined, drugType: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DrugInDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Drug/Inventory/Detail?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (drugType === null)
            throw new Error("The parameter 'drugType' cannot be null.");
        else if (drugType !== undefined)
            url_ += "drugType=" + encodeURIComponent("" + drugType) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetail13(_response));
        });
    }

    protected processDetail13(response: AxiosResponse): Promise<DrugInDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DrugInDetailResult.fromJS(resultData200);
            return Promise.resolve<DrugInDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DrugInDetailResult>(null as any);
    }

    /**
     * 药品类 -- 药品出入库详细 -- 导出
     * @param date (optional) 日期（年份汇总：传空 年：yyyy 月：yyyy-MM 日：yyyy-MM-dd）
     * @param type (optional) 出入库类型（全部：传空 出库：out 入库：in)
     * @param drugType (optional) 药品类型 促红素：chs；抗凝剂：knj；左卡尼汀：zknt；注射剂：zsj
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET122(date: string | undefined, type: string | undefined, drugType: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Drug/Inventory/Detail/Export?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (drugType === null)
            throw new Error("The parameter 'drugType' cannot be null.");
        else if (drugType !== undefined)
            url_ += "drugType=" + encodeURIComponent("" + drugType) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET122(_response));
        });
    }

    protected processExportGET122(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 药品类 -- 药品厂商统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    manufacturer(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DrugManufacturerResult> {
        let url_ = this.baseUrl + "/api/Report/Drug/Manufacturer?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processManufacturer(_response));
        });
    }

    protected processManufacturer(response: AxiosResponse): Promise<DrugManufacturerResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DrugManufacturerResult.fromJS(resultData200);
            return Promise.resolve<DrugManufacturerResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DrugManufacturerResult>(null as any);
    }

    /**
     * 药品类 -- 药品厂商统计 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET123(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Drug/Manufacturer/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET123(_response));
        });
    }

    protected processExportGET123(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 药品类 -- 药品厂商统计 -- 详情
     * @param manufacturer 药品厂商
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    manufacturerDetail(manufacturer: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DrugManufacturerDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Drug/ManufacturerDetail/{manufacturer}?";
        if (manufacturer === undefined || manufacturer === null)
            throw new Error("The parameter 'manufacturer' must be defined.");
        url_ = url_.replace("{manufacturer}", encodeURIComponent("" + manufacturer));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processManufacturerDetail(_response));
        });
    }

    protected processManufacturerDetail(response: AxiosResponse): Promise<DrugManufacturerDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DrugManufacturerDetailResult.fromJS(resultData200);
            return Promise.resolve<DrugManufacturerDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DrugManufacturerDetailResult>(null as any);
    }

    /**
     * 药品类 -- 药品厂商统计 -- 详情 -- 导出
     * @param manufacturer 药品厂商
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET124(manufacturer: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Drug/ManufacturerDetail/{manufacturer}/Export?";
        if (manufacturer === undefined || manufacturer === null)
            throw new Error("The parameter 'manufacturer' must be defined.");
        url_ = url_.replace("{manufacturer}", encodeURIComponent("" + manufacturer));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET124(_response));
        });
    }

    protected processExportGET124(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 药品类 -- 经销商统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    dealer(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DevDealerResult> {
        let url_ = this.baseUrl + "/api/Report/Drug/Dealer?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDealer(_response));
        });
    }

    protected processDealer(response: AxiosResponse): Promise<DevDealerResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevDealerResult.fromJS(resultData200);
            return Promise.resolve<DevDealerResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevDealerResult>(null as any);
    }

    /**
     * 药品类 -- 经销商统计 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET125(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Drug/Dealer/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET125(_response));
        });
    }

    protected processExportGET125(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 药品类 -- 经销商统计 -- 详情
     * @param dealer 经销商
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    dealerDetail(dealer: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DrugDealerDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Drug/DealerDetail/{dealer}?";
        if (dealer === undefined || dealer === null)
            throw new Error("The parameter 'dealer' must be defined.");
        url_ = url_.replace("{dealer}", encodeURIComponent("" + dealer));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDealerDetail(_response));
        });
    }

    protected processDealerDetail(response: AxiosResponse): Promise<DrugDealerDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DrugDealerDetailResult.fromJS(resultData200);
            return Promise.resolve<DrugDealerDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DrugDealerDetailResult>(null as any);
    }

    /**
     * 药品类 -- 经销商统计 -- 详情 -- 导出
     * @param dealer 经销商
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET126(dealer: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Drug/DealerDetail/{dealer}/Export?";
        if (dealer === undefined || dealer === null)
            throw new Error("The parameter 'dealer' must be defined.");
        url_ = url_.replace("{dealer}", encodeURIComponent("" + dealer));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET126(_response));
        });
    }

    protected processExportGET126(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 药品类 - 促红素统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    erythropoietin(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DrugUsageResult> {
        let url_ = this.baseUrl + "/api/Report/Drug/Erythropoietin?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processErythropoietin(_response));
        });
    }

    protected processErythropoietin(response: AxiosResponse): Promise<DrugUsageResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DrugUsageResult.fromJS(resultData200);
            return Promise.resolve<DrugUsageResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DrugUsageResult>(null as any);
    }

    /**
     * 药品类 - 促红素统计 - 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET127(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Drug/Erythropoietin/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET127(_response));
        });
    }

    protected processExportGET127(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 药品类 - 促红素患者统计 - 详情
     * @param name (optional) 药品名称
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    erythropoietinPatient(name: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DrugPatientResult> {
        let url_ = this.baseUrl + "/api/Report/Drug/ErythropoietinPatient?";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processErythropoietinPatient(_response));
        });
    }

    protected processErythropoietinPatient(response: AxiosResponse): Promise<DrugPatientResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DrugPatientResult.fromJS(resultData200);
            return Promise.resolve<DrugPatientResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DrugPatientResult>(null as any);
    }

    /**
     * 药品类 - 促红素患者统计 - 详情 -- 导出
     * @param name (optional) 药品名称
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET128(name: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Drug/ErythropoietinPatient/Export?";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET128(_response));
        });
    }

    protected processExportGET128(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 药品类 -- 自备用药统计 -- 详情
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    owned(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DrugOwnedResult> {
        let url_ = this.baseUrl + "/api/Report/Drug/Owned?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processOwned(_response));
        });
    }

    protected processOwned(response: AxiosResponse): Promise<DrugOwnedResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DrugOwnedResult.fromJS(resultData200);
            return Promise.resolve<DrugOwnedResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DrugOwnedResult>(null as any);
    }

    /**
     * 药品类 -- 自备用药统计 -- 详情 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET129(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Drug/Owned/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET129(_response));
        });
    }

    protected processExportGET129(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 药品类 -- 透中用药统计 -- 详情
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    dialysis(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DrugDialysisResult> {
        let url_ = this.baseUrl + "/api/Report/Drug/Dialysis?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDialysis(_response));
        });
    }

    protected processDialysis(response: AxiosResponse): Promise<DrugDialysisResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DrugDialysisResult.fromJS(resultData200);
            return Promise.resolve<DrugDialysisResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DrugDialysisResult>(null as any);
    }

    /**
     * 药品类 -- 透中用药统计 -- 详情 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET130(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Drug/Dialysis/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET130(_response));
        });
    }

    protected processExportGET130(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 药品类 -- 药品库存统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    stock(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DrugStockResult> {
        let url_ = this.baseUrl + "/api/Report/Drug/Stock?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processStock(_response));
        });
    }

    protected processStock(response: AxiosResponse): Promise<DrugStockResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DrugStockResult.fromJS(resultData200);
            return Promise.resolve<DrugStockResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DrugStockResult>(null as any);
    }

    /**
     * 药品类 -- 药品库存统计 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET131(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Drug/Stock/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET131(_response));
        });
    }

    protected processExportGET131(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 药品类 - 药品日,月，周报 - 汇总查询
     * @param dateStr (optional) 返回的日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd 周：yyyy-MM-dd ~ yyyy-MM-dd)
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    report(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DrugDaysReportResult> {
        let url_ = this.baseUrl + "/api/Report/Drug/Report?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processReport(_response));
        });
    }

    protected processReport(response: AxiosResponse): Promise<DrugDaysReportResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DrugDaysReportResult.fromJS(resultData200);
            return Promise.resolve<DrugDaysReportResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DrugDaysReportResult>(null as any);
    }

    /**
     * 药品类 - 药品日,月，周报 - 汇总查询 - 导出
     * @param dateStr (optional) 返回的日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd 周：yyyy-MM-dd ~ yyyy-MM-dd)
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET132(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Drug/Report/Export?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET132(_response));
        });
    }

    protected processExportGET132(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 药品类 - 药品日,月，周报 - 详细
     * @param date (optional) 查询日期（yyyy-MM-dd）
     * @param type (optional) 药品类型 促红素：chs；抗凝剂：knj；左卡尼汀类：zknt；注射剂类：zsj；
     * @param filter (optional) 查询条件
     * @return Success
     */
    detail14(date: string | undefined, type: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DrugDaysReportDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Drug/Report/Detail?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetail14(_response));
        });
    }

    protected processDetail14(response: AxiosResponse): Promise<DrugDaysReportDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DrugDaysReportDetailResult.fromJS(resultData200);
            return Promise.resolve<DrugDaysReportDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DrugDaysReportDetailResult>(null as any);
    }

    /**
     * 药品类 - 药品日,月，周报 - 详细 - 导出
     * @param date (optional) 查询日期（yyyy-MM-dd）
     * @param type (optional) 药品类型 促红素：chs；抗凝剂：knj；左卡尼汀类：zknt；注射剂类：zsj；
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET133(date: string | undefined, type: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Drug/Report/Detail/Export?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET133(_response));
        });
    }

    protected processExportGET133(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 耗材类 -- 使用记录
     * @param startDate (optional) 开始日期（yyyy-MM-dd）
     * @param endDate (optional) 结束日期（yyyy-MM-dd）
     * @param filter (optional) 查询条件
     * @return Success
     */
    used(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<ConsumableUsedResult> {
        let url_ = this.baseUrl + "/api/Report/Consumable/Used?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUsed(_response));
        });
    }

    protected processUsed(response: AxiosResponse): Promise<ConsumableUsedResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ConsumableUsedResult.fromJS(resultData200);
            return Promise.resolve<ConsumableUsedResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ConsumableUsedResult>(null as any);
    }

    /**
     * 耗材类 -- 使用记录 -- 导出
     * @param startDate (optional) 开始日期（yyyy-MM-dd）
     * @param endDate (optional) 结束日期（yyyy-MM-dd）
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET134(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Consumable/Used/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET134(_response));
        });
    }

    protected processExportGET134(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 耗材类 -- 永鼎耗材使用登记表
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional)
     * @return Success
     */
    used2(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DailyConsumableUsedResult> {
        let url_ = this.baseUrl + "/api/Report/DailyConsumable/Used?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUsed2(_response));
        });
    }

    protected processUsed2(response: AxiosResponse): Promise<DailyConsumableUsedResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DailyConsumableUsedResult.fromJS(resultData200);
            return Promise.resolve<DailyConsumableUsedResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DailyConsumableUsedResult>(null as any);
    }

    /**
     * 耗材类 -- 永鼎耗材使用登记表 -- 导出
     * @param startDate (optional) 开始日期（yyyy-MM-dd）
     * @param endDate (optional) 结束日期（yyyy-MM-dd）
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET135(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/DailyConsumable/Used/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET135(_response));
        });
    }

    protected processExportGET135(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 耗材类 -- 永鼎耗材使用登记表 -- 明细
     * @param date (optional) 查询日期
     * @param type (optional) 耗材类型 XLG;XLQ;ZHYGL;TXQ;NLZ;GLQ
     * @param shiftType (optional) 班次类型
     * @param filter (optional) 查询过滤条件
     * @return Success
     */
    detail15(date: string | undefined, type: string | undefined, shiftType: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DailyConsumableUsedDetailResult> {
        let url_ = this.baseUrl + "/api/Report/DailyConsumable/Used/Detail?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (shiftType === null)
            throw new Error("The parameter 'shiftType' cannot be null.");
        else if (shiftType !== undefined)
            url_ += "shiftType=" + encodeURIComponent("" + shiftType) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetail15(_response));
        });
    }

    protected processDetail15(response: AxiosResponse): Promise<DailyConsumableUsedDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DailyConsumableUsedDetailResult.fromJS(resultData200);
            return Promise.resolve<DailyConsumableUsedDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DailyConsumableUsedDetailResult>(null as any);
    }

    /**
     * 耗材类 -- 永鼎耗材使用登记表 -- 导出
     * @param date (optional) 查询日期
     * @param type (optional) 耗材类型 XLG;XLQ;ZHYGL;TXQ;NLZ;GLQ
     * @param shiftType (optional) 班次类型
     * @param filter (optional) 查询过滤条件
     * @return Success
     */
    exportGET136(date: string | undefined, type: string | undefined, shiftType: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/DailyConsumable/Used/Detail/Export?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (shiftType === null)
            throw new Error("The parameter 'shiftType' cannot be null.");
        else if (shiftType !== undefined)
            url_ += "shiftType=" + encodeURIComponent("" + shiftType) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET136(_response));
        });
    }

    protected processExportGET136(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 耗材类 -- 使用记录 -- 厂商
     * @param code (optional) 耗材code
     * @param startDate (optional) 开始日期（yyyy-MM-dd）
     * @param endDate (optional) 结束日期（yyyy-MM-dd）
     * @param filter (optional) 查询条件
     * @return Success
     */
    type3(code: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<ConsumableUsedTypeResult> {
        let url_ = this.baseUrl + "/api/Report/Consumable/Used/Type?";
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processType3(_response));
        });
    }

    protected processType3(response: AxiosResponse): Promise<ConsumableUsedTypeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ConsumableUsedTypeResult.fromJS(resultData200);
            return Promise.resolve<ConsumableUsedTypeResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ConsumableUsedTypeResult>(null as any);
    }

    /**
     * 耗材类 -- 使用记录 -- 厂商 -- 导出
     * @param code (optional) 耗材code
     * @param startDate (optional) 开始日期（yyyy-MM-dd）
     * @param endDate (optional) 结束日期（yyyy-MM-dd）
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET137(code: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Consumable/Used/Type/Export?";
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET137(_response));
        });
    }

    protected processExportGET137(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 耗材类 -- 使用记录 -- 厂商 -- 详细
     * @param id (optional) 耗材Id
     * @param startDate (optional) 开始日期（yyyy-MM-dd）
     * @param endDate (optional) 结束日期（yyyy-MM-dd）
     * @param filter (optional) 查询条件
     * @return Success
     */
    detail16(id: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<ConsumableUsedTypeDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Consumable/Used/Type/Detail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetail16(_response));
        });
    }

    protected processDetail16(response: AxiosResponse): Promise<ConsumableUsedTypeDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ConsumableUsedTypeDetailResult.fromJS(resultData200);
            return Promise.resolve<ConsumableUsedTypeDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ConsumableUsedTypeDetailResult>(null as any);
    }

    /**
     * 耗材类 -- 使用记录 -- 厂商 -- 详细 -- 导出
     * @param id (optional) 耗材Id
     * @param startDate (optional) 开始日期（yyyy-MM-dd）
     * @param endDate (optional) 结束日期（yyyy-MM-dd）
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET138(id: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Consumable/Used/Type/Detail/Export?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET138(_response));
        });
    }

    protected processExportGET138(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 耗材类 -- 入库统计
     * @param dateStr (optional) 日期格式（年：yyyy 月：yyyy-MM 日：yyyy-MM-dd）
     * @param startDate (optional) 开始日期
     * @param endDate (optional) 结束日期
     * @param filter (optional) 查询条件
     * @return Success
     */
    in(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<ConsumableInResult> {
        let url_ = this.baseUrl + "/api/Report/Consumable/In?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processIn(_response));
        });
    }

    protected processIn(response: AxiosResponse): Promise<ConsumableInResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ConsumableInResult.fromJS(resultData200);
            return Promise.resolve<ConsumableInResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ConsumableInResult>(null as any);
    }

    /**
     * 耗材类 -- 入库统计 -- 导出
     * @param dateStr (optional) 日期格式（年：yyyy 月：yyyy-MM 日：yyyy-MM-dd）
     * @param startDate (optional) 开始日期
     * @param endDate (optional) 结束日期
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET139(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Consumable/In/Export?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET139(_response));
        });
    }

    protected processExportGET139(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 耗材类 -- 入库统计 -- 详情
     * @param date (optional) 日期
     * @param type (optional) 耗材类型：（透析器:txq 血路管:xlg 灌流器:glq 内瘘针:nlz ）
     * @param filter (optional) 查询条件
     * @return Success
     */
    inDetail(date: string | undefined, type: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<ConsumableInDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Consumable/InDetail?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processInDetail(_response));
        });
    }

    protected processInDetail(response: AxiosResponse): Promise<ConsumableInDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ConsumableInDetailResult.fromJS(resultData200);
            return Promise.resolve<ConsumableInDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ConsumableInDetailResult>(null as any);
    }

    /**
     * 耗材类 -- 入库统计 -- 详情 -- 导出
     * @param date (optional) 日期
     * @param type (optional) 耗材类型：（透析器:txq 血路管:xlg 灌流器:glq 内瘘针:nlz ）
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET140(date: string | undefined, type: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Consumable/InDetail/Export?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET140(_response));
        });
    }

    protected processExportGET140(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 耗材类 -- 出库统计(日报、月报、周报)
     * @param dateStr (optional) 返回的日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd 周：yyyy-MM-dd ~ yyyy-MM-dd)
     * @param startDate (optional) 开始日期
     * @param endDate (optional) 结束日期
     * @param filter (optional) 查询条件
     * @return Success
     */
    out2(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<ConsumableOutResult> {
        let url_ = this.baseUrl + "/api/Report/Consumable/Out?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processOut2(_response));
        });
    }

    protected processOut2(response: AxiosResponse): Promise<ConsumableOutResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ConsumableOutResult.fromJS(resultData200);
            return Promise.resolve<ConsumableOutResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ConsumableOutResult>(null as any);
    }

    /**
     * 耗材类 -- 出库统计(日报、月报、周报) -- 导出
     * @param dateStr (optional) 返回的日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd 周：yyyy-MM-dd ~ yyyy-MM-dd)
     * @param startDate (optional) 开始日期
     * @param endDate (optional) 结束日期
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET141(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Consumable/Out/Export?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET141(_response));
        });
    }

    protected processExportGET141(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 耗材类 -- 出库统计(日报、月报、周报) -- 详情
     * @param date (optional) 日期
     * @param type (optional) 耗材类型：（透析器:txq 血路管:xlg 灌流器:glq 内瘘针:nlz ）
     * @param filter (optional) 查询条件
     * @return Success
     */
    outDetail2(date: string | undefined, type: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<ConsumableOutDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Consumable/OutDetail?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processOutDetail2(_response));
        });
    }

    protected processOutDetail2(response: AxiosResponse): Promise<ConsumableOutDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ConsumableOutDetailResult.fromJS(resultData200);
            return Promise.resolve<ConsumableOutDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ConsumableOutDetailResult>(null as any);
    }

    /**
     * 耗材类 -- 出库统计(日报、月报、周报) -- 详情 -- 导出
     * @param date (optional) 日期
     * @param type (optional) 耗材类型：（透析器:txq 血路管:xlg 灌流器:glq 内瘘针:nlz ）
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET142(date: string | undefined, type: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Consumable/OutDetail/Export?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET142(_response));
        });
    }

    protected processExportGET142(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 耗材类 -- 出入库统计(日报、月报)
     * @param dateStr (optional) 返回的日期格式(年：yyyy 月：yyyy-MM 日：yyyy-MM-dd 周：yyyy-MM-dd ~ yyyy-MM-dd)
     * @param startDate (optional) 开始日期
     * @param endDate (optional) 结束日期
     * @param filter (optional) 查询条件
     * @return Success
     */
    outIn(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<ConsumableOutInResult> {
        let url_ = this.baseUrl + "/api/Report/Consumable/OutIn?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processOutIn(_response));
        });
    }

    protected processOutIn(response: AxiosResponse): Promise<ConsumableOutInResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ConsumableOutInResult.fromJS(resultData200);
            return Promise.resolve<ConsumableOutInResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ConsumableOutInResult>(null as any);
    }

    /**
     * 耗材类 -- 出入库统计(日报、月报)--导出
     * @param dateStr (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional)
     * @return Success
     */
    exportGET143(dateStr: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Consumable/OutIn/Export?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET143(_response));
        });
    }

    protected processExportGET143(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 耗材类 -- 出入库统计(日报、月报) -- 详情
     * @param date (optional) 日期
     * @param roomItemListId (optional) 耗材
     * @param type (optional) 库存类型：(出库 OUT ,入库 IN,报损 FAULTY)
     * @param filter (optional) 查询条件
     * @return Success
     */
    outInDetail(date: string | undefined, roomItemListId: string | undefined, type: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<ConsumableOutInDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Consumable/OutInDetail?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (roomItemListId === null)
            throw new Error("The parameter 'roomItemListId' cannot be null.");
        else if (roomItemListId !== undefined)
            url_ += "roomItemListId=" + encodeURIComponent("" + roomItemListId) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processOutInDetail(_response));
        });
    }

    protected processOutInDetail(response: AxiosResponse): Promise<ConsumableOutInDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ConsumableOutInDetailResult.fromJS(resultData200);
            return Promise.resolve<ConsumableOutInDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ConsumableOutInDetailResult>(null as any);
    }

    /**
     * 耗材类 - 耗材退库统计
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    restore(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<ConsumableRestoreResult> {
        let url_ = this.baseUrl + "/api/Report/Consumable/Restore?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRestore(_response));
        });
    }

    protected processRestore(response: AxiosResponse): Promise<ConsumableRestoreResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ConsumableRestoreResult.fromJS(resultData200);
            return Promise.resolve<ConsumableRestoreResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ConsumableRestoreResult>(null as any);
    }

    /**
     * 耗材类 - 耗材退库统计 -导出
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET144(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Consumable/Restore/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET144(_response));
        });
    }

    protected processExportGET144(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 耗材类 -- 耗材库存统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    stock2(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<ConsumableStockResult> {
        let url_ = this.baseUrl + "/api/Report/Consumable/Stock?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processStock2(_response));
        });
    }

    protected processStock2(response: AxiosResponse): Promise<ConsumableStockResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ConsumableStockResult.fromJS(resultData200);
            return Promise.resolve<ConsumableStockResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ConsumableStockResult>(null as any);
    }

    /**
     * 耗材类 -- 耗材库存统计 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET145(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Consumable/Stock/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET145(_response));
        });
    }

    protected processExportGET145(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 耗材类 - 耗材厂商汇总查询
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    manufacturer2(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<ConsumableManufacturerResult> {
        let url_ = this.baseUrl + "/api/Report/Consumable/Manufacturer?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processManufacturer2(_response));
        });
    }

    protected processManufacturer2(response: AxiosResponse): Promise<ConsumableManufacturerResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ConsumableManufacturerResult.fromJS(resultData200);
            return Promise.resolve<ConsumableManufacturerResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ConsumableManufacturerResult>(null as any);
    }

    /**
     * 耗材类 - 耗材厂商汇总查询 - 导出
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET146(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Consumable/Manufacturer/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET146(_response));
        });
    }

    protected processExportGET146(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 耗材类 - 耗材厂商详细查询
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param manufacturer (optional) 厂商名称
     * @param filter (optional) 查询条件
     * @return Success
     */
    detail17(startDate: string | undefined, endDate: string | undefined, manufacturer: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<ConsumableManufacturerDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Consumable/Manufacturer/Detail?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (manufacturer === null)
            throw new Error("The parameter 'manufacturer' cannot be null.");
        else if (manufacturer !== undefined)
            url_ += "manufacturer=" + encodeURIComponent("" + manufacturer) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetail17(_response));
        });
    }

    protected processDetail17(response: AxiosResponse): Promise<ConsumableManufacturerDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ConsumableManufacturerDetailResult.fromJS(resultData200);
            return Promise.resolve<ConsumableManufacturerDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ConsumableManufacturerDetailResult>(null as any);
    }

    /**
     * 耗材类 - 耗材厂商详细查询 - 导出
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param manufacturer (optional) 厂商名称
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET147(startDate: string | undefined, endDate: string | undefined, manufacturer: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Consumable/Manufacturer/Detail/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (manufacturer === null)
            throw new Error("The parameter 'manufacturer' cannot be null.");
        else if (manufacturer !== undefined)
            url_ += "manufacturer=" + encodeURIComponent("" + manufacturer) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET147(_response));
        });
    }

    protected processExportGET147(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 耗材类 - 耗材供应商汇总查询
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    dealer2(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<ConsumableManufacturerResult> {
        let url_ = this.baseUrl + "/api/Report/Consumable/Dealer?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDealer2(_response));
        });
    }

    protected processDealer2(response: AxiosResponse): Promise<ConsumableManufacturerResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ConsumableManufacturerResult.fromJS(resultData200);
            return Promise.resolve<ConsumableManufacturerResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ConsumableManufacturerResult>(null as any);
    }

    /**
     * 耗材类 - 耗材供应商汇总查询 - 导出
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET148(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Consumable/Dealer/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET148(_response));
        });
    }

    protected processExportGET148(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 耗材类 - 耗材供应商详细查询
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param manufacturer (optional) 供应商名称
     * @param filter (optional) 查询条件
     * @return Success
     */
    detail18(startDate: string | undefined, endDate: string | undefined, manufacturer: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<ConsumableManufacturerDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Consumable/Dealer/Detail?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (manufacturer === null)
            throw new Error("The parameter 'manufacturer' cannot be null.");
        else if (manufacturer !== undefined)
            url_ += "manufacturer=" + encodeURIComponent("" + manufacturer) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetail18(_response));
        });
    }

    protected processDetail18(response: AxiosResponse): Promise<ConsumableManufacturerDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ConsumableManufacturerDetailResult.fromJS(resultData200);
            return Promise.resolve<ConsumableManufacturerDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ConsumableManufacturerDetailResult>(null as any);
    }

    /**
     * 耗材类 - 耗材供应商详细查询 - 导出
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param manufacturer (optional) 供应商名称
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET149(startDate: string | undefined, endDate: string | undefined, manufacturer: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Consumable/Dealer/Detail/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (manufacturer === null)
            throw new Error("The parameter 'manufacturer' cannot be null.");
        else if (manufacturer !== undefined)
            url_ += "manufacturer=" + encodeURIComponent("" + manufacturer) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET149(_response));
        });
    }

    protected processExportGET149(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 耗材类- 透析器 - 汇总统计
     * @param date (optional) 年份（2019
     * @param filter (optional) 查询条件
     * @return Success
     */
    tXQ(date: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DateDetailItemResult> {
        let url_ = this.baseUrl + "/api/Report/Consumable/TXQ?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTXQ(_response));
        });
    }

    protected processTXQ(response: AxiosResponse): Promise<DateDetailItemResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DateDetailItemResult.fromJS(resultData200);
            return Promise.resolve<DateDetailItemResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DateDetailItemResult>(null as any);
    }

    /**
     * 耗材类 - 透析器 - 汇总统计 - 导出
     * @param date (optional) 月份（2019-07）
     * @param type (optional) 同比：1 环比：2
     * @param period (optional) 期数
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET150(date: string | undefined, type: string | undefined, period: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Consumable/TXQ/Export?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (period === null)
            throw new Error("The parameter 'period' cannot be null.");
        else if (period !== undefined)
            url_ += "period=" + encodeURIComponent("" + period) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET150(_response));
        });
    }

    protected processExportGET150(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 耗材类 - 透析器 - 详细
     * @param date (optional) 查询日期
     * @param filter (optional) 查询条件
     * @return Success
     */
    detail19(date: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<ConsumableTXQDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Consumable/TXQ/Detail?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetail19(_response));
        });
    }

    protected processDetail19(response: AxiosResponse): Promise<ConsumableTXQDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ConsumableTXQDetailResult.fromJS(resultData200);
            return Promise.resolve<ConsumableTXQDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ConsumableTXQDetailResult>(null as any);
    }

    /**
     * 耗材类 - 透析器 - 详细统计 - 导出
     * @param date (optional) 月份（2019-07）
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET151(date: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Consuamble/TXQ/Detail/Export?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET151(_response));
        });
    }

    protected processExportGET151(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 耗材类- 灌流器 - 汇总统计
     * @param date (optional) 年份（2019
     * @param filter (optional) 查询条件
     * @return Success
     */
    gLQ(date: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DateDetailItemResult> {
        let url_ = this.baseUrl + "/api/Report/Consumable/GLQ?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGLQ(_response));
        });
    }

    protected processGLQ(response: AxiosResponse): Promise<DateDetailItemResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DateDetailItemResult.fromJS(resultData200);
            return Promise.resolve<DateDetailItemResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DateDetailItemResult>(null as any);
    }

    /**
     * 耗材类 - 灌流器 - 汇总统计 - 导出
     * @param date (optional) 年份（2019
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET152(date: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Consumable/GLQ/Export?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET152(_response));
        });
    }

    protected processExportGET152(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 耗材类 - 灌流器 - 详细
     * @param date (optional) 月份（2019-07）
     * @param filter (optional) 查询条件
     * @return Success
     */
    detail20(date: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<ConsumableGLQDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Consumable/GLQ/Detail?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetail20(_response));
        });
    }

    protected processDetail20(response: AxiosResponse): Promise<ConsumableGLQDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ConsumableGLQDetailResult.fromJS(resultData200);
            return Promise.resolve<ConsumableGLQDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ConsumableGLQDetailResult>(null as any);
    }

    /**
     * 耗材类 - 灌流器 - 详细统计 - 导出
     * @param date (optional) 日期 - 格式（yyyy-MM）
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET153(date: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Consuamble/GLQ/Detail/Export?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET153(_response));
        });
    }

    protected processExportGET153(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 设备类 -- 设备类型统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    type4(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DevTypeResult> {
        let url_ = this.baseUrl + "/api/Report/Dev/Type?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processType4(_response));
        });
    }

    protected processType4(response: AxiosResponse): Promise<DevTypeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevTypeResult.fromJS(resultData200);
            return Promise.resolve<DevTypeResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevTypeResult>(null as any);
    }

    /**
     * 设备类 -- 设备类型统计 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET154(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dev/Type/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET154(_response));
        });
    }

    protected processExportGET154(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 设备类 -- 设备类型统计 -- 详情
     * @param type 设备类型
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    typeDetail3(type: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DevTypeDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Dev/TypeDetail/{type}?";
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined.");
        url_ = url_.replace("{type}", encodeURIComponent("" + type));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTypeDetail3(_response));
        });
    }

    protected processTypeDetail3(response: AxiosResponse): Promise<DevTypeDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevTypeDetailResult.fromJS(resultData200);
            return Promise.resolve<DevTypeDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevTypeDetailResult>(null as any);
    }

    /**
     * 设备类 -- 设备类型统计 -- 详情 -- 导出
     * @param type 设备类型
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET155(type: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dev/TypeDetail/{type}/Export?";
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined.");
        url_ = url_.replace("{type}", encodeURIComponent("" + type));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET155(_response));
        });
    }

    protected processExportGET155(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 设备类 -- 设备使用统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    usage(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DevUsageResult> {
        let url_ = this.baseUrl + "/api/Report/Dev/Usage?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUsage(_response));
        });
    }

    protected processUsage(response: AxiosResponse): Promise<DevUsageResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevUsageResult.fromJS(resultData200);
            return Promise.resolve<DevUsageResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevUsageResult>(null as any);
    }

    /**
     * 设备类 -- 设备使用统计 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET156(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dev/Usage/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET156(_response));
        });
    }

    protected processExportGET156(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 设备类 -- 消毒使用统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @param key (optional)
     * @param accurate (optional)
     * @return Success
     */
    disinfect(startDate: string | undefined, endDate: string | undefined, filter: string | undefined, key: string | undefined, accurate: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<DevDisinfectInfoResult> {
        let url_ = this.baseUrl + "/api/Report/Dev/Disinfect?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (accurate === null)
            throw new Error("The parameter 'accurate' cannot be null.");
        else if (accurate !== undefined)
            url_ += "accurate=" + encodeURIComponent("" + accurate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDisinfect(_response));
        });
    }

    protected processDisinfect(response: AxiosResponse): Promise<DevDisinfectInfoResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevDisinfectInfoResult.fromJS(resultData200);
            return Promise.resolve<DevDisinfectInfoResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevDisinfectInfoResult>(null as any);
    }

    /**
     * 设备类 -- 消毒使用统计 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @param key (optional)
     * @param accurate (optional)
     * @return Success
     */
    exportGET157(startDate: string | undefined, endDate: string | undefined, filter: string | undefined, key: string | undefined, accurate: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dev/Disinfect/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (accurate === null)
            throw new Error("The parameter 'accurate' cannot be null.");
        else if (accurate !== undefined)
            url_ += "accurate=" + encodeURIComponent("" + accurate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET157(_response));
        });
    }

    protected processExportGET157(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 设备类 -- 设备维修/保养统计
     * @param flag (optional) 设备维护类型标识 1:维修 2:保养 为空或填写其他内容均返回全部
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    maintenance(flag: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DevMaintenanceInfoResult> {
        let url_ = this.baseUrl + "/api/Report/Dev/Maintenance?";
        if (flag === null)
            throw new Error("The parameter 'flag' cannot be null.");
        else if (flag !== undefined)
            url_ += "flag=" + encodeURIComponent("" + flag) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMaintenance(_response));
        });
    }

    protected processMaintenance(response: AxiosResponse): Promise<DevMaintenanceInfoResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevMaintenanceInfoResult.fromJS(resultData200);
            return Promise.resolve<DevMaintenanceInfoResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevMaintenanceInfoResult>(null as any);
    }

    /**
     * 设备类 -- 设备维修/保养统计 -- 导出
     * @param flag (optional) 设备维护类型标识 1:维修 2:保养 为空或填写其他内容均返回全部
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET158(flag: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dev/Maintenance/Export?";
        if (flag === null)
            throw new Error("The parameter 'flag' cannot be null.");
        else if (flag !== undefined)
            url_ += "flag=" + encodeURIComponent("" + flag) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET158(_response));
        });
    }

    protected processExportGET158(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 设备类 -- 设备开机统计 -- 详情
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    start(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DevStartDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Dev/Start?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processStart(_response));
        });
    }

    protected processStart(response: AxiosResponse): Promise<DevStartDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevStartDetailResult.fromJS(resultData200);
            return Promise.resolve<DevStartDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevStartDetailResult>(null as any);
    }

    /**
     * 设备类 -- 设备开机统计 -- 详情 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET159(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dev/Start/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET159(_response));
        });
    }

    protected processExportGET159(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 设备类 -- 设备故障统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    fault(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DevMaintenanceInfoResult> {
        let url_ = this.baseUrl + "/api/Report/Dev/Fault?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFault(_response));
        });
    }

    protected processFault(response: AxiosResponse): Promise<DevMaintenanceInfoResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevMaintenanceInfoResult.fromJS(resultData200);
            return Promise.resolve<DevMaintenanceInfoResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevMaintenanceInfoResult>(null as any);
    }

    /**
     * 设备类 -- 设备故障统计 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET160(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dev/Fault/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET160(_response));
        });
    }

    protected processExportGET160(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 设备类 -- 设备报废统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    scrap(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DevScrapResult> {
        let url_ = this.baseUrl + "/api/Report/Dev/Scrap?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processScrap(_response));
        });
    }

    protected processScrap(response: AxiosResponse): Promise<DevScrapResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevScrapResult.fromJS(resultData200);
            return Promise.resolve<DevScrapResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevScrapResult>(null as any);
    }

    /**
     * 设备类 -- 设备报废统计 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET161(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dev/Scrap/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET161(_response));
        });
    }

    protected processExportGET161(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 设备类 -- 生产厂家统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    manufacturer3(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DevManufacturerResult> {
        let url_ = this.baseUrl + "/api/Report/Dev/Manufacturer?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processManufacturer3(_response));
        });
    }

    protected processManufacturer3(response: AxiosResponse): Promise<DevManufacturerResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevManufacturerResult.fromJS(resultData200);
            return Promise.resolve<DevManufacturerResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevManufacturerResult>(null as any);
    }

    /**
     * 设备类 -- 生产厂家统计 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET162(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dev/Manufacturer/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET162(_response));
        });
    }

    protected processExportGET162(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 设备类 -- 生产厂家统计 -- 详情
     * @param manufacturer 生产厂家
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    manufacturerDetail2(manufacturer: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DevManufacturerDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Dev/ManufacturerDetail/{manufacturer}?";
        if (manufacturer === undefined || manufacturer === null)
            throw new Error("The parameter 'manufacturer' must be defined.");
        url_ = url_.replace("{manufacturer}", encodeURIComponent("" + manufacturer));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processManufacturerDetail2(_response));
        });
    }

    protected processManufacturerDetail2(response: AxiosResponse): Promise<DevManufacturerDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevManufacturerDetailResult.fromJS(resultData200);
            return Promise.resolve<DevManufacturerDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevManufacturerDetailResult>(null as any);
    }

    /**
     * 设备类 -- 生产厂家统计 -- 详情 -- 导出
     * @param manufacturer 生产厂家
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET163(manufacturer: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dev/ManufacturerDetail/{manufacturer}/Export?";
        if (manufacturer === undefined || manufacturer === null)
            throw new Error("The parameter 'manufacturer' must be defined.");
        url_ = url_.replace("{manufacturer}", encodeURIComponent("" + manufacturer));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET163(_response));
        });
    }

    protected processExportGET163(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 设备类 -- 经销商统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    dealer3(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DevDealerResult> {
        let url_ = this.baseUrl + "/api/Report/Dev/Dealer?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDealer3(_response));
        });
    }

    protected processDealer3(response: AxiosResponse): Promise<DevDealerResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevDealerResult.fromJS(resultData200);
            return Promise.resolve<DevDealerResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevDealerResult>(null as any);
    }

    /**
     * 设备类 -- 经销商统计 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET164(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dev/Dealer/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET164(_response));
        });
    }

    protected processExportGET164(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 设备类 -- 经销商统计 -- 详情
     * @param dealer 经销商
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    dealerDetail2(dealer: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DevDealerDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Dev/DealerDetail/{dealer}?";
        if (dealer === undefined || dealer === null)
            throw new Error("The parameter 'dealer' must be defined.");
        url_ = url_.replace("{dealer}", encodeURIComponent("" + dealer));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDealerDetail2(_response));
        });
    }

    protected processDealerDetail2(response: AxiosResponse): Promise<DevDealerDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevDealerDetailResult.fromJS(resultData200);
            return Promise.resolve<DevDealerDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevDealerDetailResult>(null as any);
    }

    /**
     * 设备类 -- 经销商统计 -- 详情 -- 导出
     * @param dealer 经销商
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET165(dealer: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dev/DealerDetail/{dealer}/Export?";
        if (dealer === undefined || dealer === null)
            throw new Error("The parameter 'dealer' must be defined.");
        url_ = url_.replace("{dealer}", encodeURIComponent("" + dealer));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET165(_response));
        });
    }

    protected processExportGET165(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 管理类 -- 角色
     * @param filter (optional) 查询条件
     * @return Success
     */
    role(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptRoleResult> {
        let url_ = this.baseUrl + "/api/Report/Dept/Role";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRole(_response));
        });
    }

    protected processRole(response: AxiosResponse): Promise<DeptRoleResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptRoleResult.fromJS(resultData200);
            return Promise.resolve<DeptRoleResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptRoleResult>(null as any);
    }

    /**
     * 管理类 -- 角色 -- 导出
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET166(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dept/Role/Export";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET166(_response));
        });
    }

    protected processExportGET166(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 管理类 -- 角色 -- 详细
     * @param role 角色
     * @param filter (optional) 查询条件
     * @return Success
     */
    roleDetail(role: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptRoleDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Dept/RoleDetail/{role}";
        if (role === undefined || role === null)
            throw new Error("The parameter 'role' must be defined.");
        url_ = url_.replace("{role}", encodeURIComponent("" + role));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoleDetail(_response));
        });
    }

    protected processRoleDetail(response: AxiosResponse): Promise<DeptRoleDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptRoleDetailResult.fromJS(resultData200);
            return Promise.resolve<DeptRoleDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptRoleDetailResult>(null as any);
    }

    /**
     * 管理类 -- 角色 -- 详细 -- 导出
     * @param role 角色
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET167(role: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dept/RoleDetail/Export/{role}";
        if (role === undefined || role === null)
            throw new Error("The parameter 'role' must be defined.");
        url_ = url_.replace("{role}", encodeURIComponent("" + role));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET167(_response));
        });
    }

    protected processExportGET167(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 管理类 -- 职称
     * @param filter (optional) 查询条件
     * @return Success
     */
    professionalTitle(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptProfessionalTitleResult> {
        let url_ = this.baseUrl + "/api/Report/Dept/ProfessionalTitle";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processProfessionalTitle(_response));
        });
    }

    protected processProfessionalTitle(response: AxiosResponse): Promise<DeptProfessionalTitleResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptProfessionalTitleResult.fromJS(resultData200);
            return Promise.resolve<DeptProfessionalTitleResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptProfessionalTitleResult>(null as any);
    }

    /**
     * 管理类 -- 职称 -- 导出
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET168(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dept/ProfessionalTitle/Export";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET168(_response));
        });
    }

    protected processExportGET168(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 管理类 -- 职称 -- 详细
     * @param professionalTitle 职称字典值
     * @param filter (optional) 查询条件
     * @return Success
     */
    professionalTitleDetail(professionalTitle: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptProfessionalTitleDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Dept/ProfessionalTitleDetail/{professionalTitle}";
        if (professionalTitle === undefined || professionalTitle === null)
            throw new Error("The parameter 'professionalTitle' must be defined.");
        url_ = url_.replace("{professionalTitle}", encodeURIComponent("" + professionalTitle));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processProfessionalTitleDetail(_response));
        });
    }

    protected processProfessionalTitleDetail(response: AxiosResponse): Promise<DeptProfessionalTitleDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptProfessionalTitleDetailResult.fromJS(resultData200);
            return Promise.resolve<DeptProfessionalTitleDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptProfessionalTitleDetailResult>(null as any);
    }

    /**
     * 管理类 -- 职称 -- 详细 -- 导出
     * @param professionalTitle 职称字典值
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET169(professionalTitle: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dept/ProfessionalTitleDetail/Export/{professionalTitle}";
        if (professionalTitle === undefined || professionalTitle === null)
            throw new Error("The parameter 'professionalTitle' must be defined.");
        url_ = url_.replace("{professionalTitle}", encodeURIComponent("" + professionalTitle));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET169(_response));
        });
    }

    protected processExportGET169(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 管理类 -- 学历
     * @param filter (optional) 查询条件
     * @return Success
     */
    educationalLevel2(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptEducationalLevelResult> {
        let url_ = this.baseUrl + "/api/Report/Dept/EducationalLevel";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processEducationalLevel2(_response));
        });
    }

    protected processEducationalLevel2(response: AxiosResponse): Promise<DeptEducationalLevelResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptEducationalLevelResult.fromJS(resultData200);
            return Promise.resolve<DeptEducationalLevelResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptEducationalLevelResult>(null as any);
    }

    /**
     * 管理类 -- 学历 -- 导出
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET170(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dept/EducationalLevel/Export";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET170(_response));
        });
    }

    protected processExportGET170(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 管理类 -- 学历 -- 详细
     * @param educationalLevel 学历字典值
     * @param filter (optional) 查询条件
     * @return Success
     */
    educationalLevelDetail2(educationalLevel: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptEducationalLevelDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Dept/EducationalLevelDetail/{educationalLevel}";
        if (educationalLevel === undefined || educationalLevel === null)
            throw new Error("The parameter 'educationalLevel' must be defined.");
        url_ = url_.replace("{educationalLevel}", encodeURIComponent("" + educationalLevel));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processEducationalLevelDetail2(_response));
        });
    }

    protected processEducationalLevelDetail2(response: AxiosResponse): Promise<DeptEducationalLevelDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptEducationalLevelDetailResult.fromJS(resultData200);
            return Promise.resolve<DeptEducationalLevelDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptEducationalLevelDetailResult>(null as any);
    }

    /**
     * 管理类 -- 学历 -- 详细 -- 导出
     * @param educationalLevel 学历字典值
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET171(educationalLevel: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dept/EducationalLevelDetail/Export/{educationalLevel}";
        if (educationalLevel === undefined || educationalLevel === null)
            throw new Error("The parameter 'educationalLevel' must be defined.");
        url_ = url_.replace("{educationalLevel}", encodeURIComponent("" + educationalLevel));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET171(_response));
        });
    }

    protected processExportGET171(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 管理类 -- 工作量（护士）
     * @param startDate (optional) 开始日期（yyyy-MM-dd）
     * @param endDate (optional) 结束日期（yyyy-MM-dd）
     * @param filter (optional) 查询条件
     * @return Success
     */
    nurse(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptNurseWorkloadResult> {
        let url_ = this.baseUrl + "/api/Report/Dept/Workload/Nurse?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processNurse(_response));
        });
    }

    protected processNurse(response: AxiosResponse): Promise<DeptNurseWorkloadResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptNurseWorkloadResult.fromJS(resultData200);
            return Promise.resolve<DeptNurseWorkloadResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptNurseWorkloadResult>(null as any);
    }

    /**
     * 管理类 -- 工作量（护士） -- 导出
     * @param startDate (optional) 开始日期（yyyy-MM-dd）
     * @param endDate (optional) 结束日期（yyyy-MM-dd）
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET172(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dept/Workload/Nurse/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET172(_response));
        });
    }

    protected processExportGET172(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 管理类 -- 工作量（护士） - 详细
     * @param nurId (optional) 护士Id
     * @param type (optional) 查询类型CheckCount； OnCount； OffCount；VerifyCount；DisinfectCount；ExecuteCount；VascularCount；HD_HPCount；HDFCount；PositiveCount
     * @param startDate (optional) 开始日期（yyyy-MM-dd）
     * @param endDate (optional) 结束日期（yyyy-MM-dd）
     * @param filter (optional) 查询条件
     * @param positives (optional)
     * @return Success
     */
    nurse2(nurId: string | undefined, type: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined, positives: string | undefined , cancelToken?: CancelToken | undefined): Promise<NurseWorkLoadDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Dept/Workload/Detail/Nurse?";
        if (nurId === null)
            throw new Error("The parameter 'nurId' cannot be null.");
        else if (nurId !== undefined)
            url_ += "NurId=" + encodeURIComponent("" + nurId) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (positives === null)
            throw new Error("The parameter 'positives' cannot be null.");
        else if (positives !== undefined)
            url_ += "positives=" + encodeURIComponent("" + positives) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processNurse2(_response));
        });
    }

    protected processNurse2(response: AxiosResponse): Promise<NurseWorkLoadDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = NurseWorkLoadDetailResult.fromJS(resultData200);
            return Promise.resolve<NurseWorkLoadDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NurseWorkLoadDetailResult>(null as any);
    }

    /**
     * 管理类 -- 工作量（护士） -  详细 -- 导出
     * @param nurId (optional) 护士Id
     * @param type (optional) 查询类型CheckCount； OnCount； OffCount；VerifyCount；DisinfectCount；ExecuteCount
     * @param startDate (optional) 开始日期（yyyy-MM-dd）
     * @param endDate (optional) 结束日期（yyyy-MM-dd）
     * @param filter (optional) 查询条件
     * @param positives (optional)
     * @return Success
     */
    exportGET173(nurId: string | undefined, type: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined, positives: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dept/Workload/Nurse/Detail/Export?";
        if (nurId === null)
            throw new Error("The parameter 'nurId' cannot be null.");
        else if (nurId !== undefined)
            url_ += "NurId=" + encodeURIComponent("" + nurId) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (positives === null)
            throw new Error("The parameter 'positives' cannot be null.");
        else if (positives !== undefined)
            url_ += "positives=" + encodeURIComponent("" + positives) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET173(_response));
        });
    }

    protected processExportGET173(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 管理类 - 永鼎护士工作量统计
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional)
     * @param positives (optional)
     * @return Success
     */
    nurse3(startDate: string | undefined, endDate: string | undefined, filter: string | undefined, positives: string | undefined , cancelToken?: CancelToken | undefined): Promise<DailyNurseWorkloadResult> {
        let url_ = this.baseUrl + "/api/Report/Daily/Workload/Nurse?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (positives === null)
            throw new Error("The parameter 'positives' cannot be null.");
        else if (positives !== undefined)
            url_ += "positives=" + encodeURIComponent("" + positives) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processNurse3(_response));
        });
    }

    protected processNurse3(response: AxiosResponse): Promise<DailyNurseWorkloadResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DailyNurseWorkloadResult.fromJS(resultData200);
            return Promise.resolve<DailyNurseWorkloadResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DailyNurseWorkloadResult>(null as any);
    }

    /**
     * 管理类 - 永鼎护士工作量统计
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional)
     * @return Success
     */
    exportGET174(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Daily/Workload/Nurse/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET174(_response));
        });
    }

    protected processExportGET174(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 管理类 -- 工作量（医生）
     * @param startDate (optional) 开始日期（yyyy-MM-dd）
     * @param endDate (optional) 结束日期（yyyy-MM-dd）
     * @param filter (optional) 查询条件
     * @return Success
     */
    doctor(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptDoctorWorkloadResult> {
        let url_ = this.baseUrl + "/api/Report/Dept/Workload/Doctor?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDoctor(_response));
        });
    }

    protected processDoctor(response: AxiosResponse): Promise<DeptDoctorWorkloadResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptDoctorWorkloadResult.fromJS(resultData200);
            return Promise.resolve<DeptDoctorWorkloadResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptDoctorWorkloadResult>(null as any);
    }

    /**
     * 管理类 -- 工作量（医生） -- 导出
     * @param startDate (optional) 开始日期（yyyy-MM-dd）
     * @param endDate (optional) 结束日期（yyyy-MM-dd）
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET175(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dept/Workload/Doctor/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET175(_response));
        });
    }

    protected processExportGET175(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 管理类 -- 工作量（医生） - 详细
     * @param doctorId (optional) 医生Id
     * @param type (optional) 查询类别 MedicalOrderCount；PrescriptionCount
     * @param startDate (optional) 开始日期（yyyy-MM-dd）
     * @param endDate (optional) 结束日期（yyyy-MM-dd）
     * @param filter (optional) 查询条件
     * @return Success
     */
    detail21(doctorId: string | undefined, type: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DoctorWorkLoadDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Dept/Workload/Doctor/Detail?";
        if (doctorId === null)
            throw new Error("The parameter 'doctorId' cannot be null.");
        else if (doctorId !== undefined)
            url_ += "doctorId=" + encodeURIComponent("" + doctorId) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetail21(_response));
        });
    }

    protected processDetail21(response: AxiosResponse): Promise<DoctorWorkLoadDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DoctorWorkLoadDetailResult.fromJS(resultData200);
            return Promise.resolve<DoctorWorkLoadDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DoctorWorkLoadDetailResult>(null as any);
    }

    /**
     * 管理类 -- 工作量（医生） -- 导出
     * @param doctorId (optional) 医生Id
     * @param type (optional) 查询类别 MedicalOrderCount；PrescriptionCount
     * @param startDate (optional) 开始日期（yyyy-MM-dd）
     * @param endDate (optional) 结束日期（yyyy-MM-dd）
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET176(doctorId: string | undefined, type: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dept/Workload/Doctor/Detail/Export?";
        if (doctorId === null)
            throw new Error("The parameter 'doctorId' cannot be null.");
        else if (doctorId !== undefined)
            url_ += "doctorId=" + encodeURIComponent("" + doctorId) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET176(_response));
        });
    }

    protected processExportGET176(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 管理类 -- 透析室
     * @param filter (optional) 查询条件
     * @return Success
     */
    dialysis2(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptDialysisResult> {
        let url_ = this.baseUrl + "/api/Report/Dept/Dialysis";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDialysis2(_response));
        });
    }

    protected processDialysis2(response: AxiosResponse): Promise<DeptDialysisResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptDialysisResult.fromJS(resultData200);
            return Promise.resolve<DeptDialysisResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptDialysisResult>(null as any);
    }

    /**
     * 管理类 -- 透析室 -- 导出
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET177(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dept/Dialysis/Export";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET177(_response));
        });
    }

    protected processExportGET177(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 管理类 -- 透析室 -- 详细
     * @param dialysisAreaId 透析区间 Id
     * @param filter (optional) 查询条件
     * @return Success
     */
    dialysisDetail(dialysisAreaId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptDialysisDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Dept/DialysisDetail/{dialysisAreaId}";
        if (dialysisAreaId === undefined || dialysisAreaId === null)
            throw new Error("The parameter 'dialysisAreaId' must be defined.");
        url_ = url_.replace("{dialysisAreaId}", encodeURIComponent("" + dialysisAreaId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDialysisDetail(_response));
        });
    }

    protected processDialysisDetail(response: AxiosResponse): Promise<DeptDialysisDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptDialysisDetailResult.fromJS(resultData200);
            return Promise.resolve<DeptDialysisDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptDialysisDetailResult>(null as any);
    }

    /**
     * 管理类 -- 透析室 -- 详细 -- 导出
     * @param dialysisAreaId 透析区间 Id
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET178(dialysisAreaId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dept/DialysisDetail/Export/{dialysisAreaId}";
        if (dialysisAreaId === undefined || dialysisAreaId === null)
            throw new Error("The parameter 'dialysisAreaId' must be defined.");
        url_ = url_.replace("{dialysisAreaId}", encodeURIComponent("" + dialysisAreaId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET178(_response));
        });
    }

    protected processExportGET178(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 管理类 -- 宣教统计
     * @param filter (optional) 查询条件
     * @param key (optional) 宣教内容查询
     * @return Success
     */
    healtheducation(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientHealtheducationResult> {
        let url_ = this.baseUrl + "/api/Report/Dept/Healtheducation?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHealtheducation(_response));
        });
    }

    protected processHealtheducation(response: AxiosResponse): Promise<PatientHealtheducationResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientHealtheducationResult.fromJS(resultData200);
            return Promise.resolve<PatientHealtheducationResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientHealtheducationResult>(null as any);
    }

    /**
     * 管理类 -- 宣教统计 -- 导出
     * @param filter (optional)
     * @return Success
     */
    exportGET179(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dept/Healtheducation/Export";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET179(_response));
        });
    }

    protected processExportGET179(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 管理类 - 健康宣教
     * @param type (optional) 宣教类型 nurse；patient；class
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    healthEducationWorks(type: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptHealthEducationWorksResult> {
        let url_ = this.baseUrl + "/api/Report/Dept/HealthEducationWorks?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHealthEducationWorks(_response));
        });
    }

    protected processHealthEducationWorks(response: AxiosResponse): Promise<DeptHealthEducationWorksResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptHealthEducationWorksResult.fromJS(resultData200);
            return Promise.resolve<DeptHealthEducationWorksResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptHealthEducationWorksResult>(null as any);
    }

    /**
     * 管理类 - 健康宣教 - 详细
     * @param type (optional) 宣教类型 nurse；patient；class
     * @param name (optional) 名称值
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    detail22(type: string | undefined, name: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptHealthEducationWorksDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Dept/HealthEducationWorks/Detail?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetail22(_response));
        });
    }

    protected processDetail22(response: AxiosResponse): Promise<DeptHealthEducationWorksDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptHealthEducationWorksDetailResult.fromJS(resultData200);
            return Promise.resolve<DeptHealthEducationWorksDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptHealthEducationWorksDetailResult>(null as any);
    }

    /**
     * 管理类 - 健康宣教 - 导出
     * @param type (optional) 宣教类型 nurse；patient；class
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET180(type: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dept/HealthEducationWorks/Export?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET180(_response));
        });
    }

    protected processExportGET180(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 管理类 - 健康宣教 - 详细 - 导出
     * @param type (optional) 宣教类型 nurse；patient；class
     * @param name (optional)
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET181(type: string | undefined, name: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dept/HealthEducationWorks/Detail/Export?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET181(_response));
        });
    }

    protected processExportGET181(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 管理类 - 加班统计 - 详细
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param role (optional) 角色 默认是医生, 传 "nurse" 为护士
     * @param userId (optional) 用户ID
     * @param filter (optional) 查询条件
     * @return Success
     */
    overTimeDetail(startDate: string | undefined, endDate: string | undefined, role: string | undefined, userId: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptTimeDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Dept/OverTimeDetail?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (role === null)
            throw new Error("The parameter 'role' cannot be null.");
        else if (role !== undefined)
            url_ += "role=" + encodeURIComponent("" + role) + "&";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processOverTimeDetail(_response));
        });
    }

    protected processOverTimeDetail(response: AxiosResponse): Promise<DeptTimeDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptTimeDetailResult.fromJS(resultData200);
            return Promise.resolve<DeptTimeDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptTimeDetailResult>(null as any);
    }

    /**
     * 管理类 - 加班统计 - 汇总
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param role (optional) 角色 默认是医生, 传 "nurse" 为护士
     * @param maxAge (optional) 最大年龄
     * @param minAge (optional) 最小年龄
     * @param gender (optional) 性别
     * @param name (optional) 姓名
     * @param jobNumber (optional) 工号
     * @param filter (optional)
     * @return Success
     */
    overTime(startDate: string | undefined, endDate: string | undefined, role: string | undefined, maxAge: string | undefined, minAge: string | undefined, gender: string | undefined, name: string | undefined, jobNumber: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptTimeResult> {
        let url_ = this.baseUrl + "/api/Report/Dept/OverTime?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (role === null)
            throw new Error("The parameter 'role' cannot be null.");
        else if (role !== undefined)
            url_ += "role=" + encodeURIComponent("" + role) + "&";
        if (maxAge === null)
            throw new Error("The parameter 'maxAge' cannot be null.");
        else if (maxAge !== undefined)
            url_ += "maxAge=" + encodeURIComponent("" + maxAge) + "&";
        if (minAge === null)
            throw new Error("The parameter 'minAge' cannot be null.");
        else if (minAge !== undefined)
            url_ += "minAge=" + encodeURIComponent("" + minAge) + "&";
        if (gender === null)
            throw new Error("The parameter 'gender' cannot be null.");
        else if (gender !== undefined)
            url_ += "gender=" + encodeURIComponent("" + gender) + "&";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        if (jobNumber === null)
            throw new Error("The parameter 'jobNumber' cannot be null.");
        else if (jobNumber !== undefined)
            url_ += "jobNumber=" + encodeURIComponent("" + jobNumber) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processOverTime(_response));
        });
    }

    protected processOverTime(response: AxiosResponse): Promise<DeptTimeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptTimeResult.fromJS(resultData200);
            return Promise.resolve<DeptTimeResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptTimeResult>(null as any);
    }

    /**
     * 管理类 - 加班统计 - 导出
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param role (optional) 角色 默认是医生, 传 "nurse" 为护士
     * @param userId (optional)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET182(startDate: string | undefined, endDate: string | undefined, role: string | undefined, userId: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Report/Dept/OverTimeDetail/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (role === null)
            throw new Error("The parameter 'role' cannot be null.");
        else if (role !== undefined)
            url_ += "role=" + encodeURIComponent("" + role) + "&";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET182(_response));
        });
    }

    protected processExportGET182(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * 管理类 - 加班统计 - 汇总 - 导出
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param role (optional) 角色 默认是医生, 传 "nurse" 为护士
     * @param maxAge (optional) 最大年龄
     * @param minAge (optional) 最小年龄
     * @param gender (optional) 性别
     * @param name (optional) 姓名
     * @param jobNumber (optional) 工号
     * @param filter (optional)
     * @return Success
     */
    exportGET183(startDate: string | undefined, endDate: string | undefined, role: string | undefined, maxAge: string | undefined, minAge: string | undefined, gender: string | undefined, name: string | undefined, jobNumber: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Report/Dept/OverTime/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (role === null)
            throw new Error("The parameter 'role' cannot be null.");
        else if (role !== undefined)
            url_ += "role=" + encodeURIComponent("" + role) + "&";
        if (maxAge === null)
            throw new Error("The parameter 'maxAge' cannot be null.");
        else if (maxAge !== undefined)
            url_ += "maxAge=" + encodeURIComponent("" + maxAge) + "&";
        if (minAge === null)
            throw new Error("The parameter 'minAge' cannot be null.");
        else if (minAge !== undefined)
            url_ += "minAge=" + encodeURIComponent("" + minAge) + "&";
        if (gender === null)
            throw new Error("The parameter 'gender' cannot be null.");
        else if (gender !== undefined)
            url_ += "gender=" + encodeURIComponent("" + gender) + "&";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        if (jobNumber === null)
            throw new Error("The parameter 'jobNumber' cannot be null.");
        else if (jobNumber !== undefined)
            url_ += "jobNumber=" + encodeURIComponent("" + jobNumber) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET183(_response));
        });
    }

    protected processExportGET183(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * 管理类 - 休假统计
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param ageMax (optional) 年龄最大值
     * @param ageMin (optional) 年龄最小值
     * @param jobNumber (optional) 工号
     * @param name (optional) 姓名
     * @param gender (optional) 性别
     * @param filter (optional) 查询条件
     * @return Success
     */
    holiday(startDate: string | undefined, endDate: string | undefined, ageMax: string | undefined, ageMin: string | undefined, jobNumber: string | undefined, name: string | undefined, gender: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptTimeDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Dept/Holiday?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (ageMax === null)
            throw new Error("The parameter 'ageMax' cannot be null.");
        else if (ageMax !== undefined)
            url_ += "ageMax=" + encodeURIComponent("" + ageMax) + "&";
        if (ageMin === null)
            throw new Error("The parameter 'ageMin' cannot be null.");
        else if (ageMin !== undefined)
            url_ += "ageMin=" + encodeURIComponent("" + ageMin) + "&";
        if (jobNumber === null)
            throw new Error("The parameter 'jobNumber' cannot be null.");
        else if (jobNumber !== undefined)
            url_ += "jobNumber=" + encodeURIComponent("" + jobNumber) + "&";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        if (gender === null)
            throw new Error("The parameter 'gender' cannot be null.");
        else if (gender !== undefined)
            url_ += "gender=" + encodeURIComponent("" + gender) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHoliday(_response));
        });
    }

    protected processHoliday(response: AxiosResponse): Promise<DeptTimeDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptTimeDetailResult.fromJS(resultData200);
            return Promise.resolve<DeptTimeDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptTimeDetailResult>(null as any);
    }

    /**
     * 管理类 - 休假统计 - 导出
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param ageMax (optional) 年龄最大值
     * @param ageMin (optional) 年龄最小值
     * @param jobNumber (optional) 工号
     * @param name (optional) 姓名
     * @param gender (optional) 性别
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET184(startDate: string | undefined, endDate: string | undefined, ageMax: string | undefined, ageMin: string | undefined, jobNumber: string | undefined, name: string | undefined, gender: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Report/Dept/Holiday/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (ageMax === null)
            throw new Error("The parameter 'ageMax' cannot be null.");
        else if (ageMax !== undefined)
            url_ += "ageMax=" + encodeURIComponent("" + ageMax) + "&";
        if (ageMin === null)
            throw new Error("The parameter 'ageMin' cannot be null.");
        else if (ageMin !== undefined)
            url_ += "ageMin=" + encodeURIComponent("" + ageMin) + "&";
        if (jobNumber === null)
            throw new Error("The parameter 'jobNumber' cannot be null.");
        else if (jobNumber !== undefined)
            url_ += "jobNumber=" + encodeURIComponent("" + jobNumber) + "&";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        if (gender === null)
            throw new Error("The parameter 'gender' cannot be null.");
        else if (gender !== undefined)
            url_ += "gender=" + encodeURIComponent("" + gender) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET184(_response));
        });
    }

    protected processExportGET184(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * 管理类 - 上班统计
     * @param format (optional) 日期：week/month
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param role (optional) nurse/doctor
     * @param ageMax (optional)
     * @param ageMin (optional)
     * @param jobNumber (optional)
     * @param name (optional)
     * @param gender (optional)
     * @param filter (optional) 查询条件
     * @return Success
     */
    workSchedule(format: string | undefined, startDate: string | undefined, endDate: string | undefined, role: string | undefined, ageMax: string | undefined, ageMin: string | undefined, jobNumber: string | undefined, name: string | undefined, gender: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<WorkScheduleResult> {
        let url_ = this.baseUrl + "/api/Report/Dept/WorkSchedule?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (role === null)
            throw new Error("The parameter 'role' cannot be null.");
        else if (role !== undefined)
            url_ += "role=" + encodeURIComponent("" + role) + "&";
        if (ageMax === null)
            throw new Error("The parameter 'ageMax' cannot be null.");
        else if (ageMax !== undefined)
            url_ += "ageMax=" + encodeURIComponent("" + ageMax) + "&";
        if (ageMin === null)
            throw new Error("The parameter 'ageMin' cannot be null.");
        else if (ageMin !== undefined)
            url_ += "ageMin=" + encodeURIComponent("" + ageMin) + "&";
        if (jobNumber === null)
            throw new Error("The parameter 'jobNumber' cannot be null.");
        else if (jobNumber !== undefined)
            url_ += "jobNumber=" + encodeURIComponent("" + jobNumber) + "&";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        if (gender === null)
            throw new Error("The parameter 'gender' cannot be null.");
        else if (gender !== undefined)
            url_ += "gender=" + encodeURIComponent("" + gender) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processWorkSchedule(_response));
        });
    }

    protected processWorkSchedule(response: AxiosResponse): Promise<WorkScheduleResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = WorkScheduleResult.fromJS(resultData200);
            return Promise.resolve<WorkScheduleResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<WorkScheduleResult>(null as any);
    }

    /**
     * 管理类 - 上班统计 - 导出
     * @param format (optional) week/month
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param role (optional) nurse/doctor
     * @param ageMax (optional)
     * @param ageMin (optional)
     * @param jobNumber (optional)
     * @param name (optional)
     * @param gender (optional)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET185(format: string | undefined, startDate: string | undefined, endDate: string | undefined, role: string | undefined, ageMax: string | undefined, ageMin: string | undefined, jobNumber: string | undefined, name: string | undefined, gender: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Report/Dept/WorkSchedule/Export?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (role === null)
            throw new Error("The parameter 'role' cannot be null.");
        else if (role !== undefined)
            url_ += "role=" + encodeURIComponent("" + role) + "&";
        if (ageMax === null)
            throw new Error("The parameter 'ageMax' cannot be null.");
        else if (ageMax !== undefined)
            url_ += "ageMax=" + encodeURIComponent("" + ageMax) + "&";
        if (ageMin === null)
            throw new Error("The parameter 'ageMin' cannot be null.");
        else if (ageMin !== undefined)
            url_ += "ageMin=" + encodeURIComponent("" + ageMin) + "&";
        if (jobNumber === null)
            throw new Error("The parameter 'jobNumber' cannot be null.");
        else if (jobNumber !== undefined)
            url_ += "jobNumber=" + encodeURIComponent("" + jobNumber) + "&";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        if (gender === null)
            throw new Error("The parameter 'gender' cannot be null.");
        else if (gender !== undefined)
            url_ += "gender=" + encodeURIComponent("" + gender) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET185(_response));
        });
    }

    protected processExportGET185(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * 管理类 - 考勤统计 - 汇总统计
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    workAttendance(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptWorkAttendanceResult> {
        let url_ = this.baseUrl + "/api/Report/Dept/WorkAttendance?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processWorkAttendance(_response));
        });
    }

    protected processWorkAttendance(response: AxiosResponse): Promise<DeptWorkAttendanceResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptWorkAttendanceResult.fromJS(resultData200);
            return Promise.resolve<DeptWorkAttendanceResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptWorkAttendanceResult>(null as any);
    }

    /**
     * 管理类 - 考勤统计 - 汇总统计 - 导出
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET186(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Report/Dept/WorkAttendance/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET186(_response));
        });
    }

    protected processExportGET186(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * 管理类 - 考勤统计 - 汇总统计 - 详细
     * @param shiftName (optional) 排班
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    detail23(shiftName: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptWorkAttendanceDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Dept/WorkAttendance/Detail?";
        if (shiftName === null)
            throw new Error("The parameter 'shiftName' cannot be null.");
        else if (shiftName !== undefined)
            url_ += "shiftName=" + encodeURIComponent("" + shiftName) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetail23(_response));
        });
    }

    protected processDetail23(response: AxiosResponse): Promise<DeptWorkAttendanceDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptWorkAttendanceDetailResult.fromJS(resultData200);
            return Promise.resolve<DeptWorkAttendanceDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptWorkAttendanceDetailResult>(null as any);
    }

    /**
     * 管理类 - 考勤统计 - 汇总统计 - 详细 -  导出
     * @param shiftName (optional) 排班
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET187(shiftName: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Report/Dept/WorkAttendance/Detail/Export?";
        if (shiftName === null)
            throw new Error("The parameter 'shiftName' cannot be null.");
        else if (shiftName !== undefined)
            url_ += "shiftName=" + encodeURIComponent("" + shiftName) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET187(_response));
        });
    }

    protected processExportGET187(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * 管理类 - 床位区域查询
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    area(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptBedAreaResult> {
        let url_ = this.baseUrl + "/api/Report/Dept/BedsUse/Area?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processArea(_response));
        });
    }

    protected processArea(response: AxiosResponse): Promise<DeptBedAreaResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptBedAreaResult.fromJS(resultData200);
            return Promise.resolve<DeptBedAreaResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptBedAreaResult>(null as any);
    }

    /**
     * 管理类- 床位统计
     * @param selectedAreaId (optional) 排床区域Id
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    beds(selectedAreaId: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptBedsResult> {
        let url_ = this.baseUrl + "/api/Report/Dept/Beds?";
        if (selectedAreaId === null)
            throw new Error("The parameter 'selectedAreaId' cannot be null.");
        else if (selectedAreaId !== undefined)
            url_ += "selectedAreaId=" + encodeURIComponent("" + selectedAreaId) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBeds(_response));
        });
    }

    protected processBeds(response: AxiosResponse): Promise<DeptBedsResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptBedsResult.fromJS(resultData200);
            return Promise.resolve<DeptBedsResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptBedsResult>(null as any);
    }

    /**
     * 管理类 - 床位统计 - 导出
     * @param selectedAreaId (optional) 排床区域Id
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET188(selectedAreaId: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dept/Beds/Export?";
        if (selectedAreaId === null)
            throw new Error("The parameter 'selectedAreaId' cannot be null.");
        else if (selectedAreaId !== undefined)
            url_ += "selectedAreaId=" + encodeURIComponent("" + selectedAreaId) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET188(_response));
        });
    }

    protected processExportGET188(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 管理类 - 床位统计 - 详细
     * @param selectedAreaId (optional) 分区
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    detail24(selectedAreaId: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptBedsDetailsResult> {
        let url_ = this.baseUrl + "/api/Report/Dept/Beds/Detail?";
        if (selectedAreaId === null)
            throw new Error("The parameter 'selectedAreaId' cannot be null.");
        else if (selectedAreaId !== undefined)
            url_ += "selectedAreaId=" + encodeURIComponent("" + selectedAreaId) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetail24(_response));
        });
    }

    protected processDetail24(response: AxiosResponse): Promise<DeptBedsDetailsResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptBedsDetailsResult.fromJS(resultData200);
            return Promise.resolve<DeptBedsDetailsResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptBedsDetailsResult>(null as any);
    }

    /**
     * 管理类 - 床位统计 - 详细 - 导出
     * @param selectedAreaId (optional) 分区
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET189(selectedAreaId: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dept/Beds/Detail/Export?";
        if (selectedAreaId === null)
            throw new Error("The parameter 'selectedAreaId' cannot be null.");
        else if (selectedAreaId !== undefined)
            url_ += "selectedAreaId=" + encodeURIComponent("" + selectedAreaId) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET189(_response));
        });
    }

    protected processExportGET189(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 管理类 - 床位使用率
     * @param dateStr (optional) 日期格式yyyy, yyyy-MM, yyyy-MM-dd
     * @param areaName (optional) 排床区域名称
     * @param shiftName (optional) 排班
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @param empty (optional) 是否空床率
     * @return Success
     */
    bedsUse(dateStr: string | undefined, areaName: string | undefined, shiftName: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined, empty: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<DeptBedsUseResult> {
        let url_ = this.baseUrl + "/api/Report/Dept/BedsUse?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (areaName === null)
            throw new Error("The parameter 'areaName' cannot be null.");
        else if (areaName !== undefined)
            url_ += "AreaName=" + encodeURIComponent("" + areaName) + "&";
        if (shiftName === null)
            throw new Error("The parameter 'shiftName' cannot be null.");
        else if (shiftName !== undefined)
            url_ += "shiftName=" + encodeURIComponent("" + shiftName) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (empty === null)
            throw new Error("The parameter 'empty' cannot be null.");
        else if (empty !== undefined)
            url_ += "empty=" + encodeURIComponent("" + empty) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBedsUse(_response));
        });
    }

    protected processBedsUse(response: AxiosResponse): Promise<DeptBedsUseResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptBedsUseResult.fromJS(resultData200);
            return Promise.resolve<DeptBedsUseResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptBedsUseResult>(null as any);
    }

    /**
     * 管理类 - 床位使用率  -导出
     * @param dateStr (optional) 日期格式yyyy, yyyy-MM, yyyy-MM-dd
     * @param areaName (optional) 排床区域名称
     * @param shiftName (optional) 排班
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @param empty (optional) 是否空床率
     * @return Success
     */
    exportGET190(dateStr: string | undefined, areaName: string | undefined, shiftName: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined, empty: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dept/BedsUse/Export?";
        if (dateStr === null)
            throw new Error("The parameter 'dateStr' cannot be null.");
        else if (dateStr !== undefined)
            url_ += "dateStr=" + encodeURIComponent("" + dateStr) + "&";
        if (areaName === null)
            throw new Error("The parameter 'areaName' cannot be null.");
        else if (areaName !== undefined)
            url_ += "AreaName=" + encodeURIComponent("" + areaName) + "&";
        if (shiftName === null)
            throw new Error("The parameter 'shiftName' cannot be null.");
        else if (shiftName !== undefined)
            url_ += "shiftName=" + encodeURIComponent("" + shiftName) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (empty === null)
            throw new Error("The parameter 'empty' cannot be null.");
        else if (empty !== undefined)
            url_ += "empty=" + encodeURIComponent("" + empty) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET190(_response));
        });
    }

    protected processExportGET190(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 管理类 - 床位使用率 - 详细
     * @param date (optional) 查询日期
     * @param areaName (optional)
     * @param shiftName (optional)
     * @param filter (optional) 查询条件
     * @param empty (optional)
     * @return Success
     */
    detail25(date: string | undefined, areaName: string | undefined, shiftName: string | undefined, filter: string | undefined, empty: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<DeptBedsUseDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Dept/BedsUse/Detail?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (areaName === null)
            throw new Error("The parameter 'areaName' cannot be null.");
        else if (areaName !== undefined)
            url_ += "AreaName=" + encodeURIComponent("" + areaName) + "&";
        if (shiftName === null)
            throw new Error("The parameter 'shiftName' cannot be null.");
        else if (shiftName !== undefined)
            url_ += "shiftName=" + encodeURIComponent("" + shiftName) + "&";
        if (empty === null)
            throw new Error("The parameter 'empty' cannot be null.");
        else if (empty !== undefined)
            url_ += "empty=" + encodeURIComponent("" + empty) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetail25(_response));
        });
    }

    protected processDetail25(response: AxiosResponse): Promise<DeptBedsUseDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptBedsUseDetailResult.fromJS(resultData200);
            return Promise.resolve<DeptBedsUseDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptBedsUseDetailResult>(null as any);
    }

    /**
     * 管理类 - 床位使用率 - 详细  -导出
     * @param date (optional) 查询日期
     * @param areaName (optional)
     * @param shiftName (optional)
     * @param filter (optional) 查询条件
     * @param empty (optional)
     * @return Success
     */
    exportGET191(date: string | undefined, areaName: string | undefined, shiftName: string | undefined, filter: string | undefined, empty: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dept/BedsUse/Detail/Export?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (areaName === null)
            throw new Error("The parameter 'areaName' cannot be null.");
        else if (areaName !== undefined)
            url_ += "AreaName=" + encodeURIComponent("" + areaName) + "&";
        if (shiftName === null)
            throw new Error("The parameter 'shiftName' cannot be null.");
        else if (shiftName !== undefined)
            url_ += "shiftName=" + encodeURIComponent("" + shiftName) + "&";
        if (empty === null)
            throw new Error("The parameter 'empty' cannot be null.");
        else if (empty !== undefined)
            url_ += "empty=" + encodeURIComponent("" + empty) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET191(_response));
        });
    }

    protected processExportGET191(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 管理类 -用户登录统计
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    userLogin(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptUserLoginResult> {
        let url_ = this.baseUrl + "/api/Report/Dept/UserLogin?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUserLogin(_response));
        });
    }

    protected processUserLogin(response: AxiosResponse): Promise<DeptUserLoginResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptUserLoginResult.fromJS(resultData200);
            return Promise.resolve<DeptUserLoginResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptUserLoginResult>(null as any);
    }

    /**
     * 管理类 - 用户登录统计  -导出
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET192(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dept/UserLogin/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET192(_response));
        });
    }

    protected processExportGET192(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 管理类 - 用户操作统计
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    userOperation(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptUserOperationsResult> {
        let url_ = this.baseUrl + "/api/Report/Dept/UserOperation?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUserOperation(_response));
        });
    }

    protected processUserOperation(response: AxiosResponse): Promise<DeptUserOperationsResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptUserOperationsResult.fromJS(resultData200);
            return Promise.resolve<DeptUserOperationsResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptUserOperationsResult>(null as any);
    }

    /**
     * 管理类 - 用户操作统计  -导出
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET193(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Dept/UserOperation/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET193(_response));
        });
    }

    protected processExportGET193(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 院感类 -- 阴转阳
     * @param year 年份（yyyy）
     * @param filter (optional) 查询条件
     * @return Success
     */
    positive(year: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SensePositiveResult> {
        let url_ = this.baseUrl + "/api/Report/Sense/Positive/{year}";
        if (year === undefined || year === null)
            throw new Error("The parameter 'year' must be defined.");
        url_ = url_.replace("{year}", encodeURIComponent("" + year));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPositive(_response));
        });
    }

    protected processPositive(response: AxiosResponse): Promise<SensePositiveResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SensePositiveResult.fromJS(resultData200);
            return Promise.resolve<SensePositiveResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SensePositiveResult>(null as any);
    }

    /**
     * 院感类 -- 阴转阳 -- 导出
     * @param year 年份（yyyy）
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET194(year: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Sense/Positive/Export/{year}";
        if (year === undefined || year === null)
            throw new Error("The parameter 'year' must be defined.");
        url_ = url_.replace("{year}", encodeURIComponent("" + year));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET194(_response));
        });
    }

    protected processExportGET194(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 院感类 -- 阴转阳
     * @param date (optional) 日期
     * @param type (optional) 类型(乙肝E抗原：HBVE 乙肝表面抗原：HBVF 丙肝抗体：HCV 艾滋病抗体：HIV 梅毒：TPV)
     * @param filter (optional) 查询条件
     * @return Success
     */
    positiveDetail(date: string | undefined, type: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SensePositiveDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Sense/PositiveDetail?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPositiveDetail(_response));
        });
    }

    protected processPositiveDetail(response: AxiosResponse): Promise<SensePositiveDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SensePositiveDetailResult.fromJS(resultData200);
            return Promise.resolve<SensePositiveDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SensePositiveDetailResult>(null as any);
    }

    /**
     * 院感类 -- 阴转阳 -- 导出
     * @param date (optional) 日期
     * @param type (optional) 类型(乙肝E抗原：HBVE 乙肝表面抗原：HBVF 丙肝抗体：HCV 艾滋病抗体：HIV 梅毒：TPV)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET195(date: string | undefined, type: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Sense/PositiveDetail/Export?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET195(_response));
        });
    }

    protected processExportGET195(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 院感类 -- 透析液检测统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    dialysateDetection(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SenseDialysateDetectionResult> {
        let url_ = this.baseUrl + "/api/Report/Sense/DialysateDetection?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDialysateDetection(_response));
        });
    }

    protected processDialysateDetection(response: AxiosResponse): Promise<SenseDialysateDetectionResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SenseDialysateDetectionResult.fromJS(resultData200);
            return Promise.resolve<SenseDialysateDetectionResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SenseDialysateDetectionResult>(null as any);
    }

    /**
     * 院感类 -- 透析液检测统计 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET196(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Sense/DialysateDetection/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET196(_response));
        });
    }

    protected processExportGET196(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 院感类 -- 内毒素检测统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    kreotoxin(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SenseKreotoxinResult> {
        let url_ = this.baseUrl + "/api/Report/Sense/Kreotoxin?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processKreotoxin(_response));
        });
    }

    protected processKreotoxin(response: AxiosResponse): Promise<SenseKreotoxinResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SenseKreotoxinResult.fromJS(resultData200);
            return Promise.resolve<SenseKreotoxinResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SenseKreotoxinResult>(null as any);
    }

    /**
     * 院感类 -- 内毒素检测统计 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET197(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Sense/Kreotoxin/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET197(_response));
        });
    }

    protected processExportGET197(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 院感类 -- 电解质检测统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    electrolyte(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SenseElectrolyteResult> {
        let url_ = this.baseUrl + "/api/Report/Sense/Electrolyte?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processElectrolyte(_response));
        });
    }

    protected processElectrolyte(response: AxiosResponse): Promise<SenseElectrolyteResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SenseElectrolyteResult.fromJS(resultData200);
            return Promise.resolve<SenseElectrolyteResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SenseElectrolyteResult>(null as any);
    }

    /**
     * 院感类 -- 电解质检测统计 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET198(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Sense/Electrolyte/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET198(_response));
        });
    }

    protected processExportGET198(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 院感类 -- 细菌培养统计
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    germiculture(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SenseGermicultureResult> {
        let url_ = this.baseUrl + "/api/Report/Sense/Germiculture?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGermiculture(_response));
        });
    }

    protected processGermiculture(response: AxiosResponse): Promise<SenseGermicultureResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SenseGermicultureResult.fromJS(resultData200);
            return Promise.resolve<SenseGermicultureResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SenseGermicultureResult>(null as any);
    }

    /**
     * 院感类 -- 细菌培养统计 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET199(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Sense/Germiculture/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET199(_response));
        });
    }

    protected processExportGET199(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 院感类 -- 感染与非感染
     * @param year 年份（yyyy）
     * @param filter (optional) 查询条件
     * @return Success
     */
    affect(year: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SenseAffectResult> {
        let url_ = this.baseUrl + "/api/Report/Sense/Affect/{year}";
        if (year === undefined || year === null)
            throw new Error("The parameter 'year' must be defined.");
        url_ = url_.replace("{year}", encodeURIComponent("" + year));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAffect(_response));
        });
    }

    protected processAffect(response: AxiosResponse): Promise<SenseAffectResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SenseAffectResult.fromJS(resultData200);
            return Promise.resolve<SenseAffectResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SenseAffectResult>(null as any);
    }

    /**
     * 院感类 -- 感染与非感染 -- 导出
     * @param year 年份（yyyy）
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET200(year: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Sense/Affect/{year}/Export";
        if (year === undefined || year === null)
            throw new Error("The parameter 'year' must be defined.");
        url_ = url_.replace("{year}", encodeURIComponent("" + year));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET200(_response));
        });
    }

    protected processExportGET200(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 院感类 -- 感染与非感染
     * @param year 年份（yyyy）
     * @param quarter (optional) 季度
     * @param type (optional) 类型(感染 1；非感染 0)
     * @param filter (optional) 查询条件
     * @return Success
     */
    affectDetail(year: string, quarter: string | undefined, type: number | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SenseInfectDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Sense/AffectDetail/{year}?";
        if (year === undefined || year === null)
            throw new Error("The parameter 'year' must be defined.");
        url_ = url_.replace("{year}", encodeURIComponent("" + year));
        if (quarter === null)
            throw new Error("The parameter 'quarter' cannot be null.");
        else if (quarter !== undefined)
            url_ += "quarter=" + encodeURIComponent("" + quarter) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAffectDetail(_response));
        });
    }

    protected processAffectDetail(response: AxiosResponse): Promise<SenseInfectDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SenseInfectDetailResult.fromJS(resultData200);
            return Promise.resolve<SenseInfectDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SenseInfectDetailResult>(null as any);
    }

    /**
     * 院感类 -- 感染与非感染 -- 导出
     * @param year 年份（yyyy）
     * @param quarter (optional) 季度
     * @param type (optional) 类型(感染 1；非感染 0)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET201(year: string, quarter: string | undefined, type: number | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Sense/AffectDetail/{year}/Export?";
        if (year === undefined || year === null)
            throw new Error("The parameter 'year' must be defined.");
        url_ = url_.replace("{year}", encodeURIComponent("" + year));
        if (quarter === null)
            throw new Error("The parameter 'quarter' cannot be null.");
        else if (quarter !== undefined)
            url_ += "quarter=" + encodeURIComponent("" + quarter) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET201(_response));
        });
    }

    protected processExportGET201(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 院感类 -- 传染学指标检验率
     * @param isnew (optional) 是否新增患者 1：是 0：否
     * @param year 年份（yyyy）
     * @param filter (optional) 查询条件
     * @return Success
     */
    infect(isnew: number | undefined, year: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SenseInfectResult> {
        let url_ = this.baseUrl + "/api/Report/Sense/Infect/{year}?";
        if (year === undefined || year === null)
            throw new Error("The parameter 'year' must be defined.");
        url_ = url_.replace("{year}", encodeURIComponent("" + year));
        if (isnew === null)
            throw new Error("The parameter 'isnew' cannot be null.");
        else if (isnew !== undefined)
            url_ += "isnew=" + encodeURIComponent("" + isnew) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processInfect(_response));
        });
    }

    protected processInfect(response: AxiosResponse): Promise<SenseInfectResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SenseInfectResult.fromJS(resultData200);
            return Promise.resolve<SenseInfectResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SenseInfectResult>(null as any);
    }

    /**
     * 院感类 -- 传染学指标检验率 -- 导出
     * @param isnew (optional) 是否新增患者 1：是 0：否
     * @param year 年份（yyyy）
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET202(isnew: number | undefined, year: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Sense/Infect/Export/{year}?";
        if (year === undefined || year === null)
            throw new Error("The parameter 'year' must be defined.");
        url_ = url_.replace("{year}", encodeURIComponent("" + year));
        if (isnew === null)
            throw new Error("The parameter 'isnew' cannot be null.");
        else if (isnew !== undefined)
            url_ += "isnew=" + encodeURIComponent("" + isnew) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET202(_response));
        });
    }

    protected processExportGET202(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 院感类 -- 传染学指标检验率
     * @param isnew (optional) 是否新增患者 1：是 0：否
     * @param date (optional) 日期
     * @param type (optional) 类型(乙肝：HBV 丙肝：HCV 艾滋：HIV 梅毒：TPV)
     * @param filter (optional) 查询条件
     * @return Success
     */
    infectDetail(isnew: number | undefined, date: string | undefined, type: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SenseInfectDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Sense/InfectDetail?";
        if (isnew === null)
            throw new Error("The parameter 'isnew' cannot be null.");
        else if (isnew !== undefined)
            url_ += "isnew=" + encodeURIComponent("" + isnew) + "&";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processInfectDetail(_response));
        });
    }

    protected processInfectDetail(response: AxiosResponse): Promise<SenseInfectDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SenseInfectDetailResult.fromJS(resultData200);
            return Promise.resolve<SenseInfectDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SenseInfectDetailResult>(null as any);
    }

    /**
     * 院感类 -- 传染学指标检验率 -- 导出
     * @param isnew (optional) 是否新增患者 1：是 0：否
     * @param date (optional) 日期
     * @param type (optional) 类型(乙肝：HBV 丙肝：HCV 艾滋：HIV 梅毒：TPV)
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET203(isnew: number | undefined, date: string | undefined, type: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Sense/InfectDetail/Export?";
        if (isnew === null)
            throw new Error("The parameter 'isnew' cannot be null.");
        else if (isnew !== undefined)
            url_ += "isnew=" + encodeURIComponent("" + isnew) + "&";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET203(_response));
        });
    }

    protected processExportGET203(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 院感类 - 血液透析感染事件发生率
     * @param type (optional) 报表类型
     * @param format (optional) 日期类型(YEAR:年度 QUARTER:季度 MONTH:月度 )
     * @param startStr (optional) 开始时间(如：2023)
     * @param endStr (optional) 结束时间(如：2024)
     * @param dialysisState (optional) 患者状态
     * @param patientSource (optional) 来源
     * @return Success
     */
    hemodialysisInfect(type: string | undefined, format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined , cancelToken?: CancelToken | undefined): Promise<SenseHemodialysisInfectResult> {
        let url_ = this.baseUrl + "/api/Report/Sense/HemodialysisInfect?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHemodialysisInfect(_response));
        });
    }

    protected processHemodialysisInfect(response: AxiosResponse): Promise<SenseHemodialysisInfectResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SenseHemodialysisInfectResult.fromJS(resultData200);
            return Promise.resolve<SenseHemodialysisInfectResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SenseHemodialysisInfectResult>(null as any);
    }

    /**
     * 院感类 - 血液透析感染事件发生率 - 明细
     * @param type (optional) 报表类型
     * @param format (optional) 日期类型(YEAR:年度 QUARTER:季度 MONTH:月度 )
     * @param startDate (optional) 开始日期
     * @param endDate (optional) 结束日期
     * @param dialysisState (optional) 患者状态
     * @param patientSource (optional) 来源
     * @param filter (optional) 查询条件
     * @return Success
     */
    hemodialysisInfectDetail(type: string | undefined, format: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, dialysisState: string | undefined, patientSource: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SenseHemodialysisInfectDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Sense/HemodialysisInfectDetail?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHemodialysisInfectDetail(_response));
        });
    }

    protected processHemodialysisInfectDetail(response: AxiosResponse): Promise<SenseHemodialysisInfectDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SenseHemodialysisInfectDetailResult.fromJS(resultData200);
            return Promise.resolve<SenseHemodialysisInfectDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SenseHemodialysisInfectDetailResult>(null as any);
    }

    /**
     * 院感类 - 血液透析感染事件发生率 - 明细 - 导出
     * @param type (optional) 报表类型
     * @param format (optional) 日期类型(YEAR:年度 QUARTER:季度 MONTH:月度 )
     * @param startDate (optional) 开始日期
     * @param endDate (optional) 结束日期
     * @param dialysisState (optional) 患者状态
     * @param patientSource (optional) 来源
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET204(type: string | undefined, format: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, dialysisState: string | undefined, patientSource: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Sense/HemodialysisInfectDetail/Export?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET204(_response));
        });
    }

    protected processExportGET204(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 院感类 -- 阴转阳率
     * @param format (optional) 日期类型(YEAR:年度 QUARTER:季度 MONTH:月度 )
     * @param startStr (optional)
     * @param endStr (optional)
     * @param dialysisState (optional)
     * @param patientSource (optional)
     * @param filter (optional)
     * @return Success
     */
    negativeToPositive(format: string | undefined, startStr: string | undefined, endStr: string | undefined, dialysisState: string | undefined, patientSource: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<NegativeToPositiveResult> {
        let url_ = this.baseUrl + "/api/Report/Sense/NegativeToPositive?";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startStr === null)
            throw new Error("The parameter 'startStr' cannot be null.");
        else if (startStr !== undefined)
            url_ += "startStr=" + encodeURIComponent("" + startStr) + "&";
        if (endStr === null)
            throw new Error("The parameter 'endStr' cannot be null.");
        else if (endStr !== undefined)
            url_ += "endStr=" + encodeURIComponent("" + endStr) + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processNegativeToPositive(_response));
        });
    }

    protected processNegativeToPositive(response: AxiosResponse): Promise<NegativeToPositiveResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = NegativeToPositiveResult.fromJS(resultData200);
            return Promise.resolve<NegativeToPositiveResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NegativeToPositiveResult>(null as any);
    }

    /**
     * 院感类 -- 阴转阳率 - 明细
     * @param type (optional) 类型(0:HBV 1:HCV 2:HIV 3:梅毒)
     * @param format (optional) 日期类型(YEAR:年度 QUARTER:季度 MONTH:月度 )
     * @param startDate (optional) 开始日期
     * @param endDate (optional) 结束日期
     * @param dialysisState (optional) 患者状态
     * @param patientSource (optional) 来源
     * @param filter (optional) 查询条件
     * @return Success
     */
    negativeToPositiveDetail(type: number | undefined, format: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, dialysisState: string | undefined, patientSource: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<NegativeToPositiveDetailResult> {
        let url_ = this.baseUrl + "/api/Report/Sense/NegativeToPositiveDetail?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processNegativeToPositiveDetail(_response));
        });
    }

    protected processNegativeToPositiveDetail(response: AxiosResponse): Promise<NegativeToPositiveDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = NegativeToPositiveDetailResult.fromJS(resultData200);
            return Promise.resolve<NegativeToPositiveDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NegativeToPositiveDetailResult>(null as any);
    }

    /**
     * 院感类 -- 阴转阳率 - 明细 - 导出
     * @param type (optional) 类型(0:HBV 1:HCV 2:HIV 3:梅毒)
     * @param format (optional) 日期类型(YEAR:年度 QUARTER:季度 MONTH:月度 )
     * @param startDate (optional) 开始日期
     * @param endDate (optional) 结束日期
     * @param dialysisState (optional) 患者状态
     * @param patientSource (optional) 来源
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET205(type: number | undefined, format: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, dialysisState: string | undefined, patientSource: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Sense/NegativeToPositiveDetail/Export?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (dialysisState === null)
            throw new Error("The parameter 'dialysisState' cannot be null.");
        else if (dialysisState !== undefined)
            url_ += "dialysisState=" + encodeURIComponent("" + dialysisState) + "&";
        if (patientSource === null)
            throw new Error("The parameter 'patientSource' cannot be null.");
        else if (patientSource !== undefined)
            url_ += "patientSource=" + encodeURIComponent("" + patientSource) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET205(_response));
        });
    }

    protected processExportGET205(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 质控类 -- 质控报表列
     * @return Success
     */
    qualityColumns(  cancelToken?: CancelToken | undefined): Promise<QualityColumnViewResult> {
        let url_ = this.baseUrl + "/api/Report/QualityColumns";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQualityColumns(_response));
        });
    }

    protected processQualityColumns(response: AxiosResponse): Promise<QualityColumnViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QualityColumnViewResult.fromJS(resultData200);
            return Promise.resolve<QualityColumnViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QualityColumnViewResult>(null as any);
    }

    /**
     * 质控类 -- 质控报表
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param key (optional) 查询条件
     * @param filter (optional) 查询条件
     * @return Success
     */
    quality(startDate: string | undefined, endDate: string | undefined, key: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<ObjectResult> {
        let url_ = this.baseUrl + "/api/Report/Quality?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQuality(_response));
        });
    }

    protected processQuality(response: AxiosResponse): Promise<ObjectResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ObjectResult.fromJS(resultData200);
            return Promise.resolve<ObjectResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ObjectResult>(null as any);
    }

    /**
     * 质控类 -- 质控报表 -- 导出
     * @param startDate (optional) 开始日期(yyyy-MM-dd)
     * @param endDate (optional) 结束日期(yyyy-MM-dd)
     * @param key (optional) 查询条件
     * @param filter (optional) 查询条件
     * @return Success
     */
    exportGET206(startDate: string | undefined, endDate: string | undefined, key: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Quality/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET206(_response));
        });
    }

    protected processExportGET206(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析信息
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional)
     * @return Success
     */
    cureRecord(patientId: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientCureRecordViewResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/CureRecord/{patientId}?";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecord(_response));
        });
    }

    protected processCureRecord(response: AxiosResponse): Promise<PatientCureRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientCureRecordViewResult.fromJS(resultData200);
            return Promise.resolve<PatientCureRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientCureRecordViewResult>(null as any);
    }

    /**
     * 透析信息 导出
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional)
     * @return Success
     */
    exportGET207(patientId: string, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Patient/CureRecord/{patientId}/Export?";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET207(_response));
        });
    }

    protected processExportGET207(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 化验项目
     * @param startDate (optional)
     * @param endDate (optional)
     * @param code (optional)
     * @return Success
     */
    test(patientId: string, startDate: string | undefined, endDate: string | undefined, code: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientTestViewResult> {
        let url_ = this.baseUrl + "/api/Report/Patient/Test/{patientId}?";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTest(_response));
        });
    }

    protected processTest(response: AxiosResponse): Promise<PatientTestViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientTestViewResult.fromJS(resultData200);
            return Promise.resolve<PatientTestViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientTestViewResult>(null as any);
    }

    /**
     * 血透数据
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional)
     * @return Success
     */
    patientLisReportData(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientLisReportDataViewResult> {
        let url_ = this.baseUrl + "/api/Report/Test/PatientLisReportData?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientLisReportData(_response));
        });
    }

    protected processPatientLisReportData(response: AxiosResponse): Promise<PatientLisReportDataViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientLisReportDataViewResult.fromJS(resultData200);
            return Promise.resolve<PatientLisReportDataViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientLisReportDataViewResult>(null as any);
    }

    /**
     * 血透数据 导出
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional)
     * @return Success
     */
    exportGET208(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Report/Test/PatientLisReportData/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET208(_response));
        });
    }

    protected processExportGET208(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 今日就诊例次统计
     * @return Success
     */
    todayShifts(date: string , cancelToken?: CancelToken | undefined): Promise<CureTodayShiftResult> {
        let url_ = this.baseUrl + "/api/Report/Cure/TodayShifts/{date}";
        if (date === undefined || date === null)
            throw new Error("The parameter 'date' must be defined.");
        url_ = url_.replace("{date}", encodeURIComponent("" + date));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTodayShifts(_response));
        });
    }

    protected processTodayShifts(response: AxiosResponse): Promise<CureTodayShiftResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureTodayShiftResult.fromJS(resultData200);
            return Promise.resolve<CureTodayShiftResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureTodayShiftResult>(null as any);
    }
}

/** 费用类 - 费用日报/周报/月报 */
export class ChargeStatistics implements IChargeStatistics {
    /** 日期 */
    date?: string | undefined;
    /** 治疗 */
    cure?: number;
    /** 药品 */
    drug?: number;
    /** 项目 */
    project?: number;
    /** 耗材 */
    consumable?: number;
    /** 护理 */
    nursing?: number;
    /** 耗材、药品、项目 合计 */
    readonly cdPtotal?: number;

    constructor(data?: IChargeStatistics) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.cure = _data["cure"];
            this.drug = _data["drug"];
            this.project = _data["project"];
            this.consumable = _data["consumable"];
            this.nursing = _data["nursing"];
            (<any>this).cdPtotal = _data["cdPtotal"];
        }
    }

    static fromJS(data: any): ChargeStatistics {
        data = typeof data === 'object' ? data : {};
        let result = new ChargeStatistics();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["cure"] = this.cure;
        data["drug"] = this.drug;
        data["project"] = this.project;
        data["consumable"] = this.consumable;
        data["nursing"] = this.nursing;
        data["cdPtotal"] = this.cdPtotal;
        return data;
    }
}

/** 费用类 - 费用日报/周报/月报 */
export interface IChargeStatistics {
    /** 日期 */
    date?: string | undefined;
    /** 治疗 */
    cure?: number;
    /** 药品 */
    drug?: number;
    /** 项目 */
    project?: number;
    /** 耗材 */
    consumable?: number;
    /** 护理 */
    nursing?: number;
    /** 耗材、药品、项目 合计 */
    cdPtotal?: number;
}

/** Reponse */
export class ChargeStatisticsResult implements IChargeStatisticsResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ChargeStatistics[] | undefined;

    constructor(data?: IChargeStatisticsResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ChargeStatistics.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ChargeStatisticsResult {
        data = typeof data === 'object' ? data : {};
        let result = new ChargeStatisticsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IChargeStatisticsResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ChargeStatistics[] | undefined;
}

/** 费用类 - 费用统计 */
export class ChargeTotal implements IChargeTotal {
    /** 日期 */
    date?: string | undefined;
    /** 缴费 */
    payment?: number;
    /** 扣费 */
    deduction?: number;

    constructor(data?: IChargeTotal) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.payment = _data["payment"];
            this.deduction = _data["deduction"];
        }
    }

    static fromJS(data: any): ChargeTotal {
        data = typeof data === 'object' ? data : {};
        let result = new ChargeTotal();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["payment"] = this.payment;
        data["deduction"] = this.deduction;
        return data;
    }
}

/** 费用类 - 费用统计 */
export interface IChargeTotal {
    /** 日期 */
    date?: string | undefined;
    /** 缴费 */
    payment?: number;
    /** 扣费 */
    deduction?: number;
}

/** 费用统计详情类 */
export class ChargeTotalDetail implements IChargeTotalDetail {
    /** 患者姓名 */
    name?: string | undefined;
    /** 金额 */
    money?: number;

    constructor(data?: IChargeTotalDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.money = _data["money"];
        }
    }

    static fromJS(data: any): ChargeTotalDetail {
        data = typeof data === 'object' ? data : {};
        let result = new ChargeTotalDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["money"] = this.money;
        return data;
    }
}

/** 费用统计详情类 */
export interface IChargeTotalDetail {
    /** 患者姓名 */
    name?: string | undefined;
    /** 金额 */
    money?: number;
}

/** Reponse */
export class ChargeTotalDetailResult implements IChargeTotalDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ChargeTotalDetail[] | undefined;

    constructor(data?: IChargeTotalDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ChargeTotalDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ChargeTotalDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new ChargeTotalDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IChargeTotalDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ChargeTotalDetail[] | undefined;
}

/** Reponse */
export class ChargeTotalResult implements IChargeTotalResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ChargeTotal[] | undefined;

    constructor(data?: IChargeTotalResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ChargeTotal.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ChargeTotalResult {
        data = typeof data === 'object' ? data : {};
        let result = new ChargeTotalResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IChargeTotalResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ChargeTotal[] | undefined;
}

/** 常用药品月报 */
export class CommonDrugsReport implements ICommonDrugsReport {
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 药品信息 */
    commonDrugsReports?: CommonDrugsReportItem[] | undefined;

    constructor(data?: ICommonDrugsReport) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientName = _data["patientName"];
            if (Array.isArray(_data["commonDrugsReports"])) {
                this.commonDrugsReports = [] as any;
                for (let item of _data["commonDrugsReports"])
                    this.commonDrugsReports!.push(CommonDrugsReportItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CommonDrugsReport {
        data = typeof data === 'object' ? data : {};
        let result = new CommonDrugsReport();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientName"] = this.patientName;
        if (Array.isArray(this.commonDrugsReports)) {
            data["commonDrugsReports"] = [];
            for (let item of this.commonDrugsReports)
                data["commonDrugsReports"].push(item.toJSON());
        }
        return data;
    }
}

/** 常用药品月报 */
export interface ICommonDrugsReport {
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 药品信息 */
    commonDrugsReports?: CommonDrugsReportItem[] | undefined;
}

/** 常用药品信息 */
export class CommonDrugsReportItem implements ICommonDrugsReportItem {
    /** 药品 */
    drug?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: ICommonDrugsReportItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.drug = _data["drug"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): CommonDrugsReportItem {
        data = typeof data === 'object' ? data : {};
        let result = new CommonDrugsReportItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["drug"] = this.drug;
        data["count"] = this.count;
        return data;
    }
}

/** 常用药品信息 */
export interface ICommonDrugsReportItem {
    /** 药品 */
    drug?: string | undefined;
    /** 数量 */
    count?: number;
}

/** Reponse */
export class CommonDrugsReportResult implements ICommonDrugsReportResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CommonDrugsReport[] | undefined;

    constructor(data?: ICommonDrugsReportResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CommonDrugsReport.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CommonDrugsReportResult {
        data = typeof data === 'object' ? data : {};
        let result = new CommonDrugsReportResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICommonDrugsReportResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CommonDrugsReport[] | undefined;
}

/** 耗材类 - 灌流器 - 详细 */
export class ConsumableGLQDetail implements IConsumableGLQDetail {
    /** 名称 */
    name?: string | undefined;
    /** 数量 */
    count?: number;
    /** 单位 */
    unit?: string | undefined;

    constructor(data?: IConsumableGLQDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.count = _data["count"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): ConsumableGLQDetail {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableGLQDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["count"] = this.count;
        data["unit"] = this.unit;
        return data;
    }
}

/** 耗材类 - 灌流器 - 详细 */
export interface IConsumableGLQDetail {
    /** 名称 */
    name?: string | undefined;
    /** 数量 */
    count?: number;
    /** 单位 */
    unit?: string | undefined;
}

/** Reponse */
export class ConsumableGLQDetailResult implements IConsumableGLQDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableGLQDetail[] | undefined;

    constructor(data?: IConsumableGLQDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ConsumableGLQDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ConsumableGLQDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableGLQDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IConsumableGLQDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableGLQDetail[] | undefined;
}

/** 耗材入库统计 */
export class ConsumableIn implements IConsumableIn {
    /** 日期 */
    date?: string | undefined;
    /** 透析器 */
    txqCount?: number;
    /** 血路管 */
    xlgCount?: number;
    /** 灌流器 */
    glqCount?: number;
    /** 内瘘针 */
    nlzCount?: number;
    /** 血滤器 */
    xlqCount?: number;
    /** 置换液灌流器 */
    zhyglCount?: number;
    /** A液 */
    ayCount?: number;
    /** B液 */
    byCount?: number;

    constructor(data?: IConsumableIn) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.txqCount = _data["txqCount"];
            this.xlgCount = _data["xlgCount"];
            this.glqCount = _data["glqCount"];
            this.nlzCount = _data["nlzCount"];
            this.xlqCount = _data["xlqCount"];
            this.zhyglCount = _data["zhyglCount"];
            this.ayCount = _data["ayCount"];
            this.byCount = _data["byCount"];
        }
    }

    static fromJS(data: any): ConsumableIn {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableIn();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["txqCount"] = this.txqCount;
        data["xlgCount"] = this.xlgCount;
        data["glqCount"] = this.glqCount;
        data["nlzCount"] = this.nlzCount;
        data["xlqCount"] = this.xlqCount;
        data["zhyglCount"] = this.zhyglCount;
        data["ayCount"] = this.ayCount;
        data["byCount"] = this.byCount;
        return data;
    }
}

/** 耗材入库统计 */
export interface IConsumableIn {
    /** 日期 */
    date?: string | undefined;
    /** 透析器 */
    txqCount?: number;
    /** 血路管 */
    xlgCount?: number;
    /** 灌流器 */
    glqCount?: number;
    /** 内瘘针 */
    nlzCount?: number;
    /** 血滤器 */
    xlqCount?: number;
    /** 置换液灌流器 */
    zhyglCount?: number;
    /** A液 */
    ayCount?: number;
    /** B液 */
    byCount?: number;
}

/** 耗材入库统计 -- 详情 */
export class ConsumableInDetail implements IConsumableInDetail {
    /** 日期 */
    date?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 数量 */
    count?: number;
    /** 规格 */
    spec?: string | undefined;
    /** 单位 */
    unit?: string | undefined;

    constructor(data?: IConsumableInDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.name = _data["name"];
            this.count = _data["count"];
            this.spec = _data["spec"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): ConsumableInDetail {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableInDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["name"] = this.name;
        data["count"] = this.count;
        data["spec"] = this.spec;
        data["unit"] = this.unit;
        return data;
    }
}

/** 耗材入库统计 -- 详情 */
export interface IConsumableInDetail {
    /** 日期 */
    date?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 数量 */
    count?: number;
    /** 规格 */
    spec?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
}

/** Reponse */
export class ConsumableInDetailResult implements IConsumableInDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableInDetail[] | undefined;

    constructor(data?: IConsumableInDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ConsumableInDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ConsumableInDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableInDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IConsumableInDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableInDetail[] | undefined;
}

/** Reponse */
export class ConsumableInResult implements IConsumableInResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableIn[] | undefined;

    constructor(data?: IConsumableInResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ConsumableIn.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ConsumableInResult {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableInResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IConsumableInResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableIn[] | undefined;
}

/** 耗材类 - 耗材生产商 - 供应商 */
export class ConsumableManufacturer implements IConsumableManufacturer {
    /** 名称 */
    name?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: IConsumableManufacturer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): ConsumableManufacturer {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableManufacturer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["count"] = this.count;
        return data;
    }
}

/** 耗材类 - 耗材生产商 - 供应商 */
export interface IConsumableManufacturer {
    /** 名称 */
    name?: string | undefined;
    /** 数量 */
    count?: number;
}

/** 耗材类 - 耗材厂商明细 */
export class ConsumableManufacturerDetail implements IConsumableManufacturerDetail {
    /** 项目标识 */
    roomItemListId?: string | undefined;
    /** 耗材名称 */
    name?: string | undefined;
    /** 耗材类型Id */
    typeId?: string | undefined;
    /** 耗材类型 */
    typeName?: string | undefined;
    /** 缩写 */
    shortName?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 一级单位 */
    unitLevel1?: string | undefined;
    /** 基本单位 */
    unitBase?: string | undefined;
    /** 换算率 */
    conversionRate?: number;
    /** 售价 */
    sellingPrice?: number | undefined;
    /** 基本单位的库存 */
    inventoryCount?: number | undefined;
    /** 是否禁用 */
    enabledLabel?: string | undefined;

    constructor(data?: IConsumableManufacturerDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListId = _data["roomItemListId"];
            this.name = _data["name"];
            this.typeId = _data["typeId"];
            this.typeName = _data["typeName"];
            this.shortName = _data["shortName"];
            this.spec = _data["spec"];
            this.origin = _data["origin"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitBase = _data["unitBase"];
            this.conversionRate = _data["conversionRate"];
            this.sellingPrice = _data["sellingPrice"];
            this.inventoryCount = _data["inventoryCount"];
            this.enabledLabel = _data["enabledLabel"];
        }
    }

    static fromJS(data: any): ConsumableManufacturerDetail {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableManufacturerDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListId"] = this.roomItemListId;
        data["name"] = this.name;
        data["typeId"] = this.typeId;
        data["typeName"] = this.typeName;
        data["shortName"] = this.shortName;
        data["spec"] = this.spec;
        data["origin"] = this.origin;
        data["unitLevel1"] = this.unitLevel1;
        data["unitBase"] = this.unitBase;
        data["conversionRate"] = this.conversionRate;
        data["sellingPrice"] = this.sellingPrice;
        data["inventoryCount"] = this.inventoryCount;
        data["enabledLabel"] = this.enabledLabel;
        return data;
    }
}

/** 耗材类 - 耗材厂商明细 */
export interface IConsumableManufacturerDetail {
    /** 项目标识 */
    roomItemListId?: string | undefined;
    /** 耗材名称 */
    name?: string | undefined;
    /** 耗材类型Id */
    typeId?: string | undefined;
    /** 耗材类型 */
    typeName?: string | undefined;
    /** 缩写 */
    shortName?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 一级单位 */
    unitLevel1?: string | undefined;
    /** 基本单位 */
    unitBase?: string | undefined;
    /** 换算率 */
    conversionRate?: number;
    /** 售价 */
    sellingPrice?: number | undefined;
    /** 基本单位的库存 */
    inventoryCount?: number | undefined;
    /** 是否禁用 */
    enabledLabel?: string | undefined;
}

/** Reponse */
export class ConsumableManufacturerDetailResult implements IConsumableManufacturerDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableManufacturerDetail[] | undefined;

    constructor(data?: IConsumableManufacturerDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ConsumableManufacturerDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ConsumableManufacturerDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableManufacturerDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IConsumableManufacturerDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableManufacturerDetail[] | undefined;
}

/** Reponse */
export class ConsumableManufacturerResult implements IConsumableManufacturerResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableManufacturer[] | undefined;

    constructor(data?: IConsumableManufacturerResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ConsumableManufacturer.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ConsumableManufacturerResult {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableManufacturerResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IConsumableManufacturerResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableManufacturer[] | undefined;
}

/** 耗材类 -- 出库 */
export class ConsumableOut implements IConsumableOut {
    /** 日期 */
    date?: string | undefined;
    /** 透析器 */
    txqCount?: number;
    /** 血路管 */
    xlgCount?: number;
    /** 灌流器 */
    glqCount?: number;
    /** 内瘘针 */
    nlzCount?: number;
    /** 血滤器 */
    xlqCount?: number;
    /** 置换液灌流器 */
    zhyglCount?: number;
    /** A液 */
    ayCount?: number;
    /** B液 */
    byCount?: number;

    constructor(data?: IConsumableOut) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.txqCount = _data["txqCount"];
            this.xlgCount = _data["xlgCount"];
            this.glqCount = _data["glqCount"];
            this.nlzCount = _data["nlzCount"];
            this.xlqCount = _data["xlqCount"];
            this.zhyglCount = _data["zhyglCount"];
            this.ayCount = _data["ayCount"];
            this.byCount = _data["byCount"];
        }
    }

    static fromJS(data: any): ConsumableOut {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableOut();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["txqCount"] = this.txqCount;
        data["xlgCount"] = this.xlgCount;
        data["glqCount"] = this.glqCount;
        data["nlzCount"] = this.nlzCount;
        data["xlqCount"] = this.xlqCount;
        data["zhyglCount"] = this.zhyglCount;
        data["ayCount"] = this.ayCount;
        data["byCount"] = this.byCount;
        return data;
    }
}

/** 耗材类 -- 出库 */
export interface IConsumableOut {
    /** 日期 */
    date?: string | undefined;
    /** 透析器 */
    txqCount?: number;
    /** 血路管 */
    xlgCount?: number;
    /** 灌流器 */
    glqCount?: number;
    /** 内瘘针 */
    nlzCount?: number;
    /** 血滤器 */
    xlqCount?: number;
    /** 置换液灌流器 */
    zhyglCount?: number;
    /** A液 */
    ayCount?: number;
    /** B液 */
    byCount?: number;
}

/** 耗材类 -- 出库 --明细 */
export class ConsumableOutDetail implements IConsumableOutDetail {
    /** 日期 */
    date?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 数量 */
    count?: number;
    /** 规格 */
    spec?: string | undefined;
    /** 单位 */
    unit?: string | undefined;

    constructor(data?: IConsumableOutDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.name = _data["name"];
            this.count = _data["count"];
            this.spec = _data["spec"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): ConsumableOutDetail {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableOutDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["name"] = this.name;
        data["count"] = this.count;
        data["spec"] = this.spec;
        data["unit"] = this.unit;
        return data;
    }
}

/** 耗材类 -- 出库 --明细 */
export interface IConsumableOutDetail {
    /** 日期 */
    date?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 数量 */
    count?: number;
    /** 规格 */
    spec?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
}

/** Reponse */
export class ConsumableOutDetailResult implements IConsumableOutDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableOutDetail[] | undefined;

    constructor(data?: IConsumableOutDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ConsumableOutDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ConsumableOutDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableOutDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IConsumableOutDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableOutDetail[] | undefined;
}

/** 耗材类 - 出入库 */
export class ConsumableOutIn implements IConsumableOutIn {
    /** 日期 */
    date?: string | undefined;
    /** 类型 (出库、入库) */
    type?: string | undefined;
    /** 出入库明细 */
    items?: ConsumableOutInItem[] | undefined;

    constructor(data?: IConsumableOutIn) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.type = _data["type"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ConsumableOutInItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ConsumableOutIn {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableOutIn();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["type"] = this.type;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 耗材类 - 出入库 */
export interface IConsumableOutIn {
    /** 日期 */
    date?: string | undefined;
    /** 类型 (出库、入库) */
    type?: string | undefined;
    /** 出入库明细 */
    items?: ConsumableOutInItem[] | undefined;
}

/** 耗材入库统计 -- 详情 */
export class ConsumableOutInDetail implements IConsumableOutInDetail {
    /** 出库记录标识 */
    roomRecordOutItemId?: string | undefined;
    /** 日期 */
    date?: string | undefined;
    /** 名称 */
    roomItemListName?: string | undefined;
    /** 数量 */
    count?: number;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 单位 */
    unit?: string | undefined;

    constructor(data?: IConsumableOutInDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomRecordOutItemId = _data["roomRecordOutItemId"];
            this.date = _data["date"];
            this.roomItemListName = _data["roomItemListName"];
            this.count = _data["count"];
            this.patientName = _data["patientName"];
            this.spec = _data["spec"];
            this.specLabel = _data["specLabel"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): ConsumableOutInDetail {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableOutInDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomRecordOutItemId"] = this.roomRecordOutItemId;
        data["date"] = this.date;
        data["roomItemListName"] = this.roomItemListName;
        data["count"] = this.count;
        data["patientName"] = this.patientName;
        data["spec"] = this.spec;
        data["specLabel"] = this.specLabel;
        data["unit"] = this.unit;
        return data;
    }
}

/** 耗材入库统计 -- 详情 */
export interface IConsumableOutInDetail {
    /** 出库记录标识 */
    roomRecordOutItemId?: string | undefined;
    /** 日期 */
    date?: string | undefined;
    /** 名称 */
    roomItemListName?: string | undefined;
    /** 数量 */
    count?: number;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
}

/** Reponse */
export class ConsumableOutInDetailResult implements IConsumableOutInDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableOutInDetail[] | undefined;

    constructor(data?: IConsumableOutInDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ConsumableOutInDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ConsumableOutInDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableOutInDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IConsumableOutInDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableOutInDetail[] | undefined;
}

export class ConsumableOutInItem implements IConsumableOutInItem {
    /** 耗材名称 */
    roomItemListName?: string | undefined;
    /** 耗材标识 */
    roomItemListId?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: IConsumableOutInItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): ConsumableOutInItem {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableOutInItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        return data;
    }
}

export interface IConsumableOutInItem {
    /** 耗材名称 */
    roomItemListName?: string | undefined;
    /** 耗材标识 */
    roomItemListId?: string | undefined;
    /** 数量 */
    count?: number;
}

/** Reponse */
export class ConsumableOutInResult implements IConsumableOutInResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableOutIn[] | undefined;

    constructor(data?: IConsumableOutInResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ConsumableOutIn.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ConsumableOutInResult {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableOutInResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IConsumableOutInResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableOutIn[] | undefined;
}

/** Reponse */
export class ConsumableOutResult implements IConsumableOutResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableOut[] | undefined;

    constructor(data?: IConsumableOutResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ConsumableOut.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ConsumableOutResult {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableOutResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IConsumableOutResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableOut[] | undefined;
}

/** 耗材退库 */
export class ConsumableRestore implements IConsumableRestore {
    /** 耗材类型 */
    type?: string | undefined;
    /** 耗材名称 */
    name?: string | undefined;
    /** 耗材型号 */
    model?: string | undefined;
    /** 数量 */
    mount?: number;
    /** 日期 */
    time?: string | undefined;
    /** 原因 */
    reason?: string | undefined;
    /** 耗材单位 */
    unit?: string | undefined;

    constructor(data?: IConsumableRestore) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.name = _data["name"];
            this.model = _data["model"];
            this.mount = _data["mount"];
            this.time = _data["time"];
            this.reason = _data["reason"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): ConsumableRestore {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableRestore();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["name"] = this.name;
        data["model"] = this.model;
        data["mount"] = this.mount;
        data["time"] = this.time;
        data["reason"] = this.reason;
        data["unit"] = this.unit;
        return data;
    }
}

/** 耗材退库 */
export interface IConsumableRestore {
    /** 耗材类型 */
    type?: string | undefined;
    /** 耗材名称 */
    name?: string | undefined;
    /** 耗材型号 */
    model?: string | undefined;
    /** 数量 */
    mount?: number;
    /** 日期 */
    time?: string | undefined;
    /** 原因 */
    reason?: string | undefined;
    /** 耗材单位 */
    unit?: string | undefined;
}

/** Reponse */
export class ConsumableRestoreResult implements IConsumableRestoreResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableRestore[] | undefined;

    constructor(data?: IConsumableRestoreResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ConsumableRestore.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ConsumableRestoreResult {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableRestoreResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IConsumableRestoreResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableRestore[] | undefined;
}

/** 耗材 -- 库存 */
export class ConsumableStock implements IConsumableStock {
    /** 耗材名称 */
    name?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 售价 */
    price?: number | undefined;
    /** 数量 */
    count?: number | undefined;
    /** 基本单位 */
    unitBase?: string | undefined;
    /** 项目类型 */
    roomItemType?: string | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 经销商 */
    dealer?: string | undefined;

    constructor(data?: IConsumableStock) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.spec = _data["spec"];
            this.price = _data["price"];
            this.count = _data["count"];
            this.unitBase = _data["unitBase"];
            this.roomItemType = _data["roomItemType"];
            this.model = _data["model"];
            this.origin = _data["origin"];
            this.manufacturer = _data["manufacturer"];
            this.dealer = _data["dealer"];
        }
    }

    static fromJS(data: any): ConsumableStock {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableStock();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["spec"] = this.spec;
        data["price"] = this.price;
        data["count"] = this.count;
        data["unitBase"] = this.unitBase;
        data["roomItemType"] = this.roomItemType;
        data["model"] = this.model;
        data["origin"] = this.origin;
        data["manufacturer"] = this.manufacturer;
        data["dealer"] = this.dealer;
        return data;
    }
}

/** 耗材 -- 库存 */
export interface IConsumableStock {
    /** 耗材名称 */
    name?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 售价 */
    price?: number | undefined;
    /** 数量 */
    count?: number | undefined;
    /** 基本单位 */
    unitBase?: string | undefined;
    /** 项目类型 */
    roomItemType?: string | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 经销商 */
    dealer?: string | undefined;
}

/** Reponse */
export class ConsumableStockResult implements IConsumableStockResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableStock[] | undefined;

    constructor(data?: IConsumableStockResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ConsumableStock.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ConsumableStockResult {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableStockResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IConsumableStockResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableStock[] | undefined;
}

/** 透析器 - 详情 */
export class ConsumableTXQDetail implements IConsumableTXQDetail {
    /** 名称 */
    name?: string | undefined;
    /** 数量 */
    count?: number;
    /** 单位 */
    unit?: string | undefined;

    constructor(data?: IConsumableTXQDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.count = _data["count"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): ConsumableTXQDetail {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableTXQDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["count"] = this.count;
        data["unit"] = this.unit;
        return data;
    }
}

/** 透析器 - 详情 */
export interface IConsumableTXQDetail {
    /** 名称 */
    name?: string | undefined;
    /** 数量 */
    count?: number;
    /** 单位 */
    unit?: string | undefined;
}

/** Reponse */
export class ConsumableTXQDetailResult implements IConsumableTXQDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableTXQDetail[] | undefined;

    constructor(data?: IConsumableTXQDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ConsumableTXQDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ConsumableTXQDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableTXQDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IConsumableTXQDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableTXQDetail[] | undefined;
}

/** 耗材类 - 使用记录 */
export class ConsumableUsed implements IConsumableUsed {
    /** 名称 */
    name?: string | undefined;
    /** 数量 */
    count?: number;
    /** Code，不需要展示，查看详情时使用 */
    code?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 基本单位 */
    unitBase?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位，值>0* */
    conversionRate?: number;
    /** [项目标识](项目清单) */
    roomItemListId?: string | undefined;

    constructor(data?: IConsumableUsed) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.count = _data["count"];
            this.code = _data["code"];
            this.unit = _data["unit"];
            this.unitBase = _data["unitBase"];
            this.conversionRate = _data["conversionRate"];
            this.roomItemListId = _data["roomItemListId"];
        }
    }

    static fromJS(data: any): ConsumableUsed {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableUsed();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["count"] = this.count;
        data["code"] = this.code;
        data["unit"] = this.unit;
        data["unitBase"] = this.unitBase;
        data["conversionRate"] = this.conversionRate;
        data["roomItemListId"] = this.roomItemListId;
        return data;
    }
}

/** 耗材类 - 使用记录 */
export interface IConsumableUsed {
    /** 名称 */
    name?: string | undefined;
    /** 数量 */
    count?: number;
    /** Code，不需要展示，查看详情时使用 */
    code?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 基本单位 */
    unitBase?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位，值>0* */
    conversionRate?: number;
    /** [项目标识](项目清单) */
    roomItemListId?: string | undefined;
}

/** Reponse */
export class ConsumableUsedResult implements IConsumableUsedResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableUsed[] | undefined;

    constructor(data?: IConsumableUsedResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ConsumableUsed.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ConsumableUsedResult {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableUsedResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IConsumableUsedResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableUsed[] | undefined;
}

/** 耗材类 - 使用记录 */
export class ConsumableUsedType implements IConsumableUsedType {
    /** 名称 */
    name?: string | undefined;
    /** 数量 */
    count?: number;
    /** 耗材ID，不展示，查询详情时使用 */
    id?: string | undefined;
    /** 单位 */
    unit?: string | undefined;

    constructor(data?: IConsumableUsedType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.count = _data["count"];
            this.id = _data["id"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): ConsumableUsedType {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableUsedType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["count"] = this.count;
        data["id"] = this.id;
        data["unit"] = this.unit;
        return data;
    }
}

/** 耗材类 - 使用记录 */
export interface IConsumableUsedType {
    /** 名称 */
    name?: string | undefined;
    /** 数量 */
    count?: number;
    /** 耗材ID，不展示，查询详情时使用 */
    id?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
}

/** 耗材类 - 使用记录 - 详细 */
export class ConsumableUsedTypeDetail implements IConsumableUsedTypeDetail {
    /** 厂商 */
    manufacturer?: string | undefined;
    /** 耗材名称 */
    name?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 数量 */
    count?: number;
    /** 单位 */
    unit?: string | undefined;
    /** 使用日期 */
    useDate?: string | undefined;

    constructor(data?: IConsumableUsedTypeDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.manufacturer = _data["manufacturer"];
            this.name = _data["name"];
            this.patientName = _data["patientName"];
            this.patientId = _data["patientId"];
            this.count = _data["count"];
            this.unit = _data["unit"];
            this.useDate = _data["useDate"];
        }
    }

    static fromJS(data: any): ConsumableUsedTypeDetail {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableUsedTypeDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["manufacturer"] = this.manufacturer;
        data["name"] = this.name;
        data["patientName"] = this.patientName;
        data["patientId"] = this.patientId;
        data["count"] = this.count;
        data["unit"] = this.unit;
        data["useDate"] = this.useDate;
        return data;
    }
}

/** 耗材类 - 使用记录 - 详细 */
export interface IConsumableUsedTypeDetail {
    /** 厂商 */
    manufacturer?: string | undefined;
    /** 耗材名称 */
    name?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 数量 */
    count?: number;
    /** 单位 */
    unit?: string | undefined;
    /** 使用日期 */
    useDate?: string | undefined;
}

/** Reponse */
export class ConsumableUsedTypeDetailResult implements IConsumableUsedTypeDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableUsedTypeDetail[] | undefined;

    constructor(data?: IConsumableUsedTypeDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ConsumableUsedTypeDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ConsumableUsedTypeDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableUsedTypeDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IConsumableUsedTypeDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableUsedTypeDetail[] | undefined;
}

/** Reponse */
export class ConsumableUsedTypeResult implements IConsumableUsedTypeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableUsedType[] | undefined;

    constructor(data?: IConsumableUsedTypeResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ConsumableUsedType.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ConsumableUsedTypeResult {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableUsedTypeResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IConsumableUsedTypeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableUsedType[] | undefined;
}

/** 费用类 - 费用扣减数量 */
export class CostDeduction implements ICostDeduction {
    /** 日期 */
    date?: string | undefined;
    /** 透析方式 */
    items?: CostDeductionItem[] | undefined;

    constructor(data?: ICostDeduction) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CostDeductionItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CostDeduction {
        data = typeof data === 'object' ? data : {};
        let result = new CostDeduction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 费用类 - 费用扣减数量 */
export interface ICostDeduction {
    /** 日期 */
    date?: string | undefined;
    /** 透析方式 */
    items?: CostDeductionItem[] | undefined;
}

/** 费用类 - 数量统计明细 */
export class CostDeductionDetail implements ICostDeductionDetail {
    /** 日期 */
    date?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 项目名称 */
    itemName?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: ICostDeductionDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.itemName = _data["itemName"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): CostDeductionDetail {
        data = typeof data === 'object' ? data : {};
        let result = new CostDeductionDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["itemName"] = this.itemName;
        data["count"] = this.count;
        return data;
    }
}

/** 费用类 - 数量统计明细 */
export interface ICostDeductionDetail {
    /** 日期 */
    date?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 项目名称 */
    itemName?: string | undefined;
    /** 数量 */
    count?: number;
}

/** Reponse */
export class CostDeductionDetailResult implements ICostDeductionDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CostDeductionDetail[] | undefined;

    constructor(data?: ICostDeductionDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CostDeductionDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CostDeductionDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new CostDeductionDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICostDeductionDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CostDeductionDetail[] | undefined;
}

/** 费用项目明细 */
export class CostDeductionItem implements ICostDeductionItem {
    /** 费用项标识 */
    roomItemListId?: string | undefined;
    /** 费用项 */
    itemName?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: ICostDeductionItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListId = _data["roomItemListId"];
            this.itemName = _data["itemName"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): CostDeductionItem {
        data = typeof data === 'object' ? data : {};
        let result = new CostDeductionItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListId"] = this.roomItemListId;
        data["itemName"] = this.itemName;
        data["count"] = this.count;
        return data;
    }
}

/** 费用项目明细 */
export interface ICostDeductionItem {
    /** 费用项标识 */
    roomItemListId?: string | undefined;
    /** 费用项 */
    itemName?: string | undefined;
    /** 数量 */
    count?: number;
}

/** Reponse */
export class CostDeductionResult implements ICostDeductionResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CostDeduction[] | undefined;

    constructor(data?: ICostDeductionResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CostDeduction.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CostDeductionResult {
        data = typeof data === 'object' ? data : {};
        let result = new CostDeductionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICostDeductionResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CostDeduction[] | undefined;
}

/** 透析类 - 抗凝剂 */
export class CureAnticoagulant implements ICureAnticoagulant {
    /** 日期 */
    date?: string | undefined;
    /** 抗凝剂计数集合列表 */
    items?: CureAnticoagulantItem[] | undefined;

    constructor(data?: ICureAnticoagulant) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CureAnticoagulantItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureAnticoagulant {
        data = typeof data === 'object' ? data : {};
        let result = new CureAnticoagulant();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 透析类 - 抗凝剂 */
export interface ICureAnticoagulant {
    /** 日期 */
    date?: string | undefined;
    /** 抗凝剂计数集合列表 */
    items?: CureAnticoagulantItem[] | undefined;
}

/** 透析类 - 抗凝剂统计 - 详细 */
export class CureAnticoagulantDetail implements ICureAnticoagulantDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 抗凝剂类型名称 */
    anticoagulantType?: string | undefined;
    /** 首剂 */
    first?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    readonly unionFirst?: string | undefined;
    /** 浓度 */
    concentration?: number | undefined;
    readonly concentrationThs?: string | undefined;
    /** 速率 */
    rate?: number | undefined;
    readonly rateThs?: string | undefined;
    /** 追加速率 */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    readonly unionAppendRate?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    readonly appendTimeThs?: string | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    readonly unionTotal?: string | undefined;
    /** 透析记录单Id */
    cureRecordId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 透析方式 */
    dialysisModel?: string | undefined;
    /** 抗凝剂 */
    anticoagulant?: string | undefined;
    /** 透析液 */
    dialysate?: string | undefined;

    constructor(data?: ICureAnticoagulantDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.patientName = _data["patientName"];
            this.anticoagulantType = _data["anticoagulantType"];
            this.first = _data["first"];
            this.firstUnit = _data["firstUnit"];
            (<any>this).unionFirst = _data["unionFirst"];
            this.concentration = _data["concentration"];
            (<any>this).concentrationThs = _data["concentrationThs"];
            this.rate = _data["rate"];
            (<any>this).rateThs = _data["rateThs"];
            this.appendRate = _data["appendRate"];
            this.appendRateUnit = _data["appendRateUnit"];
            (<any>this).unionAppendRate = _data["unionAppendRate"];
            this.appendTime = _data["appendTime"];
            (<any>this).appendTimeThs = _data["appendTimeThs"];
            this.total = _data["total"];
            this.totalUnit = _data["totalUnit"];
            (<any>this).unionTotal = _data["unionTotal"];
            this.cureRecordId = _data["cureRecordId"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.dialysisModel = _data["dialysisModel"];
            this.anticoagulant = _data["anticoagulant"];
            this.dialysate = _data["dialysate"];
        }
    }

    static fromJS(data: any): CureAnticoagulantDetail {
        data = typeof data === 'object' ? data : {};
        let result = new CureAnticoagulantDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["patientName"] = this.patientName;
        data["anticoagulantType"] = this.anticoagulantType;
        data["first"] = this.first;
        data["firstUnit"] = this.firstUnit;
        data["unionFirst"] = this.unionFirst;
        data["concentration"] = this.concentration;
        data["concentrationThs"] = this.concentrationThs;
        data["rate"] = this.rate;
        data["rateThs"] = this.rateThs;
        data["appendRate"] = this.appendRate;
        data["appendRateUnit"] = this.appendRateUnit;
        data["unionAppendRate"] = this.unionAppendRate;
        data["appendTime"] = this.appendTime;
        data["appendTimeThs"] = this.appendTimeThs;
        data["total"] = this.total;
        data["totalUnit"] = this.totalUnit;
        data["unionTotal"] = this.unionTotal;
        data["cureRecordId"] = this.cureRecordId;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["dialysisModel"] = this.dialysisModel;
        data["anticoagulant"] = this.anticoagulant;
        data["dialysate"] = this.dialysate;
        return data;
    }
}

/** 透析类 - 抗凝剂统计 - 详细 */
export interface ICureAnticoagulantDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 抗凝剂类型名称 */
    anticoagulantType?: string | undefined;
    /** 首剂 */
    first?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    unionFirst?: string | undefined;
    /** 浓度 */
    concentration?: number | undefined;
    concentrationThs?: string | undefined;
    /** 速率 */
    rate?: number | undefined;
    rateThs?: string | undefined;
    /** 追加速率 */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    unionAppendRate?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    appendTimeThs?: string | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    unionTotal?: string | undefined;
    /** 透析记录单Id */
    cureRecordId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 透析方式 */
    dialysisModel?: string | undefined;
    /** 抗凝剂 */
    anticoagulant?: string | undefined;
    /** 透析液 */
    dialysate?: string | undefined;
}

/** Reponse */
export class CureAnticoagulantDetailResult implements ICureAnticoagulantDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureAnticoagulantDetail[] | undefined;

    constructor(data?: ICureAnticoagulantDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureAnticoagulantDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureAnticoagulantDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureAnticoagulantDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureAnticoagulantDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureAnticoagulantDetail[] | undefined;
}

/** 抗凝剂计数集合子项 */
export class CureAnticoagulantItem implements ICureAnticoagulantItem {
    /** 抗凝剂分类类型 - 大类 */
    anticoagulantType?: string | undefined;
    /** 抗凝剂类型统计计数 */
    count?: number;

    constructor(data?: ICureAnticoagulantItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.anticoagulantType = _data["anticoagulantType"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): CureAnticoagulantItem {
        data = typeof data === 'object' ? data : {};
        let result = new CureAnticoagulantItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["anticoagulantType"] = this.anticoagulantType;
        data["count"] = this.count;
        return data;
    }
}

/** 抗凝剂计数集合子项 */
export interface ICureAnticoagulantItem {
    /** 抗凝剂分类类型 - 大类 */
    anticoagulantType?: string | undefined;
    /** 抗凝剂类型统计计数 */
    count?: number;
}

/** Reponse */
export class CureAnticoagulantResult implements ICureAnticoagulantResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureAnticoagulant[] | undefined;

    constructor(data?: ICureAnticoagulantResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureAnticoagulant.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureAnticoagulantResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureAnticoagulantResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureAnticoagulantResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureAnticoagulant[] | undefined;
}

/** 透析类 - 血流量统计 */
export class CureBloodFlow implements ICureBloodFlow {
    /** 日期 */
    date?: string | undefined;
    /** 血流量分类计数集合 */
    items?: CureBloodFlowItem[] | undefined;

    constructor(data?: ICureBloodFlow) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CureBloodFlowItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureBloodFlow {
        data = typeof data === 'object' ? data : {};
        let result = new CureBloodFlow();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 透析类 - 血流量统计 */
export interface ICureBloodFlow {
    /** 日期 */
    date?: string | undefined;
    /** 血流量分类计数集合 */
    items?: CureBloodFlowItem[] | undefined;
}

/** 透析类 - 血流量 */
export class CureBloodFlowDetail implements ICureBloodFlowDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析记录单标识 */
    cureRecordId?: string | undefined;
    /** 患者Id */
    patientId?: string | undefined;
    /** [血管通路](患者血管通路) */
    patientVascularAccessId?: string | undefined;
    /** 姓名 */
    patientName?: string | undefined;
    /** 通路类型 */
    vascularAccessType?: string | undefined;
    /** 血流量(ml/min) */
    bloodFlowRate?: number | undefined;
    /** 干体重(kg) */
    bestWeight?: number | undefined;
    /** 透析液流量(ml/min) */
    dialysateFlowRate?: number | undefined;
    /** 透析器型号 */
    txqType?: string | undefined;
    /** 透析总时间（小时） */
    dialysisTotalDuration?: string | undefined;
    /** 透析次数 */
    dialysisCountTotal?: number | undefined;
    /** spKt/V *自动计算* */
    ktv?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;

    constructor(data?: ICureBloodFlowDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.cureRecordId = _data["cureRecordId"];
            this.patientId = _data["patientId"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.patientName = _data["patientName"];
            this.vascularAccessType = _data["vascularAccessType"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.bestWeight = _data["bestWeight"];
            this.dialysateFlowRate = _data["dialysateFlowRate"];
            this.txqType = _data["txqType"];
            this.dialysisTotalDuration = _data["dialysisTotalDuration"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            this.ktv = _data["ktv"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureBloodFlowDetail {
        data = typeof data === 'object' ? data : {};
        let result = new CureBloodFlowDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["cureRecordId"] = this.cureRecordId;
        data["patientId"] = this.patientId;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["patientName"] = this.patientName;
        data["vascularAccessType"] = this.vascularAccessType;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["bestWeight"] = this.bestWeight;
        data["dialysateFlowRate"] = this.dialysateFlowRate;
        data["txqType"] = this.txqType;
        data["dialysisTotalDuration"] = this.dialysisTotalDuration;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        data["ktv"] = this.ktv;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析类 - 血流量 */
export interface ICureBloodFlowDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析记录单标识 */
    cureRecordId?: string | undefined;
    /** 患者Id */
    patientId?: string | undefined;
    /** [血管通路](患者血管通路) */
    patientVascularAccessId?: string | undefined;
    /** 姓名 */
    patientName?: string | undefined;
    /** 通路类型 */
    vascularAccessType?: string | undefined;
    /** 血流量(ml/min) */
    bloodFlowRate?: number | undefined;
    /** 干体重(kg) */
    bestWeight?: number | undefined;
    /** 透析液流量(ml/min) */
    dialysateFlowRate?: number | undefined;
    /** 透析器型号 */
    txqType?: string | undefined;
    /** 透析总时间（小时） */
    dialysisTotalDuration?: string | undefined;
    /** 透析次数 */
    dialysisCountTotal?: number | undefined;
    /** spKt/V *自动计算* */
    ktv?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
}

/** Reponse */
export class CureBloodFlowDetailResult implements ICureBloodFlowDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureBloodFlowDetail[] | undefined;

    constructor(data?: ICureBloodFlowDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureBloodFlowDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureBloodFlowDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureBloodFlowDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureBloodFlowDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureBloodFlowDetail[] | undefined;
}

/** 透析类 - 血流量 - 分类集合范围子项 */
export class CureBloodFlowItem implements ICureBloodFlowItem {
    /** 血流量分类范围 */
    bloodFow?: string | undefined;
    /** 血流量分类范围计数 */
    count?: number;

    constructor(data?: ICureBloodFlowItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.bloodFow = _data["bloodFow"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): CureBloodFlowItem {
        data = typeof data === 'object' ? data : {};
        let result = new CureBloodFlowItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bloodFow"] = this.bloodFow;
        data["count"] = this.count;
        return data;
    }
}

/** 透析类 - 血流量 - 分类集合范围子项 */
export interface ICureBloodFlowItem {
    /** 血流量分类范围 */
    bloodFow?: string | undefined;
    /** 血流量分类范围计数 */
    count?: number;
}

/** Reponse */
export class CureBloodFlowResult implements ICureBloodFlowResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureBloodFlow[] | undefined;

    constructor(data?: ICureBloodFlowResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureBloodFlow.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureBloodFlowResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureBloodFlowResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureBloodFlowResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureBloodFlow[] | undefined;
}

/** 报表 - 透析 - 血压 - 详情 */
export class CureBloodPressureDetail implements ICureBloodPressureDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析记录单标识 */
    cureRecordId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 透前收缩压 */
    beforeSbp?: number | undefined;
    /** 透前舒张压 */
    beforeDbp?: number | undefined;
    /** 透前脉搏 */
    beforePulse?: number | undefined;
    /** 透后收缩压 */
    afterSbp?: number | undefined;
    /** 透后舒张压 */
    afterDbp?: number | undefined;
    /** 透后脉搏 */
    afterPulse?: number | undefined;

    constructor(data?: ICureBloodPressureDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.cureRecordId = _data["cureRecordId"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.beforeSbp = _data["beforeSbp"];
            this.beforeDbp = _data["beforeDbp"];
            this.beforePulse = _data["beforePulse"];
            this.afterSbp = _data["afterSbp"];
            this.afterDbp = _data["afterDbp"];
            this.afterPulse = _data["afterPulse"];
        }
    }

    static fromJS(data: any): CureBloodPressureDetail {
        data = typeof data === 'object' ? data : {};
        let result = new CureBloodPressureDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["cureRecordId"] = this.cureRecordId;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["beforeSbp"] = this.beforeSbp;
        data["beforeDbp"] = this.beforeDbp;
        data["beforePulse"] = this.beforePulse;
        data["afterSbp"] = this.afterSbp;
        data["afterDbp"] = this.afterDbp;
        data["afterPulse"] = this.afterPulse;
        return data;
    }
}

/** 报表 - 透析 - 血压 - 详情 */
export interface ICureBloodPressureDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析记录单标识 */
    cureRecordId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 透前收缩压 */
    beforeSbp?: number | undefined;
    /** 透前舒张压 */
    beforeDbp?: number | undefined;
    /** 透前脉搏 */
    beforePulse?: number | undefined;
    /** 透后收缩压 */
    afterSbp?: number | undefined;
    /** 透后舒张压 */
    afterDbp?: number | undefined;
    /** 透后脉搏 */
    afterPulse?: number | undefined;
}

/** Reponse */
export class CureBloodPressureDetailResult implements ICureBloodPressureDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureBloodPressureDetail[] | undefined;

    constructor(data?: ICureBloodPressureDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureBloodPressureDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureBloodPressureDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureBloodPressureDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureBloodPressureDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureBloodPressureDetail[] | undefined;
}

/** 取消透析 */
export class CureCancel implements ICureCancel {
    /** 日期 */
    date?: string | undefined;
    /** 例次 */
    count?: number;

    constructor(data?: ICureCancel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): CureCancel {
        data = typeof data === 'object' ? data : {};
        let result = new CureCancel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["count"] = this.count;
        return data;
    }
}

/** 取消透析 */
export interface ICureCancel {
    /** 日期 */
    date?: string | undefined;
    /** 例次 */
    count?: number;
}

/** 透析类 - 取消透析 - 详细 */
export class CureCancelDetail implements ICureCancelDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析记录单标识 */
    cureRecordId?: string | undefined;
    /** 日期（yyyy-MM-dd） */
    date?: dayjs.Dayjs;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 透析开始时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 透析结束时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 预计透析时间(min) */
    dialysisDurationSet?: number;
    /** 实际透析时间(min) */
    dialysisDurationFact?: number | undefined;
    /** 提前下机时长(min) */
    duration?: number | undefined;
    /** 取消透析原因 */
    cancelReason?: string | undefined;
    /** 并发症 */
    complication?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 透析区间 */
    dialysisAreaName?: string | undefined;
    /** 床号 */
    bedName?: string | undefined;

    constructor(data?: ICureCancelDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.cureRecordId = _data["cureRecordId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.patientName = _data["patientName"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeOff = _data["timeOff"] ? dayjs(_data["timeOff"].toString()) : <any>undefined;
            this.dialysisDurationSet = _data["dialysisDurationSet"];
            this.dialysisDurationFact = _data["dialysisDurationFact"];
            this.duration = _data["duration"];
            this.cancelReason = _data["cancelReason"];
            this.complication = _data["complication"];
            this.shiftName = _data["shiftName"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.bedName = _data["bedName"];
        }
    }

    static fromJS(data: any): CureCancelDetail {
        data = typeof data === 'object' ? data : {};
        let result = new CureCancelDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["cureRecordId"] = this.cureRecordId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["patientName"] = this.patientName;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toISOString() : <any>undefined;
        data["timeOff"] = this.timeOff ? this.timeOff.toISOString() : <any>undefined;
        data["dialysisDurationSet"] = this.dialysisDurationSet;
        data["dialysisDurationFact"] = this.dialysisDurationFact;
        data["duration"] = this.duration;
        data["cancelReason"] = this.cancelReason;
        data["complication"] = this.complication;
        data["shiftName"] = this.shiftName;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["bedName"] = this.bedName;
        return data;
    }
}

/** 透析类 - 取消透析 - 详细 */
export interface ICureCancelDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析记录单标识 */
    cureRecordId?: string | undefined;
    /** 日期（yyyy-MM-dd） */
    date?: dayjs.Dayjs;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 透析开始时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 透析结束时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 预计透析时间(min) */
    dialysisDurationSet?: number;
    /** 实际透析时间(min) */
    dialysisDurationFact?: number | undefined;
    /** 提前下机时长(min) */
    duration?: number | undefined;
    /** 取消透析原因 */
    cancelReason?: string | undefined;
    /** 并发症 */
    complication?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 透析区间 */
    dialysisAreaName?: string | undefined;
    /** 床号 */
    bedName?: string | undefined;
}

/** Reponse */
export class CureCancelDetailResult implements ICureCancelDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureCancelDetail[] | undefined;

    constructor(data?: ICureCancelDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureCancelDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureCancelDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureCancelDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureCancelDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureCancelDetail[] | undefined;
}

/** Reponse */
export class CureCancelResult implements ICureCancelResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureCancel[] | undefined;

    constructor(data?: ICureCancelResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureCancel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureCancelResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureCancelResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureCancelResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureCancel[] | undefined;
}

/** 透析类 - 透析例次 */
export class CureCasetimes implements ICureCasetimes {
    /** 日期 */
    date?: string | undefined;
    /** 透析方式 */
    items?: CureCasetimesItem[] | undefined;

    constructor(data?: ICureCasetimes) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CureCasetimesItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureCasetimes {
        data = typeof data === 'object' ? data : {};
        let result = new CureCasetimes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 透析类 - 透析例次 */
export interface ICureCasetimes {
    /** 日期 */
    date?: string | undefined;
    /** 透析方式 */
    items?: CureCasetimesItem[] | undefined;
}

/** 透析类 - 透析例次 */
export class CureCasetimesDetail implements ICureCasetimesDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 透析记录单标识 */
    cureRecordId?: string | undefined;
    /** 姓名 */
    patientName?: string | undefined;
    /** 全名 */
    patientNameFull?: string | undefined;
    /** 透析日期 */
    dialysisDate?: string | undefined;
    /** 来源 */
    soucre?: string | undefined;
    /** 透析方式 */
    dialysisModel?: string | undefined;
    /** 血管通路 */
    vascularAccess?: string | undefined;
    /** 抗凝剂 */
    anticoagulant?: string | undefined;
    /** 透析液 */
    dialysate?: string | undefined;

    constructor(data?: ICureCasetimesDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.patientId = _data["patientId"];
            this.cureRecordId = _data["cureRecordId"];
            this.patientName = _data["patientName"];
            this.patientNameFull = _data["patientNameFull"];
            this.dialysisDate = _data["dialysisDate"];
            this.soucre = _data["soucre"];
            this.dialysisModel = _data["dialysisModel"];
            this.vascularAccess = _data["vascularAccess"];
            this.anticoagulant = _data["anticoagulant"];
            this.dialysate = _data["dialysate"];
        }
    }

    static fromJS(data: any): CureCasetimesDetail {
        data = typeof data === 'object' ? data : {};
        let result = new CureCasetimesDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["patientId"] = this.patientId;
        data["cureRecordId"] = this.cureRecordId;
        data["patientName"] = this.patientName;
        data["patientNameFull"] = this.patientNameFull;
        data["dialysisDate"] = this.dialysisDate;
        data["soucre"] = this.soucre;
        data["dialysisModel"] = this.dialysisModel;
        data["vascularAccess"] = this.vascularAccess;
        data["anticoagulant"] = this.anticoagulant;
        data["dialysate"] = this.dialysate;
        return data;
    }
}

/** 透析类 - 透析例次 */
export interface ICureCasetimesDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 透析记录单标识 */
    cureRecordId?: string | undefined;
    /** 姓名 */
    patientName?: string | undefined;
    /** 全名 */
    patientNameFull?: string | undefined;
    /** 透析日期 */
    dialysisDate?: string | undefined;
    /** 来源 */
    soucre?: string | undefined;
    /** 透析方式 */
    dialysisModel?: string | undefined;
    /** 血管通路 */
    vascularAccess?: string | undefined;
    /** 抗凝剂 */
    anticoagulant?: string | undefined;
    /** 透析液 */
    dialysate?: string | undefined;
}

/** Reponse */
export class CureCasetimesDetailResult implements ICureCasetimesDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureCasetimesDetail[] | undefined;

    constructor(data?: ICureCasetimesDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureCasetimesDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureCasetimesDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureCasetimesDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureCasetimesDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureCasetimesDetail[] | undefined;
}

export class CureCasetimesItem implements ICureCasetimesItem {
    /** 透析方式 */
    dialysisMode?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: ICureCasetimesItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisMode = _data["dialysisMode"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): CureCasetimesItem {
        data = typeof data === 'object' ? data : {};
        let result = new CureCasetimesItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisMode"] = this.dialysisMode;
        data["count"] = this.count;
        return data;
    }
}

export interface ICureCasetimesItem {
    /** 透析方式 */
    dialysisMode?: string | undefined;
    /** 数量 */
    count?: number;
}

/** Reponse */
export class CureCasetimesResult implements ICureCasetimesResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureCasetimes[] | undefined;

    constructor(data?: ICureCasetimesResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureCasetimes.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureCasetimesResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureCasetimesResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureCasetimesResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureCasetimes[] | undefined;
}

export class CureComplicationAssessment implements ICureComplicationAssessment {
    columns?: string[] | undefined;
    tableData?: any[] | undefined;

    constructor(data?: ICureComplicationAssessment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns!.push(item);
            }
            if (Array.isArray(_data["tableData"])) {
                this.tableData = [] as any;
                for (let item of _data["tableData"])
                    this.tableData!.push(item);
            }
        }
    }

    static fromJS(data: any): CureComplicationAssessment {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationAssessment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item);
        }
        if (Array.isArray(this.tableData)) {
            data["tableData"] = [];
            for (let item of this.tableData)
                data["tableData"].push(item);
        }
        return data;
    }
}

export interface ICureComplicationAssessment {
    columns?: string[] | undefined;
    tableData?: any[] | undefined;
}

/** 透后评估并发症详情 */
export class CureComplicationAssessmentItem implements ICureComplicationAssessmentItem {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: string | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 透析日期 */
    date?: string | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 透析卡号 */
    dialysisCardNumber?: string | undefined;
    /** 转归状态 */
    prognosisState?: string | undefined;
    /** 透析标识 */
    dialysisRecordId?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel?: string | undefined;
    /** 抗凝剂 */
    anticoagulant?: string | undefined;
    /** 透析液 */
    dialysate?: string | undefined;

    constructor(data?: ICureComplicationAssessmentItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"];
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.date = _data["date"];
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.patientName = _data["patientName"];
            this.dialysisCardNumber = _data["dialysisCardNumber"];
            this.prognosisState = _data["prognosisState"];
            this.dialysisRecordId = _data["dialysisRecordId"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.anticoagulant = _data["anticoagulant"];
            this.dialysate = _data["dialysate"];
        }
    }

    static fromJS(data: any): CureComplicationAssessmentItem {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationAssessmentItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["date"] = this.date;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["patientName"] = this.patientName;
        data["dialysisCardNumber"] = this.dialysisCardNumber;
        data["prognosisState"] = this.prognosisState;
        data["dialysisRecordId"] = this.dialysisRecordId;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["anticoagulant"] = this.anticoagulant;
        data["dialysate"] = this.dialysate;
        return data;
    }
}

/** 透后评估并发症详情 */
export interface ICureComplicationAssessmentItem {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: string | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 透析日期 */
    date?: string | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 透析卡号 */
    dialysisCardNumber?: string | undefined;
    /** 转归状态 */
    prognosisState?: string | undefined;
    /** 透析标识 */
    dialysisRecordId?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel?: string | undefined;
    /** 抗凝剂 */
    anticoagulant?: string | undefined;
    /** 透析液 */
    dialysate?: string | undefined;
}

/** Reponse */
export class CureComplicationAssessmentItemResult implements ICureComplicationAssessmentItemResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureComplicationAssessmentItem[] | undefined;

    constructor(data?: ICureComplicationAssessmentItemResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureComplicationAssessmentItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureComplicationAssessmentItemResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationAssessmentItemResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureComplicationAssessmentItemResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureComplicationAssessmentItem[] | undefined;
}

/** Reponse */
export class CureComplicationAssessmentResultEntry implements ICureComplicationAssessmentResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureComplicationAssessment;

    constructor(data?: ICureComplicationAssessmentResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureComplicationAssessment.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureComplicationAssessmentResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationAssessmentResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureComplicationAssessmentResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureComplicationAssessment;
}

/** 透析类 - 并发症 - 详细 */
export class CureComplicationDetailReport implements ICureComplicationDetailReport {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析记录标识 */
    cureRecordId?: string | undefined;
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 转归状态 */
    prognosisState?: string | undefined;
    /** 患者姓名 */
    readonly patientName?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 透析方式 */
    dialysisModel?: string | undefined;
    /** 抗凝剂 */
    anticoagulant?: string | undefined;
    /** 透析液 */
    dialysate?: string | undefined;

    constructor(data?: ICureComplicationDetailReport) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.cureRecordId = _data["cureRecordId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.prognosisState = _data["prognosisState"];
            (<any>this).patientName = _data["patientName"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.dialysisModel = _data["dialysisModel"];
            this.anticoagulant = _data["anticoagulant"];
            this.dialysate = _data["dialysate"];
        }
    }

    static fromJS(data: any): CureComplicationDetailReport {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationDetailReport();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["cureRecordId"] = this.cureRecordId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["prognosisState"] = this.prognosisState;
        data["patientName"] = this.patientName;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["dialysisModel"] = this.dialysisModel;
        data["anticoagulant"] = this.anticoagulant;
        data["dialysate"] = this.dialysate;
        return data;
    }
}

/** 透析类 - 并发症 - 详细 */
export interface ICureComplicationDetailReport {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析记录标识 */
    cureRecordId?: string | undefined;
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 转归状态 */
    prognosisState?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 透析方式 */
    dialysisModel?: string | undefined;
    /** 抗凝剂 */
    anticoagulant?: string | undefined;
    /** 透析液 */
    dialysate?: string | undefined;
}

/** Reponse */
export class CureComplicationDetailReportResult implements ICureComplicationDetailReportResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureComplicationDetailReport[] | undefined;

    constructor(data?: ICureComplicationDetailReportResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureComplicationDetailReport.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureComplicationDetailReportResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationDetailReportResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureComplicationDetailReportResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureComplicationDetailReport[] | undefined;
}

/** 透析类 - 并发症 */
export class CureComplicationItem implements ICureComplicationItem {
    /** 并发症 */
    complication?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: ICureComplicationItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.complication = _data["complication"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): CureComplicationItem {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["complication"] = this.complication;
        data["count"] = this.count;
        return data;
    }
}

/** 透析类 - 并发症 */
export interface ICureComplicationItem {
    /** 并发症 */
    complication?: string | undefined;
    /** 数量 */
    count?: number;
}

/** 透析类 - 并发症 */
export class CureComplicationReport implements ICureComplicationReport {
    /** 日期 */
    date?: string | undefined;
    /** 并发症 */
    complications?: CureComplicationItem[] | undefined;

    constructor(data?: ICureComplicationReport) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            if (Array.isArray(_data["complications"])) {
                this.complications = [] as any;
                for (let item of _data["complications"])
                    this.complications!.push(CureComplicationItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureComplicationReport {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationReport();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        if (Array.isArray(this.complications)) {
            data["complications"] = [];
            for (let item of this.complications)
                data["complications"].push(item.toJSON());
        }
        return data;
    }
}

/** 透析类 - 并发症 */
export interface ICureComplicationReport {
    /** 日期 */
    date?: string | undefined;
    /** 并发症 */
    complications?: CureComplicationItem[] | undefined;
}

/** Reponse */
export class CureComplicationReportResult implements ICureComplicationReportResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureComplicationReport[] | undefined;

    constructor(data?: ICureComplicationReportResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureComplicationReport.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureComplicationReportResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationReportResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureComplicationReportResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureComplicationReport[] | undefined;
}

/** 感染(天) */
export class CureDayInfected implements ICureDayInfected {
    /** 感染日期 */
    infectedDate?: string | undefined;
    /** 感染率 */
    infectedRate?: string | undefined;

    constructor(data?: ICureDayInfected) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.infectedDate = _data["infectedDate"];
            this.infectedRate = _data["infectedRate"];
        }
    }

    static fromJS(data: any): CureDayInfected {
        data = typeof data === 'object' ? data : {};
        let result = new CureDayInfected();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["infectedDate"] = this.infectedDate;
        data["infectedRate"] = this.infectedRate;
        return data;
    }
}

/** 感染(天) */
export interface ICureDayInfected {
    /** 感染日期 */
    infectedDate?: string | undefined;
    /** 感染率 */
    infectedRate?: string | undefined;
}

/** Reponse */
export class CureDayInfectedResult implements ICureDayInfectedResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDayInfected[] | undefined;

    constructor(data?: ICureDayInfectedResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureDayInfected.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureDayInfectedResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureDayInfectedResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureDayInfectedResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDayInfected[] | undefined;
}

/** 透析类 - 透析充分性汇总 */
export class CureDialysisAdequacy implements ICureDialysisAdequacy {
    /** 度量指标名称 */
    dialysisAdequacyName?: string | undefined;
    /** 达标数量 */
    reachStandard?: number;
    /** 超标数量 */
    overStandard?: number;
    /** 不达标数量 */
    notReachStandrd?: number;
    /** 未检测数量 */
    unMeasured?: number;

    constructor(data?: ICureDialysisAdequacy) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisAdequacyName = _data["dialysisAdequacyName"];
            this.reachStandard = _data["reachStandard"];
            this.overStandard = _data["overStandard"];
            this.notReachStandrd = _data["notReachStandrd"];
            this.unMeasured = _data["unMeasured"];
        }
    }

    static fromJS(data: any): CureDialysisAdequacy {
        data = typeof data === 'object' ? data : {};
        let result = new CureDialysisAdequacy();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisAdequacyName"] = this.dialysisAdequacyName;
        data["reachStandard"] = this.reachStandard;
        data["overStandard"] = this.overStandard;
        data["notReachStandrd"] = this.notReachStandrd;
        data["unMeasured"] = this.unMeasured;
        return data;
    }
}

/** 透析类 - 透析充分性汇总 */
export interface ICureDialysisAdequacy {
    /** 度量指标名称 */
    dialysisAdequacyName?: string | undefined;
    /** 达标数量 */
    reachStandard?: number;
    /** 超标数量 */
    overStandard?: number;
    /** 不达标数量 */
    notReachStandrd?: number;
    /** 未检测数量 */
    unMeasured?: number;
}

/** 透析类 - 透析充分性 */
export class CureDialysisAdequacyDetail implements ICureDialysisAdequacyDetail {
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 透析记录单Id */
    cureRecordId?: string | undefined;
    /** 检查日期 */
    date?: dayjs.Dayjs;
    /** 身高(cm) */
    height?: number;
    /** 体重(Kg) */
    weight?: number;
    /** BMI(kg/㎡) */
    bmi?: number;
    /** 透前尿素(mmol/L) */
    bunBefore?: number;
    /** 透后尿素(mmol/L) */
    bunAfter?: number;
    /** 超滤量(L) */
    ufv?: number;
    /** spKt/V */
    ktv?: number | undefined;
    /** URR */
    urr?: number | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;

    constructor(data?: ICureDialysisAdequacyDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientName = _data["patientName"];
            this.cureRecordId = _data["cureRecordId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.height = _data["height"];
            this.weight = _data["weight"];
            this.bmi = _data["bmi"];
            this.bunBefore = _data["bunBefore"];
            this.bunAfter = _data["bunAfter"];
            this.ufv = _data["ufv"];
            this.ktv = _data["ktv"];
            this.urr = _data["urr"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureDialysisAdequacyDetail {
        data = typeof data === 'object' ? data : {};
        let result = new CureDialysisAdequacyDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientName"] = this.patientName;
        data["cureRecordId"] = this.cureRecordId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["height"] = this.height;
        data["weight"] = this.weight;
        data["bmi"] = this.bmi;
        data["bunBefore"] = this.bunBefore;
        data["bunAfter"] = this.bunAfter;
        data["ufv"] = this.ufv;
        data["ktv"] = this.ktv;
        data["urr"] = this.urr;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析类 - 透析充分性 */
export interface ICureDialysisAdequacyDetail {
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 透析记录单Id */
    cureRecordId?: string | undefined;
    /** 检查日期 */
    date?: dayjs.Dayjs;
    /** 身高(cm) */
    height?: number;
    /** 体重(Kg) */
    weight?: number;
    /** BMI(kg/㎡) */
    bmi?: number;
    /** 透前尿素(mmol/L) */
    bunBefore?: number;
    /** 透后尿素(mmol/L) */
    bunAfter?: number;
    /** 超滤量(L) */
    ufv?: number;
    /** spKt/V */
    ktv?: number | undefined;
    /** URR */
    urr?: number | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
}

/** Reponse */
export class CureDialysisAdequacyDetailResult implements ICureDialysisAdequacyDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDialysisAdequacyDetail[] | undefined;

    constructor(data?: ICureDialysisAdequacyDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureDialysisAdequacyDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureDialysisAdequacyDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureDialysisAdequacyDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureDialysisAdequacyDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDialysisAdequacyDetail[] | undefined;
}

/** Reponse */
export class CureDialysisAdequacyResult implements ICureDialysisAdequacyResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDialysisAdequacy[] | undefined;

    constructor(data?: ICureDialysisAdequacyResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureDialysisAdequacy.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureDialysisAdequacyResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureDialysisAdequacyResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureDialysisAdequacyResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDialysisAdequacy[] | undefined;
}

/** 透析类 - 透析充分性指标 */
export class CureDialysisAdequacyTarget implements ICureDialysisAdequacyTarget {
    /** 名称 */
    dialysisAdequacyName?: string | undefined;
    /** 总人数 */
    total?: number;
    /** 检测人数 */
    examineCount?: number;
    /** 检测达标人数 */
    reachStandard?: number;
    /** 检测达标率 */
    readonly reachStandardRatio?: string | undefined;
    /** 检测未达标人数 */
    notReachStandrd?: number;
    readonly notReachStandrdRatio?: string | undefined;
    /** 未检测人数 */
    unMeasured?: number;

    constructor(data?: ICureDialysisAdequacyTarget) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisAdequacyName = _data["dialysisAdequacyName"];
            this.total = _data["total"];
            this.examineCount = _data["examineCount"];
            this.reachStandard = _data["reachStandard"];
            (<any>this).reachStandardRatio = _data["reachStandardRatio"];
            this.notReachStandrd = _data["notReachStandrd"];
            (<any>this).notReachStandrdRatio = _data["notReachStandrdRatio"];
            this.unMeasured = _data["unMeasured"];
        }
    }

    static fromJS(data: any): CureDialysisAdequacyTarget {
        data = typeof data === 'object' ? data : {};
        let result = new CureDialysisAdequacyTarget();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisAdequacyName"] = this.dialysisAdequacyName;
        data["total"] = this.total;
        data["examineCount"] = this.examineCount;
        data["reachStandard"] = this.reachStandard;
        data["reachStandardRatio"] = this.reachStandardRatio;
        data["notReachStandrd"] = this.notReachStandrd;
        data["notReachStandrdRatio"] = this.notReachStandrdRatio;
        data["unMeasured"] = this.unMeasured;
        return data;
    }
}

/** 透析类 - 透析充分性指标 */
export interface ICureDialysisAdequacyTarget {
    /** 名称 */
    dialysisAdequacyName?: string | undefined;
    /** 总人数 */
    total?: number;
    /** 检测人数 */
    examineCount?: number;
    /** 检测达标人数 */
    reachStandard?: number;
    /** 检测达标率 */
    reachStandardRatio?: string | undefined;
    /** 检测未达标人数 */
    notReachStandrd?: number;
    notReachStandrdRatio?: string | undefined;
    /** 未检测人数 */
    unMeasured?: number;
}

/** 透析类 - 透析充分性指标 */
export class CureDialysisAdequacyTargetDetail implements ICureDialysisAdequacyTargetDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 透析记录单Id */
    cureRecordId?: string | undefined;
    /** 检查日期 */
    date?: dayjs.Dayjs;
    /** 身高(cm) */
    height?: number | undefined;
    /** 体重(Kg) */
    weight?: number;
    /** BMI(kg/㎡) */
    bmi?: number;
    /** 透前尿素(mmol/L) */
    bunBefore?: number;
    /** 透后尿素(mmol/L) */
    bunAfter?: number;
    /** 超滤量(L) */
    ufv?: number;
    /** spKt/V */
    ktv?: number | undefined;
    /** URR */
    urr?: number | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;

    constructor(data?: ICureDialysisAdequacyTargetDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.cureRecordId = _data["cureRecordId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.height = _data["height"];
            this.weight = _data["weight"];
            this.bmi = _data["bmi"];
            this.bunBefore = _data["bunBefore"];
            this.bunAfter = _data["bunAfter"];
            this.ufv = _data["ufv"];
            this.ktv = _data["ktv"];
            this.urr = _data["urr"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureDialysisAdequacyTargetDetail {
        data = typeof data === 'object' ? data : {};
        let result = new CureDialysisAdequacyTargetDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["cureRecordId"] = this.cureRecordId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["height"] = this.height;
        data["weight"] = this.weight;
        data["bmi"] = this.bmi;
        data["bunBefore"] = this.bunBefore;
        data["bunAfter"] = this.bunAfter;
        data["ufv"] = this.ufv;
        data["ktv"] = this.ktv;
        data["urr"] = this.urr;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析类 - 透析充分性指标 */
export interface ICureDialysisAdequacyTargetDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 透析记录单Id */
    cureRecordId?: string | undefined;
    /** 检查日期 */
    date?: dayjs.Dayjs;
    /** 身高(cm) */
    height?: number | undefined;
    /** 体重(Kg) */
    weight?: number;
    /** BMI(kg/㎡) */
    bmi?: number;
    /** 透前尿素(mmol/L) */
    bunBefore?: number;
    /** 透后尿素(mmol/L) */
    bunAfter?: number;
    /** 超滤量(L) */
    ufv?: number;
    /** spKt/V */
    ktv?: number | undefined;
    /** URR */
    urr?: number | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
}

/** Reponse */
export class CureDialysisAdequacyTargetDetailResult implements ICureDialysisAdequacyTargetDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDialysisAdequacyTargetDetail[] | undefined;

    constructor(data?: ICureDialysisAdequacyTargetDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureDialysisAdequacyTargetDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureDialysisAdequacyTargetDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureDialysisAdequacyTargetDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureDialysisAdequacyTargetDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDialysisAdequacyTargetDetail[] | undefined;
}

/** Reponse */
export class CureDialysisAdequacyTargetResult implements ICureDialysisAdequacyTargetResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDialysisAdequacyTarget[] | undefined;

    constructor(data?: ICureDialysisAdequacyTargetResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureDialysisAdequacyTarget.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureDialysisAdequacyTargetResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureDialysisAdequacyTargetResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureDialysisAdequacyTargetResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDialysisAdequacyTarget[] | undefined;
}

/** 透析类 - 透析液 - 汇总 */
export class CureDialysisate implements ICureDialysisate {
    /** 日期 */
    date?: string | undefined;
    /** 透析液Ca离子浓度范围计数集合 */
    items?: CureDialysisateItem[] | undefined;

    constructor(data?: ICureDialysisate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CureDialysisateItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureDialysisate {
        data = typeof data === 'object' ? data : {};
        let result = new CureDialysisate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 透析类 - 透析液 - 汇总 */
export interface ICureDialysisate {
    /** 日期 */
    date?: string | undefined;
    /** 透析液Ca离子浓度范围计数集合 */
    items?: CureDialysisateItem[] | undefined;
}

/** 透析类 - 透析液 */
export class CureDialysisateDetail implements ICureDialysisateDetail {
    /** 标识 */
    id?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析记录单标识 */
    cureRecordId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 流量(ml/min) */
    flowRate?: number | undefined;
    /** 温度(°C) */
    temp?: number | undefined;
    /** 电导度(mS/cm) */
    cond?: number | undefined;
    /** 钾(mmol/L) */
    k?: number | undefined;
    /** 钙(mmol/L) */
    ca?: number | undefined;
    /** 钠(mmol/L) */
    na?: number | undefined;
    /** 碳酸氢根(mmol/L) */
    hco?: number | undefined;
    /** 葡萄糖(mmol/L) */
    glucose?: number | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;

    constructor(data?: ICureDialysisateDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.cureRecordId = _data["cureRecordId"];
            this.patientName = _data["patientName"];
            this.name = _data["name"];
            this.flowRate = _data["flowRate"];
            this.temp = _data["temp"];
            this.cond = _data["cond"];
            this.k = _data["k"];
            this.ca = _data["ca"];
            this.na = _data["na"];
            this.hco = _data["hco"];
            this.glucose = _data["glucose"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureDialysisateDetail {
        data = typeof data === 'object' ? data : {};
        let result = new CureDialysisateDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["cureRecordId"] = this.cureRecordId;
        data["patientName"] = this.patientName;
        data["name"] = this.name;
        data["flowRate"] = this.flowRate;
        data["temp"] = this.temp;
        data["cond"] = this.cond;
        data["k"] = this.k;
        data["ca"] = this.ca;
        data["na"] = this.na;
        data["hco"] = this.hco;
        data["glucose"] = this.glucose;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析类 - 透析液 */
export interface ICureDialysisateDetail {
    /** 标识 */
    id?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析记录单标识 */
    cureRecordId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 流量(ml/min) */
    flowRate?: number | undefined;
    /** 温度(°C) */
    temp?: number | undefined;
    /** 电导度(mS/cm) */
    cond?: number | undefined;
    /** 钾(mmol/L) */
    k?: number | undefined;
    /** 钙(mmol/L) */
    ca?: number | undefined;
    /** 钠(mmol/L) */
    na?: number | undefined;
    /** 碳酸氢根(mmol/L) */
    hco?: number | undefined;
    /** 葡萄糖(mmol/L) */
    glucose?: number | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
}

/** Reponse */
export class CureDialysisateDetailResult implements ICureDialysisateDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDialysisateDetail[] | undefined;

    constructor(data?: ICureDialysisateDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureDialysisateDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureDialysisateDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureDialysisateDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureDialysisateDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDialysisateDetail[] | undefined;
}

/** 透析液Ca离子浓度范围计数集合 */
export class CureDialysisateItem implements ICureDialysisateItem {
    /** 透析液Ca离子浓度范围 */
    dialysisate?: string | undefined;
    /** 透析液Ca离子浓度范围计数 */
    count?: number;

    constructor(data?: ICureDialysisateItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisate = _data["dialysisate"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): CureDialysisateItem {
        data = typeof data === 'object' ? data : {};
        let result = new CureDialysisateItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisate"] = this.dialysisate;
        data["count"] = this.count;
        return data;
    }
}

/** 透析液Ca离子浓度范围计数集合 */
export interface ICureDialysisateItem {
    /** 透析液Ca离子浓度范围 */
    dialysisate?: string | undefined;
    /** 透析液Ca离子浓度范围计数 */
    count?: number;
}

/** Reponse */
export class CureDialysisateResult implements ICureDialysisateResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDialysisate[] | undefined;

    constructor(data?: ICureDialysisateResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureDialysisate.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureDialysisateResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureDialysisateResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureDialysisateResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDialysisate[] | undefined;
}

/** 透析类 - 透析时长 */
export class CureDuration implements ICureDuration {
    /** 透析方式 */
    dialysisMode?: string | undefined;
    /** 透析方式名称 */
    dialysisModeLabel?: string | undefined;
    /** 透析集合列表 */
    items?: CureDurationItem[] | undefined;

    constructor(data?: ICureDuration) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CureDurationItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureDuration {
        data = typeof data === 'object' ? data : {};
        let result = new CureDuration();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 透析类 - 透析时长 */
export interface ICureDuration {
    /** 透析方式 */
    dialysisMode?: string | undefined;
    /** 透析方式名称 */
    dialysisModeLabel?: string | undefined;
    /** 透析集合列表 */
    items?: CureDurationItem[] | undefined;
}

/** 透析类 - 透析时长 */
export class CureDurationDetail implements ICureDurationDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析记录单标识 */
    cureRecordId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 透析时长 */
    duration?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 转归状态 */
    prognosisState?: string | undefined;
    /** 入科日期 */
    entryDate?: dayjs.Dayjs | undefined;
    /** 排班班次 */
    shift?: string | undefined;
    /** 排班区域 */
    area?: string | undefined;
    /** 床号 */
    bedNumber?: string | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;

    constructor(data?: ICureDurationDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.cureRecordId = _data["cureRecordId"];
            this.patientName = _data["patientName"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.duration = _data["duration"];
            this.gender = _data["gender"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.prognosisState = _data["prognosisState"];
            this.entryDate = _data["entryDate"] ? dayjs(_data["entryDate"].toString()) : <any>undefined;
            this.shift = _data["shift"];
            this.area = _data["area"];
            this.bedNumber = _data["bedNumber"];
            this.dialysisDurationFact = _data["dialysisDurationFact"];
        }
    }

    static fromJS(data: any): CureDurationDetail {
        data = typeof data === 'object' ? data : {};
        let result = new CureDurationDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["cureRecordId"] = this.cureRecordId;
        data["patientName"] = this.patientName;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["duration"] = this.duration;
        data["gender"] = this.gender;
        data["dialysisNumber"] = this.dialysisNumber;
        data["prognosisState"] = this.prognosisState;
        data["entryDate"] = this.entryDate ? this.entryDate.toISOString() : <any>undefined;
        data["shift"] = this.shift;
        data["area"] = this.area;
        data["bedNumber"] = this.bedNumber;
        data["dialysisDurationFact"] = this.dialysisDurationFact;
        return data;
    }
}

/** 透析类 - 透析时长 */
export interface ICureDurationDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析记录单标识 */
    cureRecordId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 透析时长 */
    duration?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 转归状态 */
    prognosisState?: string | undefined;
    /** 入科日期 */
    entryDate?: dayjs.Dayjs | undefined;
    /** 排班班次 */
    shift?: string | undefined;
    /** 排班区域 */
    area?: string | undefined;
    /** 床号 */
    bedNumber?: string | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
}

/** Reponse */
export class CureDurationDetailResult implements ICureDurationDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDurationDetail[] | undefined;

    constructor(data?: ICureDurationDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureDurationDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureDurationDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureDurationDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureDurationDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDurationDetail[] | undefined;
}

/** 透析时长集合列表 */
export class CureDurationItem implements ICureDurationItem {
    /** 透析时长 */
    durations?: string | undefined;
    /** 总数 */
    count?: number;
    /** 占比 */
    rate?: number;

    constructor(data?: ICureDurationItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.durations = _data["durations"];
            this.count = _data["count"];
            this.rate = _data["rate"];
        }
    }

    static fromJS(data: any): CureDurationItem {
        data = typeof data === 'object' ? data : {};
        let result = new CureDurationItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["durations"] = this.durations;
        data["count"] = this.count;
        data["rate"] = this.rate;
        return data;
    }
}

/** 透析时长集合列表 */
export interface ICureDurationItem {
    /** 透析时长 */
    durations?: string | undefined;
    /** 总数 */
    count?: number;
    /** 占比 */
    rate?: number;
}

/** Reponse */
export class CureDurationResult implements ICureDurationResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDuration[] | undefined;

    constructor(data?: ICureDurationResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureDuration.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureDurationResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureDurationResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureDurationResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDuration[] | undefined;
}

/** 透析类 - 空余床位详细 */
export class CureEmptyBedDetail implements ICureEmptyBedDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 排班班次 */
    shift?: string | undefined;
    /** 排班区域 */
    area?: string | undefined;
    /** 床号 */
    bedNumber?: string | undefined;

    constructor(data?: ICureEmptyBedDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.shift = _data["shift"];
            this.area = _data["area"];
            this.bedNumber = _data["bedNumber"];
        }
    }

    static fromJS(data: any): CureEmptyBedDetail {
        data = typeof data === 'object' ? data : {};
        let result = new CureEmptyBedDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["shift"] = this.shift;
        data["area"] = this.area;
        data["bedNumber"] = this.bedNumber;
        return data;
    }
}

/** 透析类 - 空余床位详细 */
export interface ICureEmptyBedDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 排班班次 */
    shift?: string | undefined;
    /** 排班区域 */
    area?: string | undefined;
    /** 床号 */
    bedNumber?: string | undefined;
}

/** Reponse */
export class CureEmptyBedDetailResult implements ICureEmptyBedDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureEmptyBedDetail[] | undefined;

    constructor(data?: ICureEmptyBedDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureEmptyBedDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureEmptyBedDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureEmptyBedDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureEmptyBedDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureEmptyBedDetail[] | undefined;
}

/** 透析次数 */
export class CureFrequencyView implements ICureFrequencyView {
    /** 日期 */
    date?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: ICureFrequencyView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): CureFrequencyView {
        data = typeof data === 'object' ? data : {};
        let result = new CureFrequencyView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["count"] = this.count;
        return data;
    }
}

/** 透析次数 */
export interface ICureFrequencyView {
    /** 日期 */
    date?: string | undefined;
    /** 数量 */
    count?: number;
}

/** Reponse */
export class CureFrequencyViewResult implements ICureFrequencyViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureFrequencyView[] | undefined;

    constructor(data?: ICureFrequencyViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureFrequencyView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureFrequencyViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureFrequencyViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureFrequencyViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureFrequencyView[] | undefined;
}

/** 感染统计 */
export class CureInfectedReport implements ICureInfectedReport {
    /** 名称 */
    infectedName?: string | undefined;
    /** 数量 */
    infectedCount?: number;
    /** 感染率 */
    infectedRate?: string | undefined;

    constructor(data?: ICureInfectedReport) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.infectedName = _data["infectedName"];
            this.infectedCount = _data["infectedCount"];
            this.infectedRate = _data["infectedRate"];
        }
    }

    static fromJS(data: any): CureInfectedReport {
        data = typeof data === 'object' ? data : {};
        let result = new CureInfectedReport();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["infectedName"] = this.infectedName;
        data["infectedCount"] = this.infectedCount;
        data["infectedRate"] = this.infectedRate;
        return data;
    }
}

/** 感染统计 */
export interface ICureInfectedReport {
    /** 名称 */
    infectedName?: string | undefined;
    /** 数量 */
    infectedCount?: number;
    /** 感染率 */
    infectedRate?: string | undefined;
}

/** 感染子项 */
export class CureInfectedReportItem implements ICureInfectedReportItem {
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 感染日期 */
    infectedDate?: string | undefined;
    /** 名称 */
    infectedName?: any | undefined;
    /** 透析记录单编号 */
    dialysisRecordId?: string | undefined;

    constructor(data?: ICureInfectedReportItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientName = _data["patientName"];
            this.infectedDate = _data["infectedDate"];
            this.infectedName = _data["infectedName"];
            this.dialysisRecordId = _data["dialysisRecordId"];
        }
    }

    static fromJS(data: any): CureInfectedReportItem {
        data = typeof data === 'object' ? data : {};
        let result = new CureInfectedReportItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientName"] = this.patientName;
        data["infectedDate"] = this.infectedDate;
        data["infectedName"] = this.infectedName;
        data["dialysisRecordId"] = this.dialysisRecordId;
        return data;
    }
}

/** 感染子项 */
export interface ICureInfectedReportItem {
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 感染日期 */
    infectedDate?: string | undefined;
    /** 名称 */
    infectedName?: any | undefined;
    /** 透析记录单编号 */
    dialysisRecordId?: string | undefined;
}

/** Reponse */
export class CureInfectedReportItemResult implements ICureInfectedReportItemResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureInfectedReportItem[] | undefined;

    constructor(data?: ICureInfectedReportItemResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureInfectedReportItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureInfectedReportItemResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureInfectedReportItemResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureInfectedReportItemResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureInfectedReportItem[] | undefined;
}

/** Reponse */
export class CureInfectedReportResult implements ICureInfectedReportResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureInfectedReport[] | undefined;

    constructor(data?: ICureInfectedReportResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureInfectedReport.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureInfectedReportResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureInfectedReportResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureInfectedReportResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureInfectedReport[] | undefined;
}

/** 透析类 - 透析频次（?次/周） */
export class CureInterval implements ICureInterval {
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel?: string | undefined;
    /** 周次数详细技术集合 */
    items?: TimeCount[] | undefined;

    constructor(data?: ICureInterval) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TimeCount.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureInterval {
        data = typeof data === 'object' ? data : {};
        let result = new CureInterval();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 透析类 - 透析频次（?次/周） */
export interface ICureInterval {
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel?: string | undefined;
    /** 周次数详细技术集合 */
    items?: TimeCount[] | undefined;
}

/** 透析类 - 透析频次（?次/周） - 详细 */
export class CureIntervalDetail implements ICureIntervalDetail {
    /** 透析记录标识 */
    cureRecordId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 转归状态 */
    prognosisState?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: dayjs.Dayjs | undefined;

    constructor(data?: ICureIntervalDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.patientName = _data["patientName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.prognosisState = _data["prognosisState"];
            this.receiptDate = _data["receiptDate"] ? dayjs(_data["receiptDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureIntervalDetail {
        data = typeof data === 'object' ? data : {};
        let result = new CureIntervalDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["patientName"] = this.patientName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["dialysisNumber"] = this.dialysisNumber;
        data["prognosisState"] = this.prognosisState;
        data["receiptDate"] = this.receiptDate ? this.receiptDate.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析类 - 透析频次（?次/周） - 详细 */
export interface ICureIntervalDetail {
    /** 透析记录标识 */
    cureRecordId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 转归状态 */
    prognosisState?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureIntervalDetailResult implements ICureIntervalDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureIntervalDetail[] | undefined;

    constructor(data?: ICureIntervalDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureIntervalDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureIntervalDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureIntervalDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureIntervalDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureIntervalDetail[] | undefined;
}

/** Reponse */
export class CureIntervalResult implements ICureIntervalResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureInterval[] | undefined;

    constructor(data?: ICureIntervalResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureInterval.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureIntervalResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureIntervalResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureIntervalResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureInterval[] | undefined;
}

/** 治疗管理 */
export class CureManagementView implements ICureManagementView {
    cureFrequencys?: CureFrequencyViewResult;
    cureCasetimes?: CureCasetimesResult;
    cureComplicationReports?: CureComplicationReportResult;
    cureAnticoagulants?: CureAnticoagulantResult;
    cureUfgs?: CureUfgResult;
    cureUfvs?: CureUfvResult;
    cureDialysisates?: CureDialysisateResult;
    cureBloodFlows?: CureBloodFlowResult;
    cureComplicationAssessment?: CureComplicationAssessmentResultEntry;

    constructor(data?: ICureManagementView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureFrequencys = _data["cureFrequencys"] ? CureFrequencyViewResult.fromJS(_data["cureFrequencys"]) : <any>undefined;
            this.cureCasetimes = _data["cureCasetimes"] ? CureCasetimesResult.fromJS(_data["cureCasetimes"]) : <any>undefined;
            this.cureComplicationReports = _data["cureComplicationReports"] ? CureComplicationReportResult.fromJS(_data["cureComplicationReports"]) : <any>undefined;
            this.cureAnticoagulants = _data["cureAnticoagulants"] ? CureAnticoagulantResult.fromJS(_data["cureAnticoagulants"]) : <any>undefined;
            this.cureUfgs = _data["cureUfgs"] ? CureUfgResult.fromJS(_data["cureUfgs"]) : <any>undefined;
            this.cureUfvs = _data["cureUfvs"] ? CureUfvResult.fromJS(_data["cureUfvs"]) : <any>undefined;
            this.cureDialysisates = _data["cureDialysisates"] ? CureDialysisateResult.fromJS(_data["cureDialysisates"]) : <any>undefined;
            this.cureBloodFlows = _data["cureBloodFlows"] ? CureBloodFlowResult.fromJS(_data["cureBloodFlows"]) : <any>undefined;
            this.cureComplicationAssessment = _data["cureComplicationAssessment"] ? CureComplicationAssessmentResultEntry.fromJS(_data["cureComplicationAssessment"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureManagementView {
        data = typeof data === 'object' ? data : {};
        let result = new CureManagementView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureFrequencys"] = this.cureFrequencys ? this.cureFrequencys.toJSON() : <any>undefined;
        data["cureCasetimes"] = this.cureCasetimes ? this.cureCasetimes.toJSON() : <any>undefined;
        data["cureComplicationReports"] = this.cureComplicationReports ? this.cureComplicationReports.toJSON() : <any>undefined;
        data["cureAnticoagulants"] = this.cureAnticoagulants ? this.cureAnticoagulants.toJSON() : <any>undefined;
        data["cureUfgs"] = this.cureUfgs ? this.cureUfgs.toJSON() : <any>undefined;
        data["cureUfvs"] = this.cureUfvs ? this.cureUfvs.toJSON() : <any>undefined;
        data["cureDialysisates"] = this.cureDialysisates ? this.cureDialysisates.toJSON() : <any>undefined;
        data["cureBloodFlows"] = this.cureBloodFlows ? this.cureBloodFlows.toJSON() : <any>undefined;
        data["cureComplicationAssessment"] = this.cureComplicationAssessment ? this.cureComplicationAssessment.toJSON() : <any>undefined;
        return data;
    }
}

/** 治疗管理 */
export interface ICureManagementView {
    cureFrequencys?: CureFrequencyViewResult;
    cureCasetimes?: CureCasetimesResult;
    cureComplicationReports?: CureComplicationReportResult;
    cureAnticoagulants?: CureAnticoagulantResult;
    cureUfgs?: CureUfgResult;
    cureUfvs?: CureUfvResult;
    cureDialysisates?: CureDialysisateResult;
    cureBloodFlows?: CureBloodFlowResult;
    cureComplicationAssessment?: CureComplicationAssessmentResultEntry;
}

/** Reponse */
export class CureManagementViewResultEntry implements ICureManagementViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureManagementView;

    constructor(data?: ICureManagementViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureManagementView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureManagementViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureManagementViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureManagementViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureManagementView;
}

/** 透析类 - 提前下机 */
export class CureOff implements ICureOff {
    /** 日期 */
    date?: string | undefined;
    /** 例次 */
    count?: number;

    constructor(data?: ICureOff) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): CureOff {
        data = typeof data === 'object' ? data : {};
        let result = new CureOff();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["count"] = this.count;
        return data;
    }
}

/** 透析类 - 提前下机 */
export interface ICureOff {
    /** 日期 */
    date?: string | undefined;
    /** 例次 */
    count?: number;
}

/** 透析类 - 提前下机 - 详细 */
export class CureOffDetail implements ICureOffDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析记录单标识 */
    cureRecordId?: string | undefined;
    /** 日期（yyyy-MM-dd） */
    date?: dayjs.Dayjs;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 透析开始时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 透析结束时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 预计透析时间(min) */
    dialysisDurationSet?: number;
    /** 实际透析时间(min) */
    dialysisDurationFact?: number | undefined;
    /** 提前下机时长(min) */
    duration?: number | undefined;
    /** 提前下机原因 */
    offEarlyCause?: string | undefined;
    /** 并发症 */
    complication?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 透析区间 */
    dialysisAreaName?: string | undefined;
    /** 床号 */
    bedName?: string | undefined;

    constructor(data?: ICureOffDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.cureRecordId = _data["cureRecordId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.patientName = _data["patientName"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeOff = _data["timeOff"] ? dayjs(_data["timeOff"].toString()) : <any>undefined;
            this.dialysisDurationSet = _data["dialysisDurationSet"];
            this.dialysisDurationFact = _data["dialysisDurationFact"];
            this.duration = _data["duration"];
            this.offEarlyCause = _data["offEarlyCause"];
            this.complication = _data["complication"];
            this.shiftName = _data["shiftName"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.bedName = _data["bedName"];
        }
    }

    static fromJS(data: any): CureOffDetail {
        data = typeof data === 'object' ? data : {};
        let result = new CureOffDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["cureRecordId"] = this.cureRecordId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["patientName"] = this.patientName;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toISOString() : <any>undefined;
        data["timeOff"] = this.timeOff ? this.timeOff.toISOString() : <any>undefined;
        data["dialysisDurationSet"] = this.dialysisDurationSet;
        data["dialysisDurationFact"] = this.dialysisDurationFact;
        data["duration"] = this.duration;
        data["offEarlyCause"] = this.offEarlyCause;
        data["complication"] = this.complication;
        data["shiftName"] = this.shiftName;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["bedName"] = this.bedName;
        return data;
    }
}

/** 透析类 - 提前下机 - 详细 */
export interface ICureOffDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析记录单标识 */
    cureRecordId?: string | undefined;
    /** 日期（yyyy-MM-dd） */
    date?: dayjs.Dayjs;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 透析开始时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 透析结束时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 预计透析时间(min) */
    dialysisDurationSet?: number;
    /** 实际透析时间(min) */
    dialysisDurationFact?: number | undefined;
    /** 提前下机时长(min) */
    duration?: number | undefined;
    /** 提前下机原因 */
    offEarlyCause?: string | undefined;
    /** 并发症 */
    complication?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 透析区间 */
    dialysisAreaName?: string | undefined;
    /** 床号 */
    bedName?: string | undefined;
}

/** Reponse */
export class CureOffDetailResult implements ICureOffDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureOffDetail[] | undefined;

    constructor(data?: ICureOffDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureOffDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureOffDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureOffDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureOffDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureOffDetail[] | undefined;
}

/** Reponse */
export class CureOffResult implements ICureOffResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureOff[] | undefined;

    constructor(data?: ICureOffResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureOff.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureOffResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureOffResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureOffResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureOff[] | undefined;
}

/** 渗血统计 */
export class CureOozingOfBlood implements ICureOozingOfBlood {
    /** 渗血人数 */
    oozingCount?: number;
    /** 穿刺人数 */
    punctureCount?: number;
    /** 渗血率 */
    oozingRate?: number;

    constructor(data?: ICureOozingOfBlood) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.oozingCount = _data["oozingCount"];
            this.punctureCount = _data["punctureCount"];
            this.oozingRate = _data["oozingRate"];
        }
    }

    static fromJS(data: any): CureOozingOfBlood {
        data = typeof data === 'object' ? data : {};
        let result = new CureOozingOfBlood();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["oozingCount"] = this.oozingCount;
        data["punctureCount"] = this.punctureCount;
        data["oozingRate"] = this.oozingRate;
        return data;
    }
}

/** 渗血统计 */
export interface ICureOozingOfBlood {
    /** 渗血人数 */
    oozingCount?: number;
    /** 穿刺人数 */
    punctureCount?: number;
    /** 渗血率 */
    oozingRate?: number;
}

/** 渗血统计详情 */
export class CureOozingOfBloodItem implements ICureOozingOfBloodItem {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 透析日期 */
    date?: string | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 透析标识 */
    dialysisRecordId?: string | undefined;
    /** 抗凝剂 */
    anticoagulant?: string | undefined;
    /** 透析液 */
    dialysate?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel?: string | undefined;

    constructor(data?: ICureOozingOfBloodItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.date = _data["date"];
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.patientName = _data["patientName"];
            this.gender = _data["gender"];
            this.dialysisRecordId = _data["dialysisRecordId"];
            this.anticoagulant = _data["anticoagulant"];
            this.dialysate = _data["dialysate"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
        }
    }

    static fromJS(data: any): CureOozingOfBloodItem {
        data = typeof data === 'object' ? data : {};
        let result = new CureOozingOfBloodItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["date"] = this.date;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["patientName"] = this.patientName;
        data["gender"] = this.gender;
        data["dialysisRecordId"] = this.dialysisRecordId;
        data["anticoagulant"] = this.anticoagulant;
        data["dialysate"] = this.dialysate;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        return data;
    }
}

/** 渗血统计详情 */
export interface ICureOozingOfBloodItem {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 透析日期 */
    date?: string | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 透析标识 */
    dialysisRecordId?: string | undefined;
    /** 抗凝剂 */
    anticoagulant?: string | undefined;
    /** 透析液 */
    dialysate?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel?: string | undefined;
}

/** Reponse */
export class CureOozingOfBloodItemResult implements ICureOozingOfBloodItemResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureOozingOfBloodItem[] | undefined;

    constructor(data?: ICureOozingOfBloodItemResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureOozingOfBloodItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureOozingOfBloodItemResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureOozingOfBloodItemResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureOozingOfBloodItemResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureOozingOfBloodItem[] | undefined;
}

/** Reponse */
export class CureOozingOfBloodResultEntry implements ICureOozingOfBloodResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureOozingOfBlood;

    constructor(data?: ICureOozingOfBloodResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureOozingOfBlood.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureOozingOfBloodResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureOozingOfBloodResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureOozingOfBloodResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureOozingOfBlood;
}

/** 按人排床统计 */
export class CureSchedulePatient implements ICureSchedulePatient {
    /** 患者名称 */
    patientName?: string | undefined;
    /** 患者Id */
    patientId?: string | undefined;
    /** 透析方式子项 */
    items?: CureSchedulePatientItem[] | undefined;

    constructor(data?: ICureSchedulePatient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientName = _data["patientName"];
            this.patientId = _data["patientId"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CureSchedulePatientItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureSchedulePatient {
        data = typeof data === 'object' ? data : {};
        let result = new CureSchedulePatient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientName"] = this.patientName;
        data["patientId"] = this.patientId;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 按人排床统计 */
export interface ICureSchedulePatient {
    /** 患者名称 */
    patientName?: string | undefined;
    /** 患者Id */
    patientId?: string | undefined;
    /** 透析方式子项 */
    items?: CureSchedulePatientItem[] | undefined;
}

/** 按人排床统计 详细 */
export class CureSchedulePatientDetail implements ICureSchedulePatientDetail {
    /** 患者Id */
    patientId?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 透析区间Id */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    diallysisAreaName?: string | undefined;
    /** 按人排床统计 详细 - 子项 */
    items?: CureSchedulePatientDetailItem[] | undefined;

    constructor(data?: ICureSchedulePatientDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.diallysisAreaName = _data["diallysisAreaName"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CureSchedulePatientDetailItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureSchedulePatientDetail {
        data = typeof data === 'object' ? data : {};
        let result = new CureSchedulePatientDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["diallysisAreaName"] = this.diallysisAreaName;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 按人排床统计 详细 */
export interface ICureSchedulePatientDetail {
    /** 患者Id */
    patientId?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 透析区间Id */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    diallysisAreaName?: string | undefined;
    /** 按人排床统计 详细 - 子项 */
    items?: CureSchedulePatientDetailItem[] | undefined;
}

/** 按人排床统计 详细 - 子项 */
export class CureSchedulePatientDetailItem implements ICureSchedulePatientDetailItem {
    /** 透析床位名称 */
    dialysisBedName?: string | undefined;
    /** 透析床位Id */
    dialysisBedId?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: ICureSchedulePatientDetailItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisBedName = _data["dialysisBedName"];
            this.dialysisBedId = _data["dialysisBedId"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): CureSchedulePatientDetailItem {
        data = typeof data === 'object' ? data : {};
        let result = new CureSchedulePatientDetailItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisBedName"] = this.dialysisBedName;
        data["dialysisBedId"] = this.dialysisBedId;
        data["count"] = this.count;
        return data;
    }
}

/** 按人排床统计 详细 - 子项 */
export interface ICureSchedulePatientDetailItem {
    /** 透析床位名称 */
    dialysisBedName?: string | undefined;
    /** 透析床位Id */
    dialysisBedId?: string | undefined;
    /** 数量 */
    count?: number;
}

/** Reponse */
export class CureSchedulePatientDetailResultEntry implements ICureSchedulePatientDetailResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureSchedulePatientDetail;

    constructor(data?: ICureSchedulePatientDetailResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureSchedulePatientDetail.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureSchedulePatientDetailResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureSchedulePatientDetailResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureSchedulePatientDetailResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureSchedulePatientDetail;
}

export class CureSchedulePatientItem implements ICureSchedulePatientItem {
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 透析区间Id */
    dialysisAreaId?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: ICureSchedulePatientItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): CureSchedulePatientItem {
        data = typeof data === 'object' ? data : {};
        let result = new CureSchedulePatientItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["count"] = this.count;
        return data;
    }
}

export interface ICureSchedulePatientItem {
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 透析区间Id */
    dialysisAreaId?: string | undefined;
    /** 数量 */
    count?: number;
}

/** Reponse */
export class CureSchedulePatientResult implements ICureSchedulePatientResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureSchedulePatient[] | undefined;

    constructor(data?: ICureSchedulePatientResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureSchedulePatient.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureSchedulePatientResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureSchedulePatientResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureSchedulePatientResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureSchedulePatient[] | undefined;
}

/** 透析类 - 排床 */
export class CureScheduleShift implements ICureScheduleShift {
    /** 日期 */
    date?: string | undefined;
    /** 班次 */
    items?: CureScheduleShiftItem[] | undefined;

    constructor(data?: ICureScheduleShift) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CureScheduleShiftItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureScheduleShift {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleShift();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 透析类 - 排床 */
export interface ICureScheduleShift {
    /** 日期 */
    date?: string | undefined;
    /** 班次 */
    items?: CureScheduleShiftItem[] | undefined;
}

/** 透析类 - 排床详细统计 */
export class CureScheduleShiftDetail implements ICureScheduleShiftDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析记录单标识 */
    cureRecordId?: string | undefined;
    /** 患者id */
    patientId?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 排班班次 */
    shift?: string | undefined;
    /** 排班区域 */
    area?: string | undefined;
    /** 床号 */
    bedNumber?: string | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;

    constructor(data?: ICureScheduleShiftDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.cureRecordId = _data["cureRecordId"];
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.shift = _data["shift"];
            this.area = _data["area"];
            this.bedNumber = _data["bedNumber"];
            this.dialysisDurationFact = _data["dialysisDurationFact"];
        }
    }

    static fromJS(data: any): CureScheduleShiftDetail {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleShiftDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["cureRecordId"] = this.cureRecordId;
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["shift"] = this.shift;
        data["area"] = this.area;
        data["bedNumber"] = this.bedNumber;
        data["dialysisDurationFact"] = this.dialysisDurationFact;
        return data;
    }
}

/** 透析类 - 排床详细统计 */
export interface ICureScheduleShiftDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析记录单标识 */
    cureRecordId?: string | undefined;
    /** 患者id */
    patientId?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 排班班次 */
    shift?: string | undefined;
    /** 排班区域 */
    area?: string | undefined;
    /** 床号 */
    bedNumber?: string | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
}

/** Reponse */
export class CureScheduleShiftDetailResult implements ICureScheduleShiftDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureScheduleShiftDetail[] | undefined;

    constructor(data?: ICureScheduleShiftDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureScheduleShiftDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureScheduleShiftDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleShiftDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureScheduleShiftDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureScheduleShiftDetail[] | undefined;
}

/** 透析类 - 班次 */
export class CureScheduleShiftItem implements ICureScheduleShiftItem {
    /** 班次 */
    cureShift?: string | undefined;
    /** 透析排班标识计数 */
    count?: number;

    constructor(data?: ICureScheduleShiftItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureShift = _data["cureShift"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): CureScheduleShiftItem {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleShiftItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureShift"] = this.cureShift;
        data["count"] = this.count;
        return data;
    }
}

/** 透析类 - 班次 */
export interface ICureScheduleShiftItem {
    /** 班次 */
    cureShift?: string | undefined;
    /** 透析排班标识计数 */
    count?: number;
}

/** Reponse */
export class CureScheduleShiftResult implements ICureScheduleShiftResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureScheduleShift[] | undefined;

    constructor(data?: ICureScheduleShiftResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureScheduleShift.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureScheduleShiftResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleShiftResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureScheduleShiftResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureScheduleShift[] | undefined;
}

/** 治疗汇总 */
export class CureSummary implements ICureSummary {
    /** 日期 */
    date?: string | undefined;
    /** 透析方式汇总计数集合 */
    items?: CureSummaryItem[] | undefined;

    constructor(data?: ICureSummary) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CureSummaryItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureSummary {
        data = typeof data === 'object' ? data : {};
        let result = new CureSummary();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 治疗汇总 */
export interface ICureSummary {
    /** 日期 */
    date?: string | undefined;
    /** 透析方式汇总计数集合 */
    items?: CureSummaryItem[] | undefined;
}

/** 治疗汇总统计 */
export class CureSummaryDetail implements ICureSummaryDetail {
    /** 日期 */
    date?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 透析号 */
    dialysisNumber?: string | undefined;
    /** 转归状态 */
    prognosisState?: string | undefined;
    /** 入科日期 */
    receiptDate?: string | undefined;
    /** 透析记录单ID */
    cureRecordId?: string | undefined;

    constructor(data?: ICureSummaryDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.patientName = _data["patientName"];
            this.gender = _data["gender"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.prognosisState = _data["prognosisState"];
            this.receiptDate = _data["receiptDate"];
            this.cureRecordId = _data["cureRecordId"];
        }
    }

    static fromJS(data: any): CureSummaryDetail {
        data = typeof data === 'object' ? data : {};
        let result = new CureSummaryDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["patientName"] = this.patientName;
        data["gender"] = this.gender;
        data["dialysisNumber"] = this.dialysisNumber;
        data["prognosisState"] = this.prognosisState;
        data["receiptDate"] = this.receiptDate;
        data["cureRecordId"] = this.cureRecordId;
        return data;
    }
}

/** 治疗汇总统计 */
export interface ICureSummaryDetail {
    /** 日期 */
    date?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 透析号 */
    dialysisNumber?: string | undefined;
    /** 转归状态 */
    prognosisState?: string | undefined;
    /** 入科日期 */
    receiptDate?: string | undefined;
    /** 透析记录单ID */
    cureRecordId?: string | undefined;
}

/** Reponse */
export class CureSummaryDetailResult implements ICureSummaryDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureSummaryDetail[] | undefined;

    constructor(data?: ICureSummaryDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureSummaryDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureSummaryDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureSummaryDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureSummaryDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureSummaryDetail[] | undefined;
}

/** 透析方式汇总集合子项 */
export class CureSummaryItem implements ICureSummaryItem {
    /** 透析方式 */
    dialysisMode?: string | undefined;
    /** 透析方式名称 */
    dialysisModeLabel?: string | undefined;
    /** 透析汇总方式计数 */
    count?: number;

    constructor(data?: ICureSummaryItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): CureSummaryItem {
        data = typeof data === 'object' ? data : {};
        let result = new CureSummaryItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["count"] = this.count;
        return data;
    }
}

/** 透析方式汇总集合子项 */
export interface ICureSummaryItem {
    /** 透析方式 */
    dialysisMode?: string | undefined;
    /** 透析方式名称 */
    dialysisModeLabel?: string | undefined;
    /** 透析汇总方式计数 */
    count?: number;
}

/** Reponse */
export class CureSummaryResult implements ICureSummaryResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureSummary[] | undefined;

    constructor(data?: ICureSummaryResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureSummary.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureSummaryResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureSummaryResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureSummaryResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureSummary[] | undefined;
}

/** 透析类 - 透析例次 */
export class CureTemporaryconduitlocationDetail implements ICureTemporaryconduitlocationDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 透析日期 */
    date?: string | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析记录单标识 */
    cureRecordId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 透析号 */
    dialysisNumber?: string | undefined;
    /** 转归状态 */
    prognosisState?: string | undefined;
    /** 入科日期 */
    receiptDate?: string | undefined;
    /** 位置 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureTemporaryconduitlocationDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.date = _data["date"];
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.cureRecordId = _data["cureRecordId"];
            this.patientName = _data["patientName"];
            this.gender = _data["gender"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.prognosisState = _data["prognosisState"];
            this.receiptDate = _data["receiptDate"];
            this.position = _data["position"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureTemporaryconduitlocationDetail {
        data = typeof data === 'object' ? data : {};
        let result = new CureTemporaryconduitlocationDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["date"] = this.date;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["cureRecordId"] = this.cureRecordId;
        data["patientName"] = this.patientName;
        data["gender"] = this.gender;
        data["dialysisNumber"] = this.dialysisNumber;
        data["prognosisState"] = this.prognosisState;
        data["receiptDate"] = this.receiptDate;
        data["position"] = this.position;
        data["remark"] = this.remark;
        return data;
    }
}

/** 透析类 - 透析例次 */
export interface ICureTemporaryconduitlocationDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 透析日期 */
    date?: string | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析记录单标识 */
    cureRecordId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 透析号 */
    dialysisNumber?: string | undefined;
    /** 转归状态 */
    prognosisState?: string | undefined;
    /** 入科日期 */
    receiptDate?: string | undefined;
    /** 位置 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class CureTemporaryconduitlocationDetailResult implements ICureTemporaryconduitlocationDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureTemporaryconduitlocationDetail[] | undefined;

    constructor(data?: ICureTemporaryconduitlocationDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureTemporaryconduitlocationDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureTemporaryconduitlocationDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureTemporaryconduitlocationDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureTemporaryconduitlocationDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureTemporaryconduitlocationDetail[] | undefined;
}

/** 就诊卡片统计 */
export class CureTodayShift implements ICureTodayShift {
    /** 班次名称 */
    shiftName?: string | undefined;
    cureCasetimes?: CureCasetimesItem[] | undefined;

    constructor(data?: ICureTodayShift) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shiftName = _data["shiftName"];
            if (Array.isArray(_data["cureCasetimes"])) {
                this.cureCasetimes = [] as any;
                for (let item of _data["cureCasetimes"])
                    this.cureCasetimes!.push(CureCasetimesItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureTodayShift {
        data = typeof data === 'object' ? data : {};
        let result = new CureTodayShift();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shiftName"] = this.shiftName;
        if (Array.isArray(this.cureCasetimes)) {
            data["cureCasetimes"] = [];
            for (let item of this.cureCasetimes)
                data["cureCasetimes"].push(item.toJSON());
        }
        return data;
    }
}

/** 就诊卡片统计 */
export interface ICureTodayShift {
    /** 班次名称 */
    shiftName?: string | undefined;
    cureCasetimes?: CureCasetimesItem[] | undefined;
}

/** Reponse */
export class CureTodayShiftResult implements ICureTodayShiftResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureTodayShift[] | undefined;

    constructor(data?: ICureTodayShiftResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureTodayShift.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureTodayShiftResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureTodayShiftResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureTodayShiftResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureTodayShift[] | undefined;
}

/** 预脱汇总统计 */
export class CureUfg implements ICureUfg {
    /** 日期 */
    date?: string | undefined;
    /** 目标脱水量范围计数集合 */
    items?: CureUfgItem[] | undefined;

    constructor(data?: ICureUfg) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CureUfgItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureUfg {
        data = typeof data === 'object' ? data : {};
        let result = new CureUfg();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 预脱汇总统计 */
export interface ICureUfg {
    /** 日期 */
    date?: string | undefined;
    /** 目标脱水量范围计数集合 */
    items?: CureUfgItem[] | undefined;
}

/** 透析类 - 目标脱水量 - 预脱 */
export class CureUfgDetail implements ICureUfgDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 透析日期 */
    date?: string | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 干体重 */
    bestWeight?: number | undefined;
    /** 透前体重 */
    beforeWeight?: number | undefined;
    /** 透后体重 */
    afterWeight?: number | undefined;
    /** 预脱 */
    ufg?: number | undefined;
    /** 实脱 */
    ufv?: number | undefined;
    /** 透析记录单ID */
    cureRecordId?: string | undefined;
    readonly dialysisDate?: string | undefined;

    constructor(data?: ICureUfgDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.date = _data["date"];
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.patientName = _data["patientName"];
            this.bestWeight = _data["bestWeight"];
            this.beforeWeight = _data["beforeWeight"];
            this.afterWeight = _data["afterWeight"];
            this.ufg = _data["ufg"];
            this.ufv = _data["ufv"];
            this.cureRecordId = _data["cureRecordId"];
            (<any>this).dialysisDate = _data["dialysisDate"];
        }
    }

    static fromJS(data: any): CureUfgDetail {
        data = typeof data === 'object' ? data : {};
        let result = new CureUfgDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["date"] = this.date;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["patientName"] = this.patientName;
        data["bestWeight"] = this.bestWeight;
        data["beforeWeight"] = this.beforeWeight;
        data["afterWeight"] = this.afterWeight;
        data["ufg"] = this.ufg;
        data["ufv"] = this.ufv;
        data["cureRecordId"] = this.cureRecordId;
        data["dialysisDate"] = this.dialysisDate;
        return data;
    }
}

/** 透析类 - 目标脱水量 - 预脱 */
export interface ICureUfgDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 透析日期 */
    date?: string | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 干体重 */
    bestWeight?: number | undefined;
    /** 透前体重 */
    beforeWeight?: number | undefined;
    /** 透后体重 */
    afterWeight?: number | undefined;
    /** 预脱 */
    ufg?: number | undefined;
    /** 实脱 */
    ufv?: number | undefined;
    /** 透析记录单ID */
    cureRecordId?: string | undefined;
    dialysisDate?: string | undefined;
}

/** Reponse */
export class CureUfgDetailResult implements ICureUfgDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureUfgDetail[] | undefined;

    constructor(data?: ICureUfgDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureUfgDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureUfgDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureUfgDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureUfgDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureUfgDetail[] | undefined;
}

/** 目标脱水量集合子项 */
export class CureUfgItem implements ICureUfgItem {
    /** 目标脱水量范围 */
    ufg?: string | undefined;
    /** 目标脱水量范围计数 */
    count?: number;

    constructor(data?: ICureUfgItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ufg = _data["ufg"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): CureUfgItem {
        data = typeof data === 'object' ? data : {};
        let result = new CureUfgItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ufg"] = this.ufg;
        data["count"] = this.count;
        return data;
    }
}

/** 目标脱水量集合子项 */
export interface ICureUfgItem {
    /** 目标脱水量范围 */
    ufg?: string | undefined;
    /** 目标脱水量范围计数 */
    count?: number;
}

/** Reponse */
export class CureUfgResult implements ICureUfgResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureUfg[] | undefined;

    constructor(data?: ICureUfgResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureUfg.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureUfgResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureUfgResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureUfgResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureUfg[] | undefined;
}

/** 实脱汇总统计 */
export class CureUfv implements ICureUfv {
    /** 日期 */
    date?: string | undefined;
    /** 实际脱水量范围计数集合 */
    items?: CureUfvItem[] | undefined;

    constructor(data?: ICureUfv) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CureUfvItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureUfv {
        data = typeof data === 'object' ? data : {};
        let result = new CureUfv();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 实脱汇总统计 */
export interface ICureUfv {
    /** 日期 */
    date?: string | undefined;
    /** 实际脱水量范围计数集合 */
    items?: CureUfvItem[] | undefined;
}

/** 透析类 - 目标脱水量 - 预脱 */
export class CureUfvDetail implements ICureUfvDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 透析日期 */
    date?: string | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 干体重 */
    bestWeight?: number | undefined;
    /** 透前体重 */
    beforeWeight?: number | undefined;
    /** 透后体重 */
    afterWeight?: number | undefined;
    /** 预脱 */
    ufg?: number | undefined;
    /** 实脱 */
    ufv?: number | undefined;
    /** 透析记录单ID */
    cureRecordId?: string | undefined;
    readonly dialysisDate?: string | undefined;

    constructor(data?: ICureUfvDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.date = _data["date"];
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.patientName = _data["patientName"];
            this.bestWeight = _data["bestWeight"];
            this.beforeWeight = _data["beforeWeight"];
            this.afterWeight = _data["afterWeight"];
            this.ufg = _data["ufg"];
            this.ufv = _data["ufv"];
            this.cureRecordId = _data["cureRecordId"];
            (<any>this).dialysisDate = _data["dialysisDate"];
        }
    }

    static fromJS(data: any): CureUfvDetail {
        data = typeof data === 'object' ? data : {};
        let result = new CureUfvDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["date"] = this.date;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["patientName"] = this.patientName;
        data["bestWeight"] = this.bestWeight;
        data["beforeWeight"] = this.beforeWeight;
        data["afterWeight"] = this.afterWeight;
        data["ufg"] = this.ufg;
        data["ufv"] = this.ufv;
        data["cureRecordId"] = this.cureRecordId;
        data["dialysisDate"] = this.dialysisDate;
        return data;
    }
}

/** 透析类 - 目标脱水量 - 预脱 */
export interface ICureUfvDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 透析日期 */
    date?: string | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 干体重 */
    bestWeight?: number | undefined;
    /** 透前体重 */
    beforeWeight?: number | undefined;
    /** 透后体重 */
    afterWeight?: number | undefined;
    /** 预脱 */
    ufg?: number | undefined;
    /** 实脱 */
    ufv?: number | undefined;
    /** 透析记录单ID */
    cureRecordId?: string | undefined;
    dialysisDate?: string | undefined;
}

/** Reponse */
export class CureUfvDetailResult implements ICureUfvDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureUfvDetail[] | undefined;

    constructor(data?: ICureUfvDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureUfvDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureUfvDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureUfvDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureUfvDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureUfvDetail[] | undefined;
}

/** 实际脱水量集合子项 */
export class CureUfvItem implements ICureUfvItem {
    /** 实际脱水量范围 */
    ufv?: string | undefined;
    /** 实际脱水量范围计数 */
    count?: number;

    constructor(data?: ICureUfvItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ufv = _data["ufv"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): CureUfvItem {
        data = typeof data === 'object' ? data : {};
        let result = new CureUfvItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ufv"] = this.ufv;
        data["count"] = this.count;
        return data;
    }
}

/** 实际脱水量集合子项 */
export interface ICureUfvItem {
    /** 实际脱水量范围 */
    ufv?: string | undefined;
    /** 实际脱水量范围计数 */
    count?: number;
}

/** Reponse */
export class CureUfvResult implements ICureUfvResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureUfv[] | undefined;

    constructor(data?: ICureUfvResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureUfv.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureUfvResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureUfvResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureUfvResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureUfv[] | undefined;
}

/** 透析类 - 超滤总量 */
export class CureUltrafiltration implements ICureUltrafiltration {
    /** 日期 */
    date?: string | undefined;
    /** 超滤总量分类计数集合 */
    items?: CureUltrafiltrationItem[] | undefined;

    constructor(data?: ICureUltrafiltration) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CureUltrafiltrationItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureUltrafiltration {
        data = typeof data === 'object' ? data : {};
        let result = new CureUltrafiltration();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 透析类 - 超滤总量 */
export interface ICureUltrafiltration {
    /** 日期 */
    date?: string | undefined;
    /** 超滤总量分类计数集合 */
    items?: CureUltrafiltrationItem[] | undefined;
}

/** 透析类 - 超滤总量 - 详细 */
export class CureUltrafiltrationDetail implements ICureUltrafiltrationDetail {
    /** 透析记录单标识 */
    cureRecordId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 超滤总量 */
    ufv?: number | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;

    constructor(data?: ICureUltrafiltrationDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.patientName = _data["patientName"];
            this.ufv = _data["ufv"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureUltrafiltrationDetail {
        data = typeof data === 'object' ? data : {};
        let result = new CureUltrafiltrationDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["patientName"] = this.patientName;
        data["ufv"] = this.ufv;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析类 - 超滤总量 - 详细 */
export interface ICureUltrafiltrationDetail {
    /** 透析记录单标识 */
    cureRecordId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 超滤总量 */
    ufv?: number | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
}

/** Reponse */
export class CureUltrafiltrationDetailResult implements ICureUltrafiltrationDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureUltrafiltrationDetail[] | undefined;

    constructor(data?: ICureUltrafiltrationDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureUltrafiltrationDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureUltrafiltrationDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureUltrafiltrationDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureUltrafiltrationDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureUltrafiltrationDetail[] | undefined;
}

/** 透析类 - 超滤总量 - 分类集合范围子项 */
export class CureUltrafiltrationItem implements ICureUltrafiltrationItem {
    /** 超滤总量分类范围 */
    ufv?: string | undefined;
    /** 超滤总量分类范围计数 */
    count?: number;

    constructor(data?: ICureUltrafiltrationItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ufv = _data["ufv"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): CureUltrafiltrationItem {
        data = typeof data === 'object' ? data : {};
        let result = new CureUltrafiltrationItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ufv"] = this.ufv;
        data["count"] = this.count;
        return data;
    }
}

/** 透析类 - 超滤总量 - 分类集合范围子项 */
export interface ICureUltrafiltrationItem {
    /** 超滤总量分类范围 */
    ufv?: string | undefined;
    /** 超滤总量分类范围计数 */
    count?: number;
}

/** Reponse */
export class CureUltrafiltrationResult implements ICureUltrafiltrationResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureUltrafiltration[] | undefined;

    constructor(data?: ICureUltrafiltrationResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureUltrafiltration.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureUltrafiltrationResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureUltrafiltrationResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureUltrafiltrationResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureUltrafiltration[] | undefined;
}

/** 报表  - 透析类  - 血管通路 */
export class CureVascularAccess implements ICureVascularAccess {
    /** 创建日期 */
    date?: string | undefined;
    /** 血管通路类型列表 */
    items?: CureVascularAccessItem[] | undefined;

    constructor(data?: ICureVascularAccess) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CureVascularAccessItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureVascularAccess {
        data = typeof data === 'object' ? data : {};
        let result = new CureVascularAccess();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 报表  - 透析类  - 血管通路 */
export interface ICureVascularAccess {
    /** 创建日期 */
    date?: string | undefined;
    /** 血管通路类型列表 */
    items?: CureVascularAccessItem[] | undefined;
}

/** 透析类 通路转归 */
export class CureVascularAccessChangeCause implements ICureVascularAccessChangeCause {
    /** 日期 */
    date?: string | undefined;
    /** 原因种类列表 */
    items?: CureVascularAccessChangeCauseItem[] | undefined;

    constructor(data?: ICureVascularAccessChangeCause) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CureVascularAccessChangeCauseItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureVascularAccessChangeCause {
        data = typeof data === 'object' ? data : {};
        let result = new CureVascularAccessChangeCause();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 透析类 通路转归 */
export interface ICureVascularAccessChangeCause {
    /** 日期 */
    date?: string | undefined;
    /** 原因种类列表 */
    items?: CureVascularAccessChangeCauseItem[] | undefined;
}

/** 原因中类列表子项 */
export class CureVascularAccessChangeCauseItem implements ICureVascularAccessChangeCauseItem {
    /** 通路转归原因 */
    changeCause?: string | undefined;
    /** 通路转归原因计数 */
    count?: number;

    constructor(data?: ICureVascularAccessChangeCauseItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.changeCause = _data["changeCause"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): CureVascularAccessChangeCauseItem {
        data = typeof data === 'object' ? data : {};
        let result = new CureVascularAccessChangeCauseItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["changeCause"] = this.changeCause;
        data["count"] = this.count;
        return data;
    }
}

/** 原因中类列表子项 */
export interface ICureVascularAccessChangeCauseItem {
    /** 通路转归原因 */
    changeCause?: string | undefined;
    /** 通路转归原因计数 */
    count?: number;
}

/** Reponse */
export class CureVascularAccessChangeCauseResult implements ICureVascularAccessChangeCauseResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureVascularAccessChangeCause[] | undefined;

    constructor(data?: ICureVascularAccessChangeCauseResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureVascularAccessChangeCause.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureVascularAccessChangeCauseResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureVascularAccessChangeCauseResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureVascularAccessChangeCauseResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureVascularAccessChangeCause[] | undefined;
}

/** 报表   -   透析类  -  透析通路详细 */
export class CureVascularAccessDetail implements ICureVascularAccessDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 启用时间 */
    firstDate?: string | undefined;
    /** 透析日期 */
    date?: string | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析记录单标识 */
    cureRecordId?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 透析号 */
    dialysisNumber?: string | undefined;
    /** 转归状态 */
    prognosisState?: string | undefined;
    /** 入科日期 */
    receiptDate?: string | undefined;
    /** 血管通路 */
    type?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 通路建立时间 */
    createDate?: dayjs.Dayjs | undefined;
    /** 通路改变时间 */
    changeDate?: dayjs.Dayjs | undefined;
    /** 改变原因 `DIC.VASCULAR.ACCESS.CHANGECAUSE` *可以多选,使用`;`分隔* */
    changeCause?: string | undefined;

    constructor(data?: ICureVascularAccessDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"];
            this.date = _data["date"];
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.cureRecordId = _data["cureRecordId"];
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.gender = _data["gender"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.prognosisState = _data["prognosisState"];
            this.receiptDate = _data["receiptDate"];
            this.type = _data["type"];
            this.remark = _data["remark"];
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.changeDate = _data["changeDate"] ? dayjs(_data["changeDate"].toString()) : <any>undefined;
            this.changeCause = _data["changeCause"];
        }
    }

    static fromJS(data: any): CureVascularAccessDetail {
        data = typeof data === 'object' ? data : {};
        let result = new CureVascularAccessDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate;
        data["date"] = this.date;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["cureRecordId"] = this.cureRecordId;
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["gender"] = this.gender;
        data["dialysisNumber"] = this.dialysisNumber;
        data["prognosisState"] = this.prognosisState;
        data["receiptDate"] = this.receiptDate;
        data["type"] = this.type;
        data["remark"] = this.remark;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["changeDate"] = this.changeDate ? this.changeDate.toISOString() : <any>undefined;
        data["changeCause"] = this.changeCause;
        return data;
    }
}

/** 报表   -   透析类  -  透析通路详细 */
export interface ICureVascularAccessDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 启用时间 */
    firstDate?: string | undefined;
    /** 透析日期 */
    date?: string | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析记录单标识 */
    cureRecordId?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 透析号 */
    dialysisNumber?: string | undefined;
    /** 转归状态 */
    prognosisState?: string | undefined;
    /** 入科日期 */
    receiptDate?: string | undefined;
    /** 血管通路 */
    type?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 通路建立时间 */
    createDate?: dayjs.Dayjs | undefined;
    /** 通路改变时间 */
    changeDate?: dayjs.Dayjs | undefined;
    /** 改变原因 `DIC.VASCULAR.ACCESS.CHANGECAUSE` *可以多选,使用`;`分隔* */
    changeCause?: string | undefined;
}

/** Reponse */
export class CureVascularAccessDetailResult implements ICureVascularAccessDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureVascularAccessDetail[] | undefined;

    constructor(data?: ICureVascularAccessDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureVascularAccessDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureVascularAccessDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureVascularAccessDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureVascularAccessDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureVascularAccessDetail[] | undefined;
}

export class CureVascularAccessItem implements ICureVascularAccessItem {
    /** 血管通路类型 */
    type?: string | undefined;
    /** 血管通路名称 */
    name?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: ICureVascularAccessItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.name = _data["name"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): CureVascularAccessItem {
        data = typeof data === 'object' ? data : {};
        let result = new CureVascularAccessItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["name"] = this.name;
        data["count"] = this.count;
        return data;
    }
}

export interface ICureVascularAccessItem {
    /** 血管通路类型 */
    type?: string | undefined;
    /** 血管通路名称 */
    name?: string | undefined;
    /** 数量 */
    count?: number;
}

/** Reponse */
export class CureVascularAccessItemResult implements ICureVascularAccessItemResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureVascularAccessItem[] | undefined;

    constructor(data?: ICureVascularAccessItemResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureVascularAccessItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureVascularAccessItemResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureVascularAccessItemResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureVascularAccessItemResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureVascularAccessItem[] | undefined;
}

/** Reponse */
export class CureVascularAccessResult implements ICureVascularAccessResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureVascularAccess[] | undefined;

    constructor(data?: ICureVascularAccessResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureVascularAccess.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureVascularAccessResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureVascularAccessResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureVascularAccessResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureVascularAccess[] | undefined;
}

/** 报表  - 透析类  - 血管通路手术 */
export class CureVascularAccessSurgery implements ICureVascularAccessSurgery {
    /** 创建日期 */
    date?: string | undefined;
    /** 血管通路类型列表 */
    items?: CureVascularAccessItem[] | undefined;

    constructor(data?: ICureVascularAccessSurgery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CureVascularAccessItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureVascularAccessSurgery {
        data = typeof data === 'object' ? data : {};
        let result = new CureVascularAccessSurgery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 报表  - 透析类  - 血管通路手术 */
export interface ICureVascularAccessSurgery {
    /** 创建日期 */
    date?: string | undefined;
    /** 血管通路类型列表 */
    items?: CureVascularAccessItem[] | undefined;
}

/** 报表   -   透析类  -  透析通路手术详细 */
export class CureVascularAccessSurgeryDetail implements ICureVascularAccessSurgeryDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 透析日期 */
    date?: string | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析记录单标识 */
    patientId?: string | undefined;
    /** 手术登记日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 通路类型`DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type?: string | undefined;

    constructor(data?: ICureVascularAccessSurgeryDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.date = _data["date"];
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.patientId = _data["patientId"];
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.patientName = _data["patientName"];
            this.gender = _data["gender"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): CureVascularAccessSurgeryDetail {
        data = typeof data === 'object' ? data : {};
        let result = new CureVascularAccessSurgeryDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["date"] = this.date;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["patientId"] = this.patientId;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["patientName"] = this.patientName;
        data["gender"] = this.gender;
        data["type"] = this.type;
        return data;
    }
}

/** 报表   -   透析类  -  透析通路手术详细 */
export interface ICureVascularAccessSurgeryDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 透析日期 */
    date?: string | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析记录单标识 */
    patientId?: string | undefined;
    /** 手术登记日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 通路类型`DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type?: string | undefined;
}

/** Reponse */
export class CureVascularAccessSurgeryDetailResult implements ICureVascularAccessSurgeryDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureVascularAccessSurgeryDetail[] | undefined;

    constructor(data?: ICureVascularAccessSurgeryDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureVascularAccessSurgeryDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureVascularAccessSurgeryDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureVascularAccessSurgeryDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureVascularAccessSurgeryDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureVascularAccessSurgeryDetail[] | undefined;
}

/** Reponse */
export class CureVascularAccessSurgeryResult implements ICureVascularAccessSurgeryResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureVascularAccessSurgery[] | undefined;

    constructor(data?: ICureVascularAccessSurgeryResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureVascularAccessSurgery.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureVascularAccessSurgeryResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureVascularAccessSurgeryResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureVascularAccessSurgeryResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureVascularAccessSurgery[] | undefined;
}

/** 透析类 - 体重 */
export class CureWeight implements ICureWeight {
    /** 指标 */
    standard?: string | undefined;
    /** 透前体重（%） */
    before?: number;
    /** 透后体重（%） */
    after?: number;

    constructor(data?: ICureWeight) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.standard = _data["standard"];
            this.before = _data["before"];
            this.after = _data["after"];
        }
    }

    static fromJS(data: any): CureWeight {
        data = typeof data === 'object' ? data : {};
        let result = new CureWeight();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["standard"] = this.standard;
        data["before"] = this.before;
        data["after"] = this.after;
        return data;
    }
}

/** 透析类 - 体重 */
export interface ICureWeight {
    /** 指标 */
    standard?: string | undefined;
    /** 透前体重（%） */
    before?: number;
    /** 透后体重（%） */
    after?: number;
}

/** 透析类 - 患者体重统计 -详细 */
export class CureWeightDetail implements ICureWeightDetail {
    /** 姓名 */
    patientName?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 透前体重 */
    beforeWeight?: number | undefined;
    /** 透后体重 */
    afterWeight?: number | undefined;
    /** 目标脱水量 *ml */
    ufg?: number | undefined;
    /** 实际脱水量 *ml */
    ufv?: number | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 透析记录单号 */
    cureRecordId?: string | undefined;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;

    constructor(data?: ICureWeightDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientName = _data["patientName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.beforeWeight = _data["beforeWeight"];
            this.afterWeight = _data["afterWeight"];
            this.ufg = _data["ufg"];
            this.ufv = _data["ufv"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.cureRecordId = _data["cureRecordId"];
            this.bestWeight = _data["bestWeight"];
        }
    }

    static fromJS(data: any): CureWeightDetail {
        data = typeof data === 'object' ? data : {};
        let result = new CureWeightDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientName"] = this.patientName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["beforeWeight"] = this.beforeWeight;
        data["afterWeight"] = this.afterWeight;
        data["ufg"] = this.ufg;
        data["ufv"] = this.ufv;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["cureRecordId"] = this.cureRecordId;
        data["bestWeight"] = this.bestWeight;
        return data;
    }
}

/** 透析类 - 患者体重统计 -详细 */
export interface ICureWeightDetail {
    /** 姓名 */
    patientName?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 透前体重 */
    beforeWeight?: number | undefined;
    /** 透后体重 */
    afterWeight?: number | undefined;
    /** 目标脱水量 *ml */
    ufg?: number | undefined;
    /** 实际脱水量 *ml */
    ufv?: number | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 透析记录单号 */
    cureRecordId?: string | undefined;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
}

/** Reponse */
export class CureWeightDetailResult implements ICureWeightDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureWeightDetail[] | undefined;

    constructor(data?: ICureWeightDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureWeightDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureWeightDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureWeightDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureWeightDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureWeightDetail[] | undefined;
}

/** Reponse */
export class CureWeightResult implements ICureWeightResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureWeight[] | undefined;

    constructor(data?: ICureWeightResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureWeight.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureWeightResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureWeightResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureWeightResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureWeight[] | undefined;
}

/** 永鼎耗材使用登记表 */
export class DailyConsumableUsed implements IDailyConsumableUsed {
    /** 日期 */
    day?: number;
    /** 星期 */
    week?: string | undefined;
    /** 日期 */
    dialysisDate?: string | undefined;
    /** 使用情况 */
    usedList?: ShiftConsumableUsed[] | undefined;

    constructor(data?: IDailyConsumableUsed) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.day = _data["day"];
            this.week = _data["week"];
            this.dialysisDate = _data["dialysisDate"];
            if (Array.isArray(_data["usedList"])) {
                this.usedList = [] as any;
                for (let item of _data["usedList"])
                    this.usedList!.push(ShiftConsumableUsed.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DailyConsumableUsed {
        data = typeof data === 'object' ? data : {};
        let result = new DailyConsumableUsed();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["day"] = this.day;
        data["week"] = this.week;
        data["dialysisDate"] = this.dialysisDate;
        if (Array.isArray(this.usedList)) {
            data["usedList"] = [];
            for (let item of this.usedList)
                data["usedList"].push(item.toJSON());
        }
        return data;
    }
}

/** 永鼎耗材使用登记表 */
export interface IDailyConsumableUsed {
    /** 日期 */
    day?: number;
    /** 星期 */
    week?: string | undefined;
    /** 日期 */
    dialysisDate?: string | undefined;
    /** 使用情况 */
    usedList?: ShiftConsumableUsed[] | undefined;
}

/** 耗材使用登记表详细 */
export class DailyConsumableUsedDetail implements IDailyConsumableUsedDetail {
    /** 编号，与入库的编号对应 */
    code?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 数量 */
    count!: number;
    /** 单位 *基本单位* */
    unit!: string;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 透析方式显示值 */
    dialysisModeLabel?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 批号 */
    batchNo?: string | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 项目类型 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品规格 */
    spec?: string | undefined;

    constructor(data?: IDailyConsumableUsedDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.remark = _data["remark"];
            this.count = _data["count"];
            this.unit = _data["unit"];
            this.sn = _data["sn"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.patientName = _data["patientName"];
            this.batchNo = _data["batchNo"];
            this.model = _data["model"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.roomItemListName = _data["roomItemListName"];
            this.spec = _data["spec"];
        }
    }

    static fromJS(data: any): DailyConsumableUsedDetail {
        data = typeof data === 'object' ? data : {};
        let result = new DailyConsumableUsedDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["remark"] = this.remark;
        data["count"] = this.count;
        data["unit"] = this.unit;
        data["sn"] = this.sn;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["patientName"] = this.patientName;
        data["batchNo"] = this.batchNo;
        data["model"] = this.model;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["roomItemListName"] = this.roomItemListName;
        data["spec"] = this.spec;
        return data;
    }
}

/** 耗材使用登记表详细 */
export interface IDailyConsumableUsedDetail {
    /** 编号，与入库的编号对应 */
    code?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 数量 */
    count: number;
    /** 单位 *基本单位* */
    unit: string;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 透析方式显示值 */
    dialysisModeLabel?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 批号 */
    batchNo?: string | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 项目类型 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品规格 */
    spec?: string | undefined;
}

/** Reponse */
export class DailyConsumableUsedDetailResult implements IDailyConsumableUsedDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DailyConsumableUsedDetail[] | undefined;

    constructor(data?: IDailyConsumableUsedDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DailyConsumableUsedDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DailyConsumableUsedDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new DailyConsumableUsedDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDailyConsumableUsedDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DailyConsumableUsedDetail[] | undefined;
}

/** Reponse */
export class DailyConsumableUsedResult implements IDailyConsumableUsedResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DailyConsumableUsed[] | undefined;

    constructor(data?: IDailyConsumableUsedResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DailyConsumableUsed.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DailyConsumableUsedResult {
        data = typeof data === 'object' ? data : {};
        let result = new DailyConsumableUsedResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDailyConsumableUsedResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DailyConsumableUsed[] | undefined;
}

/** 管理类 - 永鼎护士工作量统计 */
export class DailyNurseWorkload implements IDailyNurseWorkload {
    recordDate?: string | undefined;
    /** 血透 */
    hdCount?: number;
    /** 血滤 */
    hdfCount?: number;
    /** 灌流 */
    hpCount?: number;
    /** 高通量透析 */
    hfdCount?: number;
    /** 无肝素透析 */
    heparinFree?: number;
    /** 急诊 */
    emergencyCall?: number;
    /** 内瘘穿刺 */
    puncture?: number;
    /** 长期导管 */
    long?: number;
    /** 临时导管 */
    temporary?: number;

    constructor(data?: IDailyNurseWorkload) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.recordDate = _data["recordDate"];
            this.hdCount = _data["hdCount"];
            this.hdfCount = _data["hdfCount"];
            this.hpCount = _data["hpCount"];
            this.hfdCount = _data["hfdCount"];
            this.heparinFree = _data["heparinFree"];
            this.emergencyCall = _data["emergencyCall"];
            this.puncture = _data["puncture"];
            this.long = _data["long"];
            this.temporary = _data["temporary"];
        }
    }

    static fromJS(data: any): DailyNurseWorkload {
        data = typeof data === 'object' ? data : {};
        let result = new DailyNurseWorkload();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["recordDate"] = this.recordDate;
        data["hdCount"] = this.hdCount;
        data["hdfCount"] = this.hdfCount;
        data["hpCount"] = this.hpCount;
        data["hfdCount"] = this.hfdCount;
        data["heparinFree"] = this.heparinFree;
        data["emergencyCall"] = this.emergencyCall;
        data["puncture"] = this.puncture;
        data["long"] = this.long;
        data["temporary"] = this.temporary;
        return data;
    }
}

/** 管理类 - 永鼎护士工作量统计 */
export interface IDailyNurseWorkload {
    recordDate?: string | undefined;
    /** 血透 */
    hdCount?: number;
    /** 血滤 */
    hdfCount?: number;
    /** 灌流 */
    hpCount?: number;
    /** 高通量透析 */
    hfdCount?: number;
    /** 无肝素透析 */
    heparinFree?: number;
    /** 急诊 */
    emergencyCall?: number;
    /** 内瘘穿刺 */
    puncture?: number;
    /** 长期导管 */
    long?: number;
    /** 临时导管 */
    temporary?: number;
}

/** Reponse */
export class DailyNurseWorkloadResult implements IDailyNurseWorkloadResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DailyNurseWorkload[] | undefined;

    constructor(data?: IDailyNurseWorkloadResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DailyNurseWorkload.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DailyNurseWorkloadResult {
        data = typeof data === 'object' ? data : {};
        let result = new DailyNurseWorkloadResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDailyNurseWorkloadResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DailyNurseWorkload[] | undefined;
}

/** 耗材类 -- 日期统计 */
export class DateDetailItem implements IDateDetailItem {
    /** 月份 */
    date?: string | undefined;
    /** 数量 */
    count?: number;
    /** 环比 */
    mom?: number;
    /** 同比 */
    yoy?: number;

    constructor(data?: IDateDetailItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.count = _data["count"];
            this.mom = _data["mom"];
            this.yoy = _data["yoy"];
        }
    }

    static fromJS(data: any): DateDetailItem {
        data = typeof data === 'object' ? data : {};
        let result = new DateDetailItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["count"] = this.count;
        data["mom"] = this.mom;
        data["yoy"] = this.yoy;
        return data;
    }
}

/** 耗材类 -- 日期统计 */
export interface IDateDetailItem {
    /** 月份 */
    date?: string | undefined;
    /** 数量 */
    count?: number;
    /** 环比 */
    mom?: number;
    /** 同比 */
    yoy?: number;
}

/** Reponse */
export class DateDetailItemResult implements IDateDetailItemResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DateDetailItem[] | undefined;

    constructor(data?: IDateDetailItemResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DateDetailItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DateDetailItemResult {
        data = typeof data === 'object' ? data : {};
        let result = new DateDetailItemResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDateDetailItemResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DateDetailItem[] | undefined;
}

/** 管理类 - 区域查询 */
export class DeptBedArea implements IDeptBedArea {
    /** 区域名称 */
    areaName?: string | undefined;
    /** 区域Id */
    areaId?: string | undefined;

    constructor(data?: IDeptBedArea) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.areaName = _data["areaName"];
            this.areaId = _data["areaId"];
        }
    }

    static fromJS(data: any): DeptBedArea {
        data = typeof data === 'object' ? data : {};
        let result = new DeptBedArea();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["areaName"] = this.areaName;
        data["areaId"] = this.areaId;
        return data;
    }
}

/** 管理类 - 区域查询 */
export interface IDeptBedArea {
    /** 区域名称 */
    areaName?: string | undefined;
    /** 区域Id */
    areaId?: string | undefined;
}

/** Reponse */
export class DeptBedAreaResult implements IDeptBedAreaResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptBedArea[] | undefined;

    constructor(data?: IDeptBedAreaResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptBedArea.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptBedAreaResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptBedAreaResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptBedAreaResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptBedArea[] | undefined;
}

/** 透析类 - 床位统计 */
export class DeptBeds implements IDeptBeds {
    /** 区域 */
    area?: string | undefined;
    /** 数量 */
    count?: number;
    /** 占比 */
    rate?: number;
    /** 占比显示值 */
    rateLabel?: string | undefined;
    /** 分区ID */
    areaId?: string | undefined;

    constructor(data?: IDeptBeds) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.area = _data["area"];
            this.count = _data["count"];
            this.rate = _data["rate"];
            this.rateLabel = _data["rateLabel"];
            this.areaId = _data["areaId"];
        }
    }

    static fromJS(data: any): DeptBeds {
        data = typeof data === 'object' ? data : {};
        let result = new DeptBeds();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["area"] = this.area;
        data["count"] = this.count;
        data["rate"] = this.rate;
        data["rateLabel"] = this.rateLabel;
        data["areaId"] = this.areaId;
        return data;
    }
}

/** 透析类 - 床位统计 */
export interface IDeptBeds {
    /** 区域 */
    area?: string | undefined;
    /** 数量 */
    count?: number;
    /** 占比 */
    rate?: number;
    /** 占比显示值 */
    rateLabel?: string | undefined;
    /** 分区ID */
    areaId?: string | undefined;
}

/** 管理类 - 床位统计 - 详细 */
export class DeptBedsDetails implements IDeptBedsDetails {
    /** 床号 */
    bedNumber?: string | undefined;
    /** 使用科室 */
    useDepartment?: string | undefined;
    /** 血透分区 */
    area?: string | undefined;
    /** 设备编号 */
    eqiuteNumber?: string | undefined;
    /** 状态 */
    state?: string | undefined;

    constructor(data?: IDeptBedsDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.bedNumber = _data["bedNumber"];
            this.useDepartment = _data["useDepartment"];
            this.area = _data["area"];
            this.eqiuteNumber = _data["eqiuteNumber"];
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): DeptBedsDetails {
        data = typeof data === 'object' ? data : {};
        let result = new DeptBedsDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bedNumber"] = this.bedNumber;
        data["useDepartment"] = this.useDepartment;
        data["area"] = this.area;
        data["eqiuteNumber"] = this.eqiuteNumber;
        data["state"] = this.state;
        return data;
    }
}

/** 管理类 - 床位统计 - 详细 */
export interface IDeptBedsDetails {
    /** 床号 */
    bedNumber?: string | undefined;
    /** 使用科室 */
    useDepartment?: string | undefined;
    /** 血透分区 */
    area?: string | undefined;
    /** 设备编号 */
    eqiuteNumber?: string | undefined;
    /** 状态 */
    state?: string | undefined;
}

/** Reponse */
export class DeptBedsDetailsResult implements IDeptBedsDetailsResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptBedsDetails[] | undefined;

    constructor(data?: IDeptBedsDetailsResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptBedsDetails.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptBedsDetailsResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptBedsDetailsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptBedsDetailsResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptBedsDetails[] | undefined;
}

/** Reponse */
export class DeptBedsResult implements IDeptBedsResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptBeds[] | undefined;

    constructor(data?: IDeptBedsResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptBeds.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptBedsResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptBedsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptBedsResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptBeds[] | undefined;
}

/** 管理类 - 床位利用率 */
export class DeptBedsUse implements IDeptBedsUse {
    /** 日期 */
    date?: string | undefined;
    /** 使用量 */
    count?: number;
    /** 使用率 */
    rate?: number | undefined;
    /** 使用率展示值 */
    rateLabel?: string | undefined;

    constructor(data?: IDeptBedsUse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.count = _data["count"];
            this.rate = _data["rate"];
            this.rateLabel = _data["rateLabel"];
        }
    }

    static fromJS(data: any): DeptBedsUse {
        data = typeof data === 'object' ? data : {};
        let result = new DeptBedsUse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["count"] = this.count;
        data["rate"] = this.rate;
        data["rateLabel"] = this.rateLabel;
        return data;
    }
}

/** 管理类 - 床位利用率 */
export interface IDeptBedsUse {
    /** 日期 */
    date?: string | undefined;
    /** 使用量 */
    count?: number;
    /** 使用率 */
    rate?: number | undefined;
    /** 使用率展示值 */
    rateLabel?: string | undefined;
}

/** 管理类 - 床位利用率 */
export class DeptBedsUseDetail implements IDeptBedsUseDetail {
    /** 床号 */
    bedNumber?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 透析分区 */
    area?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 状态 */
    status?: string | undefined;

    constructor(data?: IDeptBedsUseDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.bedNumber = _data["bedNumber"];
            this.patientName = _data["patientName"];
            this.area = _data["area"];
            this.shiftName = _data["shiftName"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): DeptBedsUseDetail {
        data = typeof data === 'object' ? data : {};
        let result = new DeptBedsUseDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bedNumber"] = this.bedNumber;
        data["patientName"] = this.patientName;
        data["area"] = this.area;
        data["shiftName"] = this.shiftName;
        data["status"] = this.status;
        return data;
    }
}

/** 管理类 - 床位利用率 */
export interface IDeptBedsUseDetail {
    /** 床号 */
    bedNumber?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 透析分区 */
    area?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 状态 */
    status?: string | undefined;
}

/** Reponse */
export class DeptBedsUseDetailResult implements IDeptBedsUseDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptBedsUseDetail[] | undefined;

    constructor(data?: IDeptBedsUseDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptBedsUseDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptBedsUseDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptBedsUseDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptBedsUseDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptBedsUseDetail[] | undefined;
}

/** Reponse */
export class DeptBedsUseResult implements IDeptBedsUseResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptBedsUse[] | undefined;

    constructor(data?: IDeptBedsUseResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptBedsUse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptBedsUseResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptBedsUseResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptBedsUseResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptBedsUse[] | undefined;
}

/** 管理类 - 透析室 */
export class DeptDialysis implements IDeptDialysis {
    /** 透析区间 Id */
    deptDialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    deptDialysisAreaName?: string | undefined;
    /** 床位数量 */
    bedCount?: number;

    constructor(data?: IDeptDialysis) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deptDialysisAreaId = _data["deptDialysisAreaId"];
            this.deptDialysisAreaName = _data["deptDialysisAreaName"];
            this.bedCount = _data["bedCount"];
        }
    }

    static fromJS(data: any): DeptDialysis {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysis();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deptDialysisAreaId"] = this.deptDialysisAreaId;
        data["deptDialysisAreaName"] = this.deptDialysisAreaName;
        data["bedCount"] = this.bedCount;
        return data;
    }
}

/** 管理类 - 透析室 */
export interface IDeptDialysis {
    /** 透析区间 Id */
    deptDialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    deptDialysisAreaName?: string | undefined;
    /** 床位数量 */
    bedCount?: number;
}

/** 管理类 - 透析室 - 详细 */
export class DeptDialysisDetail implements IDeptDialysisDetail {
    /** 区间名称 */
    deptDialysisAreaName?: string | undefined;
    /** 设备编码 */
    devCode?: string | undefined;
    /** 床号 */
    bedName?: string | undefined;

    constructor(data?: IDeptDialysisDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deptDialysisAreaName = _data["deptDialysisAreaName"];
            this.devCode = _data["devCode"];
            this.bedName = _data["bedName"];
        }
    }

    static fromJS(data: any): DeptDialysisDetail {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deptDialysisAreaName"] = this.deptDialysisAreaName;
        data["devCode"] = this.devCode;
        data["bedName"] = this.bedName;
        return data;
    }
}

/** 管理类 - 透析室 - 详细 */
export interface IDeptDialysisDetail {
    /** 区间名称 */
    deptDialysisAreaName?: string | undefined;
    /** 设备编码 */
    devCode?: string | undefined;
    /** 床号 */
    bedName?: string | undefined;
}

/** Reponse */
export class DeptDialysisDetailResult implements IDeptDialysisDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptDialysisDetail[] | undefined;

    constructor(data?: IDeptDialysisDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptDialysisDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptDialysisDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptDialysisDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptDialysisDetail[] | undefined;
}

/** Reponse */
export class DeptDialysisResult implements IDeptDialysisResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptDialysis[] | undefined;

    constructor(data?: IDeptDialysisResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptDialysis.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptDialysisResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptDialysisResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptDialysis[] | undefined;
}

/** 管理类 - 工作量（医生） */
export class DeptDoctorWorkload implements IDeptDoctorWorkload {
    /** 医生姓名 */
    name?: string | undefined;
    /** 医生Id */
    doctorsId?: string | undefined;
    /** 医生工号 */
    jobNumber?: string | undefined;
    /** 医嘱开立数量 */
    medicalOrderCount?: number;
    /** 制定处方数量 */
    prescriptionCount?: number;
    /** 合计 */
    totalCount?: number;

    constructor(data?: IDeptDoctorWorkload) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.doctorsId = _data["doctorsId"];
            this.jobNumber = _data["jobNumber"];
            this.medicalOrderCount = _data["medicalOrderCount"];
            this.prescriptionCount = _data["prescriptionCount"];
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): DeptDoctorWorkload {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDoctorWorkload();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["doctorsId"] = this.doctorsId;
        data["jobNumber"] = this.jobNumber;
        data["medicalOrderCount"] = this.medicalOrderCount;
        data["prescriptionCount"] = this.prescriptionCount;
        data["totalCount"] = this.totalCount;
        return data;
    }
}

/** 管理类 - 工作量（医生） */
export interface IDeptDoctorWorkload {
    /** 医生姓名 */
    name?: string | undefined;
    /** 医生Id */
    doctorsId?: string | undefined;
    /** 医生工号 */
    jobNumber?: string | undefined;
    /** 医嘱开立数量 */
    medicalOrderCount?: number;
    /** 制定处方数量 */
    prescriptionCount?: number;
    /** 合计 */
    totalCount?: number;
}

/** Reponse */
export class DeptDoctorWorkloadResult implements IDeptDoctorWorkloadResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptDoctorWorkload[] | undefined;

    constructor(data?: IDeptDoctorWorkloadResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptDoctorWorkload.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptDoctorWorkloadResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDoctorWorkloadResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptDoctorWorkloadResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptDoctorWorkload[] | undefined;
}

/** 管理类 - 学历 */
export class DeptEducationalLevel implements IDeptEducationalLevel {
    /** 学历 */
    educationalLevel?: string | undefined;
    /** 数量 */
    count?: number;
    /** 比率 */
    rate?: number | undefined;

    constructor(data?: IDeptEducationalLevel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.educationalLevel = _data["educationalLevel"];
            this.count = _data["count"];
            this.rate = _data["rate"];
        }
    }

    static fromJS(data: any): DeptEducationalLevel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptEducationalLevel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["educationalLevel"] = this.educationalLevel;
        data["count"] = this.count;
        data["rate"] = this.rate;
        return data;
    }
}

/** 管理类 - 学历 */
export interface IDeptEducationalLevel {
    /** 学历 */
    educationalLevel?: string | undefined;
    /** 数量 */
    count?: number;
    /** 比率 */
    rate?: number | undefined;
}

/** 管理类 - 学历 - 详细 */
export class DeptEducationalLevelDetail implements IDeptEducationalLevelDetail {
    /** 姓名 */
    name?: string | undefined;
    /** 工号 */
    jobNumber?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 电话 */
    tel?: string | undefined;
    /** 登录名 */
    loginName?: string | undefined;
    /** 启用 */
    enable?: string | undefined;

    constructor(data?: IDeptEducationalLevelDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.jobNumber = _data["jobNumber"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.tel = _data["tel"];
            this.loginName = _data["loginName"];
            this.enable = _data["enable"];
        }
    }

    static fromJS(data: any): DeptEducationalLevelDetail {
        data = typeof data === 'object' ? data : {};
        let result = new DeptEducationalLevelDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["jobNumber"] = this.jobNumber;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["tel"] = this.tel;
        data["loginName"] = this.loginName;
        data["enable"] = this.enable;
        return data;
    }
}

/** 管理类 - 学历 - 详细 */
export interface IDeptEducationalLevelDetail {
    /** 姓名 */
    name?: string | undefined;
    /** 工号 */
    jobNumber?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 电话 */
    tel?: string | undefined;
    /** 登录名 */
    loginName?: string | undefined;
    /** 启用 */
    enable?: string | undefined;
}

/** Reponse */
export class DeptEducationalLevelDetailResult implements IDeptEducationalLevelDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptEducationalLevelDetail[] | undefined;

    constructor(data?: IDeptEducationalLevelDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptEducationalLevelDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptEducationalLevelDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptEducationalLevelDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptEducationalLevelDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptEducationalLevelDetail[] | undefined;
}

/** Reponse */
export class DeptEducationalLevelResult implements IDeptEducationalLevelResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptEducationalLevel[] | undefined;

    constructor(data?: IDeptEducationalLevelResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptEducationalLevel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptEducationalLevelResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptEducationalLevelResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptEducationalLevelResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptEducationalLevel[] | undefined;
}

/** 管理类 - 宣教统计 - 医护工作量 */
export class DeptHealthEducationWorks implements IDeptHealthEducationWorks {
    /** 姓名 */
    name?: string | undefined;
    /** 宣教总数 */
    count?: number;

    constructor(data?: IDeptHealthEducationWorks) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): DeptHealthEducationWorks {
        data = typeof data === 'object' ? data : {};
        let result = new DeptHealthEducationWorks();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["count"] = this.count;
        return data;
    }
}

/** 管理类 - 宣教统计 - 医护工作量 */
export interface IDeptHealthEducationWorks {
    /** 姓名 */
    name?: string | undefined;
    /** 宣教总数 */
    count?: number;
}

/** 管理类统计 - 宣教统计 - 详细 */
export class DeptHealthEducationWorksDetail implements IDeptHealthEducationWorksDetail {
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 宣教人 */
    nurseName?: string | undefined;
    /** 宣教患者 */
    patientName?: string | undefined;
    /** 宣教时长 */
    time?: number | undefined;

    constructor(data?: IDeptHealthEducationWorksDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.nurseName = _data["nurseName"];
            this.patientName = _data["patientName"];
            this.time = _data["time"];
        }
    }

    static fromJS(data: any): DeptHealthEducationWorksDetail {
        data = typeof data === 'object' ? data : {};
        let result = new DeptHealthEducationWorksDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["nurseName"] = this.nurseName;
        data["patientName"] = this.patientName;
        data["time"] = this.time;
        return data;
    }
}

/** 管理类统计 - 宣教统计 - 详细 */
export interface IDeptHealthEducationWorksDetail {
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 宣教人 */
    nurseName?: string | undefined;
    /** 宣教患者 */
    patientName?: string | undefined;
    /** 宣教时长 */
    time?: number | undefined;
}

/** Reponse */
export class DeptHealthEducationWorksDetailResult implements IDeptHealthEducationWorksDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptHealthEducationWorksDetail[] | undefined;

    constructor(data?: IDeptHealthEducationWorksDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptHealthEducationWorksDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptHealthEducationWorksDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptHealthEducationWorksDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptHealthEducationWorksDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptHealthEducationWorksDetail[] | undefined;
}

/** Reponse */
export class DeptHealthEducationWorksResult implements IDeptHealthEducationWorksResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptHealthEducationWorks[] | undefined;

    constructor(data?: IDeptHealthEducationWorksResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptHealthEducationWorks.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptHealthEducationWorksResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptHealthEducationWorksResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptHealthEducationWorksResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptHealthEducationWorks[] | undefined;
}

/** 管理类 - 工作量（护士） */
export class DeptNurseWorkload implements IDeptNurseWorkload {
    /** 护士姓名 */
    name?: string | undefined;
    /** 护士Id */
    nurseId?: string | undefined;
    /** 护士工号 */
    jobNumber?: string | undefined;
    /** 上机数量 */
    onCount?: number;
    /** 医嘱核对数量（CureDa） */
    checkCount?: number;
    /** 医嘱执行数量（CureDa） */
    executeCount?: number;
    /** 交叉核对数量（CureRecord） */
    verifyCount?: number;
    /** 下机数量 */
    offCount?: number;
    /** 消毒数量（DevDisinfectLog） */
    disinfectCount?: number;
    /** 导管数量 */
    vascularCount?: number;
    /** HD+HP数量 */
    hD_HPCount?: number;
    /** HD数量 */
    hdCount?: number;
    /** HDF数量 */
    hdfCount?: number;
    /** HDF+HP数量 */
    hdF_HPCount?: number;
    /** 阳性区数量 */
    positiveCount?: number;
    /** 合计 */
    totalCount?: number;

    constructor(data?: IDeptNurseWorkload) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.nurseId = _data["nurseId"];
            this.jobNumber = _data["jobNumber"];
            this.onCount = _data["onCount"];
            this.checkCount = _data["checkCount"];
            this.executeCount = _data["executeCount"];
            this.verifyCount = _data["verifyCount"];
            this.offCount = _data["offCount"];
            this.disinfectCount = _data["disinfectCount"];
            this.vascularCount = _data["vascularCount"];
            this.hD_HPCount = _data["hD_HPCount"];
            this.hdCount = _data["hdCount"];
            this.hdfCount = _data["hdfCount"];
            this.hdF_HPCount = _data["hdF_HPCount"];
            this.positiveCount = _data["positiveCount"];
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): DeptNurseWorkload {
        data = typeof data === 'object' ? data : {};
        let result = new DeptNurseWorkload();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["nurseId"] = this.nurseId;
        data["jobNumber"] = this.jobNumber;
        data["onCount"] = this.onCount;
        data["checkCount"] = this.checkCount;
        data["executeCount"] = this.executeCount;
        data["verifyCount"] = this.verifyCount;
        data["offCount"] = this.offCount;
        data["disinfectCount"] = this.disinfectCount;
        data["vascularCount"] = this.vascularCount;
        data["hD_HPCount"] = this.hD_HPCount;
        data["hdCount"] = this.hdCount;
        data["hdfCount"] = this.hdfCount;
        data["hdF_HPCount"] = this.hdF_HPCount;
        data["positiveCount"] = this.positiveCount;
        data["totalCount"] = this.totalCount;
        return data;
    }
}

/** 管理类 - 工作量（护士） */
export interface IDeptNurseWorkload {
    /** 护士姓名 */
    name?: string | undefined;
    /** 护士Id */
    nurseId?: string | undefined;
    /** 护士工号 */
    jobNumber?: string | undefined;
    /** 上机数量 */
    onCount?: number;
    /** 医嘱核对数量（CureDa） */
    checkCount?: number;
    /** 医嘱执行数量（CureDa） */
    executeCount?: number;
    /** 交叉核对数量（CureRecord） */
    verifyCount?: number;
    /** 下机数量 */
    offCount?: number;
    /** 消毒数量（DevDisinfectLog） */
    disinfectCount?: number;
    /** 导管数量 */
    vascularCount?: number;
    /** HD+HP数量 */
    hD_HPCount?: number;
    /** HD数量 */
    hdCount?: number;
    /** HDF数量 */
    hdfCount?: number;
    /** HDF+HP数量 */
    hdF_HPCount?: number;
    /** 阳性区数量 */
    positiveCount?: number;
    /** 合计 */
    totalCount?: number;
}

/** Reponse */
export class DeptNurseWorkloadResult implements IDeptNurseWorkloadResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptNurseWorkload[] | undefined;

    constructor(data?: IDeptNurseWorkloadResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptNurseWorkload.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptNurseWorkloadResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptNurseWorkloadResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptNurseWorkloadResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptNurseWorkload[] | undefined;
}

/** 管理类 - 职称 */
export class DeptProfessionalTitle implements IDeptProfessionalTitle {
    /** 职称名称 */
    professionalTitle?: string | undefined;
    /** 数量 */
    count?: number;
    /** 占比 */
    rate?: number;

    constructor(data?: IDeptProfessionalTitle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.professionalTitle = _data["professionalTitle"];
            this.count = _data["count"];
            this.rate = _data["rate"];
        }
    }

    static fromJS(data: any): DeptProfessionalTitle {
        data = typeof data === 'object' ? data : {};
        let result = new DeptProfessionalTitle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["professionalTitle"] = this.professionalTitle;
        data["count"] = this.count;
        data["rate"] = this.rate;
        return data;
    }
}

/** 管理类 - 职称 */
export interface IDeptProfessionalTitle {
    /** 职称名称 */
    professionalTitle?: string | undefined;
    /** 数量 */
    count?: number;
    /** 占比 */
    rate?: number;
}

/** 管理类 - 职称 - 详细 */
export class DeptProfessionalTitleDetail implements IDeptProfessionalTitleDetail {
    /** 姓名 */
    name?: string | undefined;
    /** 工号 */
    jobNumber?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 登录名 */
    loginName?: string | undefined;
    /** 别名 */
    name2?: string | undefined;
    /** 电话 */
    tel?: string | undefined;
    /** 启用 */
    enabled?: string | undefined;

    constructor(data?: IDeptProfessionalTitleDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.jobNumber = _data["jobNumber"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.loginName = _data["loginName"];
            this.name2 = _data["name2"];
            this.tel = _data["tel"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): DeptProfessionalTitleDetail {
        data = typeof data === 'object' ? data : {};
        let result = new DeptProfessionalTitleDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["jobNumber"] = this.jobNumber;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["loginName"] = this.loginName;
        data["name2"] = this.name2;
        data["tel"] = this.tel;
        data["enabled"] = this.enabled;
        return data;
    }
}

/** 管理类 - 职称 - 详细 */
export interface IDeptProfessionalTitleDetail {
    /** 姓名 */
    name?: string | undefined;
    /** 工号 */
    jobNumber?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 登录名 */
    loginName?: string | undefined;
    /** 别名 */
    name2?: string | undefined;
    /** 电话 */
    tel?: string | undefined;
    /** 启用 */
    enabled?: string | undefined;
}

/** Reponse */
export class DeptProfessionalTitleDetailResult implements IDeptProfessionalTitleDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptProfessionalTitleDetail[] | undefined;

    constructor(data?: IDeptProfessionalTitleDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptProfessionalTitleDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptProfessionalTitleDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptProfessionalTitleDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptProfessionalTitleDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptProfessionalTitleDetail[] | undefined;
}

/** Reponse */
export class DeptProfessionalTitleResult implements IDeptProfessionalTitleResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptProfessionalTitle[] | undefined;

    constructor(data?: IDeptProfessionalTitleResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptProfessionalTitle.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptProfessionalTitleResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptProfessionalTitleResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptProfessionalTitleResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptProfessionalTitle[] | undefined;
}

/** 管理类 - 角色统计 */
export class DeptRole implements IDeptRole {
    /** 角色名称 */
    roleName?: string | undefined;
    /** 数量 */
    count?: number;
    /** 占比 */
    rate?: number;

    constructor(data?: IDeptRole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roleName = _data["roleName"];
            this.count = _data["count"];
            this.rate = _data["rate"];
        }
    }

    static fromJS(data: any): DeptRole {
        data = typeof data === 'object' ? data : {};
        let result = new DeptRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleName"] = this.roleName;
        data["count"] = this.count;
        data["rate"] = this.rate;
        return data;
    }
}

/** 管理类 - 角色统计 */
export interface IDeptRole {
    /** 角色名称 */
    roleName?: string | undefined;
    /** 数量 */
    count?: number;
    /** 占比 */
    rate?: number;
}

/** 管理类 - 角色统计 - 详细 */
export class DeptRoleDetail implements IDeptRoleDetail {
    /** 角色 */
    roleName?: string | undefined;
    /** 登录名 */
    loginName?: string | undefined;
    /** 工号 */
    jobNumber?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 别名 */
    name2?: string | undefined;
    /** 电话 */
    tel?: string | undefined;
    /** 启用 */
    enabled?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;

    constructor(data?: IDeptRoleDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roleName = _data["roleName"];
            this.loginName = _data["loginName"];
            this.jobNumber = _data["jobNumber"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.tel = _data["tel"];
            this.enabled = _data["enabled"];
            this.gender = _data["gender"];
            this.age = _data["age"];
        }
    }

    static fromJS(data: any): DeptRoleDetail {
        data = typeof data === 'object' ? data : {};
        let result = new DeptRoleDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleName"] = this.roleName;
        data["loginName"] = this.loginName;
        data["jobNumber"] = this.jobNumber;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["tel"] = this.tel;
        data["enabled"] = this.enabled;
        data["gender"] = this.gender;
        data["age"] = this.age;
        return data;
    }
}

/** 管理类 - 角色统计 - 详细 */
export interface IDeptRoleDetail {
    /** 角色 */
    roleName?: string | undefined;
    /** 登录名 */
    loginName?: string | undefined;
    /** 工号 */
    jobNumber?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 别名 */
    name2?: string | undefined;
    /** 电话 */
    tel?: string | undefined;
    /** 启用 */
    enabled?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
}

/** Reponse */
export class DeptRoleDetailResult implements IDeptRoleDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptRoleDetail[] | undefined;

    constructor(data?: IDeptRoleDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptRoleDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptRoleDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptRoleDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptRoleDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptRoleDetail[] | undefined;
}

/** Reponse */
export class DeptRoleResult implements IDeptRoleResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptRole[] | undefined;

    constructor(data?: IDeptRoleResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptRole.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptRoleResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptRoleResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptRoleResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptRole[] | undefined;
}

/** 加班统计 */
export class DeptTime implements IDeptTime {
    /** 用户ID */
    deptUserId?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 数量 */
    count?: number;
    /** 总时长 */
    allTime?: number;

    constructor(data?: IDeptTime) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deptUserId = _data["deptUserId"];
            this.name = _data["name"];
            this.count = _data["count"];
            this.allTime = _data["allTime"];
        }
    }

    static fromJS(data: any): DeptTime {
        data = typeof data === 'object' ? data : {};
        let result = new DeptTime();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deptUserId"] = this.deptUserId;
        data["name"] = this.name;
        data["count"] = this.count;
        data["allTime"] = this.allTime;
        return data;
    }
}

/** 加班统计 */
export interface IDeptTime {
    /** 用户ID */
    deptUserId?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 数量 */
    count?: number;
    /** 总时长 */
    allTime?: number;
}

/** 管理类 - 加班或休假统计 */
export class DeptTimeDetail implements IDeptTimeDetail {
    /** 登记时间 */
    registerTime?: dayjs.Dayjs | undefined;
    /** 加班或休假时间 */
    times?: string | undefined;
    /** 值班护士或医生 */
    name?: string | undefined;
    /** 加班或休假时长 */
    timeCount?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 角色 */
    role?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;

    constructor(data?: IDeptTimeDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.registerTime = _data["registerTime"] ? dayjs(_data["registerTime"].toString()) : <any>undefined;
            this.times = _data["times"];
            this.name = _data["name"];
            this.timeCount = _data["timeCount"];
            this.remark = _data["remark"];
            this.role = _data["role"];
            this.shiftName = _data["shiftName"];
        }
    }

    static fromJS(data: any): DeptTimeDetail {
        data = typeof data === 'object' ? data : {};
        let result = new DeptTimeDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["registerTime"] = this.registerTime ? this.registerTime.toISOString() : <any>undefined;
        data["times"] = this.times;
        data["name"] = this.name;
        data["timeCount"] = this.timeCount;
        data["remark"] = this.remark;
        data["role"] = this.role;
        data["shiftName"] = this.shiftName;
        return data;
    }
}

/** 管理类 - 加班或休假统计 */
export interface IDeptTimeDetail {
    /** 登记时间 */
    registerTime?: dayjs.Dayjs | undefined;
    /** 加班或休假时间 */
    times?: string | undefined;
    /** 值班护士或医生 */
    name?: string | undefined;
    /** 加班或休假时长 */
    timeCount?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 角色 */
    role?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
}

/** Reponse */
export class DeptTimeDetailResult implements IDeptTimeDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptTimeDetail[] | undefined;

    constructor(data?: IDeptTimeDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptTimeDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptTimeDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptTimeDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptTimeDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptTimeDetail[] | undefined;
}

/** Reponse */
export class DeptTimeResult implements IDeptTimeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptTime[] | undefined;

    constructor(data?: IDeptTimeResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptTime.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptTimeResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptTimeResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptTimeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptTime[] | undefined;
}

/** 管理类  - 用户登录统计 */
export class DeptUserLogin implements IDeptUserLogin {
    /** 登录时间 */
    loginTime?: string | undefined;
    /** 登录名称 */
    loginName?: string | undefined;
    /** 登录地址 */
    loginIP?: string | undefined;
    /** 登录地点 */
    loginAddress?: string | undefined;
    /** 浏览器 */
    loginNavcat?: string | undefined;
    /** 操作系统 */
    loginOperation?: string | undefined;
    /** 操作信息 */
    operationInfo?: string | undefined;

    constructor(data?: IDeptUserLogin) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.loginTime = _data["loginTime"];
            this.loginName = _data["loginName"];
            this.loginIP = _data["loginIP"];
            this.loginAddress = _data["loginAddress"];
            this.loginNavcat = _data["loginNavcat"];
            this.loginOperation = _data["loginOperation"];
            this.operationInfo = _data["operationInfo"];
        }
    }

    static fromJS(data: any): DeptUserLogin {
        data = typeof data === 'object' ? data : {};
        let result = new DeptUserLogin();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["loginTime"] = this.loginTime;
        data["loginName"] = this.loginName;
        data["loginIP"] = this.loginIP;
        data["loginAddress"] = this.loginAddress;
        data["loginNavcat"] = this.loginNavcat;
        data["loginOperation"] = this.loginOperation;
        data["operationInfo"] = this.operationInfo;
        return data;
    }
}

/** 管理类  - 用户登录统计 */
export interface IDeptUserLogin {
    /** 登录时间 */
    loginTime?: string | undefined;
    /** 登录名称 */
    loginName?: string | undefined;
    /** 登录地址 */
    loginIP?: string | undefined;
    /** 登录地点 */
    loginAddress?: string | undefined;
    /** 浏览器 */
    loginNavcat?: string | undefined;
    /** 操作系统 */
    loginOperation?: string | undefined;
    /** 操作信息 */
    operationInfo?: string | undefined;
}

/** Reponse */
export class DeptUserLoginResult implements IDeptUserLoginResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptUserLogin[] | undefined;

    constructor(data?: IDeptUserLoginResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptUserLogin.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptUserLoginResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptUserLoginResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptUserLoginResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptUserLogin[] | undefined;
}

/** 管理类 -  用户操作统计 */
export class DeptUserOperations implements IDeptUserOperations {
    /** 模块 */
    model?: string | undefined;
    /** 例次 */
    count?: number;
    /** 占比 */
    rate?: number;

    constructor(data?: IDeptUserOperations) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.model = _data["model"];
            this.count = _data["count"];
            this.rate = _data["rate"];
        }
    }

    static fromJS(data: any): DeptUserOperations {
        data = typeof data === 'object' ? data : {};
        let result = new DeptUserOperations();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["model"] = this.model;
        data["count"] = this.count;
        data["rate"] = this.rate;
        return data;
    }
}

/** 管理类 -  用户操作统计 */
export interface IDeptUserOperations {
    /** 模块 */
    model?: string | undefined;
    /** 例次 */
    count?: number;
    /** 占比 */
    rate?: number;
}

/** Reponse */
export class DeptUserOperationsResult implements IDeptUserOperationsResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptUserOperations[] | undefined;

    constructor(data?: IDeptUserOperationsResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptUserOperations.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptUserOperationsResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptUserOperationsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptUserOperationsResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptUserOperations[] | undefined;
}

/** 考勤统计 */
export class DeptWorkAttendance implements IDeptWorkAttendance {
    /** 排班Id */
    shiftId?: string | undefined;
    /** 考勤类型 */
    types?: string | undefined;
    /** 人数 */
    count?: number;
    /** 占比 */
    rate?: number | undefined;

    constructor(data?: IDeptWorkAttendance) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shiftId = _data["shiftId"];
            this.types = _data["types"];
            this.count = _data["count"];
            this.rate = _data["rate"];
        }
    }

    static fromJS(data: any): DeptWorkAttendance {
        data = typeof data === 'object' ? data : {};
        let result = new DeptWorkAttendance();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shiftId"] = this.shiftId;
        data["types"] = this.types;
        data["count"] = this.count;
        data["rate"] = this.rate;
        return data;
    }
}

/** 考勤统计 */
export interface IDeptWorkAttendance {
    /** 排班Id */
    shiftId?: string | undefined;
    /** 考勤类型 */
    types?: string | undefined;
    /** 人数 */
    count?: number;
    /** 占比 */
    rate?: number | undefined;
}

/** 考勤统计详细 */
export class DeptWorkAttendanceDetail implements IDeptWorkAttendanceDetail {
    /** 班次名称 */
    shftName?: string | undefined;
    /** 员工名称 */
    name?: string | undefined;
    /** 工号 */
    jobNumber?: string | undefined;
    /** 电话 */
    tel?: string | undefined;
    /** 日期 */
    date?: string | undefined;
    /** 开始时间 */
    beginTime?: string | undefined;
    /** 结束时间 */
    endTime?: string | undefined;
    /** 签到时间 */
    signIn?: string | undefined;
    /** 签退时间 */
    signOut?: string | undefined;
    /** 备注 */
    mark?: string | undefined;

    constructor(data?: IDeptWorkAttendanceDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shftName = _data["shftName"];
            this.name = _data["name"];
            this.jobNumber = _data["jobNumber"];
            this.tel = _data["tel"];
            this.date = _data["date"];
            this.beginTime = _data["beginTime"];
            this.endTime = _data["endTime"];
            this.signIn = _data["signIn"];
            this.signOut = _data["signOut"];
            this.mark = _data["mark"];
        }
    }

    static fromJS(data: any): DeptWorkAttendanceDetail {
        data = typeof data === 'object' ? data : {};
        let result = new DeptWorkAttendanceDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shftName"] = this.shftName;
        data["name"] = this.name;
        data["jobNumber"] = this.jobNumber;
        data["tel"] = this.tel;
        data["date"] = this.date;
        data["beginTime"] = this.beginTime;
        data["endTime"] = this.endTime;
        data["signIn"] = this.signIn;
        data["signOut"] = this.signOut;
        data["mark"] = this.mark;
        return data;
    }
}

/** 考勤统计详细 */
export interface IDeptWorkAttendanceDetail {
    /** 班次名称 */
    shftName?: string | undefined;
    /** 员工名称 */
    name?: string | undefined;
    /** 工号 */
    jobNumber?: string | undefined;
    /** 电话 */
    tel?: string | undefined;
    /** 日期 */
    date?: string | undefined;
    /** 开始时间 */
    beginTime?: string | undefined;
    /** 结束时间 */
    endTime?: string | undefined;
    /** 签到时间 */
    signIn?: string | undefined;
    /** 签退时间 */
    signOut?: string | undefined;
    /** 备注 */
    mark?: string | undefined;
}

/** Reponse */
export class DeptWorkAttendanceDetailResult implements IDeptWorkAttendanceDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptWorkAttendanceDetail[] | undefined;

    constructor(data?: IDeptWorkAttendanceDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptWorkAttendanceDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptWorkAttendanceDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptWorkAttendanceDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptWorkAttendanceDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptWorkAttendanceDetail[] | undefined;
}

/** Reponse */
export class DeptWorkAttendanceResult implements IDeptWorkAttendanceResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptWorkAttendance[] | undefined;

    constructor(data?: IDeptWorkAttendanceResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptWorkAttendance.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptWorkAttendanceResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptWorkAttendanceResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptWorkAttendanceResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptWorkAttendance[] | undefined;
}

/** 报表 - 设备/药品 - 经销商 */
export class DevDealer implements IDevDealer {
    /** 经销商 */
    dealer?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: IDevDealer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dealer = _data["dealer"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): DevDealer {
        data = typeof data === 'object' ? data : {};
        let result = new DevDealer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dealer"] = this.dealer;
        data["count"] = this.count;
        return data;
    }
}

/** 报表 - 设备/药品 - 经销商 */
export interface IDevDealer {
    /** 经销商 */
    dealer?: string | undefined;
    /** 数量 */
    count?: number;
}

/** 报表 - 设备 - 经销商 - 详情 */
export class DevDealerDetail implements IDevDealerDetail {
    /** 设备编号 */
    code?: string | undefined;
    /** 设备类型 */
    type?: string | undefined;
    /** 设备型号 */
    model?: string | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** 生产日期 */
    dateProduced?: dayjs.Dayjs | undefined;
    /** 设备状态显示值 *启用,故障,维修,停用,报废* */
    status?: string | undefined;

    constructor(data?: IDevDealerDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.type = _data["type"];
            this.model = _data["model"];
            this.dealer = _data["dealer"];
            this.dateProduced = _data["dateProduced"] ? dayjs(_data["dateProduced"].toString()) : <any>undefined;
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): DevDealerDetail {
        data = typeof data === 'object' ? data : {};
        let result = new DevDealerDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["type"] = this.type;
        data["model"] = this.model;
        data["dealer"] = this.dealer;
        data["dateProduced"] = this.dateProduced ? this.dateProduced.toISOString() : <any>undefined;
        data["status"] = this.status;
        return data;
    }
}

/** 报表 - 设备 - 经销商 - 详情 */
export interface IDevDealerDetail {
    /** 设备编号 */
    code?: string | undefined;
    /** 设备类型 */
    type?: string | undefined;
    /** 设备型号 */
    model?: string | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** 生产日期 */
    dateProduced?: dayjs.Dayjs | undefined;
    /** 设备状态显示值 *启用,故障,维修,停用,报废* */
    status?: string | undefined;
}

/** Reponse */
export class DevDealerDetailResult implements IDevDealerDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevDealerDetail[] | undefined;

    constructor(data?: IDevDealerDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevDealerDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevDealerDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevDealerDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevDealerDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevDealerDetail[] | undefined;
}

/** Reponse */
export class DevDealerResult implements IDevDealerResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevDealer[] | undefined;

    constructor(data?: IDevDealerResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevDealer.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevDealerResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevDealerResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevDealerResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevDealer[] | undefined;
}

/** 报表 - 设备 - 设备消毒 */
export class DevDisinfectInfo implements IDevDisinfectInfo {
    /** 消毒日期 */
    date?: dayjs.Dayjs;
    /** 设备编号 */
    code?: string | undefined;
    /** 设备类型 */
    type?: string | undefined;
    /** 设备型号 */
    model?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    beginDate?: dayjs.Dayjs;
    /** 停止时间 *HH:mm:ss* */
    endDate?: dayjs.Dayjs;
    /** 床单元清洁 */
    bedUnitCleaning?: string | undefined;
    /** 过滤网更换 */
    filterScreenChanging?: string | undefined;
    /** 消毒时长 *分钟* */
    disinfectTime?: number;
    /** 机内消毒方式 */
    programInternal?: string | undefined;
    /** 机内消毒人标识 */
    internalOperatorId?: string | undefined;
    /** 机内消毒人名称 */
    internalOperatorName?: string | undefined;
    /** 机外消毒方式 */
    programExterior?: string | undefined;
    /** 机外消毒人标识 */
    externalOperatorId?: string | undefined;
    /** 机外消毒人名称 */
    externalOperatorName?: string | undefined;

    constructor(data?: IDevDisinfectInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.code = _data["code"];
            this.type = _data["type"];
            this.model = _data["model"];
            this.patientName = _data["patientName"];
            this.beginDate = _data["beginDate"] ? dayjs(_data["beginDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? dayjs(_data["endDate"].toString()) : <any>undefined;
            this.bedUnitCleaning = _data["bedUnitCleaning"];
            this.filterScreenChanging = _data["filterScreenChanging"];
            this.disinfectTime = _data["disinfectTime"];
            this.programInternal = _data["programInternal"];
            this.internalOperatorId = _data["internalOperatorId"];
            this.internalOperatorName = _data["internalOperatorName"];
            this.programExterior = _data["programExterior"];
            this.externalOperatorId = _data["externalOperatorId"];
            this.externalOperatorName = _data["externalOperatorName"];
        }
    }

    static fromJS(data: any): DevDisinfectInfo {
        data = typeof data === 'object' ? data : {};
        let result = new DevDisinfectInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["code"] = this.code;
        data["type"] = this.type;
        data["model"] = this.model;
        data["patientName"] = this.patientName;
        data["beginDate"] = this.beginDate ? this.beginDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["bedUnitCleaning"] = this.bedUnitCleaning;
        data["filterScreenChanging"] = this.filterScreenChanging;
        data["disinfectTime"] = this.disinfectTime;
        data["programInternal"] = this.programInternal;
        data["internalOperatorId"] = this.internalOperatorId;
        data["internalOperatorName"] = this.internalOperatorName;
        data["programExterior"] = this.programExterior;
        data["externalOperatorId"] = this.externalOperatorId;
        data["externalOperatorName"] = this.externalOperatorName;
        return data;
    }
}

/** 报表 - 设备 - 设备消毒 */
export interface IDevDisinfectInfo {
    /** 消毒日期 */
    date?: dayjs.Dayjs;
    /** 设备编号 */
    code?: string | undefined;
    /** 设备类型 */
    type?: string | undefined;
    /** 设备型号 */
    model?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    beginDate?: dayjs.Dayjs;
    /** 停止时间 *HH:mm:ss* */
    endDate?: dayjs.Dayjs;
    /** 床单元清洁 */
    bedUnitCleaning?: string | undefined;
    /** 过滤网更换 */
    filterScreenChanging?: string | undefined;
    /** 消毒时长 *分钟* */
    disinfectTime?: number;
    /** 机内消毒方式 */
    programInternal?: string | undefined;
    /** 机内消毒人标识 */
    internalOperatorId?: string | undefined;
    /** 机内消毒人名称 */
    internalOperatorName?: string | undefined;
    /** 机外消毒方式 */
    programExterior?: string | undefined;
    /** 机外消毒人标识 */
    externalOperatorId?: string | undefined;
    /** 机外消毒人名称 */
    externalOperatorName?: string | undefined;
}

/** Reponse */
export class DevDisinfectInfoResult implements IDevDisinfectInfoResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevDisinfectInfo[] | undefined;

    constructor(data?: IDevDisinfectInfoResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevDisinfectInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevDisinfectInfoResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevDisinfectInfoResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevDisinfectInfoResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevDisinfectInfo[] | undefined;
}

/** 报表 - 设备 - 设备维修/保养 */
export class DevMaintenanceInfo implements IDevMaintenanceInfo {
    /** 维护日期 */
    date?: dayjs.Dayjs;
    /** 设备编号 */
    code?: string | undefined;
    /** 设备类型 */
    type?: string | undefined;
    /** 设备型号 */
    model?: string | undefined;
    /** 内容 *更换零件内容* */
    content?: string | undefined;
    /** 费用 */
    cost?: number;
    /** 维护类型 *维修,保养* */
    maintenanceType?: string | undefined;
    /** 维护人 */
    serviceEngineer?: string | undefined;

    constructor(data?: IDevMaintenanceInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.code = _data["code"];
            this.type = _data["type"];
            this.model = _data["model"];
            this.content = _data["content"];
            this.cost = _data["cost"];
            this.maintenanceType = _data["maintenanceType"];
            this.serviceEngineer = _data["serviceEngineer"];
        }
    }

    static fromJS(data: any): DevMaintenanceInfo {
        data = typeof data === 'object' ? data : {};
        let result = new DevMaintenanceInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["code"] = this.code;
        data["type"] = this.type;
        data["model"] = this.model;
        data["content"] = this.content;
        data["cost"] = this.cost;
        data["maintenanceType"] = this.maintenanceType;
        data["serviceEngineer"] = this.serviceEngineer;
        return data;
    }
}

/** 报表 - 设备 - 设备维修/保养 */
export interface IDevMaintenanceInfo {
    /** 维护日期 */
    date?: dayjs.Dayjs;
    /** 设备编号 */
    code?: string | undefined;
    /** 设备类型 */
    type?: string | undefined;
    /** 设备型号 */
    model?: string | undefined;
    /** 内容 *更换零件内容* */
    content?: string | undefined;
    /** 费用 */
    cost?: number;
    /** 维护类型 *维修,保养* */
    maintenanceType?: string | undefined;
    /** 维护人 */
    serviceEngineer?: string | undefined;
}

/** Reponse */
export class DevMaintenanceInfoResult implements IDevMaintenanceInfoResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevMaintenanceInfo[] | undefined;

    constructor(data?: IDevMaintenanceInfoResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevMaintenanceInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevMaintenanceInfoResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevMaintenanceInfoResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevMaintenanceInfoResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevMaintenanceInfo[] | undefined;
}

/** 报表 - 设备 - 生产厂家 */
export class DevManufacturer implements IDevManufacturer {
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: IDevManufacturer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.manufacturer = _data["manufacturer"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): DevManufacturer {
        data = typeof data === 'object' ? data : {};
        let result = new DevManufacturer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["manufacturer"] = this.manufacturer;
        data["count"] = this.count;
        return data;
    }
}

/** 报表 - 设备 - 生产厂家 */
export interface IDevManufacturer {
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 数量 */
    count?: number;
}

/** 报表 - 设备 - 生产厂家 - 详情 */
export class DevManufacturerDetail implements IDevManufacturerDetail {
    /** 设备编号 */
    code?: string | undefined;
    /** 设备类型 */
    type?: string | undefined;
    /** 设备型号 */
    model?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产日期 */
    dateProduced?: dayjs.Dayjs | undefined;
    /** 设备状态显示值 *启用,故障,维修,停用,报废* */
    status?: string | undefined;

    constructor(data?: IDevManufacturerDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.type = _data["type"];
            this.model = _data["model"];
            this.manufacturer = _data["manufacturer"];
            this.dateProduced = _data["dateProduced"] ? dayjs(_data["dateProduced"].toString()) : <any>undefined;
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): DevManufacturerDetail {
        data = typeof data === 'object' ? data : {};
        let result = new DevManufacturerDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["type"] = this.type;
        data["model"] = this.model;
        data["manufacturer"] = this.manufacturer;
        data["dateProduced"] = this.dateProduced ? this.dateProduced.toISOString() : <any>undefined;
        data["status"] = this.status;
        return data;
    }
}

/** 报表 - 设备 - 生产厂家 - 详情 */
export interface IDevManufacturerDetail {
    /** 设备编号 */
    code?: string | undefined;
    /** 设备类型 */
    type?: string | undefined;
    /** 设备型号 */
    model?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产日期 */
    dateProduced?: dayjs.Dayjs | undefined;
    /** 设备状态显示值 *启用,故障,维修,停用,报废* */
    status?: string | undefined;
}

/** Reponse */
export class DevManufacturerDetailResult implements IDevManufacturerDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevManufacturerDetail[] | undefined;

    constructor(data?: IDevManufacturerDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevManufacturerDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevManufacturerDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevManufacturerDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevManufacturerDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevManufacturerDetail[] | undefined;
}

/** Reponse */
export class DevManufacturerResult implements IDevManufacturerResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevManufacturer[] | undefined;

    constructor(data?: IDevManufacturerResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevManufacturer.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevManufacturerResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevManufacturerResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevManufacturerResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevManufacturer[] | undefined;
}

/** 报表 - 设备 - 报废 */
export class DevScrap implements IDevScrap {
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 设备编号 */
    code?: string | undefined;
    /** 设备类型显示值 */
    type?: string | undefined;
    /** 设备型号 */
    model?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 启用状态显示值 *启用,故障,维修,停用,报废* */
    status?: string | undefined;
    /** 故障/报废原因 */
    cause?: string | undefined;

    constructor(data?: IDevScrap) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.code = _data["code"];
            this.type = _data["type"];
            this.model = _data["model"];
            this.manufacturer = _data["manufacturer"];
            this.status = _data["status"];
            this.cause = _data["cause"];
        }
    }

    static fromJS(data: any): DevScrap {
        data = typeof data === 'object' ? data : {};
        let result = new DevScrap();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["code"] = this.code;
        data["type"] = this.type;
        data["model"] = this.model;
        data["manufacturer"] = this.manufacturer;
        data["status"] = this.status;
        data["cause"] = this.cause;
        return data;
    }
}

/** 报表 - 设备 - 报废 */
export interface IDevScrap {
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 设备编号 */
    code?: string | undefined;
    /** 设备类型显示值 */
    type?: string | undefined;
    /** 设备型号 */
    model?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 启用状态显示值 *启用,故障,维修,停用,报废* */
    status?: string | undefined;
    /** 故障/报废原因 */
    cause?: string | undefined;
}

/** Reponse */
export class DevScrapResult implements IDevScrapResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevScrap[] | undefined;

    constructor(data?: IDevScrapResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevScrap.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevScrapResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevScrapResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevScrapResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevScrap[] | undefined;
}

/** 报表 - 设备 - 设备开机 - 详情 */
export class DevStartDetail implements IDevStartDetail {
    /** 设备编号 */
    code?: string | undefined;
    /** 设备类型 */
    type?: string | undefined;
    /** 设备型号 */
    model?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 设备状态显示值 *启用,故障,维修,停用,报废* */
    status?: string | undefined;
    /** 开机时长 */
    timeStart?: number | undefined;

    constructor(data?: IDevStartDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.type = _data["type"];
            this.model = _data["model"];
            this.manufacturer = _data["manufacturer"];
            this.status = _data["status"];
            this.timeStart = _data["timeStart"];
        }
    }

    static fromJS(data: any): DevStartDetail {
        data = typeof data === 'object' ? data : {};
        let result = new DevStartDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["type"] = this.type;
        data["model"] = this.model;
        data["manufacturer"] = this.manufacturer;
        data["status"] = this.status;
        data["timeStart"] = this.timeStart;
        return data;
    }
}

/** 报表 - 设备 - 设备开机 - 详情 */
export interface IDevStartDetail {
    /** 设备编号 */
    code?: string | undefined;
    /** 设备类型 */
    type?: string | undefined;
    /** 设备型号 */
    model?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 设备状态显示值 *启用,故障,维修,停用,报废* */
    status?: string | undefined;
    /** 开机时长 */
    timeStart?: number | undefined;
}

/** Reponse */
export class DevStartDetailResult implements IDevStartDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevStartDetail[] | undefined;

    constructor(data?: IDevStartDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevStartDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevStartDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevStartDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevStartDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevStartDetail[] | undefined;
}

/** 报表 - 设备 - 设备类型 */
export class DevType implements IDevType {
    /** 设备类型显示值 */
    type?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: IDevType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): DevType {
        data = typeof data === 'object' ? data : {};
        let result = new DevType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["count"] = this.count;
        return data;
    }
}

/** 报表 - 设备 - 设备类型 */
export interface IDevType {
    /** 设备类型显示值 */
    type?: string | undefined;
    /** 数量 */
    count?: number;
}

/** 报表 - 设备 - 设备类型 - 详情 */
export class DevTypeDetail implements IDevTypeDetail {
    /** 设备编号 */
    code?: string | undefined;
    /** 设备类型显示值 */
    type?: string | undefined;
    /** 设备型号 */
    model?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 设备状态显示值 *启用,故障,维修,停用,报废* */
    status?: string | undefined;

    constructor(data?: IDevTypeDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.type = _data["type"];
            this.model = _data["model"];
            this.manufacturer = _data["manufacturer"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): DevTypeDetail {
        data = typeof data === 'object' ? data : {};
        let result = new DevTypeDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["type"] = this.type;
        data["model"] = this.model;
        data["manufacturer"] = this.manufacturer;
        data["status"] = this.status;
        return data;
    }
}

/** 报表 - 设备 - 设备类型 - 详情 */
export interface IDevTypeDetail {
    /** 设备编号 */
    code?: string | undefined;
    /** 设备类型显示值 */
    type?: string | undefined;
    /** 设备型号 */
    model?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 设备状态显示值 *启用,故障,维修,停用,报废* */
    status?: string | undefined;
}

/** Reponse */
export class DevTypeDetailResult implements IDevTypeDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevTypeDetail[] | undefined;

    constructor(data?: IDevTypeDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevTypeDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevTypeDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevTypeDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevTypeDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevTypeDetail[] | undefined;
}

/** Reponse */
export class DevTypeResult implements IDevTypeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevType[] | undefined;

    constructor(data?: IDevTypeResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevType.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevTypeResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevTypeResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevTypeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevType[] | undefined;
}

/** 报表 - 设备 - 设备使用 */
export class DevUsage implements IDevUsage {
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 设备编号 *○不允许重复* */
    code?: string | undefined;
    /** 设备类型 */
    type?: string | undefined;
    /** 设备型号 */
    model?: string | undefined;
    /** 开机时长 */
    timeStart?: number | undefined;
    /** 透析时长 */
    timeDialysis?: number | undefined;
    /** 消毒时长 */
    timeDisinfect?: number | undefined;
    /** 工作时长 */
    timeWork?: number | undefined;
    /** 操作者 */
    creater?: string | undefined;

    constructor(data?: IDevUsage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.code = _data["code"];
            this.type = _data["type"];
            this.model = _data["model"];
            this.timeStart = _data["timeStart"];
            this.timeDialysis = _data["timeDialysis"];
            this.timeDisinfect = _data["timeDisinfect"];
            this.timeWork = _data["timeWork"];
            this.creater = _data["creater"];
        }
    }

    static fromJS(data: any): DevUsage {
        data = typeof data === 'object' ? data : {};
        let result = new DevUsage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["code"] = this.code;
        data["type"] = this.type;
        data["model"] = this.model;
        data["timeStart"] = this.timeStart;
        data["timeDialysis"] = this.timeDialysis;
        data["timeDisinfect"] = this.timeDisinfect;
        data["timeWork"] = this.timeWork;
        data["creater"] = this.creater;
        return data;
    }
}

/** 报表 - 设备 - 设备使用 */
export interface IDevUsage {
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 设备编号 *○不允许重复* */
    code?: string | undefined;
    /** 设备类型 */
    type?: string | undefined;
    /** 设备型号 */
    model?: string | undefined;
    /** 开机时长 */
    timeStart?: number | undefined;
    /** 透析时长 */
    timeDialysis?: number | undefined;
    /** 消毒时长 */
    timeDisinfect?: number | undefined;
    /** 工作时长 */
    timeWork?: number | undefined;
    /** 操作者 */
    creater?: string | undefined;
}

/** Reponse */
export class DevUsageResult implements IDevUsageResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevUsage[] | undefined;

    constructor(data?: IDevUsageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevUsage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevUsageResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevUsageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevUsageResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevUsage[] | undefined;
}

/** 透析类 - 医嘱用法 */
export class DialysisOrder implements IDialysisOrder {
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 医嘱用法 */
    items?: DialysisOrderItem[] | undefined;

    constructor(data?: IDialysisOrder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(DialysisOrderItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DialysisOrder {
        data = typeof data === 'object' ? data : {};
        let result = new DialysisOrder();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 透析类 - 医嘱用法 */
export interface IDialysisOrder {
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 医嘱用法 */
    items?: DialysisOrderItem[] | undefined;
}

/** 医嘱用法明细 */
export class DialysisOrderDetail implements IDialysisOrderDetail {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: string | undefined;
    /** 口服药 */
    orally?: string | undefined;
    /** 开立日期 */
    doctorCreateDate?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: string | undefined;
    /** [患者标识](#患者信息) */
    patientId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立医生标识 */
    doctorId?: string | undefined;
    /** 开立医生姓名 */
    doctorName?: string | undefined;
    /** 核对护士标识 */
    checkNurseId?: string | undefined;
    /** 核对护士姓名 */
    checkNurseName?: string | undefined;
    /** 执行护士标识 */
    nurseId?: string | undefined;
    /** 执行护士姓名 */
    nurseName?: string | undefined;
    /** 核对时间 */
    checkTime?: string | undefined;
    /** 执行时间 */
    execTime?: string | undefined;
    /** 执行状态 `DIC.DIALYSIS.DA.STATUS` *待核对,已核对(待执行),已撤销,待调整,已执行* */
    status?: string | undefined;
    /** 分组 */
    group?: string | undefined;
    /** 数量单位名称 */
    unitName?: string | undefined;
    /** 单次用量单位名称 */
    singleUnitName?: string | undefined;
    /** 用法名称 */
    usageName?: string | undefined;
    /** 执行状态名称 */
    statusName?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;

    constructor(data?: IDialysisOrderDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.typeName = _data["typeName"];
            this.content = _data["content"];
            this.usage = _data["usage"];
            this.dosage = _data["dosage"];
            this.orally = _data["orally"];
            this.doctorCreateDate = _data["doctorCreateDate"];
            this.doctorCreateTime = _data["doctorCreateTime"];
            this.patientId = _data["patientId"];
            this.remark = _data["remark"];
            this.groupId = _data["groupId"];
            this.doctorId = _data["doctorId"];
            this.doctorName = _data["doctorName"];
            this.checkNurseId = _data["checkNurseId"];
            this.checkNurseName = _data["checkNurseName"];
            this.nurseId = _data["nurseId"];
            this.nurseName = _data["nurseName"];
            this.checkTime = _data["checkTime"];
            this.execTime = _data["execTime"];
            this.status = _data["status"];
            this.group = _data["group"];
            this.unitName = _data["unitName"];
            this.singleUnitName = _data["singleUnitName"];
            this.usageName = _data["usageName"];
            this.statusName = _data["statusName"];
            this.specLabel = _data["specLabel"];
            this.cureDaContent = _data["cureDaContent"];
        }
    }

    static fromJS(data: any): DialysisOrderDetail {
        data = typeof data === 'object' ? data : {};
        let result = new DialysisOrderDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["typeName"] = this.typeName;
        data["content"] = this.content;
        data["usage"] = this.usage;
        data["dosage"] = this.dosage;
        data["orally"] = this.orally;
        data["doctorCreateDate"] = this.doctorCreateDate;
        data["doctorCreateTime"] = this.doctorCreateTime;
        data["patientId"] = this.patientId;
        data["remark"] = this.remark;
        data["groupId"] = this.groupId;
        data["doctorId"] = this.doctorId;
        data["doctorName"] = this.doctorName;
        data["checkNurseId"] = this.checkNurseId;
        data["checkNurseName"] = this.checkNurseName;
        data["nurseId"] = this.nurseId;
        data["nurseName"] = this.nurseName;
        data["checkTime"] = this.checkTime;
        data["execTime"] = this.execTime;
        data["status"] = this.status;
        data["group"] = this.group;
        data["unitName"] = this.unitName;
        data["singleUnitName"] = this.singleUnitName;
        data["usageName"] = this.usageName;
        data["statusName"] = this.statusName;
        data["specLabel"] = this.specLabel;
        data["cureDaContent"] = this.cureDaContent;
        return data;
    }
}

/** 医嘱用法明细 */
export interface IDialysisOrderDetail {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: string | undefined;
    /** 口服药 */
    orally?: string | undefined;
    /** 开立日期 */
    doctorCreateDate?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: string | undefined;
    /** [患者标识](#患者信息) */
    patientId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立医生标识 */
    doctorId?: string | undefined;
    /** 开立医生姓名 */
    doctorName?: string | undefined;
    /** 核对护士标识 */
    checkNurseId?: string | undefined;
    /** 核对护士姓名 */
    checkNurseName?: string | undefined;
    /** 执行护士标识 */
    nurseId?: string | undefined;
    /** 执行护士姓名 */
    nurseName?: string | undefined;
    /** 核对时间 */
    checkTime?: string | undefined;
    /** 执行时间 */
    execTime?: string | undefined;
    /** 执行状态 `DIC.DIALYSIS.DA.STATUS` *待核对,已核对(待执行),已撤销,待调整,已执行* */
    status?: string | undefined;
    /** 分组 */
    group?: string | undefined;
    /** 数量单位名称 */
    unitName?: string | undefined;
    /** 单次用量单位名称 */
    singleUnitName?: string | undefined;
    /** 用法名称 */
    usageName?: string | undefined;
    /** 执行状态名称 */
    statusName?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
}

/** Reponse */
export class DialysisOrderDetailResult implements IDialysisOrderDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DialysisOrderDetail[] | undefined;

    constructor(data?: IDialysisOrderDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DialysisOrderDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DialysisOrderDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new DialysisOrderDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDialysisOrderDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DialysisOrderDetail[] | undefined;
}

/** 医嘱用法 */
export class DialysisOrderItem implements IDialysisOrderItem {
    /** 医嘱用法 */
    orderUsage?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: IDialysisOrderItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderUsage = _data["orderUsage"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): DialysisOrderItem {
        data = typeof data === 'object' ? data : {};
        let result = new DialysisOrderItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderUsage"] = this.orderUsage;
        data["count"] = this.count;
        return data;
    }
}

/** 医嘱用法 */
export interface IDialysisOrderItem {
    /** 医嘱用法 */
    orderUsage?: string | undefined;
    /** 数量 */
    count?: number;
}

/** Reponse */
export class DialysisOrderResult implements IDialysisOrderResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DialysisOrder[] | undefined;

    constructor(data?: IDialysisOrderResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DialysisOrder.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DialysisOrderResult {
        data = typeof data === 'object' ? data : {};
        let result = new DialysisOrderResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDialysisOrderResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DialysisOrder[] | undefined;
}

/** 管理类 - 医生工作量详细统计 */
export class DoctorWorkLoadDetail implements IDoctorWorkLoadDetail {
    /** 工作时间 */
    wrokTime?: dayjs.Dayjs | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 工号 */
    jobNumber?: string | undefined;
    /** 电话 */
    tel?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 工作类型 */
    wrokType?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;

    constructor(data?: IDoctorWorkLoadDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.wrokTime = _data["wrokTime"] ? dayjs(_data["wrokTime"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.jobNumber = _data["jobNumber"];
            this.tel = _data["tel"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.wrokType = _data["wrokType"];
            this.patientName = _data["patientName"];
        }
    }

    static fromJS(data: any): DoctorWorkLoadDetail {
        data = typeof data === 'object' ? data : {};
        let result = new DoctorWorkLoadDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["wrokTime"] = this.wrokTime ? this.wrokTime.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["jobNumber"] = this.jobNumber;
        data["tel"] = this.tel;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["wrokType"] = this.wrokType;
        data["patientName"] = this.patientName;
        return data;
    }
}

/** 管理类 - 医生工作量详细统计 */
export interface IDoctorWorkLoadDetail {
    /** 工作时间 */
    wrokTime?: dayjs.Dayjs | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 工号 */
    jobNumber?: string | undefined;
    /** 电话 */
    tel?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 工作类型 */
    wrokType?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
}

/** Reponse */
export class DoctorWorkLoadDetailResult implements IDoctorWorkLoadDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DoctorWorkLoadDetail[] | undefined;

    constructor(data?: IDoctorWorkLoadDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DoctorWorkLoadDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DoctorWorkLoadDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new DoctorWorkLoadDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDoctorWorkLoadDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DoctorWorkLoadDetail[] | undefined;
}

/** 药品日报 */
export class DrugDaysReport implements IDrugDaysReport {
    /** 日期 */
    date?: string | undefined;
    /** 促红素类计数 */
    chsCount?: number;
    /** 抗凝剂类计数 */
    knjCount?: number;
    /** 左卡尼汀类计数 */
    zkntCount?: number;
    /** 注射剂类计数 */
    zsjCount?: number;

    constructor(data?: IDrugDaysReport) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.chsCount = _data["chsCount"];
            this.knjCount = _data["knjCount"];
            this.zkntCount = _data["zkntCount"];
            this.zsjCount = _data["zsjCount"];
        }
    }

    static fromJS(data: any): DrugDaysReport {
        data = typeof data === 'object' ? data : {};
        let result = new DrugDaysReport();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["chsCount"] = this.chsCount;
        data["knjCount"] = this.knjCount;
        data["zkntCount"] = this.zkntCount;
        data["zsjCount"] = this.zsjCount;
        return data;
    }
}

/** 药品日报 */
export interface IDrugDaysReport {
    /** 日期 */
    date?: string | undefined;
    /** 促红素类计数 */
    chsCount?: number;
    /** 抗凝剂类计数 */
    knjCount?: number;
    /** 左卡尼汀类计数 */
    zkntCount?: number;
    /** 注射剂类计数 */
    zsjCount?: number;
}

/** 药品类 - 药品日报 - 详细 */
export class DrugDaysReportDetail implements IDrugDaysReportDetail {
    /** 日期 */
    date?: string | undefined;
    /** 药品名称 */
    name?: string | undefined;
    /** 数量 */
    count?: number;
    /** 单位 */
    unit?: string | undefined;
    /** 规格 */
    spec?: string | undefined;

    constructor(data?: IDrugDaysReportDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.name = _data["name"];
            this.count = _data["count"];
            this.unit = _data["unit"];
            this.spec = _data["spec"];
        }
    }

    static fromJS(data: any): DrugDaysReportDetail {
        data = typeof data === 'object' ? data : {};
        let result = new DrugDaysReportDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["name"] = this.name;
        data["count"] = this.count;
        data["unit"] = this.unit;
        data["spec"] = this.spec;
        return data;
    }
}

/** 药品类 - 药品日报 - 详细 */
export interface IDrugDaysReportDetail {
    /** 日期 */
    date?: string | undefined;
    /** 药品名称 */
    name?: string | undefined;
    /** 数量 */
    count?: number;
    /** 单位 */
    unit?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
}

/** Reponse */
export class DrugDaysReportDetailResult implements IDrugDaysReportDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugDaysReportDetail[] | undefined;

    constructor(data?: IDrugDaysReportDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DrugDaysReportDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DrugDaysReportDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new DrugDaysReportDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDrugDaysReportDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugDaysReportDetail[] | undefined;
}

/** Reponse */
export class DrugDaysReportResult implements IDrugDaysReportResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugDaysReport[] | undefined;

    constructor(data?: IDrugDaysReportResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DrugDaysReport.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DrugDaysReportResult {
        data = typeof data === 'object' ? data : {};
        let result = new DrugDaysReportResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDrugDaysReportResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugDaysReport[] | undefined;
}

/** 报表 - 药品 - 经销商 - 详情 */
export class DrugDealerDetail implements IDrugDealerDetail {
    /** 药品名称 */
    name?: string | undefined;
    /** 药品类型Id */
    typeId?: string | undefined;
    /** 药品类型 */
    typeName?: string | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 简称 规格 */
    shortNameFull?: string | undefined;
    /** 启用状态 0,1 */
    enabled?: number;
    /** 启用状态显示值 禁用/启用 */
    enabledLabel?: string | undefined;

    constructor(data?: IDrugDealerDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.typeId = _data["typeId"];
            this.typeName = _data["typeName"];
            this.dealer = _data["dealer"];
            this.spec = _data["spec"];
            this.shortNameFull = _data["shortNameFull"];
            this.enabled = _data["enabled"];
            this.enabledLabel = _data["enabledLabel"];
        }
    }

    static fromJS(data: any): DrugDealerDetail {
        data = typeof data === 'object' ? data : {};
        let result = new DrugDealerDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["typeId"] = this.typeId;
        data["typeName"] = this.typeName;
        data["dealer"] = this.dealer;
        data["spec"] = this.spec;
        data["shortNameFull"] = this.shortNameFull;
        data["enabled"] = this.enabled;
        data["enabledLabel"] = this.enabledLabel;
        return data;
    }
}

/** 报表 - 药品 - 经销商 - 详情 */
export interface IDrugDealerDetail {
    /** 药品名称 */
    name?: string | undefined;
    /** 药品类型Id */
    typeId?: string | undefined;
    /** 药品类型 */
    typeName?: string | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 简称 规格 */
    shortNameFull?: string | undefined;
    /** 启用状态 0,1 */
    enabled?: number;
    /** 启用状态显示值 禁用/启用 */
    enabledLabel?: string | undefined;
}

/** Reponse */
export class DrugDealerDetailResult implements IDrugDealerDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugDealerDetail[] | undefined;

    constructor(data?: IDrugDealerDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DrugDealerDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DrugDealerDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new DrugDealerDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDrugDealerDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugDealerDetail[] | undefined;
}

/** 药品类 -- 透析用药 */
export class DrugDialysis implements IDrugDialysis {
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 药品名称 */
    name?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 数量 */
    count?: number;
    /** 单位 */
    unit?: string | undefined;

    constructor(data?: IDrugDialysis) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientName = _data["patientName"];
            this.name = _data["name"];
            this.specLabel = _data["specLabel"];
            this.count = _data["count"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): DrugDialysis {
        data = typeof data === 'object' ? data : {};
        let result = new DrugDialysis();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientName"] = this.patientName;
        data["name"] = this.name;
        data["specLabel"] = this.specLabel;
        data["count"] = this.count;
        data["unit"] = this.unit;
        return data;
    }
}

/** 药品类 -- 透析用药 */
export interface IDrugDialysis {
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 药品名称 */
    name?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 数量 */
    count?: number;
    /** 单位 */
    unit?: string | undefined;
}

/** Reponse */
export class DrugDialysisResult implements IDrugDialysisResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugDialysis[] | undefined;

    constructor(data?: IDrugDialysisResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DrugDialysis.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DrugDialysisResult {
        data = typeof data === 'object' ? data : {};
        let result = new DrugDialysisResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDrugDialysisResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugDialysis[] | undefined;
}

/** 药品类 - 周促红素统计 */
export class DrugErythropoietinWeek implements IDrugErythropoietinWeek {
    /** 患者名称 */
    patientName?: string | undefined;
    /** 干体重 */
    bestWeight?: number | undefined;
    /** 血红蛋白 */
    hb?: string | undefined;
    /** 月促红素总用量（u) */
    useMountMonth?: number | undefined;
    /** 每周促红素用量（U） */
    useMountWeek?: number | undefined;
    /** 每周每公斤体重使用促红素（U/KG) */
    useMountWeek_Each?: number | undefined;
    /** 使用粗红素 */
    erythropoietinName?: string | undefined;

    constructor(data?: IDrugErythropoietinWeek) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientName = _data["patientName"];
            this.bestWeight = _data["bestWeight"];
            this.hb = _data["hb"];
            this.useMountMonth = _data["useMountMonth"];
            this.useMountWeek = _data["useMountWeek"];
            this.useMountWeek_Each = _data["useMountWeek_Each"];
            this.erythropoietinName = _data["erythropoietinName"];
        }
    }

    static fromJS(data: any): DrugErythropoietinWeek {
        data = typeof data === 'object' ? data : {};
        let result = new DrugErythropoietinWeek();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientName"] = this.patientName;
        data["bestWeight"] = this.bestWeight;
        data["hb"] = this.hb;
        data["useMountMonth"] = this.useMountMonth;
        data["useMountWeek"] = this.useMountWeek;
        data["useMountWeek_Each"] = this.useMountWeek_Each;
        data["erythropoietinName"] = this.erythropoietinName;
        return data;
    }
}

/** 药品类 - 周促红素统计 */
export interface IDrugErythropoietinWeek {
    /** 患者名称 */
    patientName?: string | undefined;
    /** 干体重 */
    bestWeight?: number | undefined;
    /** 血红蛋白 */
    hb?: string | undefined;
    /** 月促红素总用量（u) */
    useMountMonth?: number | undefined;
    /** 每周促红素用量（U） */
    useMountWeek?: number | undefined;
    /** 每周每公斤体重使用促红素（U/KG) */
    useMountWeek_Each?: number | undefined;
    /** 使用粗红素 */
    erythropoietinName?: string | undefined;
}

/** Reponse */
export class DrugErythropoietinWeekResult implements IDrugErythropoietinWeekResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugErythropoietinWeek[] | undefined;

    constructor(data?: IDrugErythropoietinWeekResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DrugErythropoietinWeek.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DrugErythropoietinWeekResult {
        data = typeof data === 'object' ? data : {};
        let result = new DrugErythropoietinWeekResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDrugErythropoietinWeekResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugErythropoietinWeek[] | undefined;
}

/** 药品类 - 药品入库记录 */
export class DrugIn implements IDrugIn {
    /** 日期 */
    date?: string | undefined;
    /** 促红素 */
    chsCount?: number;
    /** 抗凝剂 */
    knjCount?: number;
    /** 左卡尼汀类 */
    zkntCount?: number;
    /** 注射剂类 */
    zsjCount?: number;

    constructor(data?: IDrugIn) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.chsCount = _data["chsCount"];
            this.knjCount = _data["knjCount"];
            this.zkntCount = _data["zkntCount"];
            this.zsjCount = _data["zsjCount"];
        }
    }

    static fromJS(data: any): DrugIn {
        data = typeof data === 'object' ? data : {};
        let result = new DrugIn();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["chsCount"] = this.chsCount;
        data["knjCount"] = this.knjCount;
        data["zkntCount"] = this.zkntCount;
        data["zsjCount"] = this.zsjCount;
        return data;
    }
}

/** 药品类 - 药品入库记录 */
export interface IDrugIn {
    /** 日期 */
    date?: string | undefined;
    /** 促红素 */
    chsCount?: number;
    /** 抗凝剂 */
    knjCount?: number;
    /** 左卡尼汀类 */
    zkntCount?: number;
    /** 注射剂类 */
    zsjCount?: number;
}

/** 药品出入库统计 - 详细 */
export class DrugInDetail implements IDrugInDetail {
    /** 日期 */
    date?: string | undefined;
    /** 药品类型 */
    types?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 数量 */
    count?: number;
    /** 药品单位 */
    unit?: string | undefined;

    constructor(data?: IDrugInDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.types = _data["types"];
            this.name = _data["name"];
            this.spec = _data["spec"];
            this.count = _data["count"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): DrugInDetail {
        data = typeof data === 'object' ? data : {};
        let result = new DrugInDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["types"] = this.types;
        data["name"] = this.name;
        data["spec"] = this.spec;
        data["count"] = this.count;
        data["unit"] = this.unit;
        return data;
    }
}

/** 药品出入库统计 - 详细 */
export interface IDrugInDetail {
    /** 日期 */
    date?: string | undefined;
    /** 药品类型 */
    types?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 数量 */
    count?: number;
    /** 药品单位 */
    unit?: string | undefined;
}

/** Reponse */
export class DrugInDetailResult implements IDrugInDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugInDetail[] | undefined;

    constructor(data?: IDrugInDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DrugInDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DrugInDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new DrugInDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDrugInDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugInDetail[] | undefined;
}

/** Reponse */
export class DrugInResult implements IDrugInResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugIn[] | undefined;

    constructor(data?: IDrugInResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DrugIn.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DrugInResult {
        data = typeof data === 'object' ? data : {};
        let result = new DrugInResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDrugInResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugIn[] | undefined;
}

/** 报表 - 药品 - 生产厂家 */
export class DrugManufacturer implements IDrugManufacturer {
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: IDrugManufacturer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.manufacturer = _data["manufacturer"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): DrugManufacturer {
        data = typeof data === 'object' ? data : {};
        let result = new DrugManufacturer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["manufacturer"] = this.manufacturer;
        data["count"] = this.count;
        return data;
    }
}

/** 报表 - 药品 - 生产厂家 */
export interface IDrugManufacturer {
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 数量 */
    count?: number;
}

/** 报表 - 药品 - 生产厂家 - 详情 */
export class DrugManufacturerDetail implements IDrugManufacturerDetail {
    /** 药品名称 */
    name?: string | undefined;
    /** 药品类型Id */
    typeId?: string | undefined;
    /** 药品类型 */
    typeName?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 简称 规格 */
    shortNameFull?: string | undefined;
    /** 启用状态 0,1 */
    enabled?: number;
    /** 启用状态显示值 禁用/启用 */
    enabledLabel?: string | undefined;

    constructor(data?: IDrugManufacturerDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.typeId = _data["typeId"];
            this.typeName = _data["typeName"];
            this.manufacturer = _data["manufacturer"];
            this.origin = _data["origin"];
            this.spec = _data["spec"];
            this.shortNameFull = _data["shortNameFull"];
            this.enabled = _data["enabled"];
            this.enabledLabel = _data["enabledLabel"];
        }
    }

    static fromJS(data: any): DrugManufacturerDetail {
        data = typeof data === 'object' ? data : {};
        let result = new DrugManufacturerDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["typeId"] = this.typeId;
        data["typeName"] = this.typeName;
        data["manufacturer"] = this.manufacturer;
        data["origin"] = this.origin;
        data["spec"] = this.spec;
        data["shortNameFull"] = this.shortNameFull;
        data["enabled"] = this.enabled;
        data["enabledLabel"] = this.enabledLabel;
        return data;
    }
}

/** 报表 - 药品 - 生产厂家 - 详情 */
export interface IDrugManufacturerDetail {
    /** 药品名称 */
    name?: string | undefined;
    /** 药品类型Id */
    typeId?: string | undefined;
    /** 药品类型 */
    typeName?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 简称 规格 */
    shortNameFull?: string | undefined;
    /** 启用状态 0,1 */
    enabled?: number;
    /** 启用状态显示值 禁用/启用 */
    enabledLabel?: string | undefined;
}

/** Reponse */
export class DrugManufacturerDetailResult implements IDrugManufacturerDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugManufacturerDetail[] | undefined;

    constructor(data?: IDrugManufacturerDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DrugManufacturerDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DrugManufacturerDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new DrugManufacturerDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDrugManufacturerDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugManufacturerDetail[] | undefined;
}

/** Reponse */
export class DrugManufacturerResult implements IDrugManufacturerResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugManufacturer[] | undefined;

    constructor(data?: IDrugManufacturerResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DrugManufacturer.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DrugManufacturerResult {
        data = typeof data === 'object' ? data : {};
        let result = new DrugManufacturerResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDrugManufacturerResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugManufacturer[] | undefined;
}

/** 药品类 - 自备用药统计 */
export class DrugOwned implements IDrugOwned {
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 药品名称 */
    name?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 数量 */
    count?: number;
    /** 单位 */
    unit?: string | undefined;

    constructor(data?: IDrugOwned) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientName = _data["patientName"];
            this.name = _data["name"];
            this.specLabel = _data["specLabel"];
            this.count = _data["count"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): DrugOwned {
        data = typeof data === 'object' ? data : {};
        let result = new DrugOwned();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientName"] = this.patientName;
        data["name"] = this.name;
        data["specLabel"] = this.specLabel;
        data["count"] = this.count;
        data["unit"] = this.unit;
        return data;
    }
}

/** 药品类 - 自备用药统计 */
export interface IDrugOwned {
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 药品名称 */
    name?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 数量 */
    count?: number;
    /** 单位 */
    unit?: string | undefined;
}

/** Reponse */
export class DrugOwnedResult implements IDrugOwnedResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugOwned[] | undefined;

    constructor(data?: IDrugOwnedResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DrugOwned.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DrugOwnedResult {
        data = typeof data === 'object' ? data : {};
        let result = new DrugOwnedResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDrugOwnedResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugOwned[] | undefined;
}

/** 药品类 - 使用记录 - 患者 - 详细 */
export class DrugPatient implements IDrugPatient {
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 数量 */
    count?: number;
    /** 药品名称 */
    drugName?: string | undefined;
    /** 使用日期 */
    dialysisDate?: dayjs.Dayjs | undefined;
    /** 生产商 */
    manufacturer?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 使用日期 */
    useDate?: string | undefined;

    constructor(data?: IDrugPatient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.surnameCode = _data["surnameCode"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.count = _data["count"];
            this.drugName = _data["drugName"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.manufacturer = _data["manufacturer"];
            this.unit = _data["unit"];
            this.spec = _data["spec"];
            this.useDate = _data["useDate"];
        }
    }

    static fromJS(data: any): DrugPatient {
        data = typeof data === 'object' ? data : {};
        let result = new DrugPatient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["surnameCode"] = this.surnameCode;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["count"] = this.count;
        data["drugName"] = this.drugName;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["manufacturer"] = this.manufacturer;
        data["unit"] = this.unit;
        data["spec"] = this.spec;
        data["useDate"] = this.useDate;
        return data;
    }
}

/** 药品类 - 使用记录 - 患者 - 详细 */
export interface IDrugPatient {
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 数量 */
    count?: number;
    /** 药品名称 */
    drugName?: string | undefined;
    /** 使用日期 */
    dialysisDate?: dayjs.Dayjs | undefined;
    /** 生产商 */
    manufacturer?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 使用日期 */
    useDate?: string | undefined;
}

/** Reponse */
export class DrugPatientResult implements IDrugPatientResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugPatient[] | undefined;

    constructor(data?: IDrugPatientResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DrugPatient.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DrugPatientResult {
        data = typeof data === 'object' ? data : {};
        let result = new DrugPatientResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDrugPatientResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugPatient[] | undefined;
}

/** 库存统计 */
export class DrugStock implements IDrugStock {
    /** 耗材名称 */
    name?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 售价 */
    price?: number | undefined;
    /** 数量 */
    count?: number | undefined;
    /** 基本单位 */
    unitBase?: string | undefined;
    /** 项目类型 */
    roomItemType?: string | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 经销商 */
    dealer?: string | undefined;

    constructor(data?: IDrugStock) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.spec = _data["spec"];
            this.price = _data["price"];
            this.count = _data["count"];
            this.unitBase = _data["unitBase"];
            this.roomItemType = _data["roomItemType"];
            this.model = _data["model"];
            this.origin = _data["origin"];
            this.manufacturer = _data["manufacturer"];
            this.dealer = _data["dealer"];
        }
    }

    static fromJS(data: any): DrugStock {
        data = typeof data === 'object' ? data : {};
        let result = new DrugStock();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["spec"] = this.spec;
        data["price"] = this.price;
        data["count"] = this.count;
        data["unitBase"] = this.unitBase;
        data["roomItemType"] = this.roomItemType;
        data["model"] = this.model;
        data["origin"] = this.origin;
        data["manufacturer"] = this.manufacturer;
        data["dealer"] = this.dealer;
        return data;
    }
}

/** 库存统计 */
export interface IDrugStock {
    /** 耗材名称 */
    name?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 售价 */
    price?: number | undefined;
    /** 数量 */
    count?: number | undefined;
    /** 基本单位 */
    unitBase?: string | undefined;
    /** 项目类型 */
    roomItemType?: string | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 经销商 */
    dealer?: string | undefined;
}

/** Reponse */
export class DrugStockResult implements IDrugStockResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugStock[] | undefined;

    constructor(data?: IDrugStockResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DrugStock.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DrugStockResult {
        data = typeof data === 'object' ? data : {};
        let result = new DrugStockResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDrugStockResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugStock[] | undefined;
}

/** 药品类型统计 */
export class DrugTypeUsage implements IDrugTypeUsage {
    /** 编码 */
    code?: string | undefined;
    /** 药品类型 */
    drugType?: string | undefined;
    /** 数量 */
    count?: number;
    /** 占比 */
    rate?: number;

    constructor(data?: IDrugTypeUsage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.drugType = _data["drugType"];
            this.count = _data["count"];
            this.rate = _data["rate"];
        }
    }

    static fromJS(data: any): DrugTypeUsage {
        data = typeof data === 'object' ? data : {};
        let result = new DrugTypeUsage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["drugType"] = this.drugType;
        data["count"] = this.count;
        data["rate"] = this.rate;
        return data;
    }
}

/** 药品类型统计 */
export interface IDrugTypeUsage {
    /** 编码 */
    code?: string | undefined;
    /** 药品类型 */
    drugType?: string | undefined;
    /** 数量 */
    count?: number;
    /** 占比 */
    rate?: number;
}

/** Reponse */
export class DrugTypeUsageResult implements IDrugTypeUsageResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugTypeUsage[] | undefined;

    constructor(data?: IDrugTypeUsageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DrugTypeUsage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DrugTypeUsageResult {
        data = typeof data === 'object' ? data : {};
        let result = new DrugTypeUsageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDrugTypeUsageResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugTypeUsage[] | undefined;
}

/** 报表 - 药品 - 使用记录统计 */
export class DrugUsage implements IDrugUsage {
    /** 药品名称 */
    drugName?: string | undefined;
    /** 药品id */
    drugId?: string | undefined;
    /** 数量 */
    count?: number;
    /** 占比 */
    rate?: number;

    constructor(data?: IDrugUsage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.drugName = _data["drugName"];
            this.drugId = _data["drugId"];
            this.count = _data["count"];
            this.rate = _data["rate"];
        }
    }

    static fromJS(data: any): DrugUsage {
        data = typeof data === 'object' ? data : {};
        let result = new DrugUsage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["drugName"] = this.drugName;
        data["drugId"] = this.drugId;
        data["count"] = this.count;
        data["rate"] = this.rate;
        return data;
    }
}

/** 报表 - 药品 - 使用记录统计 */
export interface IDrugUsage {
    /** 药品名称 */
    drugName?: string | undefined;
    /** 药品id */
    drugId?: string | undefined;
    /** 数量 */
    count?: number;
    /** 占比 */
    rate?: number;
}

/** Reponse */
export class DrugUsageResult implements IDrugUsageResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugUsage[] | undefined;

    constructor(data?: IDrugUsageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DrugUsage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DrugUsageResult {
        data = typeof data === 'object' ? data : {};
        let result = new DrugUsageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDrugUsageResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugUsage[] | undefined;
}

/** Reponse */
export class ExpandoObjectResult implements IExpandoObjectResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: { [key: string]: any; }[] | undefined;

    constructor(data?: IExpandoObjectResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(item);
            }
        }
    }

    static fromJS(data: any): ExpandoObjectResult {
        data = typeof data === 'object' ? data : {};
        let result = new ExpandoObjectResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item);
        }
        return data;
    }
}

/** Reponse */
export interface IExpandoObjectResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: { [key: string]: any; }[] | undefined;
}

export class ExportFilterBase implements IExportFilterBase {
    type?: string | undefined;
    filter?: string | undefined;
    dateStr?: string | undefined;
    key?: string | undefined;
    startDate?: string | undefined;
    endDate?: string | undefined;
    _filter?: QueryFilter;

    constructor(data?: IExportFilterBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.filter = _data["filter"];
            this.dateStr = _data["dateStr"];
            this.key = _data["key"];
            this.startDate = _data["startDate"];
            this.endDate = _data["endDate"];
            this._filter = _data["_filter"] ? QueryFilter.fromJS(_data["_filter"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ExportFilterBase {
        data = typeof data === 'object' ? data : {};
        let result = new ExportFilterBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["filter"] = this.filter;
        data["dateStr"] = this.dateStr;
        data["key"] = this.key;
        data["startDate"] = this.startDate;
        data["endDate"] = this.endDate;
        data["_filter"] = this._filter ? this._filter.toJSON() : <any>undefined;
        return data;
    }
}

export interface IExportFilterBase {
    type?: string | undefined;
    filter?: string | undefined;
    dateStr?: string | undefined;
    key?: string | undefined;
    startDate?: string | undefined;
    endDate?: string | undefined;
    _filter?: QueryFilter;
}

/** 新增在透患者 */
export class InProcessPatient implements IInProcessPatient {
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 数量 */
    count?: number;

    constructor(data?: IInProcessPatient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): InProcessPatient {
        data = typeof data === 'object' ? data : {};
        let result = new InProcessPatient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["count"] = this.count;
        return data;
    }
}

/** 新增在透患者 */
export interface IInProcessPatient {
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 数量 */
    count?: number;
}

/** 在透患者 */
export class InProcessPatientDetail implements IInProcessPatientDetail {
    /** 姓名 */
    name?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 阴阳性 */
    positive?: string | undefined;
    /** 疾病种类 * */
    type?: string | undefined;
    /** 传染病种类展示值 `DIC.DIAGNOSIS.ID.TYPE` *多选，用逗号隔开* *丙肝,乙肝,艾滋病,梅毒,结核,其它 */
    typeLabel?: string | undefined;
    /** 最近透析日期 */
    dialysisDateLast?: string | undefined;

    constructor(data?: IInProcessPatientDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.patientId = _data["patientId"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.positive = _data["positive"];
            this.type = _data["type"];
            this.typeLabel = _data["typeLabel"];
            this.dialysisDateLast = _data["dialysisDateLast"];
        }
    }

    static fromJS(data: any): InProcessPatientDetail {
        data = typeof data === 'object' ? data : {};
        let result = new InProcessPatientDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["patientId"] = this.patientId;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["positive"] = this.positive;
        data["type"] = this.type;
        data["typeLabel"] = this.typeLabel;
        data["dialysisDateLast"] = this.dialysisDateLast;
        return data;
    }
}

/** 在透患者 */
export interface IInProcessPatientDetail {
    /** 姓名 */
    name?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 阴阳性 */
    positive?: string | undefined;
    /** 疾病种类 * */
    type?: string | undefined;
    /** 传染病种类展示值 `DIC.DIAGNOSIS.ID.TYPE` *多选，用逗号隔开* *丙肝,乙肝,艾滋病,梅毒,结核,其它 */
    typeLabel?: string | undefined;
    /** 最近透析日期 */
    dialysisDateLast?: string | undefined;
}

/** Reponse */
export class InProcessPatientDetailResult implements IInProcessPatientDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: InProcessPatientDetail[] | undefined;

    constructor(data?: IInProcessPatientDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(InProcessPatientDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): InProcessPatientDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new InProcessPatientDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IInProcessPatientDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: InProcessPatientDetail[] | undefined;
}

/** Reponse */
export class InProcessPatientResult implements IInProcessPatientResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: InProcessPatient[] | undefined;

    constructor(data?: IInProcessPatientResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(InProcessPatient.fromJS(item));
            }
        }
    }

    static fromJS(data: any): InProcessPatientResult {
        data = typeof data === 'object' ? data : {};
        let result = new InProcessPatientResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IInProcessPatientResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: InProcessPatient[] | undefined;
}

/** 阴转阳 */
export class NegativeToPositive implements INegativeToPositive {
    /** 年份 */
    year?: number;
    /** 报表类型 */
    type?: string | undefined;
    /** HBV原有阳性 */
    hbvPositiveCount?: number;
    /** HBV阴转阳 */
    hbvToPositiveCount?: number;
    /** HBV阴转阳率 */
    hbvToPositiveRate?: string | undefined;
    /** HCV原有阳性 */
    hcvPositiveCount?: number;
    /** HCV阴转阳 */
    hcvToPositiveCount?: number;
    /** HCV阴转阳率 */
    hcvToPositiveRate?: string | undefined;
    /** HIV原有阳性 */
    hivPositiveCount?: number;
    /** HIV阴转阳 */
    hivToPositiveCount?: number;
    /** HIV阴转阳率 */
    hivToPositiveRate?: string | undefined;
    /** 梅毒原有阳性 */
    tpPositiveCount?: number;
    /** 梅毒阴转阳 */
    tpToPositiveCount?: number;
    /** 梅毒阴转阳率 */
    tpToPositiveRate?: string | undefined;

    constructor(data?: INegativeToPositive) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.year = _data["year"];
            this.type = _data["type"];
            this.hbvPositiveCount = _data["hbvPositiveCount"];
            this.hbvToPositiveCount = _data["hbvToPositiveCount"];
            this.hbvToPositiveRate = _data["hbvToPositiveRate"];
            this.hcvPositiveCount = _data["hcvPositiveCount"];
            this.hcvToPositiveCount = _data["hcvToPositiveCount"];
            this.hcvToPositiveRate = _data["hcvToPositiveRate"];
            this.hivPositiveCount = _data["hivPositiveCount"];
            this.hivToPositiveCount = _data["hivToPositiveCount"];
            this.hivToPositiveRate = _data["hivToPositiveRate"];
            this.tpPositiveCount = _data["tpPositiveCount"];
            this.tpToPositiveCount = _data["tpToPositiveCount"];
            this.tpToPositiveRate = _data["tpToPositiveRate"];
        }
    }

    static fromJS(data: any): NegativeToPositive {
        data = typeof data === 'object' ? data : {};
        let result = new NegativeToPositive();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["year"] = this.year;
        data["type"] = this.type;
        data["hbvPositiveCount"] = this.hbvPositiveCount;
        data["hbvToPositiveCount"] = this.hbvToPositiveCount;
        data["hbvToPositiveRate"] = this.hbvToPositiveRate;
        data["hcvPositiveCount"] = this.hcvPositiveCount;
        data["hcvToPositiveCount"] = this.hcvToPositiveCount;
        data["hcvToPositiveRate"] = this.hcvToPositiveRate;
        data["hivPositiveCount"] = this.hivPositiveCount;
        data["hivToPositiveCount"] = this.hivToPositiveCount;
        data["hivToPositiveRate"] = this.hivToPositiveRate;
        data["tpPositiveCount"] = this.tpPositiveCount;
        data["tpToPositiveCount"] = this.tpToPositiveCount;
        data["tpToPositiveRate"] = this.tpToPositiveRate;
        return data;
    }
}

/** 阴转阳 */
export interface INegativeToPositive {
    /** 年份 */
    year?: number;
    /** 报表类型 */
    type?: string | undefined;
    /** HBV原有阳性 */
    hbvPositiveCount?: number;
    /** HBV阴转阳 */
    hbvToPositiveCount?: number;
    /** HBV阴转阳率 */
    hbvToPositiveRate?: string | undefined;
    /** HCV原有阳性 */
    hcvPositiveCount?: number;
    /** HCV阴转阳 */
    hcvToPositiveCount?: number;
    /** HCV阴转阳率 */
    hcvToPositiveRate?: string | undefined;
    /** HIV原有阳性 */
    hivPositiveCount?: number;
    /** HIV阴转阳 */
    hivToPositiveCount?: number;
    /** HIV阴转阳率 */
    hivToPositiveRate?: string | undefined;
    /** 梅毒原有阳性 */
    tpPositiveCount?: number;
    /** 梅毒阴转阳 */
    tpToPositiveCount?: number;
    /** 梅毒阴转阳率 */
    tpToPositiveRate?: string | undefined;
}

/** 阴转阳明细 */
export class NegativeToPositiveDetail implements INegativeToPositiveDetail {
    /** 标识 */
    patientId?: string | undefined;
    /** 姓名 */
    patientName?: string | undefined;
    /** 性别 */
    genderLabel?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析龄 */
    dialysisAge?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: string | undefined;
    /** 接收日期 */
    receiptDate?: string | undefined;
    /** 阴性 */
    negative?: string | undefined;
    /** 转阳 */
    toPositive?: string | undefined;

    constructor(data?: INegativeToPositiveDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.genderLabel = _data["genderLabel"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisAge = _data["dialysisAge"];
            this.dialysisDateFirst = _data["dialysisDateFirst"];
            this.receiptDate = _data["receiptDate"];
            this.negative = _data["negative"];
            this.toPositive = _data["toPositive"];
        }
    }

    static fromJS(data: any): NegativeToPositiveDetail {
        data = typeof data === 'object' ? data : {};
        let result = new NegativeToPositiveDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["genderLabel"] = this.genderLabel;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisAge"] = this.dialysisAge;
        data["dialysisDateFirst"] = this.dialysisDateFirst;
        data["receiptDate"] = this.receiptDate;
        data["negative"] = this.negative;
        data["toPositive"] = this.toPositive;
        return data;
    }
}

/** 阴转阳明细 */
export interface INegativeToPositiveDetail {
    /** 标识 */
    patientId?: string | undefined;
    /** 姓名 */
    patientName?: string | undefined;
    /** 性别 */
    genderLabel?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析龄 */
    dialysisAge?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: string | undefined;
    /** 接收日期 */
    receiptDate?: string | undefined;
    /** 阴性 */
    negative?: string | undefined;
    /** 转阳 */
    toPositive?: string | undefined;
}

/** Reponse */
export class NegativeToPositiveDetailResult implements INegativeToPositiveDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: NegativeToPositiveDetail[] | undefined;

    constructor(data?: INegativeToPositiveDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(NegativeToPositiveDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): NegativeToPositiveDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new NegativeToPositiveDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface INegativeToPositiveDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: NegativeToPositiveDetail[] | undefined;
}

/** Reponse */
export class NegativeToPositiveResult implements INegativeToPositiveResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: NegativeToPositive[] | undefined;

    constructor(data?: INegativeToPositiveResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(NegativeToPositive.fromJS(item));
            }
        }
    }

    static fromJS(data: any): NegativeToPositiveResult {
        data = typeof data === 'object' ? data : {};
        let result = new NegativeToPositiveResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface INegativeToPositiveResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: NegativeToPositive[] | undefined;
}

/** 质控报表 */
export class NewQualityControlDetailView implements INewQualityControlDetailView {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 别名 */
    name2?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 入科日期 */
    receiptDate?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: string | undefined;
    /** 全名 */
    nameFull?: string | undefined;
    /** 性别显示值 */
    genderLabel?: string | undefined;
    /** 检验值 */
    result?: string | undefined;
    /** 检查日期 */
    inspectionDate?: string | undefined;
    /** Ktv */
    ktv?: number | undefined;
    /** Urr */
    urr?: number | undefined;
    /** 启用天数 */
    lifetime?: string | undefined;
    /** 上半年 */
    firstHalfYear?: string | undefined;
    /** 下半年 */
    secondHalfYear?: string | undefined;
    /** 第一季度 */
    firstQuarter?: string | undefined;
    /** 第二季度 */
    secondQuarter?: string | undefined;
    /** 第三季度 */
    thirdQuarter?: string | undefined;
    /** 第四季度 */
    forthQuarter?: string | undefined;

    constructor(data?: INewQualityControlDetailView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.gender = _data["gender"];
            this.patientId = _data["patientId"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.receiptDate = _data["receiptDate"];
            this.dialysisDateFirst = _data["dialysisDateFirst"];
            this.nameFull = _data["nameFull"];
            this.genderLabel = _data["genderLabel"];
            this.result = _data["result"];
            this.inspectionDate = _data["inspectionDate"];
            this.ktv = _data["ktv"];
            this.urr = _data["urr"];
            this.lifetime = _data["lifetime"];
            this.firstHalfYear = _data["firstHalfYear"];
            this.secondHalfYear = _data["secondHalfYear"];
            this.firstQuarter = _data["firstQuarter"];
            this.secondQuarter = _data["secondQuarter"];
            this.thirdQuarter = _data["thirdQuarter"];
            this.forthQuarter = _data["forthQuarter"];
        }
    }

    static fromJS(data: any): NewQualityControlDetailView {
        data = typeof data === 'object' ? data : {};
        let result = new NewQualityControlDetailView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["gender"] = this.gender;
        data["patientId"] = this.patientId;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["receiptDate"] = this.receiptDate;
        data["dialysisDateFirst"] = this.dialysisDateFirst;
        data["nameFull"] = this.nameFull;
        data["genderLabel"] = this.genderLabel;
        data["result"] = this.result;
        data["inspectionDate"] = this.inspectionDate;
        data["ktv"] = this.ktv;
        data["urr"] = this.urr;
        data["lifetime"] = this.lifetime;
        data["firstHalfYear"] = this.firstHalfYear;
        data["secondHalfYear"] = this.secondHalfYear;
        data["firstQuarter"] = this.firstQuarter;
        data["secondQuarter"] = this.secondQuarter;
        data["thirdQuarter"] = this.thirdQuarter;
        data["forthQuarter"] = this.forthQuarter;
        return data;
    }
}

/** 质控报表 */
export interface INewQualityControlDetailView {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 别名 */
    name2?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 入科日期 */
    receiptDate?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: string | undefined;
    /** 全名 */
    nameFull?: string | undefined;
    /** 性别显示值 */
    genderLabel?: string | undefined;
    /** 检验值 */
    result?: string | undefined;
    /** 检查日期 */
    inspectionDate?: string | undefined;
    /** Ktv */
    ktv?: number | undefined;
    /** Urr */
    urr?: number | undefined;
    /** 启用天数 */
    lifetime?: string | undefined;
    /** 上半年 */
    firstHalfYear?: string | undefined;
    /** 下半年 */
    secondHalfYear?: string | undefined;
    /** 第一季度 */
    firstQuarter?: string | undefined;
    /** 第二季度 */
    secondQuarter?: string | undefined;
    /** 第三季度 */
    thirdQuarter?: string | undefined;
    /** 第四季度 */
    forthQuarter?: string | undefined;
}

/** Reponse */
export class NewQualityControlDetailViewResult implements INewQualityControlDetailViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: NewQualityControlDetailView[] | undefined;

    constructor(data?: INewQualityControlDetailViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(NewQualityControlDetailView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): NewQualityControlDetailViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new NewQualityControlDetailViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface INewQualityControlDetailViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: NewQualityControlDetailView[] | undefined;
}

export class NewQualityControlHospitalInfectionReportView implements INewQualityControlHospitalInfectionReportView {
    year?: number;
    monthCount?: number;
    quarterCount?: number;
    monthCompletionCount?: number;
    quarterCompletionCount?: number;
    monthRate?: number | undefined;
    quarterRate?: number | undefined;
    monthCompletionRate?: number | undefined;
    quarterCompletionRate?: number | undefined;

    constructor(data?: INewQualityControlHospitalInfectionReportView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.year = _data["year"];
            this.monthCount = _data["monthCount"];
            this.quarterCount = _data["quarterCount"];
            this.monthCompletionCount = _data["monthCompletionCount"];
            this.quarterCompletionCount = _data["quarterCompletionCount"];
            this.monthRate = _data["monthRate"];
            this.quarterRate = _data["quarterRate"];
            this.monthCompletionRate = _data["monthCompletionRate"];
            this.quarterCompletionRate = _data["quarterCompletionRate"];
        }
    }

    static fromJS(data: any): NewQualityControlHospitalInfectionReportView {
        data = typeof data === 'object' ? data : {};
        let result = new NewQualityControlHospitalInfectionReportView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["year"] = this.year;
        data["monthCount"] = this.monthCount;
        data["quarterCount"] = this.quarterCount;
        data["monthCompletionCount"] = this.monthCompletionCount;
        data["quarterCompletionCount"] = this.quarterCompletionCount;
        data["monthRate"] = this.monthRate;
        data["quarterRate"] = this.quarterRate;
        data["monthCompletionRate"] = this.monthCompletionRate;
        data["quarterCompletionRate"] = this.quarterCompletionRate;
        return data;
    }
}

export interface INewQualityControlHospitalInfectionReportView {
    year?: number;
    monthCount?: number;
    quarterCount?: number;
    monthCompletionCount?: number;
    quarterCompletionCount?: number;
    monthRate?: number | undefined;
    quarterRate?: number | undefined;
    monthCompletionRate?: number | undefined;
    quarterCompletionRate?: number | undefined;
}

/** Reponse */
export class NewQualityControlHospitalInfectionReportViewResult implements INewQualityControlHospitalInfectionReportViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: NewQualityControlHospitalInfectionReportView[] | undefined;

    constructor(data?: INewQualityControlHospitalInfectionReportViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(NewQualityControlHospitalInfectionReportView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): NewQualityControlHospitalInfectionReportViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new NewQualityControlHospitalInfectionReportViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface INewQualityControlHospitalInfectionReportViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: NewQualityControlHospitalInfectionReportView[] | undefined;
}

export class NewQualityControlSpecialReportView implements INewQualityControlSpecialReportView {
    /** Id */
    id?: string | undefined;
    /** 日期 */
    date?: dayjs.Dayjs | undefined;
    /** 报表类型 */
    type?: string | undefined;
    /** 值 */
    value?: number | undefined;
    /** 值 */
    sfValue?: number | undefined;
    /** 值 */
    tsatValue?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 日期格式 */
    format?: string | undefined;
    /** 创建者标识 */
    creatorId?: string | undefined;
    /** 创建者 */
    creator?: string | undefined;
    /** 创建时间 */
    creationTime?: dayjs.Dayjs | undefined;
    /** 最后一次修改者标识 */
    lastModifierId?: string | undefined;
    /** 最后一次修改者 */
    lastModifier?: string | undefined;
    /** 最后一次修改时间 */
    lastModificationTime?: dayjs.Dayjs | undefined;
    /** 值 */
    value1?: number | undefined;
    patientCount?: number;
    finishCount?: number;
    sfFinishCount?: number;
    tsatFinishCount?: number;
    unFinishCount?: number;
    /** 年份 */
    year?: number;

    constructor(data?: INewQualityControlSpecialReportView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.value = _data["value"];
            this.sfValue = _data["sfValue"];
            this.tsatValue = _data["tsatValue"];
            this.remark = _data["remark"];
            this.format = _data["format"];
            this.creatorId = _data["creatorId"];
            this.creator = _data["creator"];
            this.creationTime = _data["creationTime"] ? dayjs(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierId = _data["lastModifierId"];
            this.lastModifier = _data["lastModifier"];
            this.lastModificationTime = _data["lastModificationTime"] ? dayjs(_data["lastModificationTime"].toString()) : <any>undefined;
            this.value1 = _data["value1"];
            this.patientCount = _data["patientCount"];
            this.finishCount = _data["finishCount"];
            this.sfFinishCount = _data["sfFinishCount"];
            this.tsatFinishCount = _data["tsatFinishCount"];
            this.unFinishCount = _data["unFinishCount"];
            this.year = _data["year"];
        }
    }

    static fromJS(data: any): NewQualityControlSpecialReportView {
        data = typeof data === 'object' ? data : {};
        let result = new NewQualityControlSpecialReportView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["type"] = this.type;
        data["value"] = this.value;
        data["sfValue"] = this.sfValue;
        data["tsatValue"] = this.tsatValue;
        data["remark"] = this.remark;
        data["format"] = this.format;
        data["creatorId"] = this.creatorId;
        data["creator"] = this.creator;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierId"] = this.lastModifierId;
        data["lastModifier"] = this.lastModifier;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["value1"] = this.value1;
        data["patientCount"] = this.patientCount;
        data["finishCount"] = this.finishCount;
        data["sfFinishCount"] = this.sfFinishCount;
        data["tsatFinishCount"] = this.tsatFinishCount;
        data["unFinishCount"] = this.unFinishCount;
        data["year"] = this.year;
        return data;
    }
}

export interface INewQualityControlSpecialReportView {
    /** Id */
    id?: string | undefined;
    /** 日期 */
    date?: dayjs.Dayjs | undefined;
    /** 报表类型 */
    type?: string | undefined;
    /** 值 */
    value?: number | undefined;
    /** 值 */
    sfValue?: number | undefined;
    /** 值 */
    tsatValue?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 日期格式 */
    format?: string | undefined;
    /** 创建者标识 */
    creatorId?: string | undefined;
    /** 创建者 */
    creator?: string | undefined;
    /** 创建时间 */
    creationTime?: dayjs.Dayjs | undefined;
    /** 最后一次修改者标识 */
    lastModifierId?: string | undefined;
    /** 最后一次修改者 */
    lastModifier?: string | undefined;
    /** 最后一次修改时间 */
    lastModificationTime?: dayjs.Dayjs | undefined;
    /** 值 */
    value1?: number | undefined;
    patientCount?: number;
    finishCount?: number;
    sfFinishCount?: number;
    tsatFinishCount?: number;
    unFinishCount?: number;
    /** 年份 */
    year?: number;
}

/** Reponse */
export class NewQualityControlSpecialReportViewResult implements INewQualityControlSpecialReportViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: NewQualityControlSpecialReportView[] | undefined;

    constructor(data?: INewQualityControlSpecialReportViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(NewQualityControlSpecialReportView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): NewQualityControlSpecialReportViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new NewQualityControlSpecialReportViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface INewQualityControlSpecialReportViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: NewQualityControlSpecialReportView[] | undefined;
}

/** 管理类 - 护士工作量详细统计 */
export class NurseWorkLoadDetail implements INurseWorkLoadDetail {
    /** 工作时间 */
    wrokTime?: dayjs.Dayjs | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 姓名 */
    jobNumber?: string | undefined;
    /** 工号 */
    tel?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 工作类型 */
    wrokType?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者Id */
    patientId?: string | undefined;

    constructor(data?: INurseWorkLoadDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.wrokTime = _data["wrokTime"] ? dayjs(_data["wrokTime"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.jobNumber = _data["jobNumber"];
            this.tel = _data["tel"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.wrokType = _data["wrokType"];
            this.patientName = _data["patientName"];
            this.patientId = _data["patientId"];
        }
    }

    static fromJS(data: any): NurseWorkLoadDetail {
        data = typeof data === 'object' ? data : {};
        let result = new NurseWorkLoadDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["wrokTime"] = this.wrokTime ? this.wrokTime.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["jobNumber"] = this.jobNumber;
        data["tel"] = this.tel;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["wrokType"] = this.wrokType;
        data["patientName"] = this.patientName;
        data["patientId"] = this.patientId;
        return data;
    }
}

/** 管理类 - 护士工作量详细统计 */
export interface INurseWorkLoadDetail {
    /** 工作时间 */
    wrokTime?: dayjs.Dayjs | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 姓名 */
    jobNumber?: string | undefined;
    /** 工号 */
    tel?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 工作类型 */
    wrokType?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者Id */
    patientId?: string | undefined;
}

/** Reponse */
export class NurseWorkLoadDetailResult implements INurseWorkLoadDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: NurseWorkLoadDetail[] | undefined;

    constructor(data?: INurseWorkLoadDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(NurseWorkLoadDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): NurseWorkLoadDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new NurseWorkLoadDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface INurseWorkLoadDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: NurseWorkLoadDetail[] | undefined;
}

/** Reponse */
export class ObjectResult implements IObjectResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: any[] | undefined;

    constructor(data?: IObjectResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(item);
            }
        }
    }

    static fromJS(data: any): ObjectResult {
        data = typeof data === 'object' ? data : {};
        let result = new ObjectResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item);
        }
        return data;
    }
}

/** Reponse */
export interface IObjectResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: any[] | undefined;
}

/** 报表 - 患者 - 年龄 */
export class PatientAge implements IPatientAge {
    total?: number;
    /** 比例 */
    readonly ratio?: string | undefined;
    /** 年龄段 */
    ageLabel?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: IPatientAge) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total = _data["total"];
            (<any>this).ratio = _data["ratio"];
            this.ageLabel = _data["ageLabel"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): PatientAge {
        data = typeof data === 'object' ? data : {};
        let result = new PatientAge();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total;
        data["ratio"] = this.ratio;
        data["ageLabel"] = this.ageLabel;
        data["count"] = this.count;
        return data;
    }
}

/** 报表 - 患者 - 年龄 */
export interface IPatientAge {
    total?: number;
    /** 比例 */
    ratio?: string | undefined;
    /** 年龄段 */
    ageLabel?: string | undefined;
    /** 数量 */
    count?: number;
}

/** 报表 - 患者 - 年龄 - 详情 */
export class PatientAgeDetail implements IPatientAgeDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;

    constructor(data?: IPatientAgeDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
        }
    }

    static fromJS(data: any): PatientAgeDetail {
        data = typeof data === 'object' ? data : {};
        let result = new PatientAgeDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        return data;
    }
}

/** 报表 - 患者 - 年龄 - 详情 */
export interface IPatientAgeDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
}

/** Reponse */
export class PatientAgeDetailResult implements IPatientAgeDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientAgeDetail[] | undefined;

    constructor(data?: IPatientAgeDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientAgeDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientAgeDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientAgeDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientAgeDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientAgeDetail[] | undefined;
}

/** Reponse */
export class PatientAgeResult implements IPatientAgeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientAge[] | undefined;

    constructor(data?: IPatientAgeResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientAge.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientAgeResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientAgeResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientAgeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientAge[] | undefined;
}

/** 报表 - 患者 - 阶段评估 */
export class PatientAppraise implements IPatientAppraise {
    /** 姓名 */
    name?: string | undefined;
    /** 性别显示值 */
    genderLabel?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 结论 */
    conclusion?: string | undefined;

    constructor(data?: IPatientAppraise) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.genderLabel = _data["genderLabel"];
            this.age = _data["age"];
            this.conclusion = _data["conclusion"];
        }
    }

    static fromJS(data: any): PatientAppraise {
        data = typeof data === 'object' ? data : {};
        let result = new PatientAppraise();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["genderLabel"] = this.genderLabel;
        data["age"] = this.age;
        data["conclusion"] = this.conclusion;
        return data;
    }
}

/** 报表 - 患者 - 阶段评估 */
export interface IPatientAppraise {
    /** 姓名 */
    name?: string | undefined;
    /** 性别显示值 */
    genderLabel?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 结论 */
    conclusion?: string | undefined;
}

/** Reponse */
export class PatientAppraiseResult implements IPatientAppraiseResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientAppraise[] | undefined;

    constructor(data?: IPatientAppraiseResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientAppraise.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientAppraiseResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientAppraiseResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientAppraiseResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientAppraise[] | undefined;
}

/** 报表 - 患者 - 血压 */
export class PatientBloodPressure implements IPatientBloodPressure {
    /** 区间 */
    bpLabel?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: IPatientBloodPressure) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.bpLabel = _data["bpLabel"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): PatientBloodPressure {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBloodPressure();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bpLabel"] = this.bpLabel;
        data["count"] = this.count;
        return data;
    }
}

/** 报表 - 患者 - 血压 */
export interface IPatientBloodPressure {
    /** 区间 */
    bpLabel?: string | undefined;
    /** 数量 */
    count?: number;
}

/** 报表 - 患者 - 血压 - 详情 */
export class PatientBloodPressureDetail implements IPatientBloodPressureDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析记录单标识 */
    cureRecordId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 测量时间 */
    measureTime?: dayjs.Dayjs;
    /** 收缩压 */
    sbp?: number | undefined;
    /** 舒张压 */
    dbp?: number | undefined;
    /** 脉搏 */
    pulse?: number | undefined;
    /** 患者姓名 */
    readonly patientName?: string | undefined;

    constructor(data?: IPatientBloodPressureDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.cureRecordId = _data["cureRecordId"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.measureTime = _data["measureTime"] ? dayjs(_data["measureTime"].toString()) : <any>undefined;
            this.sbp = _data["sbp"];
            this.dbp = _data["dbp"];
            this.pulse = _data["pulse"];
            (<any>this).patientName = _data["patientName"];
        }
    }

    static fromJS(data: any): PatientBloodPressureDetail {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBloodPressureDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["cureRecordId"] = this.cureRecordId;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["measureTime"] = this.measureTime ? this.measureTime.toISOString() : <any>undefined;
        data["sbp"] = this.sbp;
        data["dbp"] = this.dbp;
        data["pulse"] = this.pulse;
        data["patientName"] = this.patientName;
        return data;
    }
}

/** 报表 - 患者 - 血压 - 详情 */
export interface IPatientBloodPressureDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析记录单标识 */
    cureRecordId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 测量时间 */
    measureTime?: dayjs.Dayjs;
    /** 收缩压 */
    sbp?: number | undefined;
    /** 舒张压 */
    dbp?: number | undefined;
    /** 脉搏 */
    pulse?: number | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
}

/** Reponse */
export class PatientBloodPressureDetailResult implements IPatientBloodPressureDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBloodPressureDetail[] | undefined;

    constructor(data?: IPatientBloodPressureDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientBloodPressureDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientBloodPressureDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBloodPressureDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientBloodPressureDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBloodPressureDetail[] | undefined;
}

/** Reponse */
export class PatientBloodPressureResult implements IPatientBloodPressureResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBloodPressure[] | undefined;

    constructor(data?: IPatientBloodPressureResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientBloodPressure.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientBloodPressureResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBloodPressureResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientBloodPressureResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBloodPressure[] | undefined;
}

/** 血压指标 */
export class PatientBloodPressureTarget implements IPatientBloodPressureTarget {
    /** 血压范围 */
    bpLabel?: string | undefined;
    /** 透前血压数量 */
    beforeCount?: number;
    /** 透后血压数量 */
    afterCount?: number;

    constructor(data?: IPatientBloodPressureTarget) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.bpLabel = _data["bpLabel"];
            this.beforeCount = _data["beforeCount"];
            this.afterCount = _data["afterCount"];
        }
    }

    static fromJS(data: any): PatientBloodPressureTarget {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBloodPressureTarget();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bpLabel"] = this.bpLabel;
        data["beforeCount"] = this.beforeCount;
        data["afterCount"] = this.afterCount;
        return data;
    }
}

/** 血压指标 */
export interface IPatientBloodPressureTarget {
    /** 血压范围 */
    bpLabel?: string | undefined;
    /** 透前血压数量 */
    beforeCount?: number;
    /** 透后血压数量 */
    afterCount?: number;
}

/** Reponse */
export class PatientBloodPressureTargetResult implements IPatientBloodPressureTargetResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBloodPressureTarget[] | undefined;

    constructor(data?: IPatientBloodPressureTargetResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientBloodPressureTarget.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientBloodPressureTargetResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBloodPressureTargetResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientBloodPressureTargetResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBloodPressureTarget[] | undefined;
}

export class PatientComplication implements IPatientComplication {
    total?: number;
    /** 比例 */
    readonly ratio?: string | undefined;
    /** 并发症 */
    complication?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: IPatientComplication) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total = _data["total"];
            (<any>this).ratio = _data["ratio"];
            this.complication = _data["complication"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): PatientComplication {
        data = typeof data === 'object' ? data : {};
        let result = new PatientComplication();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total;
        data["ratio"] = this.ratio;
        data["complication"] = this.complication;
        data["count"] = this.count;
        return data;
    }
}

export interface IPatientComplication {
    total?: number;
    /** 比例 */
    ratio?: string | undefined;
    /** 并发症 */
    complication?: string | undefined;
    /** 数量 */
    count?: number;
}

export class PatientComplicationDetail implements IPatientComplicationDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 并发症 */
    complication?: string | undefined;
    /** 来源 */
    source?: string | undefined;

    constructor(data?: IPatientComplicationDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.complication = _data["complication"];
            this.source = _data["source"];
        }
    }

    static fromJS(data: any): PatientComplicationDetail {
        data = typeof data === 'object' ? data : {};
        let result = new PatientComplicationDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["complication"] = this.complication;
        data["source"] = this.source;
        return data;
    }
}

export interface IPatientComplicationDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 并发症 */
    complication?: string | undefined;
    /** 来源 */
    source?: string | undefined;
}

/** Reponse */
export class PatientComplicationDetailResult implements IPatientComplicationDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientComplicationDetail[] | undefined;

    constructor(data?: IPatientComplicationDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientComplicationDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientComplicationDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientComplicationDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientComplicationDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientComplicationDetail[] | undefined;
}

/** Reponse */
export class PatientComplicationResult implements IPatientComplicationResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientComplication[] | undefined;

    constructor(data?: IPatientComplicationResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientComplication.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientComplicationResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientComplicationResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientComplicationResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientComplication[] | undefined;
}

/** 患者透析记录单 */
export class PatientCureRecordView implements IPatientCureRecordView {
    id?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 体重增长 */
    increaseWeight?: number | undefined;
    /** 体重增长率 */
    increaseWeightRate?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 透前透后体重差 */
    weightDifference?: number | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透后收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 透后舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 透后脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel?: string | undefined;
    /** 透析时长 */
    dialysisDurationFact?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 耗材-透析器名称 */
    roomItemListTXQLabel?: string | undefined;
    /** 耗材-灌流器名称 */
    roomItemListGLQLabel?: string | undefined;
    /** 耗材-血滤器名称 */
    roomItemListXLQLabel?: string | undefined;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    first?: number | undefined;
    /** 普通肝素追加 */
    ufhApped?: number | undefined;
    /** 血管通路类型 */
    patientVascularAccessType?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 并发症名称 */
    complicationName?: string | undefined;

    constructor(data?: IPatientCureRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.dialysisMachineNo = _data["dialysisMachineNo"];
            this.bestWeight = _data["bestWeight"];
            this.beforeWeight = _data["beforeWeight"];
            this.increaseWeight = _data["increaseWeight"];
            this.increaseWeightRate = _data["increaseWeightRate"];
            this.afterWeight = _data["afterWeight"];
            this.ufg = _data["ufg"];
            this.ufv = _data["ufv"];
            this.weightDifference = _data["weightDifference"];
            this.beforeSbp = _data["beforeSbp"];
            this.beforeDbp = _data["beforeDbp"];
            this.beforePulse = _data["beforePulse"];
            this.afterSbp = _data["afterSbp"];
            this.afterDbp = _data["afterDbp"];
            this.afterPulse = _data["afterPulse"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.dialysisDurationFact = _data["dialysisDurationFact"];
            this.cond = _data["cond"];
            this.roomItemListTXQLabel = _data["roomItemListTXQLabel"];
            this.roomItemListGLQLabel = _data["roomItemListGLQLabel"];
            this.roomItemListXLQLabel = _data["roomItemListXLQLabel"];
            this.anticoagulantName = _data["anticoagulantName"];
            this.first = _data["first"];
            this.ufhApped = _data["ufhApped"];
            this.patientVascularAccessType = _data["patientVascularAccessType"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.complicationName = _data["complicationName"];
        }
    }

    static fromJS(data: any): PatientCureRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientCureRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["dialysisMachineNo"] = this.dialysisMachineNo;
        data["bestWeight"] = this.bestWeight;
        data["beforeWeight"] = this.beforeWeight;
        data["increaseWeight"] = this.increaseWeight;
        data["increaseWeightRate"] = this.increaseWeightRate;
        data["afterWeight"] = this.afterWeight;
        data["ufg"] = this.ufg;
        data["ufv"] = this.ufv;
        data["weightDifference"] = this.weightDifference;
        data["beforeSbp"] = this.beforeSbp;
        data["beforeDbp"] = this.beforeDbp;
        data["beforePulse"] = this.beforePulse;
        data["afterSbp"] = this.afterSbp;
        data["afterDbp"] = this.afterDbp;
        data["afterPulse"] = this.afterPulse;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["dialysisDurationFact"] = this.dialysisDurationFact;
        data["cond"] = this.cond;
        data["roomItemListTXQLabel"] = this.roomItemListTXQLabel;
        data["roomItemListGLQLabel"] = this.roomItemListGLQLabel;
        data["roomItemListXLQLabel"] = this.roomItemListXLQLabel;
        data["anticoagulantName"] = this.anticoagulantName;
        data["first"] = this.first;
        data["ufhApped"] = this.ufhApped;
        data["patientVascularAccessType"] = this.patientVascularAccessType;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["complicationName"] = this.complicationName;
        return data;
    }
}

/** 患者透析记录单 */
export interface IPatientCureRecordView {
    id?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 体重增长 */
    increaseWeight?: number | undefined;
    /** 体重增长率 */
    increaseWeightRate?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 透前透后体重差 */
    weightDifference?: number | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透后收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 透后舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 透后脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel?: string | undefined;
    /** 透析时长 */
    dialysisDurationFact?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 耗材-透析器名称 */
    roomItemListTXQLabel?: string | undefined;
    /** 耗材-灌流器名称 */
    roomItemListGLQLabel?: string | undefined;
    /** 耗材-血滤器名称 */
    roomItemListXLQLabel?: string | undefined;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    first?: number | undefined;
    /** 普通肝素追加 */
    ufhApped?: number | undefined;
    /** 血管通路类型 */
    patientVascularAccessType?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 并发症名称 */
    complicationName?: string | undefined;
}

/** Reponse */
export class PatientCureRecordViewResult implements IPatientCureRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientCureRecordView[] | undefined;

    constructor(data?: IPatientCureRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientCureRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientCureRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientCureRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientCureRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientCureRecordView[] | undefined;
}

export class PatientDataView implements IPatientDataView {
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 转入日期 */
    inDate?: string | undefined;
    /** 检测时间 */
    nextTime?: string | undefined;
    /** 是否逾期 */
    isOverdue?: boolean;
    /** 转归状态 */
    prognosisState?: string | undefined;
    /** 转出时间 */
    outDate?: string | undefined;

    constructor(data?: IPatientDataView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.inDate = _data["inDate"];
            this.nextTime = _data["nextTime"];
            this.isOverdue = _data["isOverdue"];
            this.prognosisState = _data["prognosisState"];
            this.outDate = _data["outDate"];
        }
    }

    static fromJS(data: any): PatientDataView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDataView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["inDate"] = this.inDate;
        data["nextTime"] = this.nextTime;
        data["isOverdue"] = this.isOverdue;
        data["prognosisState"] = this.prognosisState;
        data["outDate"] = this.outDate;
        return data;
    }
}

export interface IPatientDataView {
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 转入日期 */
    inDate?: string | undefined;
    /** 检测时间 */
    nextTime?: string | undefined;
    /** 是否逾期 */
    isOverdue?: boolean;
    /** 转归状态 */
    prognosisState?: string | undefined;
    /** 转出时间 */
    outDate?: string | undefined;
}

/** Reponse */
export class PatientDataViewResult implements IPatientDataViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDataView[] | undefined;

    constructor(data?: IPatientDataViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientDataView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientDataViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDataViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientDataViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDataView[] | undefined;
}

/** 报表 - 患者 - 死亡 */
export class PatientDeath implements IPatientDeath {
    /** 日期 */
    date?: string | undefined;
    /** 数量 */
    count?: number;
    /** 患者死亡率 */
    deathRate?: number;

    constructor(data?: IPatientDeath) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.count = _data["count"];
            this.deathRate = _data["deathRate"];
        }
    }

    static fromJS(data: any): PatientDeath {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDeath();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["count"] = this.count;
        data["deathRate"] = this.deathRate;
        return data;
    }
}

/** 报表 - 患者 - 死亡 */
export interface IPatientDeath {
    /** 日期 */
    date?: string | undefined;
    /** 数量 */
    count?: number;
    /** 患者死亡率 */
    deathRate?: number;
}

/** 报表 - 患者 - 死亡原因 */
export class PatientDeathCause implements IPatientDeathCause {
    total?: number;
    /** 比例 */
    readonly ratio?: string | undefined;
    /** 死亡原因 */
    cause?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: IPatientDeathCause) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total = _data["total"];
            (<any>this).ratio = _data["ratio"];
            this.cause = _data["cause"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): PatientDeathCause {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDeathCause();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total;
        data["ratio"] = this.ratio;
        data["cause"] = this.cause;
        data["count"] = this.count;
        return data;
    }
}

/** 报表 - 患者 - 死亡原因 */
export interface IPatientDeathCause {
    total?: number;
    /** 比例 */
    ratio?: string | undefined;
    /** 死亡原因 */
    cause?: string | undefined;
    /** 数量 */
    count?: number;
}

/** 报表 - 患者 - 死亡原因 - 详情 */
export class PatientDeathCauseDetail implements IPatientDeathCauseDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 死亡原因 */
    cause?: string | undefined;
    /** 转归日期 */
    date?: dayjs.Dayjs;

    constructor(data?: IPatientDeathCauseDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.cause = _data["cause"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDeathCauseDetail {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDeathCauseDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["cause"] = this.cause;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        return data;
    }
}

/** 报表 - 患者 - 死亡原因 - 详情 */
export interface IPatientDeathCauseDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 死亡原因 */
    cause?: string | undefined;
    /** 转归日期 */
    date?: dayjs.Dayjs;
}

/** Reponse */
export class PatientDeathCauseDetailResult implements IPatientDeathCauseDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDeathCauseDetail[] | undefined;

    constructor(data?: IPatientDeathCauseDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientDeathCauseDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientDeathCauseDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDeathCauseDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientDeathCauseDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDeathCauseDetail[] | undefined;
}

/** Reponse */
export class PatientDeathCauseResult implements IPatientDeathCauseResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDeathCause[] | undefined;

    constructor(data?: IPatientDeathCauseResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientDeathCause.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientDeathCauseResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDeathCauseResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientDeathCauseResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDeathCause[] | undefined;
}

/** 报表 - 患者 - 死亡 - 详情 */
export class PatientDeathDetail implements IPatientDeathDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 死亡日期 */
    date?: dayjs.Dayjs;
    /** 死亡原因 */
    cause?: string | undefined;

    constructor(data?: IPatientDeathDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.cause = _data["cause"];
        }
    }

    static fromJS(data: any): PatientDeathDetail {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDeathDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["cause"] = this.cause;
        return data;
    }
}

/** 报表 - 患者 - 死亡 - 详情 */
export interface IPatientDeathDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 死亡日期 */
    date?: dayjs.Dayjs;
    /** 死亡原因 */
    cause?: string | undefined;
}

/** Reponse */
export class PatientDeathDetailResult implements IPatientDeathDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDeathDetail[] | undefined;

    constructor(data?: IPatientDeathDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientDeathDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientDeathDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDeathDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientDeathDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDeathDetail[] | undefined;
}

/** Reponse */
export class PatientDeathResult implements IPatientDeathResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDeath[] | undefined;

    constructor(data?: IPatientDeathResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientDeath.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientDeathResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDeathResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientDeathResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDeath[] | undefined;
}

/** 患者详情 */
export class PatientDetail implements IPatientDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;

    constructor(data?: IPatientDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
        }
    }

    static fromJS(data: any): PatientDetail {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        return data;
    }
}

/** 患者详情 */
export interface IPatientDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
}

/** Reponse */
export class PatientDetailResult implements IPatientDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDetail[] | undefined;

    constructor(data?: IPatientDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDetail[] | undefined;
}

/** 报表 - 患者 - 诊断统计 */
export class PatientDiagnosis implements IPatientDiagnosis {
    /** 诊断类型 */
    diagnosis?: string | undefined;
    /** 疾病种类显示值 */
    typeLabel?: string | undefined;
    /** 数量 */
    count?: number;
    /** 不详 */
    unknow?: number;

    constructor(data?: IPatientDiagnosis) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.diagnosis = _data["diagnosis"];
            this.typeLabel = _data["typeLabel"];
            this.count = _data["count"];
            this.unknow = _data["unknow"];
        }
    }

    static fromJS(data: any): PatientDiagnosis {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosis();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["diagnosis"] = this.diagnosis;
        data["typeLabel"] = this.typeLabel;
        data["count"] = this.count;
        data["unknow"] = this.unknow;
        return data;
    }
}

/** 报表 - 患者 - 诊断统计 */
export interface IPatientDiagnosis {
    /** 诊断类型 */
    diagnosis?: string | undefined;
    /** 疾病种类显示值 */
    typeLabel?: string | undefined;
    /** 数量 */
    count?: number;
    /** 不详 */
    unknow?: number;
}

/** 报表 - 患者 - 诊断统计 - 详情 */
export class PatientDiagnosisDetail implements IPatientDiagnosisDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 诊断时间 */
    date?: string | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 诊断类型 */
    diagnosis?: string | undefined;
    /** 诊断分类 */
    type?: string | undefined;
    /** 患者来源显示值 */
    source?: string | undefined;

    constructor(data?: IPatientDiagnosisDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.date = _data["date"];
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.diagnosis = _data["diagnosis"];
            this.type = _data["type"];
            this.source = _data["source"];
        }
    }

    static fromJS(data: any): PatientDiagnosisDetail {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["date"] = this.date;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["diagnosis"] = this.diagnosis;
        data["type"] = this.type;
        data["source"] = this.source;
        return data;
    }
}

/** 报表 - 患者 - 诊断统计 - 详情 */
export interface IPatientDiagnosisDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 诊断时间 */
    date?: string | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 诊断类型 */
    diagnosis?: string | undefined;
    /** 诊断分类 */
    type?: string | undefined;
    /** 患者来源显示值 */
    source?: string | undefined;
}

/** 报表 - 患者 - 诊断统计 - 详情 */
export class PatientDiagnosisDetailNew implements IPatientDiagnosisDetailNew {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 诊断类型 */
    diagnosis?: string | undefined;
    /** 疾病相关并发症 */
    complication?: string | undefined;

    constructor(data?: IPatientDiagnosisDetailNew) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.diagnosis = _data["diagnosis"];
            this.complication = _data["complication"];
        }
    }

    static fromJS(data: any): PatientDiagnosisDetailNew {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisDetailNew();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["diagnosis"] = this.diagnosis;
        data["complication"] = this.complication;
        return data;
    }
}

/** 报表 - 患者 - 诊断统计 - 详情 */
export interface IPatientDiagnosisDetailNew {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 诊断类型 */
    diagnosis?: string | undefined;
    /** 疾病相关并发症 */
    complication?: string | undefined;
}

/** Reponse */
export class PatientDiagnosisDetailNewResult implements IPatientDiagnosisDetailNewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDiagnosisDetailNew[] | undefined;

    constructor(data?: IPatientDiagnosisDetailNewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientDiagnosisDetailNew.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientDiagnosisDetailNewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisDetailNewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientDiagnosisDetailNewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDiagnosisDetailNew[] | undefined;
}

/** Reponse */
export class PatientDiagnosisDetailResult implements IPatientDiagnosisDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDiagnosisDetail[] | undefined;

    constructor(data?: IPatientDiagnosisDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientDiagnosisDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientDiagnosisDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientDiagnosisDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDiagnosisDetail[] | undefined;
}

/** 报表 - 患者 - 诊断统计 */
export class PatientDiagnosisNew implements IPatientDiagnosisNew {
    total?: number;
    /** 比例 */
    readonly ratio?: string | undefined;
    /** 诊断类型 */
    diagnosis?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: IPatientDiagnosisNew) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total = _data["total"];
            (<any>this).ratio = _data["ratio"];
            this.diagnosis = _data["diagnosis"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): PatientDiagnosisNew {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisNew();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total;
        data["ratio"] = this.ratio;
        data["diagnosis"] = this.diagnosis;
        data["count"] = this.count;
        return data;
    }
}

/** 报表 - 患者 - 诊断统计 */
export interface IPatientDiagnosisNew {
    total?: number;
    /** 比例 */
    ratio?: string | undefined;
    /** 诊断类型 */
    diagnosis?: string | undefined;
    /** 数量 */
    count?: number;
}

/** Reponse */
export class PatientDiagnosisNewResult implements IPatientDiagnosisNewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDiagnosisNew[] | undefined;

    constructor(data?: IPatientDiagnosisNewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientDiagnosisNew.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientDiagnosisNewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisNewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientDiagnosisNewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDiagnosisNew[] | undefined;
}

/** Reponse */
export class PatientDiagnosisResult implements IPatientDiagnosisResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDiagnosis[] | undefined;

    constructor(data?: IPatientDiagnosisResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientDiagnosis.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientDiagnosisResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientDiagnosisResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDiagnosis[] | undefined;
}

/** 报表 - 患者 - 透析龄 */
export class PatientDialysisAge implements IPatientDialysisAge {
    total?: number;
    /** 比例 */
    readonly ratio?: string | undefined;
    /** 透析龄段 */
    dialysisAge?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: IPatientDialysisAge) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total = _data["total"];
            (<any>this).ratio = _data["ratio"];
            this.dialysisAge = _data["dialysisAge"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): PatientDialysisAge {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDialysisAge();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total;
        data["ratio"] = this.ratio;
        data["dialysisAge"] = this.dialysisAge;
        data["count"] = this.count;
        return data;
    }
}

/** 报表 - 患者 - 透析龄 */
export interface IPatientDialysisAge {
    total?: number;
    /** 比例 */
    ratio?: string | undefined;
    /** 透析龄段 */
    dialysisAge?: string | undefined;
    /** 数量 */
    count?: number;
}

/** 报表 - 患者 - 透析龄 - 详情 */
export class PatientDialysisAgeDetail implements IPatientDialysisAgeDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;

    constructor(data?: IPatientDialysisAgeDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
        }
    }

    static fromJS(data: any): PatientDialysisAgeDetail {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDialysisAgeDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        return data;
    }
}

/** 报表 - 患者 - 透析龄 - 详情 */
export interface IPatientDialysisAgeDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
}

/** Reponse */
export class PatientDialysisAgeDetailResult implements IPatientDialysisAgeDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDialysisAgeDetail[] | undefined;

    constructor(data?: IPatientDialysisAgeDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientDialysisAgeDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientDialysisAgeDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDialysisAgeDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientDialysisAgeDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDialysisAgeDetail[] | undefined;
}

/** Reponse */
export class PatientDialysisAgeResult implements IPatientDialysisAgeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDialysisAge[] | undefined;

    constructor(data?: IPatientDialysisAgeResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientDialysisAge.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientDialysisAgeResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDialysisAgeResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientDialysisAgeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDialysisAge[] | undefined;
}

export class PatientDialysisCondition implements IPatientDialysisCondition {
    /** 序号 */
    index?: number;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 姓名 */
    patientName?: string | undefined;
    /** 就诊号 */
    visitNumber?: string | undefined;
    /** 透析次数 */
    dialysisCount?: number;
    /** 血管通路类型 */
    vascularAccessType?: string | undefined;
    /** 血管通路导管穿刺部位 */
    vascularAccessPuncturePosition?: string | undefined;
    /** 明细 */
    patientDialysisDetails?: PatientDialysisDetail[] | undefined;
    infectEventMonitorSummary?: PatientDialysisSummary;

    constructor(data?: IPatientDialysisCondition) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.index = _data["index"];
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.visitNumber = _data["visitNumber"];
            this.dialysisCount = _data["dialysisCount"];
            this.vascularAccessType = _data["vascularAccessType"];
            this.vascularAccessPuncturePosition = _data["vascularAccessPuncturePosition"];
            if (Array.isArray(_data["patientDialysisDetails"])) {
                this.patientDialysisDetails = [] as any;
                for (let item of _data["patientDialysisDetails"])
                    this.patientDialysisDetails!.push(PatientDialysisDetail.fromJS(item));
            }
            this.infectEventMonitorSummary = _data["infectEventMonitorSummary"] ? PatientDialysisSummary.fromJS(_data["infectEventMonitorSummary"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDialysisCondition {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDialysisCondition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["index"] = this.index;
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["visitNumber"] = this.visitNumber;
        data["dialysisCount"] = this.dialysisCount;
        data["vascularAccessType"] = this.vascularAccessType;
        data["vascularAccessPuncturePosition"] = this.vascularAccessPuncturePosition;
        if (Array.isArray(this.patientDialysisDetails)) {
            data["patientDialysisDetails"] = [];
            for (let item of this.patientDialysisDetails)
                data["patientDialysisDetails"].push(item.toJSON());
        }
        data["infectEventMonitorSummary"] = this.infectEventMonitorSummary ? this.infectEventMonitorSummary.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPatientDialysisCondition {
    /** 序号 */
    index?: number;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 姓名 */
    patientName?: string | undefined;
    /** 就诊号 */
    visitNumber?: string | undefined;
    /** 透析次数 */
    dialysisCount?: number;
    /** 血管通路类型 */
    vascularAccessType?: string | undefined;
    /** 血管通路导管穿刺部位 */
    vascularAccessPuncturePosition?: string | undefined;
    /** 明细 */
    patientDialysisDetails?: PatientDialysisDetail[] | undefined;
    infectEventMonitorSummary?: PatientDialysisSummary;
}

/** 是否发生明细 */
export class PatientDialysisDetail implements IPatientDialysisDetail {
    /** 患者感染事件监测表标识 */
    patientInfectEventMonitorId?: string | undefined;
    /** 是否发生 */
    isHappen?: string | undefined;
    /** 发生日期 */
    happenDate?: string | undefined;

    constructor(data?: IPatientDialysisDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientInfectEventMonitorId = _data["patientInfectEventMonitorId"];
            this.isHappen = _data["isHappen"];
            this.happenDate = _data["happenDate"];
        }
    }

    static fromJS(data: any): PatientDialysisDetail {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDialysisDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientInfectEventMonitorId"] = this.patientInfectEventMonitorId;
        data["isHappen"] = this.isHappen;
        data["happenDate"] = this.happenDate;
        return data;
    }
}

/** 是否发生明细 */
export interface IPatientDialysisDetail {
    /** 患者感染事件监测表标识 */
    patientInfectEventMonitorId?: string | undefined;
    /** 是否发生 */
    isHappen?: string | undefined;
    /** 发生日期 */
    happenDate?: string | undefined;
}

/** 血管通路汇总 */
export class PatientDialysisSummary implements IPatientDialysisSummary {
    /** 血管通路类型 */
    vascularAccessTypes?: { [key: string]: number; } | undefined;
    /** 导管穿刺部位 */
    vascularAccessPuncturePositions?: { [key: string]: number; } | undefined;

    constructor(data?: IPatientDialysisSummary) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["vascularAccessTypes"]) {
                this.vascularAccessTypes = {} as any;
                for (let key in _data["vascularAccessTypes"]) {
                    if (_data["vascularAccessTypes"].hasOwnProperty(key))
                        (<any>this.vascularAccessTypes)![key] = _data["vascularAccessTypes"][key];
                }
            }
            if (_data["vascularAccessPuncturePositions"]) {
                this.vascularAccessPuncturePositions = {} as any;
                for (let key in _data["vascularAccessPuncturePositions"]) {
                    if (_data["vascularAccessPuncturePositions"].hasOwnProperty(key))
                        (<any>this.vascularAccessPuncturePositions)![key] = _data["vascularAccessPuncturePositions"][key];
                }
            }
        }
    }

    static fromJS(data: any): PatientDialysisSummary {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDialysisSummary();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.vascularAccessTypes) {
            data["vascularAccessTypes"] = {};
            for (let key in this.vascularAccessTypes) {
                if (this.vascularAccessTypes.hasOwnProperty(key))
                    (<any>data["vascularAccessTypes"])[key] = (<any>this.vascularAccessTypes)[key];
            }
        }
        if (this.vascularAccessPuncturePositions) {
            data["vascularAccessPuncturePositions"] = {};
            for (let key in this.vascularAccessPuncturePositions) {
                if (this.vascularAccessPuncturePositions.hasOwnProperty(key))
                    (<any>data["vascularAccessPuncturePositions"])[key] = (<any>this.vascularAccessPuncturePositions)[key];
            }
        }
        return data;
    }
}

/** 血管通路汇总 */
export interface IPatientDialysisSummary {
    /** 血管通路类型 */
    vascularAccessTypes?: { [key: string]: number; } | undefined;
    /** 导管穿刺部位 */
    vascularAccessPuncturePositions?: { [key: string]: number; } | undefined;
}

export class PatientDialysisView implements IPatientDialysisView {
    /** 透析情况 */
    patientDialysisConditions?: PatientDialysisCondition[] | undefined;
    patientDialysisSummary?: PatientDialysisSummary;

    constructor(data?: IPatientDialysisView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["patientDialysisConditions"])) {
                this.patientDialysisConditions = [] as any;
                for (let item of _data["patientDialysisConditions"])
                    this.patientDialysisConditions!.push(PatientDialysisCondition.fromJS(item));
            }
            this.patientDialysisSummary = _data["patientDialysisSummary"] ? PatientDialysisSummary.fromJS(_data["patientDialysisSummary"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDialysisView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDialysisView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.patientDialysisConditions)) {
            data["patientDialysisConditions"] = [];
            for (let item of this.patientDialysisConditions)
                data["patientDialysisConditions"].push(item.toJSON());
        }
        data["patientDialysisSummary"] = this.patientDialysisSummary ? this.patientDialysisSummary.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPatientDialysisView {
    /** 透析情况 */
    patientDialysisConditions?: PatientDialysisCondition[] | undefined;
    patientDialysisSummary?: PatientDialysisSummary;
}

/** Reponse */
export class PatientDialysisViewResultEntry implements IPatientDialysisViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDialysisView;

    constructor(data?: IPatientDialysisViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientDialysisView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDialysisViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDialysisViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientDialysisViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDialysisView;
}

/** 报表 - 患者 - 干体重 - 详情 */
export class PatientDryWeight implements IPatientDryWeight {
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    genderLabel?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 干体重 *kg* */
    bestWeight?: number;
    /** 测量时间 */
    measureTime?: dayjs.Dayjs;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientDryWeight) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.genderLabel = _data["genderLabel"];
            this.age = _data["age"];
            this.bestWeight = _data["bestWeight"];
            this.measureTime = _data["measureTime"] ? dayjs(_data["measureTime"].toString()) : <any>undefined;
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDryWeight {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDryWeight();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["genderLabel"] = this.genderLabel;
        data["age"] = this.age;
        data["bestWeight"] = this.bestWeight;
        data["measureTime"] = this.measureTime ? this.measureTime.toISOString() : <any>undefined;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        return data;
    }
}

/** 报表 - 患者 - 干体重 - 详情 */
export interface IPatientDryWeight {
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    genderLabel?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 干体重 *kg* */
    bestWeight?: number;
    /** 测量时间 */
    measureTime?: dayjs.Dayjs;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientDryWeightResult implements IPatientDryWeightResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDryWeight[] | undefined;

    constructor(data?: IPatientDryWeightResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientDryWeight.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientDryWeightResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDryWeightResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientDryWeightResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDryWeight[] | undefined;
}

/** 报表 - 患者 - 学历 */
export class PatientEducationalLevel implements IPatientEducationalLevel {
    total?: number;
    /** 比例 */
    readonly ratio?: string | undefined;
    /** 学历 */
    educationalLevel?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: IPatientEducationalLevel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total = _data["total"];
            (<any>this).ratio = _data["ratio"];
            this.educationalLevel = _data["educationalLevel"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): PatientEducationalLevel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientEducationalLevel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total;
        data["ratio"] = this.ratio;
        data["educationalLevel"] = this.educationalLevel;
        data["count"] = this.count;
        return data;
    }
}

/** 报表 - 患者 - 学历 */
export interface IPatientEducationalLevel {
    total?: number;
    /** 比例 */
    ratio?: string | undefined;
    /** 学历 */
    educationalLevel?: string | undefined;
    /** 数量 */
    count?: number;
}

/** 报表 - 患者 - 学历 - 详情 */
export class PatientEducationalLevelDetail implements IPatientEducationalLevelDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;

    constructor(data?: IPatientEducationalLevelDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
        }
    }

    static fromJS(data: any): PatientEducationalLevelDetail {
        data = typeof data === 'object' ? data : {};
        let result = new PatientEducationalLevelDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        return data;
    }
}

/** 报表 - 患者 - 学历 - 详情 */
export interface IPatientEducationalLevelDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
}

/** Reponse */
export class PatientEducationalLevelDetailResult implements IPatientEducationalLevelDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientEducationalLevelDetail[] | undefined;

    constructor(data?: IPatientEducationalLevelDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientEducationalLevelDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientEducationalLevelDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientEducationalLevelDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientEducationalLevelDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientEducationalLevelDetail[] | undefined;
}

/** Reponse */
export class PatientEducationalLevelResult implements IPatientEducationalLevelResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientEducationalLevel[] | undefined;

    constructor(data?: IPatientEducationalLevelResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientEducationalLevel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientEducationalLevelResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientEducationalLevelResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientEducationalLevelResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientEducationalLevel[] | undefined;
}

/** 报表 -- 患者过滤条件 */
export class PatientFilter implements IPatientFilter {
    /** 患者标识符 */
    patientId?: string | undefined;
    /** 透析状态 *长期,临时* */
    dialysisState?: string | undefined;
    /** 转归状态 */
    prognosisState?: string | undefined;
    /** 性别 *男,女* */
    gender?: string | undefined;
    /** 年龄 - 下限 */
    ageMin?: number | undefined;
    /** 年龄 - 上限 */
    ageMax?: number | undefined;
    /** 透析龄 - 下限 */
    dialysisAgeMin?: number | undefined;
    /** 透析龄 - 上限 */
    dialysisAgeMax?: number | undefined;
    /** 班次ID，为空时候返回全部 */
    shiftId?: string | undefined;
    /** 来源 */
    source?: string | undefined;

    constructor(data?: IPatientFilter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.dialysisState = _data["dialysisState"];
            this.prognosisState = _data["prognosisState"];
            this.gender = _data["gender"];
            this.ageMin = _data["ageMin"];
            this.ageMax = _data["ageMax"];
            this.dialysisAgeMin = _data["dialysisAgeMin"];
            this.dialysisAgeMax = _data["dialysisAgeMax"];
            this.shiftId = _data["shiftId"];
            this.source = _data["source"];
        }
    }

    static fromJS(data: any): PatientFilter {
        data = typeof data === 'object' ? data : {};
        let result = new PatientFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["dialysisState"] = this.dialysisState;
        data["prognosisState"] = this.prognosisState;
        data["gender"] = this.gender;
        data["ageMin"] = this.ageMin;
        data["ageMax"] = this.ageMax;
        data["dialysisAgeMin"] = this.dialysisAgeMin;
        data["dialysisAgeMax"] = this.dialysisAgeMax;
        data["shiftId"] = this.shiftId;
        data["source"] = this.source;
        return data;
    }
}

/** 报表 -- 患者过滤条件 */
export interface IPatientFilter {
    /** 患者标识符 */
    patientId?: string | undefined;
    /** 透析状态 *长期,临时* */
    dialysisState?: string | undefined;
    /** 转归状态 */
    prognosisState?: string | undefined;
    /** 性别 *男,女* */
    gender?: string | undefined;
    /** 年龄 - 下限 */
    ageMin?: number | undefined;
    /** 年龄 - 上限 */
    ageMax?: number | undefined;
    /** 透析龄 - 下限 */
    dialysisAgeMin?: number | undefined;
    /** 透析龄 - 上限 */
    dialysisAgeMax?: number | undefined;
    /** 班次ID，为空时候返回全部 */
    shiftId?: string | undefined;
    /** 来源 */
    source?: string | undefined;
}

/** 报表 - 患者 - 性别 */
export class PatientGender implements IPatientGender {
    total?: number;
    /** 比例 */
    readonly ratio?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: IPatientGender) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total = _data["total"];
            (<any>this).ratio = _data["ratio"];
            this.gender = _data["gender"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): PatientGender {
        data = typeof data === 'object' ? data : {};
        let result = new PatientGender();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total;
        data["ratio"] = this.ratio;
        data["gender"] = this.gender;
        data["count"] = this.count;
        return data;
    }
}

/** 报表 - 患者 - 性别 */
export interface IPatientGender {
    total?: number;
    /** 比例 */
    ratio?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 数量 */
    count?: number;
}

/** 报表 - 患者 - 性别 - 详情 */
export class PatientGenderDetail implements IPatientGenderDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;

    constructor(data?: IPatientGenderDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
        }
    }

    static fromJS(data: any): PatientGenderDetail {
        data = typeof data === 'object' ? data : {};
        let result = new PatientGenderDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        return data;
    }
}

/** 报表 - 患者 - 性别 - 详情 */
export interface IPatientGenderDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
}

/** Reponse */
export class PatientGenderDetailResult implements IPatientGenderDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientGenderDetail[] | undefined;

    constructor(data?: IPatientGenderDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientGenderDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientGenderDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientGenderDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientGenderDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientGenderDetail[] | undefined;
}

/** Reponse */
export class PatientGenderResult implements IPatientGenderResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientGender[] | undefined;

    constructor(data?: IPatientGenderResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientGender.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientGenderResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientGenderResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientGenderResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientGender[] | undefined;
}

/** 宣教统计记录 */
export class PatientHealtheducation implements IPatientHealtheducation {
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 宣教护士 */
    nurseName?: string | undefined;
    /** 宣教内容 */
    content?: string | undefined;
    /** 宣教患者 */
    patientName?: string | undefined;
    /** 宣教效果显示值 */
    effectLabel?: string | undefined;

    constructor(data?: IPatientHealtheducation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.nurseName = _data["nurseName"];
            this.content = _data["content"];
            this.patientName = _data["patientName"];
            this.effectLabel = _data["effectLabel"];
        }
    }

    static fromJS(data: any): PatientHealtheducation {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHealtheducation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["nurseName"] = this.nurseName;
        data["content"] = this.content;
        data["patientName"] = this.patientName;
        data["effectLabel"] = this.effectLabel;
        return data;
    }
}

/** 宣教统计记录 */
export interface IPatientHealtheducation {
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 宣教护士 */
    nurseName?: string | undefined;
    /** 宣教内容 */
    content?: string | undefined;
    /** 宣教患者 */
    patientName?: string | undefined;
    /** 宣教效果显示值 */
    effectLabel?: string | undefined;
}

/** Reponse */
export class PatientHealtheducationResult implements IPatientHealtheducationResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientHealtheducation[] | undefined;

    constructor(data?: IPatientHealtheducationResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientHealtheducation.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientHealtheducationResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHealtheducationResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientHealtheducationResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientHealtheducation[] | undefined;
}

/** 报表 - 患者 - idwg - 详情 */
export class PatientIdwgDetail implements IPatientIdwgDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 上次透后体重 */
    weightAfter?: string | undefined;
    /** 本次透前体重 */
    weightBefore?: string | undefined;

    constructor(data?: IPatientIdwgDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.weightAfter = _data["weightAfter"];
            this.weightBefore = _data["weightBefore"];
        }
    }

    static fromJS(data: any): PatientIdwgDetail {
        data = typeof data === 'object' ? data : {};
        let result = new PatientIdwgDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["weightAfter"] = this.weightAfter;
        data["weightBefore"] = this.weightBefore;
        return data;
    }
}

/** 报表 - 患者 - idwg - 详情 */
export interface IPatientIdwgDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 上次透后体重 */
    weightAfter?: string | undefined;
    /** 本次透前体重 */
    weightBefore?: string | undefined;
}

/** Reponse */
export class PatientIdwgDetailResult implements IPatientIdwgDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientIdwgDetail[] | undefined;

    constructor(data?: IPatientIdwgDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientIdwgDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientIdwgDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientIdwgDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientIdwgDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientIdwgDetail[] | undefined;
}

/** 患者首页 */
export class PatientIndex implements IPatientIndex {
    /** 患者总量 */
    total?: number;
    /** 本月新增 */
    newCount?: number;
    /** 环比 */
    monthOnMonth?: string | undefined;
    /** 环比 - 上期数 */
    monthOnMonthLast?: number;
    /** 环比 - 本期数 */
    monthOnMonthCurrent?: number;
    /** 同比 */
    yearOnYear?: string | undefined;
    /** 同比 - 上期数 */
    yearOnYearLast?: number;
    /** 同比 - 本期数 */
    yearOnYearCurrent?: number;
    /** 性别 */
    genders?: PatientGender[] | undefined;
    /** 年龄段 */
    ages?: PatientAge[] | undefined;
    /** 阴阳性 */
    positives?: PatientPositive[] | undefined;
    /** 传染病 */
    infectiousDiseases?: PatientDiagnosis[] | undefined;

    constructor(data?: IPatientIndex) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total = _data["total"];
            this.newCount = _data["newCount"];
            this.monthOnMonth = _data["monthOnMonth"];
            this.monthOnMonthLast = _data["monthOnMonthLast"];
            this.monthOnMonthCurrent = _data["monthOnMonthCurrent"];
            this.yearOnYear = _data["yearOnYear"];
            this.yearOnYearLast = _data["yearOnYearLast"];
            this.yearOnYearCurrent = _data["yearOnYearCurrent"];
            if (Array.isArray(_data["genders"])) {
                this.genders = [] as any;
                for (let item of _data["genders"])
                    this.genders!.push(PatientGender.fromJS(item));
            }
            if (Array.isArray(_data["ages"])) {
                this.ages = [] as any;
                for (let item of _data["ages"])
                    this.ages!.push(PatientAge.fromJS(item));
            }
            if (Array.isArray(_data["positives"])) {
                this.positives = [] as any;
                for (let item of _data["positives"])
                    this.positives!.push(PatientPositive.fromJS(item));
            }
            if (Array.isArray(_data["infectiousDiseases"])) {
                this.infectiousDiseases = [] as any;
                for (let item of _data["infectiousDiseases"])
                    this.infectiousDiseases!.push(PatientDiagnosis.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientIndex {
        data = typeof data === 'object' ? data : {};
        let result = new PatientIndex();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total;
        data["newCount"] = this.newCount;
        data["monthOnMonth"] = this.monthOnMonth;
        data["monthOnMonthLast"] = this.monthOnMonthLast;
        data["monthOnMonthCurrent"] = this.monthOnMonthCurrent;
        data["yearOnYear"] = this.yearOnYear;
        data["yearOnYearLast"] = this.yearOnYearLast;
        data["yearOnYearCurrent"] = this.yearOnYearCurrent;
        if (Array.isArray(this.genders)) {
            data["genders"] = [];
            for (let item of this.genders)
                data["genders"].push(item.toJSON());
        }
        if (Array.isArray(this.ages)) {
            data["ages"] = [];
            for (let item of this.ages)
                data["ages"].push(item.toJSON());
        }
        if (Array.isArray(this.positives)) {
            data["positives"] = [];
            for (let item of this.positives)
                data["positives"].push(item.toJSON());
        }
        if (Array.isArray(this.infectiousDiseases)) {
            data["infectiousDiseases"] = [];
            for (let item of this.infectiousDiseases)
                data["infectiousDiseases"].push(item.toJSON());
        }
        return data;
    }
}

/** 患者首页 */
export interface IPatientIndex {
    /** 患者总量 */
    total?: number;
    /** 本月新增 */
    newCount?: number;
    /** 环比 */
    monthOnMonth?: string | undefined;
    /** 环比 - 上期数 */
    monthOnMonthLast?: number;
    /** 环比 - 本期数 */
    monthOnMonthCurrent?: number;
    /** 同比 */
    yearOnYear?: string | undefined;
    /** 同比 - 上期数 */
    yearOnYearLast?: number;
    /** 同比 - 本期数 */
    yearOnYearCurrent?: number;
    /** 性别 */
    genders?: PatientGender[] | undefined;
    /** 年龄段 */
    ages?: PatientAge[] | undefined;
    /** 阴阳性 */
    positives?: PatientPositive[] | undefined;
    /** 传染病 */
    infectiousDiseases?: PatientDiagnosis[] | undefined;
}

/** Reponse */
export class PatientIndexResultEntry implements IPatientIndexResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientIndex;

    constructor(data?: IPatientIndexResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientIndex.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientIndexResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientIndexResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientIndexResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientIndex;
}

export class PatientInfectionLisReport implements IPatientInfectionLisReport {
    /** 检验时间 */
    reportTime?: string | undefined;
    /** 乙肝表面抗原 */
    ygbmkydl?: string | undefined;
    /** 乙肝表面抗体 */
    ygbmktdl?: string | undefined;
    /** 乙肝E抗原 */
    ygEkydl?: string | undefined;
    /** 乙型肝炎e抗体 */
    ygEktdl?: string | undefined;
    /** 乙型肝炎核心抗体 */
    yghxktdl?: string | undefined;
    /** 丙型肝炎抗体 */
    bxgykt?: string | undefined;
    /** 梅毒螺旋体特异性抗体 */
    mdlxt?: string | undefined;
    /** 人免疫缺陷病抗体 */
    rmyqxbd?: string | undefined;

    constructor(data?: IPatientInfectionLisReport) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.reportTime = _data["reportTime"];
            this.ygbmkydl = _data["ygbmkydl"];
            this.ygbmktdl = _data["ygbmktdl"];
            this.ygEkydl = _data["ygEkydl"];
            this.ygEktdl = _data["ygEktdl"];
            this.yghxktdl = _data["yghxktdl"];
            this.bxgykt = _data["bxgykt"];
            this.mdlxt = _data["mdlxt"];
            this.rmyqxbd = _data["rmyqxbd"];
        }
    }

    static fromJS(data: any): PatientInfectionLisReport {
        data = typeof data === 'object' ? data : {};
        let result = new PatientInfectionLisReport();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reportTime"] = this.reportTime;
        data["ygbmkydl"] = this.ygbmkydl;
        data["ygbmktdl"] = this.ygbmktdl;
        data["ygEkydl"] = this.ygEkydl;
        data["ygEktdl"] = this.ygEktdl;
        data["yghxktdl"] = this.yghxktdl;
        data["bxgykt"] = this.bxgykt;
        data["mdlxt"] = this.mdlxt;
        data["rmyqxbd"] = this.rmyqxbd;
        return data;
    }
}

export interface IPatientInfectionLisReport {
    /** 检验时间 */
    reportTime?: string | undefined;
    /** 乙肝表面抗原 */
    ygbmkydl?: string | undefined;
    /** 乙肝表面抗体 */
    ygbmktdl?: string | undefined;
    /** 乙肝E抗原 */
    ygEkydl?: string | undefined;
    /** 乙型肝炎e抗体 */
    ygEktdl?: string | undefined;
    /** 乙型肝炎核心抗体 */
    yghxktdl?: string | undefined;
    /** 丙型肝炎抗体 */
    bxgykt?: string | undefined;
    /** 梅毒螺旋体特异性抗体 */
    mdlxt?: string | undefined;
    /** 人免疫缺陷病抗体 */
    rmyqxbd?: string | undefined;
}

export class PatientInfectionScreenView implements IPatientInfectionScreenView {
    /** 患者ID */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 次数 */
    infectCount?: number | undefined;
    /** 周期 */
    infectCycle?: number | undefined;
    /** 下次检验时间 */
    nextTime?: string | undefined;
    /** 是否逾期 */
    overdue?: boolean;
    /** 检验数据 */
    lisReports?: PatientInfectionLisReport[] | undefined;

    constructor(data?: IPatientInfectionScreenView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.infectCount = _data["infectCount"];
            this.infectCycle = _data["infectCycle"];
            this.nextTime = _data["nextTime"];
            this.overdue = _data["overdue"];
            if (Array.isArray(_data["lisReports"])) {
                this.lisReports = [] as any;
                for (let item of _data["lisReports"])
                    this.lisReports!.push(PatientInfectionLisReport.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientInfectionScreenView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientInfectionScreenView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["infectCount"] = this.infectCount;
        data["infectCycle"] = this.infectCycle;
        data["nextTime"] = this.nextTime;
        data["overdue"] = this.overdue;
        if (Array.isArray(this.lisReports)) {
            data["lisReports"] = [];
            for (let item of this.lisReports)
                data["lisReports"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPatientInfectionScreenView {
    /** 患者ID */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 次数 */
    infectCount?: number | undefined;
    /** 周期 */
    infectCycle?: number | undefined;
    /** 下次检验时间 */
    nextTime?: string | undefined;
    /** 是否逾期 */
    overdue?: boolean;
    /** 检验数据 */
    lisReports?: PatientInfectionLisReport[] | undefined;
}

/** Reponse */
export class PatientInfectionScreenViewResult implements IPatientInfectionScreenViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientInfectionScreenView[] | undefined;

    constructor(data?: IPatientInfectionScreenViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientInfectionScreenView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientInfectionScreenViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientInfectionScreenViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientInfectionScreenViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientInfectionScreenView[] | undefined;
}

/** 报表 - 患者 - 患者标签 */
export class PatientLabel implements IPatientLabel {
    total?: number;
    /** 比例 */
    readonly ratio?: string | undefined;
    /** 标签 */
    label?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: IPatientLabel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total = _data["total"];
            (<any>this).ratio = _data["ratio"];
            this.label = _data["label"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): PatientLabel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLabel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total;
        data["ratio"] = this.ratio;
        data["label"] = this.label;
        data["count"] = this.count;
        return data;
    }
}

/** 报表 - 患者 - 患者标签 */
export interface IPatientLabel {
    total?: number;
    /** 比例 */
    ratio?: string | undefined;
    /** 标签 */
    label?: string | undefined;
    /** 数量 */
    count?: number;
}

/** 报表 - 患者 - 患者标签 - 详情 */
export class PatientLabelDetail implements IPatientLabelDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 患者标签 */
    label?: string | undefined;

    constructor(data?: IPatientLabelDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.label = _data["label"];
        }
    }

    static fromJS(data: any): PatientLabelDetail {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLabelDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["label"] = this.label;
        return data;
    }
}

/** 报表 - 患者 - 患者标签 - 详情 */
export interface IPatientLabelDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 患者标签 */
    label?: string | undefined;
}

/** Reponse */
export class PatientLabelDetailResult implements IPatientLabelDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientLabelDetail[] | undefined;

    constructor(data?: IPatientLabelDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientLabelDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientLabelDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLabelDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientLabelDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientLabelDetail[] | undefined;
}

/** Reponse */
export class PatientLabelResult implements IPatientLabelResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientLabel[] | undefined;

    constructor(data?: IPatientLabelResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientLabel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientLabelResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLabelResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientLabelResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientLabel[] | undefined;
}

/** 统计报表 -- 血透数据 */
export class PatientLisReportDataView implements IPatientLisReportDataView {
    /** 唯一标识 */
    id?: string | undefined;
    /** 患者id */
    patientId?: string | undefined;
    /** 检查时间 */
    time?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    urr?: string | undefined;
    ktv?: string | undefined;
    /** 检验明细 */
    items?: QualityControlItemDetail[] | undefined;

    constructor(data?: IPatientLisReportDataView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.time = _data["time"];
            this.patientName = _data["patientName"];
            this.urr = _data["urr"];
            this.ktv = _data["ktv"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(QualityControlItemDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientLisReportDataView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLisReportDataView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["time"] = this.time;
        data["patientName"] = this.patientName;
        data["urr"] = this.urr;
        data["ktv"] = this.ktv;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 统计报表 -- 血透数据 */
export interface IPatientLisReportDataView {
    /** 唯一标识 */
    id?: string | undefined;
    /** 患者id */
    patientId?: string | undefined;
    /** 检查时间 */
    time?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    urr?: string | undefined;
    ktv?: string | undefined;
    /** 检验明细 */
    items?: QualityControlItemDetail[] | undefined;
}

/** Reponse */
export class PatientLisReportDataViewResult implements IPatientLisReportDataViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientLisReportDataView[] | undefined;

    constructor(data?: IPatientLisReportDataViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientLisReportDataView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientLisReportDataViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLisReportDataViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientLisReportDataViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientLisReportDataView[] | undefined;
}

/** 报表 - 患者 - 医保 */
export class PatientMedicare implements IPatientMedicare {
    total?: number;
    /** 比例 */
    readonly ratio?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: IPatientMedicare) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total = _data["total"];
            (<any>this).ratio = _data["ratio"];
            this.medicare = _data["medicare"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): PatientMedicare {
        data = typeof data === 'object' ? data : {};
        let result = new PatientMedicare();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total;
        data["ratio"] = this.ratio;
        data["medicare"] = this.medicare;
        data["count"] = this.count;
        return data;
    }
}

/** 报表 - 患者 - 医保 */
export interface IPatientMedicare {
    total?: number;
    /** 比例 */
    ratio?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 数量 */
    count?: number;
}

/** 报表 - 患者 - 医保 - 详情 */
export class PatientMedicareDetail implements IPatientMedicareDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;

    constructor(data?: IPatientMedicareDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicalNumber = _data["medicalNumber"];
            this.medicare = _data["medicare"];
            this.medicareNumber = _data["medicareNumber"];
        }
    }

    static fromJS(data: any): PatientMedicareDetail {
        data = typeof data === 'object' ? data : {};
        let result = new PatientMedicareDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicalNumber"] = this.medicalNumber;
        data["medicare"] = this.medicare;
        data["medicareNumber"] = this.medicareNumber;
        return data;
    }
}

/** 报表 - 患者 - 医保 - 详情 */
export interface IPatientMedicareDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
}

/** Reponse */
export class PatientMedicareDetailResult implements IPatientMedicareDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientMedicareDetail[] | undefined;

    constructor(data?: IPatientMedicareDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientMedicareDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientMedicareDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientMedicareDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientMedicareDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientMedicareDetail[] | undefined;
}

/** Reponse */
export class PatientMedicareResult implements IPatientMedicareResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientMedicare[] | undefined;

    constructor(data?: IPatientMedicareResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientMedicare.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientMedicareResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientMedicareResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientMedicareResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientMedicare[] | undefined;
}

/** 报表 - 患者 - 民族 */
export class PatientNationality implements IPatientNationality {
    total?: number;
    /** 比例 */
    readonly ratio?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: IPatientNationality) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total = _data["total"];
            (<any>this).ratio = _data["ratio"];
            this.nationality = _data["nationality"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): PatientNationality {
        data = typeof data === 'object' ? data : {};
        let result = new PatientNationality();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total;
        data["ratio"] = this.ratio;
        data["nationality"] = this.nationality;
        data["count"] = this.count;
        return data;
    }
}

/** 报表 - 患者 - 民族 */
export interface IPatientNationality {
    total?: number;
    /** 比例 */
    ratio?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 数量 */
    count?: number;
}

/** 报表 - 患者 - 民族 - 详情 */
export class PatientNationalityDetail implements IPatientNationalityDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;

    constructor(data?: IPatientNationalityDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.nationality = _data["nationality"];
        }
    }

    static fromJS(data: any): PatientNationalityDetail {
        data = typeof data === 'object' ? data : {};
        let result = new PatientNationalityDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["nationality"] = this.nationality;
        return data;
    }
}

/** 报表 - 患者 - 民族 - 详情 */
export interface IPatientNationalityDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
}

/** Reponse */
export class PatientNationalityDetailResult implements IPatientNationalityDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientNationalityDetail[] | undefined;

    constructor(data?: IPatientNationalityDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientNationalityDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientNationalityDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientNationalityDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientNationalityDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientNationalityDetail[] | undefined;
}

/** Reponse */
export class PatientNationalityResult implements IPatientNationalityResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientNationality[] | undefined;

    constructor(data?: IPatientNationalityResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientNationality.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientNationalityResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientNationalityResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientNationalityResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientNationality[] | undefined;
}

/** 报表 - 患者 - 新患者 */
export class PatientNew implements IPatientNew {
    /** 年龄段 */
    ages?: PatientAge[] | undefined;
    /** 性别 */
    genders?: PatientGender[] | undefined;
    /** 名族 */
    nationalitys?: PatientNationality[] | undefined;
    /** 来源 */
    sources?: PatientSource[] | undefined;

    constructor(data?: IPatientNew) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["ages"])) {
                this.ages = [] as any;
                for (let item of _data["ages"])
                    this.ages!.push(PatientAge.fromJS(item));
            }
            if (Array.isArray(_data["genders"])) {
                this.genders = [] as any;
                for (let item of _data["genders"])
                    this.genders!.push(PatientGender.fromJS(item));
            }
            if (Array.isArray(_data["nationalitys"])) {
                this.nationalitys = [] as any;
                for (let item of _data["nationalitys"])
                    this.nationalitys!.push(PatientNationality.fromJS(item));
            }
            if (Array.isArray(_data["sources"])) {
                this.sources = [] as any;
                for (let item of _data["sources"])
                    this.sources!.push(PatientSource.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientNew {
        data = typeof data === 'object' ? data : {};
        let result = new PatientNew();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.ages)) {
            data["ages"] = [];
            for (let item of this.ages)
                data["ages"].push(item.toJSON());
        }
        if (Array.isArray(this.genders)) {
            data["genders"] = [];
            for (let item of this.genders)
                data["genders"].push(item.toJSON());
        }
        if (Array.isArray(this.nationalitys)) {
            data["nationalitys"] = [];
            for (let item of this.nationalitys)
                data["nationalitys"].push(item.toJSON());
        }
        if (Array.isArray(this.sources)) {
            data["sources"] = [];
            for (let item of this.sources)
                data["sources"].push(item.toJSON());
        }
        return data;
    }
}

/** 报表 - 患者 - 新患者 */
export interface IPatientNew {
    /** 年龄段 */
    ages?: PatientAge[] | undefined;
    /** 性别 */
    genders?: PatientGender[] | undefined;
    /** 名族 */
    nationalitys?: PatientNationality[] | undefined;
    /** 来源 */
    sources?: PatientSource[] | undefined;
}

/** Reponse */
export class PatientNewResultEntry implements IPatientNewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientNew;

    constructor(data?: IPatientNewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientNew.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientNewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientNewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientNewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientNew;
}

/** 报表 - 患者 - 阴阳性 */
export class PatientPositive implements IPatientPositive {
    /** 阴阳性 */
    positive?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: IPatientPositive) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.positive = _data["positive"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): PatientPositive {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPositive();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["positive"] = this.positive;
        data["count"] = this.count;
        return data;
    }
}

/** 报表 - 患者 - 阴阳性 */
export interface IPatientPositive {
    /** 阴阳性 */
    positive?: string | undefined;
    /** 数量 */
    count?: number;
}

/** 报表 - 患者 - 患者转归 */
export class PatientPrognosis implements IPatientPrognosis {
    /** 日期 */
    date?: string | undefined;
    /** 转入 */
    in?: number;
    /** 转出 */
    out?: number;
    /** 退出 */
    quit?: number;

    constructor(data?: IPatientPrognosis) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.in = _data["in"];
            this.out = _data["out"];
            this.quit = _data["quit"];
        }
    }

    static fromJS(data: any): PatientPrognosis {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPrognosis();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["in"] = this.in;
        data["out"] = this.out;
        data["quit"] = this.quit;
        return data;
    }
}

/** 报表 - 患者 - 患者转归 */
export interface IPatientPrognosis {
    /** 日期 */
    date?: string | undefined;
    /** 转入 */
    in?: number;
    /** 转出 */
    out?: number;
    /** 退出 */
    quit?: number;
}

/** 报表 - 患者 - 患者转归 - 详情 */
export class PatientPrognosisDetail implements IPatientPrognosisDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 日期 */
    date?: string | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 转归类型 */
    prognosis?: string | undefined;
    /** 转出原因 `DIC.PROGNOSIS.OUT.CAUSE` */
    outCause?: string | undefined;

    constructor(data?: IPatientPrognosisDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.date = _data["date"];
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.prognosis = _data["prognosis"];
            this.outCause = _data["outCause"];
        }
    }

    static fromJS(data: any): PatientPrognosisDetail {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPrognosisDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["date"] = this.date;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["prognosis"] = this.prognosis;
        data["outCause"] = this.outCause;
        return data;
    }
}

/** 报表 - 患者 - 患者转归 - 详情 */
export interface IPatientPrognosisDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 日期 */
    date?: string | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 转归类型 */
    prognosis?: string | undefined;
    /** 转出原因 `DIC.PROGNOSIS.OUT.CAUSE` */
    outCause?: string | undefined;
}

/** Reponse */
export class PatientPrognosisDetailResult implements IPatientPrognosisDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientPrognosisDetail[] | undefined;

    constructor(data?: IPatientPrognosisDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientPrognosisDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientPrognosisDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPrognosisDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientPrognosisDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientPrognosisDetail[] | undefined;
}

/** 报表 - 患者 - 患者转归 - 转出 */
export class PatientPrognosisOut implements IPatientPrognosisOut {
    /** 地点与原因合并统计 */
    total?: PatientPrognosisOutTotal[] | undefined;
    /** 地点统计 */
    location?: PatientPrognosisOutItem[] | undefined;
    /** 原因统计 */
    cause?: PatientPrognosisOutItem[] | undefined;

    constructor(data?: IPatientPrognosisOut) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["total"])) {
                this.total = [] as any;
                for (let item of _data["total"])
                    this.total!.push(PatientPrognosisOutTotal.fromJS(item));
            }
            if (Array.isArray(_data["location"])) {
                this.location = [] as any;
                for (let item of _data["location"])
                    this.location!.push(PatientPrognosisOutItem.fromJS(item));
            }
            if (Array.isArray(_data["cause"])) {
                this.cause = [] as any;
                for (let item of _data["cause"])
                    this.cause!.push(PatientPrognosisOutItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientPrognosisOut {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPrognosisOut();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.total)) {
            data["total"] = [];
            for (let item of this.total)
                data["total"].push(item.toJSON());
        }
        if (Array.isArray(this.location)) {
            data["location"] = [];
            for (let item of this.location)
                data["location"].push(item.toJSON());
        }
        if (Array.isArray(this.cause)) {
            data["cause"] = [];
            for (let item of this.cause)
                data["cause"].push(item.toJSON());
        }
        return data;
    }
}

/** 报表 - 患者 - 患者转归 - 转出 */
export interface IPatientPrognosisOut {
    /** 地点与原因合并统计 */
    total?: PatientPrognosisOutTotal[] | undefined;
    /** 地点统计 */
    location?: PatientPrognosisOutItem[] | undefined;
    /** 原因统计 */
    cause?: PatientPrognosisOutItem[] | undefined;
}

/** 报表 - 患者 - 患者转归 - 转出 */
export class PatientPrognosisOutItem implements IPatientPrognosisOutItem {
    total?: number;
    /** 比例 */
    readonly ratio?: string | undefined;
    /** 名称 */
    label?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: IPatientPrognosisOutItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total = _data["total"];
            (<any>this).ratio = _data["ratio"];
            this.label = _data["label"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): PatientPrognosisOutItem {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPrognosisOutItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total;
        data["ratio"] = this.ratio;
        data["label"] = this.label;
        data["count"] = this.count;
        return data;
    }
}

/** 报表 - 患者 - 患者转归 - 转出 */
export interface IPatientPrognosisOutItem {
    total?: number;
    /** 比例 */
    ratio?: string | undefined;
    /** 名称 */
    label?: string | undefined;
    /** 数量 */
    count?: number;
}

/** Reponse */
export class PatientPrognosisOutResultEntry implements IPatientPrognosisOutResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientPrognosisOut;

    constructor(data?: IPatientPrognosisOutResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientPrognosisOut.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientPrognosisOutResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPrognosisOutResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientPrognosisOutResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientPrognosisOut;
}

/** 报表 - 患者 - 患者转归 - 转出 */
export class PatientPrognosisOutTotal implements IPatientPrognosisOutTotal {
    total?: number;
    /** 比例 */
    readonly ratio?: string | undefined;
    /** 地点 */
    location?: string | undefined;
    /** 原因 */
    cause?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: IPatientPrognosisOutTotal) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total = _data["total"];
            (<any>this).ratio = _data["ratio"];
            this.location = _data["location"];
            this.cause = _data["cause"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): PatientPrognosisOutTotal {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPrognosisOutTotal();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total;
        data["ratio"] = this.ratio;
        data["location"] = this.location;
        data["cause"] = this.cause;
        data["count"] = this.count;
        return data;
    }
}

/** 报表 - 患者 - 患者转归 - 转出 */
export interface IPatientPrognosisOutTotal {
    total?: number;
    /** 比例 */
    ratio?: string | undefined;
    /** 地点 */
    location?: string | undefined;
    /** 原因 */
    cause?: string | undefined;
    /** 数量 */
    count?: number;
}

/** 报表 - 患者 - 患者转归 - 退出 */
export class PatientPrognosisQuit implements IPatientPrognosisQuit {
    total?: number;
    /** 比例 */
    readonly ratio?: string | undefined;
    /** 原因 */
    cause?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: IPatientPrognosisQuit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total = _data["total"];
            (<any>this).ratio = _data["ratio"];
            this.cause = _data["cause"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): PatientPrognosisQuit {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPrognosisQuit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total;
        data["ratio"] = this.ratio;
        data["cause"] = this.cause;
        data["count"] = this.count;
        return data;
    }
}

/** 报表 - 患者 - 患者转归 - 退出 */
export interface IPatientPrognosisQuit {
    total?: number;
    /** 比例 */
    ratio?: string | undefined;
    /** 原因 */
    cause?: string | undefined;
    /** 数量 */
    count?: number;
}

/** Reponse */
export class PatientPrognosisQuitResult implements IPatientPrognosisQuitResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientPrognosisQuit[] | undefined;

    constructor(data?: IPatientPrognosisQuitResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientPrognosisQuit.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientPrognosisQuitResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPrognosisQuitResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientPrognosisQuitResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientPrognosisQuit[] | undefined;
}

/** Reponse */
export class PatientPrognosisResult implements IPatientPrognosisResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientPrognosis[] | undefined;

    constructor(data?: IPatientPrognosisResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientPrognosis.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientPrognosisResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPrognosisResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientPrognosisResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientPrognosis[] | undefined;
}

/** 报表 - 患者 - 患者转归 - 类型 */
export class PatientPrognosisType implements IPatientPrognosisType {
    total?: number;
    /** 比例 */
    readonly ratio?: string | undefined;
    /** 名称 */
    type?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: IPatientPrognosisType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total = _data["total"];
            (<any>this).ratio = _data["ratio"];
            this.type = _data["type"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): PatientPrognosisType {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPrognosisType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total;
        data["ratio"] = this.ratio;
        data["type"] = this.type;
        data["count"] = this.count;
        return data;
    }
}

/** 报表 - 患者 - 患者转归 - 类型 */
export interface IPatientPrognosisType {
    total?: number;
    /** 比例 */
    ratio?: string | undefined;
    /** 名称 */
    type?: string | undefined;
    /** 数量 */
    count?: number;
}

/** Reponse */
export class PatientPrognosisTypeResult implements IPatientPrognosisTypeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientPrognosisType[] | undefined;

    constructor(data?: IPatientPrognosisTypeResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientPrognosisType.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientPrognosisTypeResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPrognosisTypeResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientPrognosisTypeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientPrognosisType[] | undefined;
}

/** 患者登记本 */
export class PatientRegister implements IPatientRegister {
    /** 姓名 */
    patientName?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 身份证号 */
    idNumber?: string | undefined;
    /** 联系方式 */
    telephone?: string | undefined;
    /** 住址 */
    address?: string | undefined;
    /** 首次透析日期 */
    dialysisDateFirst?: string | undefined;
    /** 传染病 */
    diagnosis?: string | undefined;

    constructor(data?: IPatientRegister) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientName = _data["patientName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.address = _data["address"];
            this.dialysisDateFirst = _data["dialysisDateFirst"];
            this.diagnosis = _data["diagnosis"];
        }
    }

    static fromJS(data: any): PatientRegister {
        data = typeof data === 'object' ? data : {};
        let result = new PatientRegister();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientName"] = this.patientName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["address"] = this.address;
        data["dialysisDateFirst"] = this.dialysisDateFirst;
        data["diagnosis"] = this.diagnosis;
        return data;
    }
}

/** 患者登记本 */
export interface IPatientRegister {
    /** 姓名 */
    patientName?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 身份证号 */
    idNumber?: string | undefined;
    /** 联系方式 */
    telephone?: string | undefined;
    /** 住址 */
    address?: string | undefined;
    /** 首次透析日期 */
    dialysisDateFirst?: string | undefined;
    /** 传染病 */
    diagnosis?: string | undefined;
}

/** Reponse */
export class PatientRegisterResult implements IPatientRegisterResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientRegister[] | undefined;

    constructor(data?: IPatientRegisterResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientRegister.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientRegisterResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientRegisterResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientRegisterResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientRegister[] | undefined;
}

/** 报表 - 患者 - 患者来源 */
export class PatientSource implements IPatientSource {
    total?: number;
    /** 比例 */
    readonly ratio?: string | undefined;
    /** 患者来源 */
    source?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: IPatientSource) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total = _data["total"];
            (<any>this).ratio = _data["ratio"];
            this.source = _data["source"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): PatientSource {
        data = typeof data === 'object' ? data : {};
        let result = new PatientSource();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total;
        data["ratio"] = this.ratio;
        data["source"] = this.source;
        data["count"] = this.count;
        return data;
    }
}

/** 报表 - 患者 - 患者来源 */
export interface IPatientSource {
    total?: number;
    /** 比例 */
    ratio?: string | undefined;
    /** 患者来源 */
    source?: string | undefined;
    /** 数量 */
    count?: number;
}

/** 报表 - 患者 - 患者来源 - 详情 */
export class PatientSourceDetail implements IPatientSourceDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 患者来源 */
    source?: string | undefined;

    constructor(data?: IPatientSourceDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.source = _data["source"];
        }
    }

    static fromJS(data: any): PatientSourceDetail {
        data = typeof data === 'object' ? data : {};
        let result = new PatientSourceDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["source"] = this.source;
        return data;
    }
}

/** 报表 - 患者 - 患者来源 - 详情 */
export interface IPatientSourceDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 患者来源 */
    source?: string | undefined;
}

/** Reponse */
export class PatientSourceDetailResult implements IPatientSourceDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientSourceDetail[] | undefined;

    constructor(data?: IPatientSourceDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientSourceDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientSourceDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientSourceDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientSourceDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientSourceDetail[] | undefined;
}

/** Reponse */
export class PatientSourceResult implements IPatientSourceResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientSource[] | undefined;

    constructor(data?: IPatientSourceResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientSource.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientSourceResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientSourceResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientSourceResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientSource[] | undefined;
}

/** 化验类项目统计 */
export class PatientTestView implements IPatientTestView {
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 检验项值 */
    testValue?: number;

    constructor(data?: IPatientTestView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.testValue = _data["testValue"];
        }
    }

    static fromJS(data: any): PatientTestView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientTestView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["testValue"] = this.testValue;
        return data;
    }
}

/** 化验类项目统计 */
export interface IPatientTestView {
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 检验项值 */
    testValue?: number;
}

/** Reponse */
export class PatientTestViewResult implements IPatientTestViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientTestView[] | undefined;

    constructor(data?: IPatientTestViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientTestView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientTestViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientTestViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientTestViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientTestView[] | undefined;
}

/** 患者透析次数详细 */
export class PatientTimesOfDialysisDetailView implements IPatientTimesOfDialysisDetailView {
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析记录单标识 */
    id?: string | undefined;
    /** 患者id */
    patientId?: string | undefined;
    /** 患者名称 */
    name?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 抗凝剂名称 */
    cureRecordAnticoagulantName?: string | undefined;
    /** 透析液 */
    dialysate?: string | undefined;
    cureRecordId?: string | undefined;

    constructor(data?: IPatientTimesOfDialysisDetailView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.name = _data["name"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.source = _data["source"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.cureRecordAnticoagulantName = _data["cureRecordAnticoagulantName"];
            this.dialysate = _data["dialysate"];
            this.cureRecordId = _data["cureRecordId"];
        }
    }

    static fromJS(data: any): PatientTimesOfDialysisDetailView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientTimesOfDialysisDetailView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["name"] = this.name;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["source"] = this.source;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["cureRecordAnticoagulantName"] = this.cureRecordAnticoagulantName;
        data["dialysate"] = this.dialysate;
        data["cureRecordId"] = this.cureRecordId;
        return data;
    }
}

/** 患者透析次数详细 */
export interface IPatientTimesOfDialysisDetailView {
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析记录单标识 */
    id?: string | undefined;
    /** 患者id */
    patientId?: string | undefined;
    /** 患者名称 */
    name?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 抗凝剂名称 */
    cureRecordAnticoagulantName?: string | undefined;
    /** 透析液 */
    dialysate?: string | undefined;
    cureRecordId?: string | undefined;
}

/** Reponse */
export class PatientTimesOfDialysisDetailViewResult implements IPatientTimesOfDialysisDetailViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientTimesOfDialysisDetailView[] | undefined;

    constructor(data?: IPatientTimesOfDialysisDetailViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientTimesOfDialysisDetailView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientTimesOfDialysisDetailViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientTimesOfDialysisDetailViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientTimesOfDialysisDetailViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientTimesOfDialysisDetailView[] | undefined;
}

/** 透析次数 */
export class PatientTimesOfDialysisView implements IPatientTimesOfDialysisView {
    /** 患者标识 */
    id?: string | undefined;
    /** 患者姓名 */
    name?: string | undefined;
    /** 透析次数 */
    count?: number;

    constructor(data?: IPatientTimesOfDialysisView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): PatientTimesOfDialysisView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientTimesOfDialysisView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["count"] = this.count;
        return data;
    }
}

/** 透析次数 */
export interface IPatientTimesOfDialysisView {
    /** 患者标识 */
    id?: string | undefined;
    /** 患者姓名 */
    name?: string | undefined;
    /** 透析次数 */
    count?: number;
}

/** Reponse */
export class PatientTimesOfDialysisViewResult implements IPatientTimesOfDialysisViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientTimesOfDialysisView[] | undefined;

    constructor(data?: IPatientTimesOfDialysisViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientTimesOfDialysisView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientTimesOfDialysisViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientTimesOfDialysisViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientTimesOfDialysisViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientTimesOfDialysisView[] | undefined;
}

export class PatientTransferOut implements IPatientTransferOut {
    /** 日期 */
    date?: string | undefined;
    /** 死亡人数 */
    deathCount?: number;
    /** 腹透人数 */
    peritonealCount?: number;
    /** 肾移植 */
    kidneyCount?: number;

    constructor(data?: IPatientTransferOut) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.deathCount = _data["deathCount"];
            this.peritonealCount = _data["peritonealCount"];
            this.kidneyCount = _data["kidneyCount"];
        }
    }

    static fromJS(data: any): PatientTransferOut {
        data = typeof data === 'object' ? data : {};
        let result = new PatientTransferOut();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["deathCount"] = this.deathCount;
        data["peritonealCount"] = this.peritonealCount;
        data["kidneyCount"] = this.kidneyCount;
        return data;
    }
}

export interface IPatientTransferOut {
    /** 日期 */
    date?: string | undefined;
    /** 死亡人数 */
    deathCount?: number;
    /** 腹透人数 */
    peritonealCount?: number;
    /** 肾移植 */
    kidneyCount?: number;
}

/** Reponse */
export class PatientTransferOutResult implements IPatientTransferOutResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientTransferOut[] | undefined;

    constructor(data?: IPatientTransferOutResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientTransferOut.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientTransferOutResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientTransferOutResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientTransferOutResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientTransferOut[] | undefined;
}

/** 报表 - 患者 - 体重 */
export class PatientWeight implements IPatientWeight {
    total?: number;
    /** 比例 */
    readonly ratio?: string | undefined;
    /** 增长区间 */
    weight?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: IPatientWeight) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total = _data["total"];
            (<any>this).ratio = _data["ratio"];
            this.weight = _data["weight"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): PatientWeight {
        data = typeof data === 'object' ? data : {};
        let result = new PatientWeight();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total;
        data["ratio"] = this.ratio;
        data["weight"] = this.weight;
        data["count"] = this.count;
        return data;
    }
}

/** 报表 - 患者 - 体重 */
export interface IPatientWeight {
    total?: number;
    /** 比例 */
    ratio?: string | undefined;
    /** 增长区间 */
    weight?: string | undefined;
    /** 数量 */
    count?: number;
}

/** 报表 - 患者 - 体重 - 详情 */
export class PatientWeightDetail implements IPatientWeightDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 所选时间内第一次体重 */
    weightFirst?: string | undefined;
    /** 所选时间内末次体重 */
    weightLast?: string | undefined;

    constructor(data?: IPatientWeightDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.weightFirst = _data["weightFirst"];
            this.weightLast = _data["weightLast"];
        }
    }

    static fromJS(data: any): PatientWeightDetail {
        data = typeof data === 'object' ? data : {};
        let result = new PatientWeightDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["weightFirst"] = this.weightFirst;
        data["weightLast"] = this.weightLast;
        return data;
    }
}

/** 报表 - 患者 - 体重 - 详情 */
export interface IPatientWeightDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 所选时间内第一次体重 */
    weightFirst?: string | undefined;
    /** 所选时间内末次体重 */
    weightLast?: string | undefined;
}

/** Reponse */
export class PatientWeightDetailResult implements IPatientWeightDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientWeightDetail[] | undefined;

    constructor(data?: IPatientWeightDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientWeightDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientWeightDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientWeightDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientWeightDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientWeightDetail[] | undefined;
}

/** Reponse */
export class PatientWeightResult implements IPatientWeightResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientWeight[] | undefined;

    constructor(data?: IPatientWeightResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientWeight.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientWeightResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientWeightResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientWeightResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientWeight[] | undefined;
}

export class QualityColumnView implements IQualityColumnView {
    /** 编码 */
    itemCode?: string | undefined;
    /** 名称 */
    itemName?: string | undefined;

    constructor(data?: IQualityColumnView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.itemCode = _data["itemCode"];
            this.itemName = _data["itemName"];
        }
    }

    static fromJS(data: any): QualityColumnView {
        data = typeof data === 'object' ? data : {};
        let result = new QualityColumnView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemCode"] = this.itemCode;
        data["itemName"] = this.itemName;
        return data;
    }
}

export interface IQualityColumnView {
    /** 编码 */
    itemCode?: string | undefined;
    /** 名称 */
    itemName?: string | undefined;
}

/** Reponse */
export class QualityColumnViewResult implements IQualityColumnViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: QualityColumnView[] | undefined;

    constructor(data?: IQualityColumnViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(QualityColumnView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): QualityColumnViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new QualityColumnViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IQualityColumnViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: QualityColumnView[] | undefined;
}

export class QualityControlDetail implements IQualityControlDetail {
    /** 患者ID */
    id?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 姓名 */
    name?: string | undefined;
    /** 别名 */
    name2?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 身份证号 */
    idNumber?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: string | undefined;
    /** 患者全名 */
    nameFull?: string | undefined;
    /** 性别 字典标签 */
    genderLabel?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** [患者标识](#患者信息) */
    patientId?: string | undefined;
    /** 转出/退出时间 */
    outDate?: dayjs.Dayjs | undefined;
    /** 转入时间 */
    inDate?: dayjs.Dayjs | undefined;
    /** 上半年 */
    firstHalfYear?: string | undefined;
    /** 下半年 */
    secondHalfYear?: string | undefined;
    /** 第一季度 */
    firstQuarter?: string | undefined;
    /** 第二季度 */
    secondQuarter?: string | undefined;
    /** 第三季度 */
    thirdQuarter?: string | undefined;
    /** 第四季度 */
    forthQuarter?: string | undefined;
    items?: QualityControlItemDetail[] | undefined;

    constructor(data?: IQualityControlDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.gender = _data["gender"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.idNumber = _data["idNumber"];
            this.receiptDate = _data["receiptDate"];
            this.dialysisDateFirst = _data["dialysisDateFirst"];
            this.nameFull = _data["nameFull"];
            this.genderLabel = _data["genderLabel"];
            this.beforeSbp = _data["beforeSbp"];
            this.beforeDbp = _data["beforeDbp"];
            this.patientId = _data["patientId"];
            this.outDate = _data["outDate"] ? dayjs(_data["outDate"].toString()) : <any>undefined;
            this.inDate = _data["inDate"] ? dayjs(_data["inDate"].toString()) : <any>undefined;
            this.firstHalfYear = _data["firstHalfYear"];
            this.secondHalfYear = _data["secondHalfYear"];
            this.firstQuarter = _data["firstQuarter"];
            this.secondQuarter = _data["secondQuarter"];
            this.thirdQuarter = _data["thirdQuarter"];
            this.forthQuarter = _data["forthQuarter"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(QualityControlItemDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): QualityControlDetail {
        data = typeof data === 'object' ? data : {};
        let result = new QualityControlDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["gender"] = this.gender;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["idNumber"] = this.idNumber;
        data["receiptDate"] = this.receiptDate;
        data["dialysisDateFirst"] = this.dialysisDateFirst;
        data["nameFull"] = this.nameFull;
        data["genderLabel"] = this.genderLabel;
        data["beforeSbp"] = this.beforeSbp;
        data["beforeDbp"] = this.beforeDbp;
        data["patientId"] = this.patientId;
        data["outDate"] = this.outDate ? this.outDate.toISOString() : <any>undefined;
        data["inDate"] = this.inDate ? this.inDate.toISOString() : <any>undefined;
        data["firstHalfYear"] = this.firstHalfYear;
        data["secondHalfYear"] = this.secondHalfYear;
        data["firstQuarter"] = this.firstQuarter;
        data["secondQuarter"] = this.secondQuarter;
        data["thirdQuarter"] = this.thirdQuarter;
        data["forthQuarter"] = this.forthQuarter;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IQualityControlDetail {
    /** 患者ID */
    id?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 姓名 */
    name?: string | undefined;
    /** 别名 */
    name2?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 身份证号 */
    idNumber?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: string | undefined;
    /** 患者全名 */
    nameFull?: string | undefined;
    /** 性别 字典标签 */
    genderLabel?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** [患者标识](#患者信息) */
    patientId?: string | undefined;
    /** 转出/退出时间 */
    outDate?: dayjs.Dayjs | undefined;
    /** 转入时间 */
    inDate?: dayjs.Dayjs | undefined;
    /** 上半年 */
    firstHalfYear?: string | undefined;
    /** 下半年 */
    secondHalfYear?: string | undefined;
    /** 第一季度 */
    firstQuarter?: string | undefined;
    /** 第二季度 */
    secondQuarter?: string | undefined;
    /** 第三季度 */
    thirdQuarter?: string | undefined;
    /** 第四季度 */
    forthQuarter?: string | undefined;
    items?: QualityControlItemDetail[] | undefined;
}

/** Reponse */
export class QualityControlDetailResult implements IQualityControlDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: QualityControlDetail[] | undefined;

    constructor(data?: IQualityControlDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(QualityControlDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): QualityControlDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new QualityControlDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IQualityControlDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: QualityControlDetail[] | undefined;
}

export class QualityControlItemDetail implements IQualityControlItemDetail {
    itemName?: string | undefined;
    itemValue?: string | undefined;

    constructor(data?: IQualityControlItemDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.itemName = _data["itemName"];
            this.itemValue = _data["itemValue"];
        }
    }

    static fromJS(data: any): QualityControlItemDetail {
        data = typeof data === 'object' ? data : {};
        let result = new QualityControlItemDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemName"] = this.itemName;
        data["itemValue"] = this.itemValue;
        return data;
    }
}

export interface IQualityControlItemDetail {
    itemName?: string | undefined;
    itemValue?: string | undefined;
}

export class QualityControlKtvUrrDetail implements IQualityControlKtvUrrDetail {
    /** 患者ID */
    id?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 姓名 */
    name?: string | undefined;
    /** 别名 */
    name2?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 身份证号 */
    idNumber?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: string | undefined;
    /** 患者全名 */
    nameFull?: string | undefined;
    /** 性别 字典标签 */
    genderLabel?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** [患者标识](#患者信息) */
    patientId?: string | undefined;
    /** 转出/退出时间 */
    outDate?: dayjs.Dayjs | undefined;
    /** 转入时间 */
    inDate?: dayjs.Dayjs | undefined;
    /** 上半年 */
    firstHalfYear?: string | undefined;
    /** 下半年 */
    secondHalfYear?: string | undefined;
    /** 第一季度 */
    firstQuarter?: string | undefined;
    /** 第二季度 */
    secondQuarter?: string | undefined;
    /** 第三季度 */
    thirdQuarter?: string | undefined;
    /** 第四季度 */
    forthQuarter?: string | undefined;
    items?: QualityControlItemDetail[] | undefined;
    ktv?: number | undefined;
    urr?: number | undefined;

    constructor(data?: IQualityControlKtvUrrDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.gender = _data["gender"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.idNumber = _data["idNumber"];
            this.receiptDate = _data["receiptDate"];
            this.dialysisDateFirst = _data["dialysisDateFirst"];
            this.nameFull = _data["nameFull"];
            this.genderLabel = _data["genderLabel"];
            this.beforeSbp = _data["beforeSbp"];
            this.beforeDbp = _data["beforeDbp"];
            this.patientId = _data["patientId"];
            this.outDate = _data["outDate"] ? dayjs(_data["outDate"].toString()) : <any>undefined;
            this.inDate = _data["inDate"] ? dayjs(_data["inDate"].toString()) : <any>undefined;
            this.firstHalfYear = _data["firstHalfYear"];
            this.secondHalfYear = _data["secondHalfYear"];
            this.firstQuarter = _data["firstQuarter"];
            this.secondQuarter = _data["secondQuarter"];
            this.thirdQuarter = _data["thirdQuarter"];
            this.forthQuarter = _data["forthQuarter"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(QualityControlItemDetail.fromJS(item));
            }
            this.ktv = _data["ktv"];
            this.urr = _data["urr"];
        }
    }

    static fromJS(data: any): QualityControlKtvUrrDetail {
        data = typeof data === 'object' ? data : {};
        let result = new QualityControlKtvUrrDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["gender"] = this.gender;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["idNumber"] = this.idNumber;
        data["receiptDate"] = this.receiptDate;
        data["dialysisDateFirst"] = this.dialysisDateFirst;
        data["nameFull"] = this.nameFull;
        data["genderLabel"] = this.genderLabel;
        data["beforeSbp"] = this.beforeSbp;
        data["beforeDbp"] = this.beforeDbp;
        data["patientId"] = this.patientId;
        data["outDate"] = this.outDate ? this.outDate.toISOString() : <any>undefined;
        data["inDate"] = this.inDate ? this.inDate.toISOString() : <any>undefined;
        data["firstHalfYear"] = this.firstHalfYear;
        data["secondHalfYear"] = this.secondHalfYear;
        data["firstQuarter"] = this.firstQuarter;
        data["secondQuarter"] = this.secondQuarter;
        data["thirdQuarter"] = this.thirdQuarter;
        data["forthQuarter"] = this.forthQuarter;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["ktv"] = this.ktv;
        data["urr"] = this.urr;
        return data;
    }
}

export interface IQualityControlKtvUrrDetail {
    /** 患者ID */
    id?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 姓名 */
    name?: string | undefined;
    /** 别名 */
    name2?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 身份证号 */
    idNumber?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: string | undefined;
    /** 患者全名 */
    nameFull?: string | undefined;
    /** 性别 字典标签 */
    genderLabel?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** [患者标识](#患者信息) */
    patientId?: string | undefined;
    /** 转出/退出时间 */
    outDate?: dayjs.Dayjs | undefined;
    /** 转入时间 */
    inDate?: dayjs.Dayjs | undefined;
    /** 上半年 */
    firstHalfYear?: string | undefined;
    /** 下半年 */
    secondHalfYear?: string | undefined;
    /** 第一季度 */
    firstQuarter?: string | undefined;
    /** 第二季度 */
    secondQuarter?: string | undefined;
    /** 第三季度 */
    thirdQuarter?: string | undefined;
    /** 第四季度 */
    forthQuarter?: string | undefined;
    items?: QualityControlItemDetail[] | undefined;
    ktv?: number | undefined;
    urr?: number | undefined;
}

/** Reponse */
export class QualityControlKtvUrrDetailResult implements IQualityControlKtvUrrDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: QualityControlKtvUrrDetail[] | undefined;

    constructor(data?: IQualityControlKtvUrrDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(QualityControlKtvUrrDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): QualityControlKtvUrrDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new QualityControlKtvUrrDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IQualityControlKtvUrrDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: QualityControlKtvUrrDetail[] | undefined;
}

export class QualityControlReport implements IQualityControlReport {
    /** Id */
    id?: string | undefined;
    /** 日期 */
    date?: dayjs.Dayjs | undefined;
    /** 报表类型 */
    type?: string | undefined;
    /** 值 */
    value?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 日期格式 */
    format?: string | undefined;
    /** 创建者标识 */
    creatorId?: string | undefined;
    /** 创建者 */
    creator?: string | undefined;
    /** 创建时间 */
    creationTime?: dayjs.Dayjs | undefined;
    /** 最后一次修改者标识 */
    lastModifierId?: string | undefined;
    /** 最后一次修改者 */
    lastModifier?: string | undefined;
    /** 最后一次修改时间 */
    lastModificationTime?: dayjs.Dayjs | undefined;
    /** 值 */
    value1?: number | undefined;
    /** 值 */
    sfValue?: number | undefined;
    /** 值 */
    tsatValue?: number | undefined;
    patientCount?: number;
    finishCount?: number;
    unFinishCount?: number;
    sfFinishCount?: number;
    tsatFinishCount?: number;
    /** 年份 */
    year?: number;

    constructor(data?: IQualityControlReport) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.value = _data["value"];
            this.remark = _data["remark"];
            this.format = _data["format"];
            this.creatorId = _data["creatorId"];
            this.creator = _data["creator"];
            this.creationTime = _data["creationTime"] ? dayjs(_data["creationTime"].toString()) : <any>undefined;
            this.lastModifierId = _data["lastModifierId"];
            this.lastModifier = _data["lastModifier"];
            this.lastModificationTime = _data["lastModificationTime"] ? dayjs(_data["lastModificationTime"].toString()) : <any>undefined;
            this.value1 = _data["value1"];
            this.sfValue = _data["sfValue"];
            this.tsatValue = _data["tsatValue"];
            this.patientCount = _data["patientCount"];
            this.finishCount = _data["finishCount"];
            this.unFinishCount = _data["unFinishCount"];
            this.sfFinishCount = _data["sfFinishCount"];
            this.tsatFinishCount = _data["tsatFinishCount"];
            this.year = _data["year"];
        }
    }

    static fromJS(data: any): QualityControlReport {
        data = typeof data === 'object' ? data : {};
        let result = new QualityControlReport();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["type"] = this.type;
        data["value"] = this.value;
        data["remark"] = this.remark;
        data["format"] = this.format;
        data["creatorId"] = this.creatorId;
        data["creator"] = this.creator;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModifierId"] = this.lastModifierId;
        data["lastModifier"] = this.lastModifier;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["value1"] = this.value1;
        data["sfValue"] = this.sfValue;
        data["tsatValue"] = this.tsatValue;
        data["patientCount"] = this.patientCount;
        data["finishCount"] = this.finishCount;
        data["unFinishCount"] = this.unFinishCount;
        data["sfFinishCount"] = this.sfFinishCount;
        data["tsatFinishCount"] = this.tsatFinishCount;
        data["year"] = this.year;
        return data;
    }
}

export interface IQualityControlReport {
    /** Id */
    id?: string | undefined;
    /** 日期 */
    date?: dayjs.Dayjs | undefined;
    /** 报表类型 */
    type?: string | undefined;
    /** 值 */
    value?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 日期格式 */
    format?: string | undefined;
    /** 创建者标识 */
    creatorId?: string | undefined;
    /** 创建者 */
    creator?: string | undefined;
    /** 创建时间 */
    creationTime?: dayjs.Dayjs | undefined;
    /** 最后一次修改者标识 */
    lastModifierId?: string | undefined;
    /** 最后一次修改者 */
    lastModifier?: string | undefined;
    /** 最后一次修改时间 */
    lastModificationTime?: dayjs.Dayjs | undefined;
    /** 值 */
    value1?: number | undefined;
    /** 值 */
    sfValue?: number | undefined;
    /** 值 */
    tsatValue?: number | undefined;
    patientCount?: number;
    finishCount?: number;
    unFinishCount?: number;
    sfFinishCount?: number;
    tsatFinishCount?: number;
    /** 年份 */
    year?: number;
}

/** Reponse */
export class QualityControlReportResult implements IQualityControlReportResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: QualityControlReport[] | undefined;

    constructor(data?: IQualityControlReportResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(QualityControlReport.fromJS(item));
            }
        }
    }

    static fromJS(data: any): QualityControlReportResult {
        data = typeof data === 'object' ? data : {};
        let result = new QualityControlReportResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IQualityControlReportResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: QualityControlReport[] | undefined;
}

export class QualityControlVascularAccessSurvivalDetail implements IQualityControlVascularAccessSurvivalDetail {
    /** 患者ID */
    id?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 姓名 */
    name?: string | undefined;
    /** 别名 */
    name2?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 身份证号 */
    idNumber?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: string | undefined;
    /** 患者全名 */
    nameFull?: string | undefined;
    /** 性别 字典标签 */
    genderLabel?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** [患者标识](#患者信息) */
    patientId?: string | undefined;
    /** 转出/退出时间 */
    outDate?: dayjs.Dayjs | undefined;
    /** 转入时间 */
    inDate?: dayjs.Dayjs | undefined;
    /** 上半年 */
    firstHalfYear?: string | undefined;
    /** 下半年 */
    secondHalfYear?: string | undefined;
    /** 第一季度 */
    firstQuarter?: string | undefined;
    /** 第二季度 */
    secondQuarter?: string | undefined;
    /** 第三季度 */
    thirdQuarter?: string | undefined;
    /** 第四季度 */
    forthQuarter?: string | undefined;
    items?: QualityControlItemDetail[] | undefined;
    lifetime?: string | undefined;

    constructor(data?: IQualityControlVascularAccessSurvivalDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.gender = _data["gender"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.idNumber = _data["idNumber"];
            this.receiptDate = _data["receiptDate"];
            this.dialysisDateFirst = _data["dialysisDateFirst"];
            this.nameFull = _data["nameFull"];
            this.genderLabel = _data["genderLabel"];
            this.beforeSbp = _data["beforeSbp"];
            this.beforeDbp = _data["beforeDbp"];
            this.patientId = _data["patientId"];
            this.outDate = _data["outDate"] ? dayjs(_data["outDate"].toString()) : <any>undefined;
            this.inDate = _data["inDate"] ? dayjs(_data["inDate"].toString()) : <any>undefined;
            this.firstHalfYear = _data["firstHalfYear"];
            this.secondHalfYear = _data["secondHalfYear"];
            this.firstQuarter = _data["firstQuarter"];
            this.secondQuarter = _data["secondQuarter"];
            this.thirdQuarter = _data["thirdQuarter"];
            this.forthQuarter = _data["forthQuarter"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(QualityControlItemDetail.fromJS(item));
            }
            this.lifetime = _data["lifetime"];
        }
    }

    static fromJS(data: any): QualityControlVascularAccessSurvivalDetail {
        data = typeof data === 'object' ? data : {};
        let result = new QualityControlVascularAccessSurvivalDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["gender"] = this.gender;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["idNumber"] = this.idNumber;
        data["receiptDate"] = this.receiptDate;
        data["dialysisDateFirst"] = this.dialysisDateFirst;
        data["nameFull"] = this.nameFull;
        data["genderLabel"] = this.genderLabel;
        data["beforeSbp"] = this.beforeSbp;
        data["beforeDbp"] = this.beforeDbp;
        data["patientId"] = this.patientId;
        data["outDate"] = this.outDate ? this.outDate.toISOString() : <any>undefined;
        data["inDate"] = this.inDate ? this.inDate.toISOString() : <any>undefined;
        data["firstHalfYear"] = this.firstHalfYear;
        data["secondHalfYear"] = this.secondHalfYear;
        data["firstQuarter"] = this.firstQuarter;
        data["secondQuarter"] = this.secondQuarter;
        data["thirdQuarter"] = this.thirdQuarter;
        data["forthQuarter"] = this.forthQuarter;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["lifetime"] = this.lifetime;
        return data;
    }
}

export interface IQualityControlVascularAccessSurvivalDetail {
    /** 患者ID */
    id?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 姓名 */
    name?: string | undefined;
    /** 别名 */
    name2?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 身份证号 */
    idNumber?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: string | undefined;
    /** 患者全名 */
    nameFull?: string | undefined;
    /** 性别 字典标签 */
    genderLabel?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** [患者标识](#患者信息) */
    patientId?: string | undefined;
    /** 转出/退出时间 */
    outDate?: dayjs.Dayjs | undefined;
    /** 转入时间 */
    inDate?: dayjs.Dayjs | undefined;
    /** 上半年 */
    firstHalfYear?: string | undefined;
    /** 下半年 */
    secondHalfYear?: string | undefined;
    /** 第一季度 */
    firstQuarter?: string | undefined;
    /** 第二季度 */
    secondQuarter?: string | undefined;
    /** 第三季度 */
    thirdQuarter?: string | undefined;
    /** 第四季度 */
    forthQuarter?: string | undefined;
    items?: QualityControlItemDetail[] | undefined;
    lifetime?: string | undefined;
}

/** Reponse */
export class QualityControlVascularAccessSurvivalDetailResult implements IQualityControlVascularAccessSurvivalDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: QualityControlVascularAccessSurvivalDetail[] | undefined;

    constructor(data?: IQualityControlVascularAccessSurvivalDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(QualityControlVascularAccessSurvivalDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): QualityControlVascularAccessSurvivalDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new QualityControlVascularAccessSurvivalDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IQualityControlVascularAccessSurvivalDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: QualityControlVascularAccessSurvivalDetail[] | undefined;
}

/** 动态查询条件 */
export class QueryFilter implements IQueryFilter {
    /** 起始位置(e.g. 0) */
    pageIndex!: number;
    /** 每页数量(e.g. 10) */
    pageSize!: number;
    /** 查询条件表达式(e.g. LoginName.Contains(@0)) */
    predicate?: string | undefined;
    /** 查询条件表达式参数(e.g. LoginName) */
    predicateValues?: any[] | undefined;
    /** 排序条件表达式(e.g. LoginName ASC,Name DESC) */
    ordering?: string | undefined;
    /** 报表名称 */
    reportName?: string | undefined;
    /** 分组条件(e.g. [10,20,30]) */
    groupValues?: number[] | undefined;
    /** 导出字段，按照顺序填写(e.g. ["名称","性别","年龄"]) */
    exportFields?: string[] | undefined;
    /** 导出字段的宽度（默认20），按照顺序与字段一一对应填写(e.g. [20,50,20]) */
    exportFieldsWidth?: number[] | undefined;
    reportFilter?: PatientFilter;

    constructor(data?: IQueryFilter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageIndex = _data["pageIndex"];
            this.pageSize = _data["pageSize"];
            this.predicate = _data["predicate"];
            if (Array.isArray(_data["predicateValues"])) {
                this.predicateValues = [] as any;
                for (let item of _data["predicateValues"])
                    this.predicateValues!.push(item);
            }
            this.ordering = _data["ordering"];
            this.reportName = _data["reportName"];
            if (Array.isArray(_data["groupValues"])) {
                this.groupValues = [] as any;
                for (let item of _data["groupValues"])
                    this.groupValues!.push(item);
            }
            if (Array.isArray(_data["exportFields"])) {
                this.exportFields = [] as any;
                for (let item of _data["exportFields"])
                    this.exportFields!.push(item);
            }
            if (Array.isArray(_data["exportFieldsWidth"])) {
                this.exportFieldsWidth = [] as any;
                for (let item of _data["exportFieldsWidth"])
                    this.exportFieldsWidth!.push(item);
            }
            this.reportFilter = _data["reportFilter"] ? PatientFilter.fromJS(_data["reportFilter"]) : <any>undefined;
        }
    }

    static fromJS(data: any): QueryFilter {
        data = typeof data === 'object' ? data : {};
        let result = new QueryFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageIndex"] = this.pageIndex;
        data["pageSize"] = this.pageSize;
        data["predicate"] = this.predicate;
        if (Array.isArray(this.predicateValues)) {
            data["predicateValues"] = [];
            for (let item of this.predicateValues)
                data["predicateValues"].push(item);
        }
        data["ordering"] = this.ordering;
        data["reportName"] = this.reportName;
        if (Array.isArray(this.groupValues)) {
            data["groupValues"] = [];
            for (let item of this.groupValues)
                data["groupValues"].push(item);
        }
        if (Array.isArray(this.exportFields)) {
            data["exportFields"] = [];
            for (let item of this.exportFields)
                data["exportFields"].push(item);
        }
        if (Array.isArray(this.exportFieldsWidth)) {
            data["exportFieldsWidth"] = [];
            for (let item of this.exportFieldsWidth)
                data["exportFieldsWidth"].push(item);
        }
        data["reportFilter"] = this.reportFilter ? this.reportFilter.toJSON() : <any>undefined;
        return data;
    }
}

/** 动态查询条件 */
export interface IQueryFilter {
    /** 起始位置(e.g. 0) */
    pageIndex: number;
    /** 每页数量(e.g. 10) */
    pageSize: number;
    /** 查询条件表达式(e.g. LoginName.Contains(@0)) */
    predicate?: string | undefined;
    /** 查询条件表达式参数(e.g. LoginName) */
    predicateValues?: any[] | undefined;
    /** 排序条件表达式(e.g. LoginName ASC,Name DESC) */
    ordering?: string | undefined;
    /** 报表名称 */
    reportName?: string | undefined;
    /** 分组条件(e.g. [10,20,30]) */
    groupValues?: number[] | undefined;
    /** 导出字段，按照顺序填写(e.g. ["名称","性别","年龄"]) */
    exportFields?: string[] | undefined;
    /** 导出字段的宽度（默认20），按照顺序与字段一一对应填写(e.g. [20,50,20]) */
    exportFieldsWidth?: number[] | undefined;
    reportFilter?: PatientFilter;
}

/** Reponse */
export class Result implements IResult {
    /** 返回结果(true,false) */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 相关的链接地址 */
    url?: string | undefined;
    count?: number;
    /** 数据 */
    data?: any | undefined;

    constructor(data?: IResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.url = _data["url"];
            this.count = _data["count"];
            this.data = _data["data"];
        }
    }

    static fromJS(data: any): Result {
        data = typeof data === 'object' ? data : {};
        let result = new Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["url"] = this.url;
        data["count"] = this.count;
        data["data"] = this.data;
        return data;
    }
}

/** Reponse */
export interface IResult {
    /** 返回结果(true,false) */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 相关的链接地址 */
    url?: string | undefined;
    count?: number;
    /** 数据 */
    data?: any | undefined;
}

/** 院感类 - 感染与非感染 */
export class SenseAffect implements ISenseAffect {
    /** 季度 */
    quarter?: string | undefined;
    /** 感染 */
    affect?: number;
    /** 非感染 */
    unAffect?: number;

    constructor(data?: ISenseAffect) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.quarter = _data["quarter"];
            this.affect = _data["affect"];
            this.unAffect = _data["unAffect"];
        }
    }

    static fromJS(data: any): SenseAffect {
        data = typeof data === 'object' ? data : {};
        let result = new SenseAffect();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["quarter"] = this.quarter;
        data["affect"] = this.affect;
        data["unAffect"] = this.unAffect;
        return data;
    }
}

/** 院感类 - 感染与非感染 */
export interface ISenseAffect {
    /** 季度 */
    quarter?: string | undefined;
    /** 感染 */
    affect?: number;
    /** 非感染 */
    unAffect?: number;
}

/** Reponse */
export class SenseAffectResult implements ISenseAffectResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SenseAffect[] | undefined;

    constructor(data?: ISenseAffectResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SenseAffect.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SenseAffectResult {
        data = typeof data === 'object' ? data : {};
        let result = new SenseAffectResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISenseAffectResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SenseAffect[] | undefined;
}

/** 院感类 - 透析液检测 */
export class SenseDialysateDetection implements ISenseDialysateDetection {
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 设备编号 */
    devCode?: string | undefined;
    /** 操作者 */
    operatorName?: string | undefined;
    /** 结果 */
    result?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ISenseDialysateDetection) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.devCode = _data["devCode"];
            this.operatorName = _data["operatorName"];
            this.result = _data["result"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): SenseDialysateDetection {
        data = typeof data === 'object' ? data : {};
        let result = new SenseDialysateDetection();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["devCode"] = this.devCode;
        data["operatorName"] = this.operatorName;
        data["result"] = this.result;
        data["remark"] = this.remark;
        return data;
    }
}

/** 院感类 - 透析液检测 */
export interface ISenseDialysateDetection {
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 设备编号 */
    devCode?: string | undefined;
    /** 操作者 */
    operatorName?: string | undefined;
    /** 结果 */
    result?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class SenseDialysateDetectionResult implements ISenseDialysateDetectionResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SenseDialysateDetection[] | undefined;

    constructor(data?: ISenseDialysateDetectionResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SenseDialysateDetection.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SenseDialysateDetectionResult {
        data = typeof data === 'object' ? data : {};
        let result = new SenseDialysateDetectionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISenseDialysateDetectionResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SenseDialysateDetection[] | undefined;
}

/** 院感类 - 电解质检测 */
export class SenseElectrolyte implements ISenseElectrolyte {
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 设备编号 */
    devCode?: string | undefined;
    /** 操作者 */
    operatorName?: string | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 氯 */
    cl?: number | undefined;
    /** 钾 */
    k?: number | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ISenseElectrolyte) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.devCode = _data["devCode"];
            this.operatorName = _data["operatorName"];
            this.na = _data["na"];
            this.cl = _data["cl"];
            this.k = _data["k"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): SenseElectrolyte {
        data = typeof data === 'object' ? data : {};
        let result = new SenseElectrolyte();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["devCode"] = this.devCode;
        data["operatorName"] = this.operatorName;
        data["na"] = this.na;
        data["cl"] = this.cl;
        data["k"] = this.k;
        data["remark"] = this.remark;
        return data;
    }
}

/** 院感类 - 电解质检测 */
export interface ISenseElectrolyte {
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 设备编号 */
    devCode?: string | undefined;
    /** 操作者 */
    operatorName?: string | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 氯 */
    cl?: number | undefined;
    /** 钾 */
    k?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class SenseElectrolyteResult implements ISenseElectrolyteResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SenseElectrolyte[] | undefined;

    constructor(data?: ISenseElectrolyteResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SenseElectrolyte.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SenseElectrolyteResult {
        data = typeof data === 'object' ? data : {};
        let result = new SenseElectrolyteResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISenseElectrolyteResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SenseElectrolyte[] | undefined;
}

/** 院感类 - 细菌培养 */
export class SenseGermiculture implements ISenseGermiculture {
    /** 送检日期 */
    submittedDate?: dayjs.Dayjs;
    /** 送检单位 */
    submittedDepartment?: string | undefined;
    /** 培养类型 */
    type?: string | undefined;
    /** 临床印象 */
    clinicalImpression?: string | undefined;
    /** 送检材料 */
    submittedMaterials?: string | undefined;
    /** 检验项目 */
    submittedProject?: string | undefined;
    /** 送检医师 */
    submitteDphysician?: string | undefined;
    /** 检查员 */
    inspector?: string | undefined;
    /** 检验者 */
    checker?: string | undefined;
    /** 报告日期 */
    reportDate?: dayjs.Dayjs;
    /** 检验结果 */
    result?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ISenseGermiculture) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.submittedDate = _data["submittedDate"] ? dayjs(_data["submittedDate"].toString()) : <any>undefined;
            this.submittedDepartment = _data["submittedDepartment"];
            this.type = _data["type"];
            this.clinicalImpression = _data["clinicalImpression"];
            this.submittedMaterials = _data["submittedMaterials"];
            this.submittedProject = _data["submittedProject"];
            this.submitteDphysician = _data["submitteDphysician"];
            this.inspector = _data["inspector"];
            this.checker = _data["checker"];
            this.reportDate = _data["reportDate"] ? dayjs(_data["reportDate"].toString()) : <any>undefined;
            this.result = _data["result"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): SenseGermiculture {
        data = typeof data === 'object' ? data : {};
        let result = new SenseGermiculture();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["submittedDate"] = this.submittedDate ? this.submittedDate.toISOString() : <any>undefined;
        data["submittedDepartment"] = this.submittedDepartment;
        data["type"] = this.type;
        data["clinicalImpression"] = this.clinicalImpression;
        data["submittedMaterials"] = this.submittedMaterials;
        data["submittedProject"] = this.submittedProject;
        data["submitteDphysician"] = this.submitteDphysician;
        data["inspector"] = this.inspector;
        data["checker"] = this.checker;
        data["reportDate"] = this.reportDate ? this.reportDate.toISOString() : <any>undefined;
        data["result"] = this.result;
        data["remark"] = this.remark;
        return data;
    }
}

/** 院感类 - 细菌培养 */
export interface ISenseGermiculture {
    /** 送检日期 */
    submittedDate?: dayjs.Dayjs;
    /** 送检单位 */
    submittedDepartment?: string | undefined;
    /** 培养类型 */
    type?: string | undefined;
    /** 临床印象 */
    clinicalImpression?: string | undefined;
    /** 送检材料 */
    submittedMaterials?: string | undefined;
    /** 检验项目 */
    submittedProject?: string | undefined;
    /** 送检医师 */
    submitteDphysician?: string | undefined;
    /** 检查员 */
    inspector?: string | undefined;
    /** 检验者 */
    checker?: string | undefined;
    /** 报告日期 */
    reportDate?: dayjs.Dayjs;
    /** 检验结果 */
    result?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class SenseGermicultureResult implements ISenseGermicultureResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SenseGermiculture[] | undefined;

    constructor(data?: ISenseGermicultureResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SenseGermiculture.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SenseGermicultureResult {
        data = typeof data === 'object' ? data : {};
        let result = new SenseGermicultureResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISenseGermicultureResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SenseGermiculture[] | undefined;
}

export class SenseHemodialysisInfect implements ISenseHemodialysisInfect {
    /** 年份 */
    year?: number;
    /** 报表类型 */
    type?: string | undefined;
    /** 患者总数 */
    totalCount?: number;
    /** 感染人数 */
    infectCount?: number;
    /** 占比 */
    rate?: number | undefined;

    constructor(data?: ISenseHemodialysisInfect) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.year = _data["year"];
            this.type = _data["type"];
            this.totalCount = _data["totalCount"];
            this.infectCount = _data["infectCount"];
            this.rate = _data["rate"];
        }
    }

    static fromJS(data: any): SenseHemodialysisInfect {
        data = typeof data === 'object' ? data : {};
        let result = new SenseHemodialysisInfect();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["year"] = this.year;
        data["type"] = this.type;
        data["totalCount"] = this.totalCount;
        data["infectCount"] = this.infectCount;
        data["rate"] = this.rate;
        return data;
    }
}

export interface ISenseHemodialysisInfect {
    /** 年份 */
    year?: number;
    /** 报表类型 */
    type?: string | undefined;
    /** 患者总数 */
    totalCount?: number;
    /** 感染人数 */
    infectCount?: number;
    /** 占比 */
    rate?: number | undefined;
}

export class SenseHemodialysisInfectDetail implements ISenseHemodialysisInfectDetail {
    /** 标识 */
    patientId?: string | undefined;
    /** 姓名 */
    patientName?: string | undefined;
    /** 性别 */
    genderLabel?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析龄 */
    dialysisAge?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: string | undefined;
    /** 接收日期 */
    receiptDate?: string | undefined;
    /** 发生日期 */
    happenDate?: string | undefined;

    constructor(data?: ISenseHemodialysisInfectDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.genderLabel = _data["genderLabel"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisAge = _data["dialysisAge"];
            this.dialysisDateFirst = _data["dialysisDateFirst"];
            this.receiptDate = _data["receiptDate"];
            this.happenDate = _data["happenDate"];
        }
    }

    static fromJS(data: any): SenseHemodialysisInfectDetail {
        data = typeof data === 'object' ? data : {};
        let result = new SenseHemodialysisInfectDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["genderLabel"] = this.genderLabel;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisAge"] = this.dialysisAge;
        data["dialysisDateFirst"] = this.dialysisDateFirst;
        data["receiptDate"] = this.receiptDate;
        data["happenDate"] = this.happenDate;
        return data;
    }
}

export interface ISenseHemodialysisInfectDetail {
    /** 标识 */
    patientId?: string | undefined;
    /** 姓名 */
    patientName?: string | undefined;
    /** 性别 */
    genderLabel?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析龄 */
    dialysisAge?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: string | undefined;
    /** 接收日期 */
    receiptDate?: string | undefined;
    /** 发生日期 */
    happenDate?: string | undefined;
}

/** Reponse */
export class SenseHemodialysisInfectDetailResult implements ISenseHemodialysisInfectDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SenseHemodialysisInfectDetail[] | undefined;

    constructor(data?: ISenseHemodialysisInfectDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SenseHemodialysisInfectDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SenseHemodialysisInfectDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new SenseHemodialysisInfectDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISenseHemodialysisInfectDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SenseHemodialysisInfectDetail[] | undefined;
}

/** Reponse */
export class SenseHemodialysisInfectResult implements ISenseHemodialysisInfectResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SenseHemodialysisInfect[] | undefined;

    constructor(data?: ISenseHemodialysisInfectResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SenseHemodialysisInfect.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SenseHemodialysisInfectResult {
        data = typeof data === 'object' ? data : {};
        let result = new SenseHemodialysisInfectResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISenseHemodialysisInfectResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SenseHemodialysisInfect[] | undefined;
}

/** 院感类 -- 传染学指标 */
export class SenseInfect implements ISenseInfect {
    /** 日期 */
    date?: string | undefined;
    /** 乙肝 */
    hbv?: number;
    /** 丙肝 */
    hcv?: number;
    /** 梅毒 */
    tpv?: number;
    /** 艾滋 */
    hiv?: number;

    constructor(data?: ISenseInfect) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.hbv = _data["hbv"];
            this.hcv = _data["hcv"];
            this.tpv = _data["tpv"];
            this.hiv = _data["hiv"];
        }
    }

    static fromJS(data: any): SenseInfect {
        data = typeof data === 'object' ? data : {};
        let result = new SenseInfect();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["hbv"] = this.hbv;
        data["hcv"] = this.hcv;
        data["tpv"] = this.tpv;
        data["hiv"] = this.hiv;
        return data;
    }
}

/** 院感类 -- 传染学指标 */
export interface ISenseInfect {
    /** 日期 */
    date?: string | undefined;
    /** 乙肝 */
    hbv?: number;
    /** 丙肝 */
    hcv?: number;
    /** 梅毒 */
    tpv?: number;
    /** 艾滋 */
    hiv?: number;
}

/** 院感类 -- 传染学指标检验率 */
export class SenseInfectDetail implements ISenseInfectDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 报告日期 */
    date?: string | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 检验项名称 */
    itemName?: string | undefined;
    /** 检验项Code */
    itemCode?: string | undefined;
    /** 检查结果 */
    itemValue?: string | undefined;
    /** 检验明细id */
    patientLisReportItemId?: string | undefined;

    constructor(data?: ISenseInfectDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.date = _data["date"];
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.itemName = _data["itemName"];
            this.itemCode = _data["itemCode"];
            this.itemValue = _data["itemValue"];
            this.patientLisReportItemId = _data["patientLisReportItemId"];
        }
    }

    static fromJS(data: any): SenseInfectDetail {
        data = typeof data === 'object' ? data : {};
        let result = new SenseInfectDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["date"] = this.date;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["itemName"] = this.itemName;
        data["itemCode"] = this.itemCode;
        data["itemValue"] = this.itemValue;
        data["patientLisReportItemId"] = this.patientLisReportItemId;
        return data;
    }
}

/** 院感类 -- 传染学指标检验率 */
export interface ISenseInfectDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 报告日期 */
    date?: string | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 检验项名称 */
    itemName?: string | undefined;
    /** 检验项Code */
    itemCode?: string | undefined;
    /** 检查结果 */
    itemValue?: string | undefined;
    /** 检验明细id */
    patientLisReportItemId?: string | undefined;
}

/** Reponse */
export class SenseInfectDetailResult implements ISenseInfectDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SenseInfectDetail[] | undefined;

    constructor(data?: ISenseInfectDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SenseInfectDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SenseInfectDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new SenseInfectDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISenseInfectDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SenseInfectDetail[] | undefined;
}

/** Reponse */
export class SenseInfectResult implements ISenseInfectResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SenseInfect[] | undefined;

    constructor(data?: ISenseInfectResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SenseInfect.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SenseInfectResult {
        data = typeof data === 'object' ? data : {};
        let result = new SenseInfectResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISenseInfectResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SenseInfect[] | undefined;
}

/** 院感类 - 内毒素检测 */
export class SenseKreotoxin implements ISenseKreotoxin {
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 设备编号 */
    devCode?: string | undefined;
    /** 操作者 */
    operatorName?: string | undefined;
    /** 取样口位置 */
    position?: string | undefined;
    /** 检测方法 */
    method?: string | undefined;
    /** 结果 */
    result?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ISenseKreotoxin) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.devCode = _data["devCode"];
            this.operatorName = _data["operatorName"];
            this.position = _data["position"];
            this.method = _data["method"];
            this.result = _data["result"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): SenseKreotoxin {
        data = typeof data === 'object' ? data : {};
        let result = new SenseKreotoxin();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["devCode"] = this.devCode;
        data["operatorName"] = this.operatorName;
        data["position"] = this.position;
        data["method"] = this.method;
        data["result"] = this.result;
        data["remark"] = this.remark;
        return data;
    }
}

/** 院感类 - 内毒素检测 */
export interface ISenseKreotoxin {
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 设备编号 */
    devCode?: string | undefined;
    /** 操作者 */
    operatorName?: string | undefined;
    /** 取样口位置 */
    position?: string | undefined;
    /** 检测方法 */
    method?: string | undefined;
    /** 结果 */
    result?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class SenseKreotoxinResult implements ISenseKreotoxinResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SenseKreotoxin[] | undefined;

    constructor(data?: ISenseKreotoxinResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SenseKreotoxin.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SenseKreotoxinResult {
        data = typeof data === 'object' ? data : {};
        let result = new SenseKreotoxinResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISenseKreotoxinResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SenseKreotoxin[] | undefined;
}

/** 院感类 - 阴转阳 */
export class SensePositive implements ISensePositive {
    /** 日期 */
    date?: string | undefined;
    /** 乙肝E抗原 */
    hbve?: number;
    /** 乙肝表面抗原 */
    hbvf?: number;
    /** 丙肝抗体 */
    hcv?: number;
    /** 梅毒抗体 */
    tpv?: number;
    /** 艾滋病抗体 */
    hiv?: number;

    constructor(data?: ISensePositive) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.hbve = _data["hbve"];
            this.hbvf = _data["hbvf"];
            this.hcv = _data["hcv"];
            this.tpv = _data["tpv"];
            this.hiv = _data["hiv"];
        }
    }

    static fromJS(data: any): SensePositive {
        data = typeof data === 'object' ? data : {};
        let result = new SensePositive();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["hbve"] = this.hbve;
        data["hbvf"] = this.hbvf;
        data["hcv"] = this.hcv;
        data["tpv"] = this.tpv;
        data["hiv"] = this.hiv;
        return data;
    }
}

/** 院感类 - 阴转阳 */
export interface ISensePositive {
    /** 日期 */
    date?: string | undefined;
    /** 乙肝E抗原 */
    hbve?: number;
    /** 乙肝表面抗原 */
    hbvf?: number;
    /** 丙肝抗体 */
    hcv?: number;
    /** 梅毒抗体 */
    tpv?: number;
    /** 艾滋病抗体 */
    hiv?: number;
}

/** 院感类 -- 阴转阳 -- 详情 */
export class SensePositiveDetail implements ISensePositiveDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 报告日期 */
    date?: string | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 检验项名称 */
    itemName?: string | undefined;
    /** 检验项Code */
    itemCode?: string | undefined;
    /** 检查结果 */
    itemValue?: string | undefined;

    constructor(data?: ISensePositiveDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.date = _data["date"];
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.itemName = _data["itemName"];
            this.itemCode = _data["itemCode"];
            this.itemValue = _data["itemValue"];
        }
    }

    static fromJS(data: any): SensePositiveDetail {
        data = typeof data === 'object' ? data : {};
        let result = new SensePositiveDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["date"] = this.date;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["itemName"] = this.itemName;
        data["itemCode"] = this.itemCode;
        data["itemValue"] = this.itemValue;
        return data;
    }
}

/** 院感类 -- 阴转阳 -- 详情 */
export interface ISensePositiveDetail {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 报告日期 */
    date?: string | undefined;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 检验项名称 */
    itemName?: string | undefined;
    /** 检验项Code */
    itemCode?: string | undefined;
    /** 检查结果 */
    itemValue?: string | undefined;
}

/** Reponse */
export class SensePositiveDetailResult implements ISensePositiveDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SensePositiveDetail[] | undefined;

    constructor(data?: ISensePositiveDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SensePositiveDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SensePositiveDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new SensePositiveDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISensePositiveDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SensePositiveDetail[] | undefined;
}

/** Reponse */
export class SensePositiveResult implements ISensePositiveResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SensePositive[] | undefined;

    constructor(data?: ISensePositiveResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SensePositive.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SensePositiveResult {
        data = typeof data === 'object' ? data : {};
        let result = new SensePositiveResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISensePositiveResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SensePositive[] | undefined;
}

/** 各班次耗材 */
export class ShiftConsumableUsed implements IShiftConsumableUsed {
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 血路管 */
    xlg?: string | undefined;
    /** 血滤器 */
    xlq?: string | undefined;
    /** 置换液管路 */
    zhygl?: string | undefined;
    /** 透析器 */
    txq?: string | undefined;
    /** 内瘘针 */
    nlz?: string | undefined;
    /** 灌流器 */
    glq?: string | undefined;

    constructor(data?: IShiftConsumableUsed) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shiftName = _data["shiftName"];
            this.xlg = _data["xlg"];
            this.xlq = _data["xlq"];
            this.zhygl = _data["zhygl"];
            this.txq = _data["txq"];
            this.nlz = _data["nlz"];
            this.glq = _data["glq"];
        }
    }

    static fromJS(data: any): ShiftConsumableUsed {
        data = typeof data === 'object' ? data : {};
        let result = new ShiftConsumableUsed();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shiftName"] = this.shiftName;
        data["xlg"] = this.xlg;
        data["xlq"] = this.xlq;
        data["zhygl"] = this.zhygl;
        data["txq"] = this.txq;
        data["nlz"] = this.nlz;
        data["glq"] = this.glq;
        return data;
    }
}

/** 各班次耗材 */
export interface IShiftConsumableUsed {
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 血路管 */
    xlg?: string | undefined;
    /** 血滤器 */
    xlq?: string | undefined;
    /** 置换液管路 */
    zhygl?: string | undefined;
    /** 透析器 */
    txq?: string | undefined;
    /** 内瘘针 */
    nlz?: string | undefined;
    /** 灌流器 */
    glq?: string | undefined;
}

/** 统计汇总- 统计首页 - 血压 */
export class StaticticsBloodPressure implements IStaticticsBloodPressure {
    /** 透前，透后 */
    tag?: string | undefined;
    /** 血压平均值详细信息集合 */
    items?: StaticticsBloodPressureItem[] | undefined;

    constructor(data?: IStaticticsBloodPressure) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tag = _data["tag"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(StaticticsBloodPressureItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): StaticticsBloodPressure {
        data = typeof data === 'object' ? data : {};
        let result = new StaticticsBloodPressure();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tag"] = this.tag;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 统计汇总- 统计首页 - 血压 */
export interface IStaticticsBloodPressure {
    /** 透前，透后 */
    tag?: string | undefined;
    /** 血压平均值详细信息集合 */
    items?: StaticticsBloodPressureItem[] | undefined;
}

/** 血压平均值详细信息 */
export class StaticticsBloodPressureItem implements IStaticticsBloodPressureItem {
    /** 舒张压 */
    sbp?: number;
    /** 收缩压 */
    dbp?: number;
    /** 日期 */
    date?: string | undefined;
    /** 达标率 */
    reachStandardRate?: number;

    constructor(data?: IStaticticsBloodPressureItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sbp = _data["sbp"];
            this.dbp = _data["dbp"];
            this.date = _data["date"];
            this.reachStandardRate = _data["reachStandardRate"];
        }
    }

    static fromJS(data: any): StaticticsBloodPressureItem {
        data = typeof data === 'object' ? data : {};
        let result = new StaticticsBloodPressureItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sbp"] = this.sbp;
        data["dbp"] = this.dbp;
        data["date"] = this.date;
        data["reachStandardRate"] = this.reachStandardRate;
        return data;
    }
}

/** 血压平均值详细信息 */
export interface IStaticticsBloodPressureItem {
    /** 舒张压 */
    sbp?: number;
    /** 收缩压 */
    dbp?: number;
    /** 日期 */
    date?: string | undefined;
    /** 达标率 */
    reachStandardRate?: number;
}

/** 统计首页 */
export class StaticticsWeight implements IStaticticsWeight {
    /** 体重增长平均值 */
    averageWest?: number;
    /** 达标率 */
    reachStandardRate?: number;
    /** 日期 */
    date?: string | undefined;

    constructor(data?: IStaticticsWeight) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.averageWest = _data["averageWest"];
            this.reachStandardRate = _data["reachStandardRate"];
            this.date = _data["date"];
        }
    }

    static fromJS(data: any): StaticticsWeight {
        data = typeof data === 'object' ? data : {};
        let result = new StaticticsWeight();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["averageWest"] = this.averageWest;
        data["reachStandardRate"] = this.reachStandardRate;
        data["date"] = this.date;
        return data;
    }
}

/** 统计首页 */
export interface IStaticticsWeight {
    /** 体重增长平均值 */
    averageWest?: number;
    /** 达标率 */
    reachStandardRate?: number;
    /** 日期 */
    date?: string | undefined;
}

/** 统计首页 */
export class StatisticIndex implements IStatisticIndex {
    /** 本月新增患者 */
    addPatient?: number;
    /** 在透患者 */
    inProcessPatient?: number;
    /** 累计患者 */
    totolPatent?: number;
    /** 转归患者 */
    prognosisPatient?: number;
    /** 治疗汇总 */
    cureSummary?: CureSummary[] | undefined;
    /** 干体重增长平均值 */
    patientWeight?: StaticticsWeight[] | undefined;
    /** 血压达标统计 */
    staticticsBloodPressure?: StaticticsBloodPressure[] | undefined;
    /** 血管通路 */
    cureVascularAccess?: CureVascularAccess[] | undefined;
    /** 新增传染学指标检验率 */
    senseInfect?: SenseInfect[] | undefined;
    /** 性别 */
    patientGender?: PatientGender[] | undefined;
    /** 民族 */
    patientNationality?: PatientNationality[] | undefined;
    /** 年龄 */
    patientAge?: PatientAge[] | undefined;
    /** 透析龄 */
    patientDialysisAge?: PatientDialysisAge[] | undefined;

    constructor(data?: IStatisticIndex) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.addPatient = _data["addPatient"];
            this.inProcessPatient = _data["inProcessPatient"];
            this.totolPatent = _data["totolPatent"];
            this.prognosisPatient = _data["prognosisPatient"];
            if (Array.isArray(_data["cureSummary"])) {
                this.cureSummary = [] as any;
                for (let item of _data["cureSummary"])
                    this.cureSummary!.push(CureSummary.fromJS(item));
            }
            if (Array.isArray(_data["patientWeight"])) {
                this.patientWeight = [] as any;
                for (let item of _data["patientWeight"])
                    this.patientWeight!.push(StaticticsWeight.fromJS(item));
            }
            if (Array.isArray(_data["staticticsBloodPressure"])) {
                this.staticticsBloodPressure = [] as any;
                for (let item of _data["staticticsBloodPressure"])
                    this.staticticsBloodPressure!.push(StaticticsBloodPressure.fromJS(item));
            }
            if (Array.isArray(_data["cureVascularAccess"])) {
                this.cureVascularAccess = [] as any;
                for (let item of _data["cureVascularAccess"])
                    this.cureVascularAccess!.push(CureVascularAccess.fromJS(item));
            }
            if (Array.isArray(_data["senseInfect"])) {
                this.senseInfect = [] as any;
                for (let item of _data["senseInfect"])
                    this.senseInfect!.push(SenseInfect.fromJS(item));
            }
            if (Array.isArray(_data["patientGender"])) {
                this.patientGender = [] as any;
                for (let item of _data["patientGender"])
                    this.patientGender!.push(PatientGender.fromJS(item));
            }
            if (Array.isArray(_data["patientNationality"])) {
                this.patientNationality = [] as any;
                for (let item of _data["patientNationality"])
                    this.patientNationality!.push(PatientNationality.fromJS(item));
            }
            if (Array.isArray(_data["patientAge"])) {
                this.patientAge = [] as any;
                for (let item of _data["patientAge"])
                    this.patientAge!.push(PatientAge.fromJS(item));
            }
            if (Array.isArray(_data["patientDialysisAge"])) {
                this.patientDialysisAge = [] as any;
                for (let item of _data["patientDialysisAge"])
                    this.patientDialysisAge!.push(PatientDialysisAge.fromJS(item));
            }
        }
    }

    static fromJS(data: any): StatisticIndex {
        data = typeof data === 'object' ? data : {};
        let result = new StatisticIndex();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["addPatient"] = this.addPatient;
        data["inProcessPatient"] = this.inProcessPatient;
        data["totolPatent"] = this.totolPatent;
        data["prognosisPatient"] = this.prognosisPatient;
        if (Array.isArray(this.cureSummary)) {
            data["cureSummary"] = [];
            for (let item of this.cureSummary)
                data["cureSummary"].push(item.toJSON());
        }
        if (Array.isArray(this.patientWeight)) {
            data["patientWeight"] = [];
            for (let item of this.patientWeight)
                data["patientWeight"].push(item.toJSON());
        }
        if (Array.isArray(this.staticticsBloodPressure)) {
            data["staticticsBloodPressure"] = [];
            for (let item of this.staticticsBloodPressure)
                data["staticticsBloodPressure"].push(item.toJSON());
        }
        if (Array.isArray(this.cureVascularAccess)) {
            data["cureVascularAccess"] = [];
            for (let item of this.cureVascularAccess)
                data["cureVascularAccess"].push(item.toJSON());
        }
        if (Array.isArray(this.senseInfect)) {
            data["senseInfect"] = [];
            for (let item of this.senseInfect)
                data["senseInfect"].push(item.toJSON());
        }
        if (Array.isArray(this.patientGender)) {
            data["patientGender"] = [];
            for (let item of this.patientGender)
                data["patientGender"].push(item.toJSON());
        }
        if (Array.isArray(this.patientNationality)) {
            data["patientNationality"] = [];
            for (let item of this.patientNationality)
                data["patientNationality"].push(item.toJSON());
        }
        if (Array.isArray(this.patientAge)) {
            data["patientAge"] = [];
            for (let item of this.patientAge)
                data["patientAge"].push(item.toJSON());
        }
        if (Array.isArray(this.patientDialysisAge)) {
            data["patientDialysisAge"] = [];
            for (let item of this.patientDialysisAge)
                data["patientDialysisAge"].push(item.toJSON());
        }
        return data;
    }
}

/** 统计首页 */
export interface IStatisticIndex {
    /** 本月新增患者 */
    addPatient?: number;
    /** 在透患者 */
    inProcessPatient?: number;
    /** 累计患者 */
    totolPatent?: number;
    /** 转归患者 */
    prognosisPatient?: number;
    /** 治疗汇总 */
    cureSummary?: CureSummary[] | undefined;
    /** 干体重增长平均值 */
    patientWeight?: StaticticsWeight[] | undefined;
    /** 血压达标统计 */
    staticticsBloodPressure?: StaticticsBloodPressure[] | undefined;
    /** 血管通路 */
    cureVascularAccess?: CureVascularAccess[] | undefined;
    /** 新增传染学指标检验率 */
    senseInfect?: SenseInfect[] | undefined;
    /** 性别 */
    patientGender?: PatientGender[] | undefined;
    /** 民族 */
    patientNationality?: PatientNationality[] | undefined;
    /** 年龄 */
    patientAge?: PatientAge[] | undefined;
    /** 透析龄 */
    patientDialysisAge?: PatientDialysisAge[] | undefined;
}

/** Reponse */
export class StatisticIndexResultEntry implements IStatisticIndexResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: StatisticIndex;

    constructor(data?: IStatisticIndexResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? StatisticIndex.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): StatisticIndexResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new StatisticIndexResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IStatisticIndexResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: StatisticIndex;
}

/** 临时班次信息 */
export class TempShiftInfo implements ITempShiftInfo {
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 状态 */
    content?: string | undefined;
    /** 加班时长 */
    overTimeCount?: number | undefined;
    /** 调休时长 */
    takeOffCount?: number | undefined;

    constructor(data?: ITempShiftInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shiftName = _data["shiftName"];
            this.content = _data["content"];
            this.overTimeCount = _data["overTimeCount"];
            this.takeOffCount = _data["takeOffCount"];
        }
    }

    static fromJS(data: any): TempShiftInfo {
        data = typeof data === 'object' ? data : {};
        let result = new TempShiftInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shiftName"] = this.shiftName;
        data["content"] = this.content;
        data["overTimeCount"] = this.overTimeCount;
        data["takeOffCount"] = this.takeOffCount;
        return data;
    }
}

/** 临时班次信息 */
export interface ITempShiftInfo {
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 状态 */
    content?: string | undefined;
    /** 加班时长 */
    overTimeCount?: number | undefined;
    /** 调休时长 */
    takeOffCount?: number | undefined;
}

/** 透析类 - 透析例次 */
export class Temporaryconduitlocation implements ITemporaryconduitlocation {
    /** 日期 */
    date?: string | undefined;
    /** 透析方式 */
    items?: TemporaryconduitlocationItem[] | undefined;

    constructor(data?: ITemporaryconduitlocation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TemporaryconduitlocationItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Temporaryconduitlocation {
        data = typeof data === 'object' ? data : {};
        let result = new Temporaryconduitlocation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 透析类 - 透析例次 */
export interface ITemporaryconduitlocation {
    /** 日期 */
    date?: string | undefined;
    /** 透析方式 */
    items?: TemporaryconduitlocationItem[] | undefined;
}

export class TemporaryconduitlocationItem implements ITemporaryconduitlocationItem {
    /** 透析方式 */
    dialysisMode?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: ITemporaryconduitlocationItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisMode = _data["dialysisMode"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): TemporaryconduitlocationItem {
        data = typeof data === 'object' ? data : {};
        let result = new TemporaryconduitlocationItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisMode"] = this.dialysisMode;
        data["count"] = this.count;
        return data;
    }
}

export interface ITemporaryconduitlocationItem {
    /** 透析方式 */
    dialysisMode?: string | undefined;
    /** 数量 */
    count?: number;
}

/** Reponse */
export class TemporaryconduitlocationResult implements ITemporaryconduitlocationResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: Temporaryconduitlocation[] | undefined;

    constructor(data?: ITemporaryconduitlocationResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(Temporaryconduitlocation.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TemporaryconduitlocationResult {
        data = typeof data === 'object' ? data : {};
        let result = new TemporaryconduitlocationResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ITemporaryconduitlocationResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: Temporaryconduitlocation[] | undefined;
}

/** 报表 - 化验类 - 分组类型统计 */
export class TestGroupType implements ITestGroupType {
    /** 类型 */
    type?: string | undefined;
    /** 数量 */
    count?: number;
    /** 占比 */
    rate?: number;
    /** 平均值 */
    average?: number;

    constructor(data?: ITestGroupType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.count = _data["count"];
            this.rate = _data["rate"];
            this.average = _data["average"];
        }
    }

    static fromJS(data: any): TestGroupType {
        data = typeof data === 'object' ? data : {};
        let result = new TestGroupType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["count"] = this.count;
        data["rate"] = this.rate;
        data["average"] = this.average;
        return data;
    }
}

/** 报表 - 化验类 - 分组类型统计 */
export interface ITestGroupType {
    /** 类型 */
    type?: string | undefined;
    /** 数量 */
    count?: number;
    /** 占比 */
    rate?: number;
    /** 平均值 */
    average?: number;
}

/** Reponse */
export class TestGroupTypeResult implements ITestGroupTypeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: TestGroupType[] | undefined;

    constructor(data?: ITestGroupTypeResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(TestGroupType.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TestGroupTypeResult {
        data = typeof data === 'object' ? data : {};
        let result = new TestGroupTypeResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ITestGroupTypeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: TestGroupType[] | undefined;
}

/** 报表 - 化验类 - 年度统计 */
export class TestReportItem implements ITestReportItem {
    /** 月份 */
    month?: string | undefined;
    /** 总数 */
    count?: number;
    /** 达标数(例) */
    standard?: number;
    /** 不达标数(例) */
    unStandard?: number;
    /** 超标数(例) */
    overStandard?: number;
    /** 达标率(%) */
    standardRate?: number;
    /** 平均值 */
    average?: number;
    /** 标准差 */
    standardDeviation?: number;

    constructor(data?: ITestReportItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.month = _data["month"];
            this.count = _data["count"];
            this.standard = _data["standard"];
            this.unStandard = _data["unStandard"];
            this.overStandard = _data["overStandard"];
            this.standardRate = _data["standardRate"];
            this.average = _data["average"];
            this.standardDeviation = _data["standardDeviation"];
        }
    }

    static fromJS(data: any): TestReportItem {
        data = typeof data === 'object' ? data : {};
        let result = new TestReportItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["month"] = this.month;
        data["count"] = this.count;
        data["standard"] = this.standard;
        data["unStandard"] = this.unStandard;
        data["overStandard"] = this.overStandard;
        data["standardRate"] = this.standardRate;
        data["average"] = this.average;
        data["standardDeviation"] = this.standardDeviation;
        return data;
    }
}

/** 报表 - 化验类 - 年度统计 */
export interface ITestReportItem {
    /** 月份 */
    month?: string | undefined;
    /** 总数 */
    count?: number;
    /** 达标数(例) */
    standard?: number;
    /** 不达标数(例) */
    unStandard?: number;
    /** 超标数(例) */
    overStandard?: number;
    /** 达标率(%) */
    standardRate?: number;
    /** 平均值 */
    average?: number;
    /** 标准差 */
    standardDeviation?: number;
}

export class TestReportItemDetailView implements ITestReportItemDetailView {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    readonly prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 检验时间 */
    reportTime?: dayjs.Dayjs;
    /** 检验大类 */
    testCategory?: string | undefined;
    itemName?: string | undefined;
    /** 结果值 */
    itemValue?: string | undefined;

    constructor(data?: ITestReportItemDetailView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.frequency = _data["frequency"];
            this.dossierNumber = _data["dossierNumber"];
            this.height = _data["height"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.diagnosis = _data["diagnosis"];
            this.educationalLevel = _data["educationalLevel"];
            this.medicare = _data["medicare"];
            this.nationality = _data["nationality"];
            this.poc = _data["poc"];
            this.weightBest = _data["weightBest"];
            this.tags = _data["tags"];
            this.prognosisDate = _data["prognosisDate"] ? dayjs(_data["prognosisDate"].toString()) : <any>undefined;
            (<any>this).prognosisDateThs = _data["prognosisDateThs"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.dialysisAge = _data["dialysisAge"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.reportTime = _data["reportTime"] ? dayjs(_data["reportTime"].toString()) : <any>undefined;
            this.testCategory = _data["testCategory"];
            this.itemName = _data["itemName"];
            this.itemValue = _data["itemValue"];
        }
    }

    static fromJS(data: any): TestReportItemDetailView {
        data = typeof data === 'object' ? data : {};
        let result = new TestReportItemDetailView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["frequency"] = this.frequency;
        data["dossierNumber"] = this.dossierNumber;
        data["height"] = this.height;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["diagnosis"] = this.diagnosis;
        data["educationalLevel"] = this.educationalLevel;
        data["medicare"] = this.medicare;
        data["nationality"] = this.nationality;
        data["poc"] = this.poc;
        data["weightBest"] = this.weightBest;
        data["tags"] = this.tags;
        data["prognosisDate"] = this.prognosisDate ? this.prognosisDate.toISOString() : <any>undefined;
        data["prognosisDateThs"] = this.prognosisDateThs;
        data["prognosisStateName"] = this.prognosisStateName;
        data["dialysisAge"] = this.dialysisAge;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["reportTime"] = this.reportTime ? this.reportTime.toISOString() : <any>undefined;
        data["testCategory"] = this.testCategory;
        data["itemName"] = this.itemName;
        data["itemValue"] = this.itemValue;
        return data;
    }
}

export interface ITestReportItemDetailView {
    /** 标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 透析卡号 */
    dialysisNumber?: string | undefined;
    /** 首透日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 使用日期 */
    date?: dayjs.Dayjs;
    /** 使用次数 */
    frequency?: number;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 电话 */
    telephone?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 医保类型 */
    medicare?: string | undefined;
    /** 民族 */
    nationality?: string | undefined;
    /** 原发病 */
    poc?: string | undefined;
    /** 干体重 */
    weightBest?: number;
    /** 标签 */
    tags?: string | undefined;
    /** 转归日期 */
    prognosisDate?: dayjs.Dayjs | undefined;
    prognosisDateThs?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 检验时间 */
    reportTime?: dayjs.Dayjs;
    /** 检验大类 */
    testCategory?: string | undefined;
    itemName?: string | undefined;
    /** 结果值 */
    itemValue?: string | undefined;
}

/** Reponse */
export class TestReportItemDetailViewResult implements ITestReportItemDetailViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: TestReportItemDetailView[] | undefined;

    constructor(data?: ITestReportItemDetailViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(TestReportItemDetailView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TestReportItemDetailViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new TestReportItemDetailViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ITestReportItemDetailViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: TestReportItemDetailView[] | undefined;
}

/** Reponse */
export class TestReportItemResult implements ITestReportItemResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: TestReportItem[] | undefined;

    constructor(data?: ITestReportItemResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(TestReportItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TestReportItemResult {
        data = typeof data === 'object' ? data : {};
        let result = new TestReportItemResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ITestReportItemResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: TestReportItem[] | undefined;
}

export class TestReportItemView implements ITestReportItemView {
    /** 月份 */
    date?: string | undefined;
    /** 总数 */
    count?: number;
    /** 达标数(例) */
    standard?: number;
    /** 不达标数(例) */
    unStandard?: number;
    /** 超标数(例) */
    overStandard?: number;
    /** 达标率(%) */
    readonly standardRate?: string | undefined;

    constructor(data?: ITestReportItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.count = _data["count"];
            this.standard = _data["standard"];
            this.unStandard = _data["unStandard"];
            this.overStandard = _data["overStandard"];
            (<any>this).standardRate = _data["standardRate"];
        }
    }

    static fromJS(data: any): TestReportItemView {
        data = typeof data === 'object' ? data : {};
        let result = new TestReportItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["count"] = this.count;
        data["standard"] = this.standard;
        data["unStandard"] = this.unStandard;
        data["overStandard"] = this.overStandard;
        data["standardRate"] = this.standardRate;
        return data;
    }
}

export interface ITestReportItemView {
    /** 月份 */
    date?: string | undefined;
    /** 总数 */
    count?: number;
    /** 达标数(例) */
    standard?: number;
    /** 不达标数(例) */
    unStandard?: number;
    /** 超标数(例) */
    overStandard?: number;
    /** 达标率(%) */
    standardRate?: string | undefined;
}

/** Reponse */
export class TestReportItemViewResult implements ITestReportItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: TestReportItemView[] | undefined;

    constructor(data?: ITestReportItemViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(TestReportItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TestReportItemViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new TestReportItemViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ITestReportItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: TestReportItemView[] | undefined;
}

/** 报表 - 化验类 - 类型统计 - 详情 */
export class TestTypeDetail implements ITestTypeDetail {
    /** 患者标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 来源 */
    source?: string | undefined;
    /** 入科日期 */
    receiptDate?: string | undefined;
    /** 报告时间 */
    reportTime?: dayjs.Dayjs;
    /** 报告时间 */
    reportDate?: string | undefined;
    /** 大类名称 */
    testCategory?: string | undefined;
    /** 名称 */
    itemName?: string | undefined;
    /** 检验结果 */
    itemValue?: string | undefined;

    constructor(data?: ITestTypeDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.gender = _data["gender"];
            this.age = _data["age"];
            this.source = _data["source"];
            this.receiptDate = _data["receiptDate"];
            this.reportTime = _data["reportTime"] ? dayjs(_data["reportTime"].toString()) : <any>undefined;
            this.reportDate = _data["reportDate"];
            this.testCategory = _data["testCategory"];
            this.itemName = _data["itemName"];
            this.itemValue = _data["itemValue"];
        }
    }

    static fromJS(data: any): TestTypeDetail {
        data = typeof data === 'object' ? data : {};
        let result = new TestTypeDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["gender"] = this.gender;
        data["age"] = this.age;
        data["source"] = this.source;
        data["receiptDate"] = this.receiptDate;
        data["reportTime"] = this.reportTime ? this.reportTime.toISOString() : <any>undefined;
        data["reportDate"] = this.reportDate;
        data["testCategory"] = this.testCategory;
        data["itemName"] = this.itemName;
        data["itemValue"] = this.itemValue;
        return data;
    }
}

/** 报表 - 化验类 - 类型统计 - 详情 */
export interface ITestTypeDetail {
    /** 患者标识 */
    id?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 性别显示值 */
    gender?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 来源 */
    source?: string | undefined;
    /** 入科日期 */
    receiptDate?: string | undefined;
    /** 报告时间 */
    reportTime?: dayjs.Dayjs;
    /** 报告时间 */
    reportDate?: string | undefined;
    /** 大类名称 */
    testCategory?: string | undefined;
    /** 名称 */
    itemName?: string | undefined;
    /** 检验结果 */
    itemValue?: string | undefined;
}

/** Reponse */
export class TestTypeDetailResult implements ITestTypeDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: TestTypeDetail[] | undefined;

    constructor(data?: ITestTypeDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(TestTypeDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TestTypeDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new TestTypeDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ITestTypeDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: TestTypeDetail[] | undefined;
}

/** 报表 - 化验类 - 类型统计 */
export class TestTypeReport implements ITestTypeReport {
    /** 类型 */
    type?: string | undefined;
    /** 数量 */
    count?: number;
    /** 占比 */
    rate?: number;
    /** 平均值 */
    average?: number;
    /** 标准差 */
    standardDeviation?: number;

    constructor(data?: ITestTypeReport) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.count = _data["count"];
            this.rate = _data["rate"];
            this.average = _data["average"];
            this.standardDeviation = _data["standardDeviation"];
        }
    }

    static fromJS(data: any): TestTypeReport {
        data = typeof data === 'object' ? data : {};
        let result = new TestTypeReport();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["count"] = this.count;
        data["rate"] = this.rate;
        data["average"] = this.average;
        data["standardDeviation"] = this.standardDeviation;
        return data;
    }
}

/** 报表 - 化验类 - 类型统计 */
export interface ITestTypeReport {
    /** 类型 */
    type?: string | undefined;
    /** 数量 */
    count?: number;
    /** 占比 */
    rate?: number;
    /** 平均值 */
    average?: number;
    /** 标准差 */
    standardDeviation?: number;
}

/** Reponse */
export class TestTypeReportResult implements ITestTypeReportResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: TestTypeReport[] | undefined;

    constructor(data?: ITestTypeReportResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(TestTypeReport.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TestTypeReportResult {
        data = typeof data === 'object' ? data : {};
        let result = new TestTypeReportResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ITestTypeReportResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: TestTypeReport[] | undefined;
}

/** 周次数详细 */
export class TimeCount implements ITimeCount {
    /** 周次数 */
    weekTimes?: string | undefined;
    /** 周数 */
    week?: number;
    /** 次数 */
    times?: number;
    /** 人数 */
    count?: number;
    /** 占比 */
    rate?: number;

    constructor(data?: ITimeCount) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.weekTimes = _data["weekTimes"];
            this.week = _data["week"];
            this.times = _data["times"];
            this.count = _data["count"];
            this.rate = _data["rate"];
        }
    }

    static fromJS(data: any): TimeCount {
        data = typeof data === 'object' ? data : {};
        let result = new TimeCount();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["weekTimes"] = this.weekTimes;
        data["week"] = this.week;
        data["times"] = this.times;
        data["count"] = this.count;
        data["rate"] = this.rate;
        return data;
    }
}

/** 周次数详细 */
export interface ITimeCount {
    /** 周次数 */
    weekTimes?: string | undefined;
    /** 周数 */
    week?: number;
    /** 次数 */
    times?: number;
    /** 人数 */
    count?: number;
    /** 占比 */
    rate?: number;
}

/** 上班统计 */
export class WorkSchedule implements IWorkSchedule {
    /** 医护姓名 */
    userName?: string | undefined;
    /** 医护Id */
    userId?: string | undefined;
    /** 职称名称 */
    professionalTitleLabel?: string | undefined;
    /** 总计 */
    count?: number;
    /** 调休 */
    holidayCount?: number;
    /** 加班统计 */
    overTimeCount?: number;
    /** 加班统计子项 */
    items?: WorkScheduleItem[] | undefined;

    constructor(data?: IWorkSchedule) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.userId = _data["userId"];
            this.professionalTitleLabel = _data["professionalTitleLabel"];
            this.count = _data["count"];
            this.holidayCount = _data["holidayCount"];
            this.overTimeCount = _data["overTimeCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(WorkScheduleItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): WorkSchedule {
        data = typeof data === 'object' ? data : {};
        let result = new WorkSchedule();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["userId"] = this.userId;
        data["professionalTitleLabel"] = this.professionalTitleLabel;
        data["count"] = this.count;
        data["holidayCount"] = this.holidayCount;
        data["overTimeCount"] = this.overTimeCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 上班统计 */
export interface IWorkSchedule {
    /** 医护姓名 */
    userName?: string | undefined;
    /** 医护Id */
    userId?: string | undefined;
    /** 职称名称 */
    professionalTitleLabel?: string | undefined;
    /** 总计 */
    count?: number;
    /** 调休 */
    holidayCount?: number;
    /** 加班统计 */
    overTimeCount?: number;
    /** 加班统计子项 */
    items?: WorkScheduleItem[] | undefined;
}

/** 上班统计子项 */
export class WorkScheduleItem implements IWorkScheduleItem {
    /** 日期 */
    date?: string | undefined;
    /** 星期 */
    day?: string | undefined;
    /** 班次信息 */
    tempShiftInfos?: TempShiftInfo[] | undefined;
    /** 时间是月份的时候改为数量 */
    monthCount?: number;

    constructor(data?: IWorkScheduleItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.day = _data["day"];
            if (Array.isArray(_data["tempShiftInfos"])) {
                this.tempShiftInfos = [] as any;
                for (let item of _data["tempShiftInfos"])
                    this.tempShiftInfos!.push(TempShiftInfo.fromJS(item));
            }
            this.monthCount = _data["monthCount"];
        }
    }

    static fromJS(data: any): WorkScheduleItem {
        data = typeof data === 'object' ? data : {};
        let result = new WorkScheduleItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["day"] = this.day;
        if (Array.isArray(this.tempShiftInfos)) {
            data["tempShiftInfos"] = [];
            for (let item of this.tempShiftInfos)
                data["tempShiftInfos"].push(item.toJSON());
        }
        data["monthCount"] = this.monthCount;
        return data;
    }
}

/** 上班统计子项 */
export interface IWorkScheduleItem {
    /** 日期 */
    date?: string | undefined;
    /** 星期 */
    day?: string | undefined;
    /** 班次信息 */
    tempShiftInfos?: TempShiftInfo[] | undefined;
    /** 时间是月份的时候改为数量 */
    monthCount?: number;
}

/** Reponse */
export class WorkScheduleResult implements IWorkScheduleResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: WorkSchedule[] | undefined;

    constructor(data?: IWorkScheduleResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(WorkSchedule.fromJS(item));
            }
        }
    }

    static fromJS(data: any): WorkScheduleResult {
        data = typeof data === 'object' ? data : {};
        let result = new WorkScheduleResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IWorkScheduleResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: WorkSchedule[] | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}