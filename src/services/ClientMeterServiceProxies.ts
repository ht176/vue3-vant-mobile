/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import {ServiceProxyBase} from './ServiceProxyBase'
import axios, { AxiosError, type AxiosInstance, type AxiosRequestConfig, type AxiosResponse, type CancelToken } from 'axios';

import dayjs from 'dayjs';

export class ClientMeterServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 当前时间 - 服务器当前时间
     * @return Success
     */
    current(  cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/ClientMeter/Time/Current";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCurrent(_response));
        });
    }

    protected processCurrent(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者信息 - 根据透析卡号，查询患者数据
     * @param cardNumber 透析卡号
     * @return Success
     */
    patient(cardNumber: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/ClientMeter/Patient/{cardNumber}";
        if (cardNumber === undefined || cardNumber === null)
            throw new Error("The parameter 'cardNumber' must be defined.");
        url_ = url_.replace("{cardNumber}", encodeURIComponent("" + cardNumber));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatient(_response));
        });
    }

    protected processPatient(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医院信息
     * @return Success
     */
    hospital(  cancelToken?: CancelToken | undefined): Promise<SysHospitalViewResultEntry> {
        let url_ = this.baseUrl + "/api/ClientMeter/Hospital";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospital(_response));
        });
    }

    protected processHospital(response: AxiosResponse): Promise<SysHospitalViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysHospitalViewResultEntry.fromJS(resultData200);
            return Promise.resolve<SysHospitalViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysHospitalViewResultEntry>(null as any);
    }

    /**
     * 透析记录 - 根据患者ID，查询透析记录
     * @param patientId 患者ID
     * @return Success
     */
    cureRecordGET(patientId: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/ClientMeter/CureRecord/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordGET(_response));
        });
    }

    protected processCureRecordGET(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析记录 - 根据患者ID，查询透析记录
     * @param patientId 患者ID
     * @param temperature 体温
     * @return Success
     */
    cureRecordGET2(patientId: string, temperature: number , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/ClientMeter/CureRecord/{patientId}/{temperature}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        if (temperature === undefined || temperature === null)
            throw new Error("The parameter 'temperature' must be defined.");
        url_ = url_.replace("{temperature}", encodeURIComponent("" + temperature));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordGET2(_response));
        });
    }

    protected processCureRecordGET2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者费用余额 - 费用统计
     * @param patientId (optional)
     * @return Success
     */
    summary(patientId: string | undefined , cancelToken?: CancelToken | undefined): Promise<CostBalanceViewResult> {
        let url_ = this.baseUrl + "/api/ClientMeter/Summary?";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSummary(_response));
        });
    }

    protected processSummary(response: AxiosResponse): Promise<CostBalanceViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CostBalanceViewResult.fromJS(resultData200);
            return Promise.resolve<CostBalanceViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CostBalanceViewResult>(null as any);
    }

    /**
     * 更新透析记录单数据 - 体重、血压、脉搏数据更新；透析记录单将根据此数据全字段更新
     * @param body (optional) 读取设备数据后，最新的治疗方案Model数据
     * @return Success
     */
    cureRecordPOST(body: ClientMeterRecordView | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/ClientMeter/CureRecord";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordPOST(_response));
        });
    }

    protected processCureRecordPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 更新透析记录单数据 - 体重、血压、脉搏数据更新；透析记录单将根据此数据全字段更新
     * @param body (optional) 读取设备数据后，最新的治疗方案Model数据
     * @return Success
     */
    cureRecordPUT(body: ClientMeterRecordView | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/ClientMeter/CureRecord";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordPUT(_response));
        });
    }

    protected processCureRecordPUT(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 监控大屏(中央站)
     * @return Success
     */
    centralStation(  cancelToken?: CancelToken | undefined): Promise<CentralStationViewResult> {
        let url_ = this.baseUrl + "/api/ClientMeter/CentralStation";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCentralStation(_response));
        });
    }

    protected processCentralStation(response: AxiosResponse): Promise<CentralStationViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CentralStationViewResult.fromJS(resultData200);
            return Promise.resolve<CentralStationViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CentralStationViewResult>(null as any);
    }

    /**
     * 中央监控站
     * @param code (optional)
     * @return Success
     */
    centralMonitorStation(code: string | undefined , cancelToken?: CancelToken | undefined): Promise<CentralMonitorStationViewResultEntry> {
        let url_ = this.baseUrl + "/api/ClientMeter/CentralMonitorStation?";
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCentralMonitorStation(_response));
        });
    }

    protected processCentralMonitorStation(response: AxiosResponse): Promise<CentralMonitorStationViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CentralMonitorStationViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CentralMonitorStationViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CentralMonitorStationViewResultEntry>(null as any);
    }

    /**
     * 呼叫通知
     * @param bedId (optional)
     * @return Success
     */
    callScreen(id: string, bedId: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/ClientMeter/CallScreen/{Id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{Id}", encodeURIComponent("" + id));
        if (bedId === null)
            throw new Error("The parameter 'bedId' cannot be null.");
        else if (bedId !== undefined)
            url_ += "bedId=" + encodeURIComponent("" + bedId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCallScreen(_response));
        });
    }

    protected processCallScreen(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 候诊大屏
     * @param code (optional)
     * @return Success
     */
    waitingScreen(code: string | undefined , cancelToken?: CancelToken | undefined): Promise<WaitingScreenViewResultEntry> {
        let url_ = this.baseUrl + "/api/ClientMeter/WaitingScreen?";
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processWaitingScreen(_response));
        });
    }

    protected processWaitingScreen(response: AxiosResponse): Promise<WaitingScreenViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = WaitingScreenViewResultEntry.fromJS(resultData200);
            return Promise.resolve<WaitingScreenViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<WaitingScreenViewResultEntry>(null as any);
    }

    /**
     * 大屏配置
     * @param code (optional) 大屏标识
     * @return Success
     */
    sysScreenItem(code: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysScreenItemViewResultEntry> {
        let url_ = this.baseUrl + "/api/ClientMeter/SysScreenItem?";
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysScreenItem(_response));
        });
    }

    protected processSysScreenItem(response: AxiosResponse): Promise<SysScreenItemViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysScreenItemViewResultEntry.fromJS(resultData200);
            return Promise.resolve<SysScreenItemViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysScreenItemViewResultEntry>(null as any);
    }

    /**
     * 多院区配置
     * @return Success
     */
    queryHospitalAreaData(  cancelToken?: CancelToken | undefined): Promise<HospitalAreaDataViewResultEntry> {
        let url_ = this.baseUrl + "/api/ClientMeter/QueryHospitalAreaData";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryHospitalAreaData(_response));
        });
    }

    protected processQueryHospitalAreaData(response: AxiosResponse): Promise<HospitalAreaDataViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalAreaDataViewResultEntry.fromJS(resultData200);
            return Promise.resolve<HospitalAreaDataViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalAreaDataViewResultEntry>(null as any);
    }

    /**
     * 查询大屏
     * @return Success
     */
    screen(code: string , cancelToken?: CancelToken | undefined): Promise<LargeScreenViewResultEntry> {
        let url_ = this.baseUrl + "/api/ClientMeter/Screen/{code}";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processScreen(_response));
        });
    }

    protected processScreen(response: AxiosResponse): Promise<LargeScreenViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = LargeScreenViewResultEntry.fromJS(resultData200);
            return Promise.resolve<LargeScreenViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<LargeScreenViewResultEntry>(null as any);
    }

    /**
     * 获取患者照片路径
     * @param newVersion (optional)
     * @return Success
     */
    queryPatientPictureUrl(newVersion: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<StringResult> {
        let url_ = this.baseUrl + "/api/ClientMeter/QueryPatientPictureUrl?";
        if (newVersion === null)
            throw new Error("The parameter 'newVersion' cannot be null.");
        else if (newVersion !== undefined)
            url_ += "newVersion=" + encodeURIComponent("" + newVersion) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryPatientPictureUrl(_response));
        });
    }

    protected processQueryPatientPictureUrl(response: AxiosResponse): Promise<StringResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = StringResult.fromJS(resultData200);
            return Promise.resolve<StringResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<StringResult>(null as any);
    }
}

/** 中央监控站 -- 治疗信息 */
export class CentralMonitorStationCureItem implements ICentralMonitorStationCureItem {
    /** 是否空床 */
    emptyBed?: number;
    /** 序号 */
    sequence?: number;
    /** 透析区间编号 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 透析区间序列 */
    dialysisAreaSequence?: number;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 床位序列 */
    bedSequence?: number;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 透析方式 */
    dialysisMode?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 检测时间 */
    monitorTime?: dayjs.Dayjs | undefined;
    /** 血流量 *ml/h* */
    bloodFlowRate?: string | undefined;
    /** 动脉压 *mmHg* */
    arterialPressure?: string | undefined;
    /** 静脉压 *mmHg* */
    venousPressure?: string | undefined;
    /** 跨膜压 *mmHg* */
    tmp?: string | undefined;
    /** 收缩压 *mmHg* */
    sbp?: string | undefined;
    /** 舒张压 *mmHg* */
    dbp?: string | undefined;
    /** 脉搏 *次/分* */
    pulse?: string | undefined;
    /** 透析液流量 *ml/h* */
    dialysateFlowRate?: string | undefined;
    /** 透析液电导度 *mS/cm* */
    dialysateCond?: string | undefined;
    /** 透析液温度 *℃* */
    dialysateTemp?: string | undefined;
    /** 超滤率 *ml/h* */
    ufr?: string | undefined;
    /** 超滤量 *ml* */
    ufv?: string | undefined;
    /** 预脱 *ml* */
    ufg?: string | undefined;
    /** 治疗状态 */
    status?: string | undefined;
    /** 治疗进度 (0-100的数值) */
    percent?: string | undefined;
    /** 当前实际透析时长 (分钟) */
    dialysisDuration?: string | undefined;
    /** 是否有异常 */
    abnormal?: number;

    constructor(data?: ICentralMonitorStationCureItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.emptyBed = _data["emptyBed"];
            this.sequence = _data["sequence"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.dialysisAreaSequence = _data["dialysisAreaSequence"];
            this.bedName = _data["bedName"];
            this.bedSequence = _data["bedSequence"];
            this.patientName = _data["patientName"];
            this.dialysisMode = _data["dialysisMode"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.monitorTime = _data["monitorTime"] ? dayjs(_data["monitorTime"].toString()) : <any>undefined;
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.arterialPressure = _data["arterialPressure"];
            this.venousPressure = _data["venousPressure"];
            this.tmp = _data["tmp"];
            this.sbp = _data["sbp"];
            this.dbp = _data["dbp"];
            this.pulse = _data["pulse"];
            this.dialysateFlowRate = _data["dialysateFlowRate"];
            this.dialysateCond = _data["dialysateCond"];
            this.dialysateTemp = _data["dialysateTemp"];
            this.ufr = _data["ufr"];
            this.ufv = _data["ufv"];
            this.ufg = _data["ufg"];
            this.status = _data["status"];
            this.percent = _data["percent"];
            this.dialysisDuration = _data["dialysisDuration"];
            this.abnormal = _data["abnormal"];
        }
    }

    static fromJS(data: any): CentralMonitorStationCureItem {
        data = typeof data === 'object' ? data : {};
        let result = new CentralMonitorStationCureItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emptyBed"] = this.emptyBed;
        data["sequence"] = this.sequence;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["dialysisAreaSequence"] = this.dialysisAreaSequence;
        data["bedName"] = this.bedName;
        data["bedSequence"] = this.bedSequence;
        data["patientName"] = this.patientName;
        data["dialysisMode"] = this.dialysisMode;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["monitorTime"] = this.monitorTime ? this.monitorTime.toISOString() : <any>undefined;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["arterialPressure"] = this.arterialPressure;
        data["venousPressure"] = this.venousPressure;
        data["tmp"] = this.tmp;
        data["sbp"] = this.sbp;
        data["dbp"] = this.dbp;
        data["pulse"] = this.pulse;
        data["dialysateFlowRate"] = this.dialysateFlowRate;
        data["dialysateCond"] = this.dialysateCond;
        data["dialysateTemp"] = this.dialysateTemp;
        data["ufr"] = this.ufr;
        data["ufv"] = this.ufv;
        data["ufg"] = this.ufg;
        data["status"] = this.status;
        data["percent"] = this.percent;
        data["dialysisDuration"] = this.dialysisDuration;
        data["abnormal"] = this.abnormal;
        return data;
    }
}

/** 中央监控站 -- 治疗信息 */
export interface ICentralMonitorStationCureItem {
    /** 是否空床 */
    emptyBed?: number;
    /** 序号 */
    sequence?: number;
    /** 透析区间编号 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 透析区间序列 */
    dialysisAreaSequence?: number;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 床位序列 */
    bedSequence?: number;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 透析方式 */
    dialysisMode?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** 检测时间 */
    monitorTime?: dayjs.Dayjs | undefined;
    /** 血流量 *ml/h* */
    bloodFlowRate?: string | undefined;
    /** 动脉压 *mmHg* */
    arterialPressure?: string | undefined;
    /** 静脉压 *mmHg* */
    venousPressure?: string | undefined;
    /** 跨膜压 *mmHg* */
    tmp?: string | undefined;
    /** 收缩压 *mmHg* */
    sbp?: string | undefined;
    /** 舒张压 *mmHg* */
    dbp?: string | undefined;
    /** 脉搏 *次/分* */
    pulse?: string | undefined;
    /** 透析液流量 *ml/h* */
    dialysateFlowRate?: string | undefined;
    /** 透析液电导度 *mS/cm* */
    dialysateCond?: string | undefined;
    /** 透析液温度 *℃* */
    dialysateTemp?: string | undefined;
    /** 超滤率 *ml/h* */
    ufr?: string | undefined;
    /** 超滤量 *ml* */
    ufv?: string | undefined;
    /** 预脱 *ml* */
    ufg?: string | undefined;
    /** 治疗状态 */
    status?: string | undefined;
    /** 治疗进度 (0-100的数值) */
    percent?: string | undefined;
    /** 当前实际透析时长 (分钟) */
    dialysisDuration?: string | undefined;
    /** 是否有异常 */
    abnormal?: number;
}

/** 中央监控站 -- 下机提醒 */
export class CentralMonitorStationOffBoardItem implements ICentralMonitorStationOffBoardItem {
    /** 序号 */
    sequence?: number;
    /** 床位 (透析区间+床位名称) */
    bedNo?: string | undefined;
    /** 上机时间 */
    timeOn?: dayjs.Dayjs;
    /** 剩余时间 */
    leftTime?: string | undefined;

    constructor(data?: ICentralMonitorStationOffBoardItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sequence = _data["sequence"];
            this.bedNo = _data["bedNo"];
            this.timeOn = _data["timeOn"] ? dayjs(_data["timeOn"].toString()) : <any>undefined;
            this.leftTime = _data["leftTime"];
        }
    }

    static fromJS(data: any): CentralMonitorStationOffBoardItem {
        data = typeof data === 'object' ? data : {};
        let result = new CentralMonitorStationOffBoardItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sequence"] = this.sequence;
        data["bedNo"] = this.bedNo;
        data["timeOn"] = this.timeOn ? this.timeOn.toISOString() : <any>undefined;
        data["leftTime"] = this.leftTime;
        return data;
    }
}

/** 中央监控站 -- 下机提醒 */
export interface ICentralMonitorStationOffBoardItem {
    /** 序号 */
    sequence?: number;
    /** 床位 (透析区间+床位名称) */
    bedNo?: string | undefined;
    /** 上机时间 */
    timeOn?: dayjs.Dayjs;
    /** 剩余时间 */
    leftTime?: string | undefined;
}

/** 中央监控站 -- 班次 */
export class CentralMonitorStationShiftItem implements ICentralMonitorStationShiftItem {
    /** 序号 */
    sequence?: number;
    /** 是否当前班次 *0 - 不是当前班次/1 - 是当前班次* */
    current?: number;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 上机人数(当前班次使用) */
    onBoardCount?: number;
    /** 下机人数(当前班次使用) */
    offBoardCount?: number;
    /** 总人数(非当前班次使用) */
    sumCount?: number;

    constructor(data?: ICentralMonitorStationShiftItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sequence = _data["sequence"];
            this.current = _data["current"];
            this.shiftName = _data["shiftName"];
            this.onBoardCount = _data["onBoardCount"];
            this.offBoardCount = _data["offBoardCount"];
            this.sumCount = _data["sumCount"];
        }
    }

    static fromJS(data: any): CentralMonitorStationShiftItem {
        data = typeof data === 'object' ? data : {};
        let result = new CentralMonitorStationShiftItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sequence"] = this.sequence;
        data["current"] = this.current;
        data["shiftName"] = this.shiftName;
        data["onBoardCount"] = this.onBoardCount;
        data["offBoardCount"] = this.offBoardCount;
        data["sumCount"] = this.sumCount;
        return data;
    }
}

/** 中央监控站 -- 班次 */
export interface ICentralMonitorStationShiftItem {
    /** 序号 */
    sequence?: number;
    /** 是否当前班次 *0 - 不是当前班次/1 - 是当前班次* */
    current?: number;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 上机人数(当前班次使用) */
    onBoardCount?: number;
    /** 下机人数(当前班次使用) */
    offBoardCount?: number;
    /** 总人数(非当前班次使用) */
    sumCount?: number;
}

/** 中央监控站 */
export class CentralMonitorStationView implements ICentralMonitorStationView {
    /** 下机提醒刷新时间 */
    refreshOffSpan?: number;
    /** 主面板刷新时间 */
    refreshCenterSpan?: number;
    /** 大屏布局 */
    screenLayout?: string | undefined;
    /** 医院Logo */
    hospitalLogo?: string | undefined;
    /** 医院名称 */
    hospitalName?: string | undefined;
    /** 班次信息 */
    shifts?: CentralMonitorStationShiftItem[] | undefined;
    /** 下机提醒 */
    offBoards?: CentralMonitorStationOffBoardItem[] | undefined;
    /** 治疗信息 */
    cures?: CentralMonitorStationCureItem[] | undefined;

    constructor(data?: ICentralMonitorStationView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.refreshOffSpan = _data["refreshOffSpan"];
            this.refreshCenterSpan = _data["refreshCenterSpan"];
            this.screenLayout = _data["screenLayout"];
            this.hospitalLogo = _data["hospitalLogo"];
            this.hospitalName = _data["hospitalName"];
            if (Array.isArray(_data["shifts"])) {
                this.shifts = [] as any;
                for (let item of _data["shifts"])
                    this.shifts!.push(CentralMonitorStationShiftItem.fromJS(item));
            }
            if (Array.isArray(_data["offBoards"])) {
                this.offBoards = [] as any;
                for (let item of _data["offBoards"])
                    this.offBoards!.push(CentralMonitorStationOffBoardItem.fromJS(item));
            }
            if (Array.isArray(_data["cures"])) {
                this.cures = [] as any;
                for (let item of _data["cures"])
                    this.cures!.push(CentralMonitorStationCureItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CentralMonitorStationView {
        data = typeof data === 'object' ? data : {};
        let result = new CentralMonitorStationView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["refreshOffSpan"] = this.refreshOffSpan;
        data["refreshCenterSpan"] = this.refreshCenterSpan;
        data["screenLayout"] = this.screenLayout;
        data["hospitalLogo"] = this.hospitalLogo;
        data["hospitalName"] = this.hospitalName;
        if (Array.isArray(this.shifts)) {
            data["shifts"] = [];
            for (let item of this.shifts)
                data["shifts"].push(item.toJSON());
        }
        if (Array.isArray(this.offBoards)) {
            data["offBoards"] = [];
            for (let item of this.offBoards)
                data["offBoards"].push(item.toJSON());
        }
        if (Array.isArray(this.cures)) {
            data["cures"] = [];
            for (let item of this.cures)
                data["cures"].push(item.toJSON());
        }
        return data;
    }
}

/** 中央监控站 */
export interface ICentralMonitorStationView {
    /** 下机提醒刷新时间 */
    refreshOffSpan?: number;
    /** 主面板刷新时间 */
    refreshCenterSpan?: number;
    /** 大屏布局 */
    screenLayout?: string | undefined;
    /** 医院Logo */
    hospitalLogo?: string | undefined;
    /** 医院名称 */
    hospitalName?: string | undefined;
    /** 班次信息 */
    shifts?: CentralMonitorStationShiftItem[] | undefined;
    /** 下机提醒 */
    offBoards?: CentralMonitorStationOffBoardItem[] | undefined;
    /** 治疗信息 */
    cures?: CentralMonitorStationCureItem[] | undefined;
}

/** Reponse */
export class CentralMonitorStationViewResultEntry implements ICentralMonitorStationViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CentralMonitorStationView;

    constructor(data?: ICentralMonitorStationViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CentralMonitorStationView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CentralMonitorStationViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CentralMonitorStationViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICentralMonitorStationViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CentralMonitorStationView;
}

/** 监控大屏（中央站） */
export class CentralStationView implements ICentralStationView {
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 透析区间序列 */
    dialysisAreaSequence?: number;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 床位序列 */
    bedSequence?: number;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 透析机标识 */
    dialysisMachineId?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineType?: string | undefined;
    /** 透析机类型显示值 */
    dialysisMachineTypeLabel?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet?: number;
    /** 状态 */
    status?: string | undefined;
    /** 状态 - 显示值 */
    statusLabel?: string | undefined;
    /** 透析方式显示值 */
    dialysisModeLabel?: string | undefined;
    /** 设备IP */
    deviceIp?: string | undefined;
    /** 治疗时间 *min* */
    therapyTime?: number | undefined;
    /** 动脉压 *mmHg* */
    arterialPressure?: number | undefined;
    /** 静脉压 *mmHg* */
    venousPressure?: number | undefined;
    /** 跨膜压 *mmHg* */
    tmp?: number | undefined;
    /** 收缩压 *mmHg* */
    sbp?: number | undefined;
    /** 舒张压 *mmHg* */
    dbp?: number | undefined;
    /** 平均动脉压 *mmHg* */
    meanArterialPressure?: number | undefined;
    /** 脉搏 *次/分* */
    pulse?: number | undefined;
    /** 透析液流量 *ml/h* */
    dialysateFlowRate?: number | undefined;
    /** 透析液电导度 *mS/cm* */
    dialysateCond?: number | undefined;
    /** 透析液温度 *℃* */
    dialysateTemp?: number | undefined;
    /** 超滤率 *ml/h* */
    ufr?: number | undefined;
    /** 超滤量 *ml* */
    ufv?: number | undefined;
    /** 血流量 *ml/h* */
    bloodFlowRate?: number | undefined;
    /** 血流量 *l* */
    bloodFlowVolume?: number | undefined;
    /** 肝素量 *ml* */
    heparinVolume?: number | undefined;
    /** 设定治疗时间 *min* */
    therapyTimeSet?: number | undefined;
    /** 设定超滤量 *ml* */
    ufvSet?: number | undefined;
    /** 设定血流量 *ml/h* */
    bloodFlowRateSet?: number | undefined;
    /** 设定肝素速率 *ml/h* */
    heparinRateSet?: number | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICentralStationView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.dialysisAreaSequence = _data["dialysisAreaSequence"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.bedSequence = _data["bedSequence"];
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.dialysisMachineId = _data["dialysisMachineId"];
            this.dialysisMachineType = _data["dialysisMachineType"];
            this.dialysisMachineTypeLabel = _data["dialysisMachineTypeLabel"];
            this.dialysisMachineModel = _data["dialysisMachineModel"];
            this.dialysisMachineNo = _data["dialysisMachineNo"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisDurationSet = _data["dialysisDurationSet"];
            this.status = _data["status"];
            this.statusLabel = _data["statusLabel"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.deviceIp = _data["deviceIp"];
            this.therapyTime = _data["therapyTime"];
            this.arterialPressure = _data["arterialPressure"];
            this.venousPressure = _data["venousPressure"];
            this.tmp = _data["tmp"];
            this.sbp = _data["sbp"];
            this.dbp = _data["dbp"];
            this.meanArterialPressure = _data["meanArterialPressure"];
            this.pulse = _data["pulse"];
            this.dialysateFlowRate = _data["dialysateFlowRate"];
            this.dialysateCond = _data["dialysateCond"];
            this.dialysateTemp = _data["dialysateTemp"];
            this.ufr = _data["ufr"];
            this.ufv = _data["ufv"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.bloodFlowVolume = _data["bloodFlowVolume"];
            this.heparinVolume = _data["heparinVolume"];
            this.therapyTimeSet = _data["therapyTimeSet"];
            this.ufvSet = _data["ufvSet"];
            this.bloodFlowRateSet = _data["bloodFlowRateSet"];
            this.heparinRateSet = _data["heparinRateSet"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CentralStationView {
        data = typeof data === 'object' ? data : {};
        let result = new CentralStationView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["dialysisAreaSequence"] = this.dialysisAreaSequence;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["bedSequence"] = this.bedSequence;
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["dialysisMachineId"] = this.dialysisMachineId;
        data["dialysisMachineType"] = this.dialysisMachineType;
        data["dialysisMachineTypeLabel"] = this.dialysisMachineTypeLabel;
        data["dialysisMachineModel"] = this.dialysisMachineModel;
        data["dialysisMachineNo"] = this.dialysisMachineNo;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisDurationSet"] = this.dialysisDurationSet;
        data["status"] = this.status;
        data["statusLabel"] = this.statusLabel;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["deviceIp"] = this.deviceIp;
        data["therapyTime"] = this.therapyTime;
        data["arterialPressure"] = this.arterialPressure;
        data["venousPressure"] = this.venousPressure;
        data["tmp"] = this.tmp;
        data["sbp"] = this.sbp;
        data["dbp"] = this.dbp;
        data["meanArterialPressure"] = this.meanArterialPressure;
        data["pulse"] = this.pulse;
        data["dialysateFlowRate"] = this.dialysateFlowRate;
        data["dialysateCond"] = this.dialysateCond;
        data["dialysateTemp"] = this.dialysateTemp;
        data["ufr"] = this.ufr;
        data["ufv"] = this.ufv;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["bloodFlowVolume"] = this.bloodFlowVolume;
        data["heparinVolume"] = this.heparinVolume;
        data["therapyTimeSet"] = this.therapyTimeSet;
        data["ufvSet"] = this.ufvSet;
        data["bloodFlowRateSet"] = this.bloodFlowRateSet;
        data["heparinRateSet"] = this.heparinRateSet;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 监控大屏（中央站） */
export interface ICentralStationView {
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 透析区间序列 */
    dialysisAreaSequence?: number;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 床位序列 */
    bedSequence?: number;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 透析机标识 */
    dialysisMachineId?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineType?: string | undefined;
    /** 透析机类型显示值 */
    dialysisMachineTypeLabel?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet?: number;
    /** 状态 */
    status?: string | undefined;
    /** 状态 - 显示值 */
    statusLabel?: string | undefined;
    /** 透析方式显示值 */
    dialysisModeLabel?: string | undefined;
    /** 设备IP */
    deviceIp?: string | undefined;
    /** 治疗时间 *min* */
    therapyTime?: number | undefined;
    /** 动脉压 *mmHg* */
    arterialPressure?: number | undefined;
    /** 静脉压 *mmHg* */
    venousPressure?: number | undefined;
    /** 跨膜压 *mmHg* */
    tmp?: number | undefined;
    /** 收缩压 *mmHg* */
    sbp?: number | undefined;
    /** 舒张压 *mmHg* */
    dbp?: number | undefined;
    /** 平均动脉压 *mmHg* */
    meanArterialPressure?: number | undefined;
    /** 脉搏 *次/分* */
    pulse?: number | undefined;
    /** 透析液流量 *ml/h* */
    dialysateFlowRate?: number | undefined;
    /** 透析液电导度 *mS/cm* */
    dialysateCond?: number | undefined;
    /** 透析液温度 *℃* */
    dialysateTemp?: number | undefined;
    /** 超滤率 *ml/h* */
    ufr?: number | undefined;
    /** 超滤量 *ml* */
    ufv?: number | undefined;
    /** 血流量 *ml/h* */
    bloodFlowRate?: number | undefined;
    /** 血流量 *l* */
    bloodFlowVolume?: number | undefined;
    /** 肝素量 *ml* */
    heparinVolume?: number | undefined;
    /** 设定治疗时间 *min* */
    therapyTimeSet?: number | undefined;
    /** 设定超滤量 *ml* */
    ufvSet?: number | undefined;
    /** 设定血流量 *ml/h* */
    bloodFlowRateSet?: number | undefined;
    /** 设定肝素速率 *ml/h* */
    heparinRateSet?: number | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CentralStationViewResult implements ICentralStationViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CentralStationView[] | undefined;

    constructor(data?: ICentralStationViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CentralStationView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CentralStationViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CentralStationViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICentralStationViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CentralStationView[] | undefined;
}

/** 联机仪表 - 根据患者ID，查询治疗方案 */
export class ClientMeterRecordView implements IClientMeterRecordView {
    /** 透析记录标识 */
    id?: string | undefined;
    /** 透析方式 */
    dialysisModeLabel?: string | undefined;
    /** 透析区间 */
    dialysisAreaName?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 干体重 *kg */
    bestWeight?: number | undefined;
    /** 偏移量调整 */
    deductionWeight?: number | undefined;
    /** 透前体重 */
    beforeWeight?: number | undefined;
    /** 目标脱水量 */
    ufg?: number | undefined;
    /** 透后体重 */
    afterWeight?: number | undefined;
    /** 实际脱水量 */
    ufv?: number | undefined;
    /** 最后一次体重(算法改变，接口默认填 0) */
    lastWeight?: number;
    /** 透前收缩压 */
    beforeSbp?: number | undefined;
    /** 透前舒张压 */
    beforeDbp?: number | undefined;
    /** 透前脉搏 */
    beforePulse?: number | undefined;
    /** 透后收缩压 */
    afterSbp?: number | undefined;
    /** 透后舒张压 */
    afterDbp?: number | undefined;
    /** 透后脉搏 */
    afterPulse?: number | undefined;
    /** 透析状态：透前(up)、透后(down) */
    status?: string | undefined;
    /** 体温 */
    temperature?: number | undefined;
    /** 提醒信息 */
    remindInfo?: string | undefined;
    /** 患者检查项提醒 */
    patientLisReminds?: PatientLisRemindView[] | undefined;
    /** 历史血压数据 */
    historyBloodPressures?: HistoryBloodPressure[] | undefined;
    /** 历次体重 */
    historyWeights?: HistoryWeight[] | undefined;

    constructor(data?: IClientMeterRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.shiftName = _data["shiftName"];
            this.bedName = _data["bedName"];
            this.bestWeight = _data["bestWeight"];
            this.deductionWeight = _data["deductionWeight"];
            this.beforeWeight = _data["beforeWeight"];
            this.ufg = _data["ufg"];
            this.afterWeight = _data["afterWeight"];
            this.ufv = _data["ufv"];
            this.lastWeight = _data["lastWeight"];
            this.beforeSbp = _data["beforeSbp"];
            this.beforeDbp = _data["beforeDbp"];
            this.beforePulse = _data["beforePulse"];
            this.afterSbp = _data["afterSbp"];
            this.afterDbp = _data["afterDbp"];
            this.afterPulse = _data["afterPulse"];
            this.status = _data["status"];
            this.temperature = _data["temperature"];
            this.remindInfo = _data["remindInfo"];
            if (Array.isArray(_data["patientLisReminds"])) {
                this.patientLisReminds = [] as any;
                for (let item of _data["patientLisReminds"])
                    this.patientLisReminds!.push(PatientLisRemindView.fromJS(item));
            }
            if (Array.isArray(_data["historyBloodPressures"])) {
                this.historyBloodPressures = [] as any;
                for (let item of _data["historyBloodPressures"])
                    this.historyBloodPressures!.push(HistoryBloodPressure.fromJS(item));
            }
            if (Array.isArray(_data["historyWeights"])) {
                this.historyWeights = [] as any;
                for (let item of _data["historyWeights"])
                    this.historyWeights!.push(HistoryWeight.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ClientMeterRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new ClientMeterRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["shiftName"] = this.shiftName;
        data["bedName"] = this.bedName;
        data["bestWeight"] = this.bestWeight;
        data["deductionWeight"] = this.deductionWeight;
        data["beforeWeight"] = this.beforeWeight;
        data["ufg"] = this.ufg;
        data["afterWeight"] = this.afterWeight;
        data["ufv"] = this.ufv;
        data["lastWeight"] = this.lastWeight;
        data["beforeSbp"] = this.beforeSbp;
        data["beforeDbp"] = this.beforeDbp;
        data["beforePulse"] = this.beforePulse;
        data["afterSbp"] = this.afterSbp;
        data["afterDbp"] = this.afterDbp;
        data["afterPulse"] = this.afterPulse;
        data["status"] = this.status;
        data["temperature"] = this.temperature;
        data["remindInfo"] = this.remindInfo;
        if (Array.isArray(this.patientLisReminds)) {
            data["patientLisReminds"] = [];
            for (let item of this.patientLisReminds)
                data["patientLisReminds"].push(item.toJSON());
        }
        if (Array.isArray(this.historyBloodPressures)) {
            data["historyBloodPressures"] = [];
            for (let item of this.historyBloodPressures)
                data["historyBloodPressures"].push(item.toJSON());
        }
        if (Array.isArray(this.historyWeights)) {
            data["historyWeights"] = [];
            for (let item of this.historyWeights)
                data["historyWeights"].push(item.toJSON());
        }
        return data;
    }
}

/** 联机仪表 - 根据患者ID，查询治疗方案 */
export interface IClientMeterRecordView {
    /** 透析记录标识 */
    id?: string | undefined;
    /** 透析方式 */
    dialysisModeLabel?: string | undefined;
    /** 透析区间 */
    dialysisAreaName?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 干体重 *kg */
    bestWeight?: number | undefined;
    /** 偏移量调整 */
    deductionWeight?: number | undefined;
    /** 透前体重 */
    beforeWeight?: number | undefined;
    /** 目标脱水量 */
    ufg?: number | undefined;
    /** 透后体重 */
    afterWeight?: number | undefined;
    /** 实际脱水量 */
    ufv?: number | undefined;
    /** 最后一次体重(算法改变，接口默认填 0) */
    lastWeight?: number;
    /** 透前收缩压 */
    beforeSbp?: number | undefined;
    /** 透前舒张压 */
    beforeDbp?: number | undefined;
    /** 透前脉搏 */
    beforePulse?: number | undefined;
    /** 透后收缩压 */
    afterSbp?: number | undefined;
    /** 透后舒张压 */
    afterDbp?: number | undefined;
    /** 透后脉搏 */
    afterPulse?: number | undefined;
    /** 透析状态：透前(up)、透后(down) */
    status?: string | undefined;
    /** 体温 */
    temperature?: number | undefined;
    /** 提醒信息 */
    remindInfo?: string | undefined;
    /** 患者检查项提醒 */
    patientLisReminds?: PatientLisRemindView[] | undefined;
    /** 历史血压数据 */
    historyBloodPressures?: HistoryBloodPressure[] | undefined;
    /** 历次体重 */
    historyWeights?: HistoryWeight[] | undefined;
}

export class CostBalanceView implements ICostBalanceView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 金额 */
    balanceSum?: number | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source!: string;
    /** 单价 */
    unitPrice?: number | undefined;
    /** 剩余数量 */
    surplusCount!: number;
    /** 主键标识 */
    id?: string | undefined;
    /** 上次缴费时间 */
    lastRechargeTime?: dayjs.Dayjs | undefined;
    /** 上次扣费时间 */
    lastDeductionTime?: dayjs.Dayjs | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者来源显示值 */
    sourceLabel?: string | undefined;
    /** 序号 */
    index?: number | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;

    constructor(data?: ICostBalanceView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.balanceSum = _data["balanceSum"];
            this.roomItemListId = _data["roomItemListId"];
            this.source = _data["source"];
            this.unitPrice = _data["unitPrice"];
            this.surplusCount = _data["surplusCount"];
            this.id = _data["id"];
            this.lastRechargeTime = _data["lastRechargeTime"] ? dayjs(_data["lastRechargeTime"].toString()) : <any>undefined;
            this.lastDeductionTime = _data["lastDeductionTime"] ? dayjs(_data["lastDeductionTime"].toString()) : <any>undefined;
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.sourceLabel = _data["sourceLabel"];
            this.index = _data["index"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemListNameGoods = _data["roomItemListNameGoods"];
            this.roomItemListShortName = _data["roomItemListShortName"];
            this.usageMode = _data["usageMode"];
            this.usageModeLabel = _data["usageModeLabel"];
            this.spec = _data["spec"];
            this.specLabel = _data["specLabel"];
            this.manufacturer = _data["manufacturer"];
            this.manufacturerLabel = _data["manufacturerLabel"];
            this.unitBaseLabel = _data["unitBaseLabel"];
            this.roomItemListPinyinCode = _data["roomItemListPinyinCode"];
            this.roomItemListWubiCode = _data["roomItemListWubiCode"];
        }
    }

    static fromJS(data: any): CostBalanceView {
        data = typeof data === 'object' ? data : {};
        let result = new CostBalanceView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["balanceSum"] = this.balanceSum;
        data["roomItemListId"] = this.roomItemListId;
        data["source"] = this.source;
        data["unitPrice"] = this.unitPrice;
        data["surplusCount"] = this.surplusCount;
        data["id"] = this.id;
        data["lastRechargeTime"] = this.lastRechargeTime ? this.lastRechargeTime.toISOString() : <any>undefined;
        data["lastDeductionTime"] = this.lastDeductionTime ? this.lastDeductionTime.toISOString() : <any>undefined;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["sourceLabel"] = this.sourceLabel;
        data["index"] = this.index;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemListNameGoods"] = this.roomItemListNameGoods;
        data["roomItemListShortName"] = this.roomItemListShortName;
        data["usageMode"] = this.usageMode;
        data["usageModeLabel"] = this.usageModeLabel;
        data["spec"] = this.spec;
        data["specLabel"] = this.specLabel;
        data["manufacturer"] = this.manufacturer;
        data["manufacturerLabel"] = this.manufacturerLabel;
        data["unitBaseLabel"] = this.unitBaseLabel;
        data["roomItemListPinyinCode"] = this.roomItemListPinyinCode;
        data["roomItemListWubiCode"] = this.roomItemListWubiCode;
        return data;
    }
}

export interface ICostBalanceView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 金额 */
    balanceSum?: number | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source: string;
    /** 单价 */
    unitPrice?: number | undefined;
    /** 剩余数量 */
    surplusCount: number;
    /** 主键标识 */
    id?: string | undefined;
    /** 上次缴费时间 */
    lastRechargeTime?: dayjs.Dayjs | undefined;
    /** 上次扣费时间 */
    lastDeductionTime?: dayjs.Dayjs | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者来源显示值 */
    sourceLabel?: string | undefined;
    /** 序号 */
    index?: number | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;
}

/** Reponse */
export class CostBalanceViewResult implements ICostBalanceViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CostBalanceView[] | undefined;

    constructor(data?: ICostBalanceViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CostBalanceView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CostBalanceViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CostBalanceViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICostBalanceViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CostBalanceView[] | undefined;
}

/** 宣教内容 */
export class HealthEducationFileView implements IHealthEducationFileView {
    /** 内容名称 */
    educationName?: string | undefined;
    /** 文件路径 */
    fileUrl?: string | undefined;
    /** 文件类型 */
    fileType?: string | undefined;
    /** 文本内容 */
    content?: string | undefined;

    constructor(data?: IHealthEducationFileView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.educationName = _data["educationName"];
            this.fileUrl = _data["fileUrl"];
            this.fileType = _data["fileType"];
            this.content = _data["content"];
        }
    }

    static fromJS(data: any): HealthEducationFileView {
        data = typeof data === 'object' ? data : {};
        let result = new HealthEducationFileView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["educationName"] = this.educationName;
        data["fileUrl"] = this.fileUrl;
        data["fileType"] = this.fileType;
        data["content"] = this.content;
        return data;
    }
}

/** 宣教内容 */
export interface IHealthEducationFileView {
    /** 内容名称 */
    educationName?: string | undefined;
    /** 文件路径 */
    fileUrl?: string | undefined;
    /** 文件类型 */
    fileType?: string | undefined;
    /** 文本内容 */
    content?: string | undefined;
}

/** 历史血压数据 */
export class HistoryBloodPressure implements IHistoryBloodPressure {
    /** 日期 */
    date?: string | undefined;
    /** 透前收缩压 */
    beforeSbp?: number | undefined;
    /** 透前舒张压 */
    beforeDbp?: number | undefined;
    /** 透前脉搏 */
    beforePulse?: number | undefined;
    /** 透后收缩压 */
    afterSbp?: number | undefined;
    /** 透后舒张压 */
    afterDbp?: number | undefined;
    /** 透后脉搏 */
    afterPulse?: number | undefined;

    constructor(data?: IHistoryBloodPressure) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.beforeSbp = _data["beforeSbp"];
            this.beforeDbp = _data["beforeDbp"];
            this.beforePulse = _data["beforePulse"];
            this.afterSbp = _data["afterSbp"];
            this.afterDbp = _data["afterDbp"];
            this.afterPulse = _data["afterPulse"];
        }
    }

    static fromJS(data: any): HistoryBloodPressure {
        data = typeof data === 'object' ? data : {};
        let result = new HistoryBloodPressure();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["beforeSbp"] = this.beforeSbp;
        data["beforeDbp"] = this.beforeDbp;
        data["beforePulse"] = this.beforePulse;
        data["afterSbp"] = this.afterSbp;
        data["afterDbp"] = this.afterDbp;
        data["afterPulse"] = this.afterPulse;
        return data;
    }
}

/** 历史血压数据 */
export interface IHistoryBloodPressure {
    /** 日期 */
    date?: string | undefined;
    /** 透前收缩压 */
    beforeSbp?: number | undefined;
    /** 透前舒张压 */
    beforeDbp?: number | undefined;
    /** 透前脉搏 */
    beforePulse?: number | undefined;
    /** 透后收缩压 */
    afterSbp?: number | undefined;
    /** 透后舒张压 */
    afterDbp?: number | undefined;
    /** 透后脉搏 */
    afterPulse?: number | undefined;
}

export class HistoryWeight implements IHistoryWeight {
    /** 日期 */
    date?: string | undefined;
    /** 透前体重 */
    beforeWeight?: number | undefined;
    /** 透后体重 */
    afterWeight?: number | undefined;
    /** 预脱 */
    ufg?: number | undefined;
    /** 实脱 */
    ufv?: number | undefined;
    /** 增重 */
    weightIncrease?: number | undefined;

    constructor(data?: IHistoryWeight) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.beforeWeight = _data["beforeWeight"];
            this.afterWeight = _data["afterWeight"];
            this.ufg = _data["ufg"];
            this.ufv = _data["ufv"];
            this.weightIncrease = _data["weightIncrease"];
        }
    }

    static fromJS(data: any): HistoryWeight {
        data = typeof data === 'object' ? data : {};
        let result = new HistoryWeight();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["beforeWeight"] = this.beforeWeight;
        data["afterWeight"] = this.afterWeight;
        data["ufg"] = this.ufg;
        data["ufv"] = this.ufv;
        data["weightIncrease"] = this.weightIncrease;
        return data;
    }
}

export interface IHistoryWeight {
    /** 日期 */
    date?: string | undefined;
    /** 透前体重 */
    beforeWeight?: number | undefined;
    /** 透后体重 */
    afterWeight?: number | undefined;
    /** 预脱 */
    ufg?: number | undefined;
    /** 实脱 */
    ufv?: number | undefined;
    /** 增重 */
    weightIncrease?: number | undefined;
}

/** 院区相关配置数据 */
export class HospitalAreaDataView implements IHospitalAreaDataView {
    /** 院区集合 */
    sysHospitalAreas?: SysHospitalArea[] | undefined;
    /** 是否开启多院区 */
    enabled?: boolean;

    constructor(data?: IHospitalAreaDataView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["sysHospitalAreas"])) {
                this.sysHospitalAreas = [] as any;
                for (let item of _data["sysHospitalAreas"])
                    this.sysHospitalAreas!.push(SysHospitalArea.fromJS(item));
            }
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): HospitalAreaDataView {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalAreaDataView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.sysHospitalAreas)) {
            data["sysHospitalAreas"] = [];
            for (let item of this.sysHospitalAreas)
                data["sysHospitalAreas"].push(item.toJSON());
        }
        data["enabled"] = this.enabled;
        return data;
    }
}

/** 院区相关配置数据 */
export interface IHospitalAreaDataView {
    /** 院区集合 */
    sysHospitalAreas?: SysHospitalArea[] | undefined;
    /** 是否开启多院区 */
    enabled?: boolean;
}

/** Reponse */
export class HospitalAreaDataViewResultEntry implements IHospitalAreaDataViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalAreaDataView;

    constructor(data?: IHospitalAreaDataViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? HospitalAreaDataView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalAreaDataViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalAreaDataViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IHospitalAreaDataViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalAreaDataView;
}

/** 大屏数据预览 */
export class LargeScreenCustomView implements ILargeScreenCustomView {
    /** 序号 */
    sort?: number;
    /** 透析区间序列 */
    areaSequence?: number;
    /** 床位序列 */
    bedSequence?: number;
    /** 排床记录标识 */
    scheduleDialysisId?: string | undefined;
    /** 透析记录标识 */
    cureRecordId?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者 - 是否阳性0,1 *编辑诊断-传染病时管理这个状态* */
    positive?: number | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 透析床位 */
    bedName?: string | undefined;
    /** 床位标识 */
    bedId?: string | undefined;
    /** 签到时间 */
    signOn?: dayjs.Dayjs | undefined;
    /** 上机时间 */
    timeOn?: dayjs.Dayjs | undefined;
    /** 预脱 */
    ufg?: number | undefined;
    /** 流程状态 */
    status?: string | undefined;
    /** 下次透析日期 */
    nextDialysisDate?: dayjs.Dayjs | undefined;
    /** 下次透析班次名称 */
    nextShiftName?: string | undefined;
    /** 透析剩余时间 (HH:mm) */
    timeLeft?: string | undefined;
    /** 透析方式 */
    dialysisMode?: string | undefined;

    constructor(data?: ILargeScreenCustomView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sort = _data["sort"];
            this.areaSequence = _data["areaSequence"];
            this.bedSequence = _data["bedSequence"];
            this.scheduleDialysisId = _data["scheduleDialysisId"];
            this.cureRecordId = _data["cureRecordId"];
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.positive = _data["positive"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.bedName = _data["bedName"];
            this.bedId = _data["bedId"];
            this.signOn = _data["signOn"] ? dayjs(_data["signOn"].toString()) : <any>undefined;
            this.timeOn = _data["timeOn"] ? dayjs(_data["timeOn"].toString()) : <any>undefined;
            this.ufg = _data["ufg"];
            this.status = _data["status"];
            this.nextDialysisDate = _data["nextDialysisDate"] ? dayjs(_data["nextDialysisDate"].toString()) : <any>undefined;
            this.nextShiftName = _data["nextShiftName"];
            this.timeLeft = _data["timeLeft"];
            this.dialysisMode = _data["dialysisMode"];
        }
    }

    static fromJS(data: any): LargeScreenCustomView {
        data = typeof data === 'object' ? data : {};
        let result = new LargeScreenCustomView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sort"] = this.sort;
        data["areaSequence"] = this.areaSequence;
        data["bedSequence"] = this.bedSequence;
        data["scheduleDialysisId"] = this.scheduleDialysisId;
        data["cureRecordId"] = this.cureRecordId;
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["positive"] = this.positive;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["bedName"] = this.bedName;
        data["bedId"] = this.bedId;
        data["signOn"] = this.signOn ? this.signOn.toISOString() : <any>undefined;
        data["timeOn"] = this.timeOn ? this.timeOn.toISOString() : <any>undefined;
        data["ufg"] = this.ufg;
        data["status"] = this.status;
        data["nextDialysisDate"] = this.nextDialysisDate ? this.nextDialysisDate.toISOString() : <any>undefined;
        data["nextShiftName"] = this.nextShiftName;
        data["timeLeft"] = this.timeLeft;
        data["dialysisMode"] = this.dialysisMode;
        return data;
    }
}

/** 大屏数据预览 */
export interface ILargeScreenCustomView {
    /** 序号 */
    sort?: number;
    /** 透析区间序列 */
    areaSequence?: number;
    /** 床位序列 */
    bedSequence?: number;
    /** 排床记录标识 */
    scheduleDialysisId?: string | undefined;
    /** 透析记录标识 */
    cureRecordId?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者 - 是否阳性0,1 *编辑诊断-传染病时管理这个状态* */
    positive?: number | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 透析床位 */
    bedName?: string | undefined;
    /** 床位标识 */
    bedId?: string | undefined;
    /** 签到时间 */
    signOn?: dayjs.Dayjs | undefined;
    /** 上机时间 */
    timeOn?: dayjs.Dayjs | undefined;
    /** 预脱 */
    ufg?: number | undefined;
    /** 流程状态 */
    status?: string | undefined;
    /** 下次透析日期 */
    nextDialysisDate?: dayjs.Dayjs | undefined;
    /** 下次透析班次名称 */
    nextShiftName?: string | undefined;
    /** 透析剩余时间 (HH:mm) */
    timeLeft?: string | undefined;
    /** 透析方式 */
    dialysisMode?: string | undefined;
}

/** 大屏数据展现 */
export class LargeScreenView implements ILargeScreenView {
    /** 系统名称 */
    systemName?: string | undefined;
    /** 医院名称 */
    hospitalName?: string | undefined;
    /** 医院LOGO路径 */
    hospitalLogo?: string | undefined;
    /** 大屏显示比例 */
    screenScale?: string | undefined;
    /** 显示比例 */
    scale?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 星期 */
    weekday?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 脱水单位 */
    ufUnit?: string | undefined;
    conf?: SysLargeScreenConf;
    /** 大屏数据 -- 类型为排床时有数据 */
    data?: LargeScreenCustomView[] | undefined;
    /** 宣教数据 -- 类型为宣教时有数据 */
    healthEducationItems?: HealthEducationFileView[] | undefined;

    constructor(data?: ILargeScreenView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.systemName = _data["systemName"];
            this.hospitalName = _data["hospitalName"];
            this.hospitalLogo = _data["hospitalLogo"];
            this.screenScale = _data["screenScale"];
            this.scale = _data["scale"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.weekday = _data["weekday"];
            this.shiftName = _data["shiftName"];
            this.ufUnit = _data["ufUnit"];
            this.conf = _data["conf"] ? SysLargeScreenConf.fromJS(_data["conf"]) : <any>undefined;
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(LargeScreenCustomView.fromJS(item));
            }
            if (Array.isArray(_data["healthEducationItems"])) {
                this.healthEducationItems = [] as any;
                for (let item of _data["healthEducationItems"])
                    this.healthEducationItems!.push(HealthEducationFileView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LargeScreenView {
        data = typeof data === 'object' ? data : {};
        let result = new LargeScreenView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["systemName"] = this.systemName;
        data["hospitalName"] = this.hospitalName;
        data["hospitalLogo"] = this.hospitalLogo;
        data["screenScale"] = this.screenScale;
        data["scale"] = this.scale;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["weekday"] = this.weekday;
        data["shiftName"] = this.shiftName;
        data["ufUnit"] = this.ufUnit;
        data["conf"] = this.conf ? this.conf.toJSON() : <any>undefined;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        if (Array.isArray(this.healthEducationItems)) {
            data["healthEducationItems"] = [];
            for (let item of this.healthEducationItems)
                data["healthEducationItems"].push(item.toJSON());
        }
        return data;
    }
}

/** 大屏数据展现 */
export interface ILargeScreenView {
    /** 系统名称 */
    systemName?: string | undefined;
    /** 医院名称 */
    hospitalName?: string | undefined;
    /** 医院LOGO路径 */
    hospitalLogo?: string | undefined;
    /** 大屏显示比例 */
    screenScale?: string | undefined;
    /** 显示比例 */
    scale?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 星期 */
    weekday?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 脱水单位 */
    ufUnit?: string | undefined;
    conf?: SysLargeScreenConf;
    /** 大屏数据 -- 类型为排床时有数据 */
    data?: LargeScreenCustomView[] | undefined;
    /** 宣教数据 -- 类型为宣教时有数据 */
    healthEducationItems?: HealthEducationFileView[] | undefined;
}

/** Reponse */
export class LargeScreenViewResultEntry implements ILargeScreenViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: LargeScreenView;

    constructor(data?: ILargeScreenViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? LargeScreenView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): LargeScreenViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new LargeScreenViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ILargeScreenViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: LargeScreenView;
}

/** 患者检验项提醒 */
export class PatientLisRemindView implements IPatientLisRemindView {
    /** 检验提醒标识 */
    id?: string | undefined;
    /** 检验项名称 */
    name?: string | undefined;
    /** 上次检查时间 */
    lastReportTime?: dayjs.Dayjs | undefined;
    /** 下次检查时间 */
    nextReportTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientLisRemindView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.lastReportTime = _data["lastReportTime"] ? dayjs(_data["lastReportTime"].toString()) : <any>undefined;
            this.nextReportTime = _data["nextReportTime"] ? dayjs(_data["nextReportTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientLisRemindView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLisRemindView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["lastReportTime"] = this.lastReportTime ? this.lastReportTime.toISOString() : <any>undefined;
        data["nextReportTime"] = this.nextReportTime ? this.nextReportTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 患者检验项提醒 */
export interface IPatientLisRemindView {
    /** 检验提醒标识 */
    id?: string | undefined;
    /** 检验项名称 */
    name?: string | undefined;
    /** 上次检查时间 */
    lastReportTime?: dayjs.Dayjs | undefined;
    /** 下次检查时间 */
    nextReportTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class Result implements IResult {
    /** 返回结果(true,false) */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 相关的链接地址 */
    url?: string | undefined;
    count?: number;
    /** 数据 */
    data?: any | undefined;

    constructor(data?: IResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.url = _data["url"];
            this.count = _data["count"];
            this.data = _data["data"];
        }
    }

    static fromJS(data: any): Result {
        data = typeof data === 'object' ? data : {};
        let result = new Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["url"] = this.url;
        data["count"] = this.count;
        data["data"] = this.data;
        return data;
    }
}

/** Reponse */
export interface IResult {
    /** 返回结果(true,false) */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 相关的链接地址 */
    url?: string | undefined;
    count?: number;
    /** 数据 */
    data?: any | undefined;
}

/** Reponse */
export class StringResult implements IStringResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: string[] | undefined;

    constructor(data?: IStringResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(item);
            }
        }
    }

    static fromJS(data: any): StringResult {
        data = typeof data === 'object' ? data : {};
        let result = new StringResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item);
        }
        return data;
    }
}

/** Reponse */
export interface IStringResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: string[] | undefined;
}

/** 透析室 */
export class SysHospitalArea implements ISysHospitalArea {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysHospitalArea) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.parentId = _data["parentId"];
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysHospitalArea {
        data = typeof data === 'object' ? data : {};
        let result = new SysHospitalArea();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["parentId"] = this.parentId;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析室 */
export interface ISysHospitalArea {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 医院信息 */
export class SysHospitalView implements ISysHospitalView {
    /** 名称 */
    name!: string;
    /** LOGO路径 */
    logo?: string | undefined;
    /** 类型 `DIC.HOSPITAL.TYPE` *综合医院,中医医院,中西医结合医院,民族医院,专科医院,康复医院* */
    type!: string;
    /** 性质 `DIC.HOSPITAL.NATURE` *公立,民营* */
    nature!: string;
    /** 级别 `DIC.HOSPITAL.LEVEL` *三级甲等,三级乙等,三级丙等,二级甲等,二级乙等* */
    level!: string;
    /** 开展透析日期 */
    dialysisDate!: dayjs.Dayjs;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 地址 */
    address?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 编码 *医院编码属性* */
    code?: string | undefined;
    /** 名称字体 */
    nameFont?: string | undefined;
    /** 名称颜色 */
    nameColor?: string | undefined;
    /** LOGO类型 */
    logoType!: number;
    /** 反馈二维码 */
    feedbackQr?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysHospitalView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.logo = _data["logo"];
            this.type = _data["type"];
            this.nature = _data["nature"];
            this.level = _data["level"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.province = _data["province"];
            this.city = _data["city"];
            this.area = _data["area"];
            this.address = _data["address"];
            this.remark = _data["remark"];
            this.code = _data["code"];
            this.nameFont = _data["nameFont"];
            this.nameColor = _data["nameColor"];
            this.logoType = _data["logoType"];
            this.feedbackQr = _data["feedbackQr"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysHospitalView {
        data = typeof data === 'object' ? data : {};
        let result = new SysHospitalView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["logo"] = this.logo;
        data["type"] = this.type;
        data["nature"] = this.nature;
        data["level"] = this.level;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["province"] = this.province;
        data["city"] = this.city;
        data["area"] = this.area;
        data["address"] = this.address;
        data["remark"] = this.remark;
        data["code"] = this.code;
        data["nameFont"] = this.nameFont;
        data["nameColor"] = this.nameColor;
        data["logoType"] = this.logoType;
        data["feedbackQr"] = this.feedbackQr;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 医院信息 */
export interface ISysHospitalView {
    /** 名称 */
    name: string;
    /** LOGO路径 */
    logo?: string | undefined;
    /** 类型 `DIC.HOSPITAL.TYPE` *综合医院,中医医院,中西医结合医院,民族医院,专科医院,康复医院* */
    type: string;
    /** 性质 `DIC.HOSPITAL.NATURE` *公立,民营* */
    nature: string;
    /** 级别 `DIC.HOSPITAL.LEVEL` *三级甲等,三级乙等,三级丙等,二级甲等,二级乙等* */
    level: string;
    /** 开展透析日期 */
    dialysisDate: dayjs.Dayjs;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 地址 */
    address?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 编码 *医院编码属性* */
    code?: string | undefined;
    /** 名称字体 */
    nameFont?: string | undefined;
    /** 名称颜色 */
    nameColor?: string | undefined;
    /** LOGO类型 */
    logoType: number;
    /** 反馈二维码 */
    feedbackQr?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class SysHospitalViewResultEntry implements ISysHospitalViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysHospitalView;

    constructor(data?: ISysHospitalViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysHospitalView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysHospitalViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysHospitalViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysHospitalViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysHospitalView;
}

/** 大屏管理 */
export class SysLargeScreen implements ISysLargeScreen {
    /** 标识 */
    id?: string | undefined;
    /** 屏幕名称 */
    name?: string | undefined;
    /** 屏幕编码 */
    code?: string | undefined;
    /** 屏幕位置 */
    position?: string | undefined;
    /** [归属透析室标识](透析室) */
    sysHospitalAreaId?: string | undefined;
    /** 透析区间ID集合，使用分号分割 */
    deptDialysisAreaIds?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 缩放比例 */
    scaling?: string | undefined;
    sysHospitalAreas?: SysHospitalArea;

    constructor(data?: ISysLargeScreen) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.position = _data["position"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.deptDialysisAreaIds = _data["deptDialysisAreaIds"];
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.scaling = _data["scaling"];
            this.sysHospitalAreas = _data["sysHospitalAreas"] ? SysHospitalArea.fromJS(_data["sysHospitalAreas"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysLargeScreen {
        data = typeof data === 'object' ? data : {};
        let result = new SysLargeScreen();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["position"] = this.position;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["deptDialysisAreaIds"] = this.deptDialysisAreaIds;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["scaling"] = this.scaling;
        data["sysHospitalAreas"] = this.sysHospitalAreas ? this.sysHospitalAreas.toJSON() : <any>undefined;
        return data;
    }
}

/** 大屏管理 */
export interface ISysLargeScreen {
    /** 标识 */
    id?: string | undefined;
    /** 屏幕名称 */
    name?: string | undefined;
    /** 屏幕编码 */
    code?: string | undefined;
    /** 屏幕位置 */
    position?: string | undefined;
    /** [归属透析室标识](透析室) */
    sysHospitalAreaId?: string | undefined;
    /** 透析区间ID集合，使用分号分割 */
    deptDialysisAreaIds?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 缩放比例 */
    scaling?: string | undefined;
    sysHospitalAreas?: SysHospitalArea;
}

/** 大屏配置 */
export class SysLargeScreenConf implements ISysLargeScreenConf {
    /** 标识 */
    id?: string | undefined;
    /** [大屏管理标识](大屏管理) */
    sysLargeScreenId?: string | undefined;
    /** 类型 *长期;临时* */
    type?: string | undefined;
    /** 开始时间 */
    startTime?: string | undefined;
    /** 结束时间 */
    endTime?: string | undefined;
    /** 刷新时间 *秒* */
    refreshTime?: number;
    /** 大屏标题 */
    title?: string | undefined;
    /** 屏幕类型 *排班;宣教;通知* */
    screenType?: string | undefined;
    /** logo *公司;医院* */
    logo?: string | undefined;
    /** 大屏风格 */
    style?: number | undefined;
    /** 隐私保护 */
    privacy?: number | undefined;
    /** 患者分区 */
    patientArea?: number | undefined;
    /** 显示空床 */
    bedEmpty?: number | undefined;
    /** 显示进度 */
    progressShow?: number | undefined;
    /** 字体大小 */
    fontSize?: string | undefined;
    /** 通知内容 */
    noticeContent?: string | undefined;
    /** 落款内容 */
    signatureContent?: string | undefined;
    /** 讲课日期 */
    dateLecture?: string | undefined;
    /** 讲课标题 */
    titleLecture?: string | undefined;
    /** 讲课人 */
    lecturer?: string | undefined;
    /** 宣教 */
    healthEducationContent?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 大屏背景色 */
    bgColor?: string | undefined;
    /** 卡片背景色-未使用 */
    cardNouseColor?: string | undefined;
    /** 卡片背景色-治疗中 */
    cardCureColor?: string | undefined;
    /** 卡片背景色-已结束 */
    cardEndColor?: string | undefined;
    sysLargeScreens?: SysLargeScreen;

    constructor(data?: ISysLargeScreenConf) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sysLargeScreenId = _data["sysLargeScreenId"];
            this.type = _data["type"];
            this.startTime = _data["startTime"];
            this.endTime = _data["endTime"];
            this.refreshTime = _data["refreshTime"];
            this.title = _data["title"];
            this.screenType = _data["screenType"];
            this.logo = _data["logo"];
            this.style = _data["style"];
            this.privacy = _data["privacy"];
            this.patientArea = _data["patientArea"];
            this.bedEmpty = _data["bedEmpty"];
            this.progressShow = _data["progressShow"];
            this.fontSize = _data["fontSize"];
            this.noticeContent = _data["noticeContent"];
            this.signatureContent = _data["signatureContent"];
            this.dateLecture = _data["dateLecture"];
            this.titleLecture = _data["titleLecture"];
            this.lecturer = _data["lecturer"];
            this.healthEducationContent = _data["healthEducationContent"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.bgColor = _data["bgColor"];
            this.cardNouseColor = _data["cardNouseColor"];
            this.cardCureColor = _data["cardCureColor"];
            this.cardEndColor = _data["cardEndColor"];
            this.sysLargeScreens = _data["sysLargeScreens"] ? SysLargeScreen.fromJS(_data["sysLargeScreens"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysLargeScreenConf {
        data = typeof data === 'object' ? data : {};
        let result = new SysLargeScreenConf();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sysLargeScreenId"] = this.sysLargeScreenId;
        data["type"] = this.type;
        data["startTime"] = this.startTime;
        data["endTime"] = this.endTime;
        data["refreshTime"] = this.refreshTime;
        data["title"] = this.title;
        data["screenType"] = this.screenType;
        data["logo"] = this.logo;
        data["style"] = this.style;
        data["privacy"] = this.privacy;
        data["patientArea"] = this.patientArea;
        data["bedEmpty"] = this.bedEmpty;
        data["progressShow"] = this.progressShow;
        data["fontSize"] = this.fontSize;
        data["noticeContent"] = this.noticeContent;
        data["signatureContent"] = this.signatureContent;
        data["dateLecture"] = this.dateLecture;
        data["titleLecture"] = this.titleLecture;
        data["lecturer"] = this.lecturer;
        data["healthEducationContent"] = this.healthEducationContent;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["bgColor"] = this.bgColor;
        data["cardNouseColor"] = this.cardNouseColor;
        data["cardCureColor"] = this.cardCureColor;
        data["cardEndColor"] = this.cardEndColor;
        data["sysLargeScreens"] = this.sysLargeScreens ? this.sysLargeScreens.toJSON() : <any>undefined;
        return data;
    }
}

/** 大屏配置 */
export interface ISysLargeScreenConf {
    /** 标识 */
    id?: string | undefined;
    /** [大屏管理标识](大屏管理) */
    sysLargeScreenId?: string | undefined;
    /** 类型 *长期;临时* */
    type?: string | undefined;
    /** 开始时间 */
    startTime?: string | undefined;
    /** 结束时间 */
    endTime?: string | undefined;
    /** 刷新时间 *秒* */
    refreshTime?: number;
    /** 大屏标题 */
    title?: string | undefined;
    /** 屏幕类型 *排班;宣教;通知* */
    screenType?: string | undefined;
    /** logo *公司;医院* */
    logo?: string | undefined;
    /** 大屏风格 */
    style?: number | undefined;
    /** 隐私保护 */
    privacy?: number | undefined;
    /** 患者分区 */
    patientArea?: number | undefined;
    /** 显示空床 */
    bedEmpty?: number | undefined;
    /** 显示进度 */
    progressShow?: number | undefined;
    /** 字体大小 */
    fontSize?: string | undefined;
    /** 通知内容 */
    noticeContent?: string | undefined;
    /** 落款内容 */
    signatureContent?: string | undefined;
    /** 讲课日期 */
    dateLecture?: string | undefined;
    /** 讲课标题 */
    titleLecture?: string | undefined;
    /** 讲课人 */
    lecturer?: string | undefined;
    /** 宣教 */
    healthEducationContent?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 大屏背景色 */
    bgColor?: string | undefined;
    /** 卡片背景色-未使用 */
    cardNouseColor?: string | undefined;
    /** 卡片背景色-治疗中 */
    cardCureColor?: string | undefined;
    /** 卡片背景色-已结束 */
    cardEndColor?: string | undefined;
    sysLargeScreens?: SysLargeScreen;
}

/** 大屏配置 */
export class SysScreenDetailView implements ISysScreenDetailView {
    /** [大屏明细标识](#大屏明细) */
    sysScreenItemId!: string;
    /** 大屏属性 例如: BACKCOLOR、FONTCOLOR、REFRESHTIME *○同一个`sys_screen_item_id`下不允许重复* */
    code!: string;
    /** 大屏属性值 例如：#FFFFFF、60 */
    value?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 输入类型 INPUT:文本框,SELECT:下拉框,BUTTONGROUP:按钮组,SWITCH:开关 */
    inputType?: string | undefined;
    /** 可选值 *输入类型为下拉框/按钮组时必填* */
    availableValue?: string | undefined;
    /** 大屏属性名称 *○同一个`sys_screen_item_id`下不允许重复* */
    name!: string;
    /** 序列 */
    sequence?: number;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysScreenDetailView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysScreenItemId = _data["sysScreenItemId"];
            this.code = _data["code"];
            this.value = _data["value"];
            this.remark = _data["remark"];
            this.inputType = _data["inputType"];
            this.availableValue = _data["availableValue"];
            this.name = _data["name"];
            this.sequence = _data["sequence"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysScreenDetailView {
        data = typeof data === 'object' ? data : {};
        let result = new SysScreenDetailView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysScreenItemId"] = this.sysScreenItemId;
        data["code"] = this.code;
        data["value"] = this.value;
        data["remark"] = this.remark;
        data["inputType"] = this.inputType;
        data["availableValue"] = this.availableValue;
        data["name"] = this.name;
        data["sequence"] = this.sequence;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 大屏配置 */
export interface ISysScreenDetailView {
    /** [大屏明细标识](#大屏明细) */
    sysScreenItemId: string;
    /** 大屏属性 例如: BACKCOLOR、FONTCOLOR、REFRESHTIME *○同一个`sys_screen_item_id`下不允许重复* */
    code: string;
    /** 大屏属性值 例如：#FFFFFF、60 */
    value?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 输入类型 INPUT:文本框,SELECT:下拉框,BUTTONGROUP:按钮组,SWITCH:开关 */
    inputType?: string | undefined;
    /** 可选值 *输入类型为下拉框/按钮组时必填* */
    availableValue?: string | undefined;
    /** 大屏属性名称 *○同一个`sys_screen_item_id`下不允许重复* */
    name: string;
    /** 序列 */
    sequence?: number;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 大屏明细 */
export class SysScreenItemView implements ISysScreenItemView {
    /** [大屏分类标识](#大屏分类) */
    sysScreenTypeId!: string;
    /** 大屏名称 */
    name!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 大屏标识，客户端使用 */
    code!: string;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 大屏分类名称 */
    sysScreenTypeName?: string | undefined;
    /** 大屏分类路径 */
    sysScreenTypeUrl?: string | undefined;
    /** 归属透析室名称 */
    sysHospitalAreaName?: string | undefined;
    /** 大屏属性 */
    details?: SysScreenDetailView[] | undefined;

    constructor(data?: ISysScreenItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysScreenTypeId = _data["sysScreenTypeId"];
            this.name = _data["name"];
            this.remark = _data["remark"];
            this.code = _data["code"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.id = _data["id"];
            this.sequence = _data["sequence"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.sysScreenTypeName = _data["sysScreenTypeName"];
            this.sysScreenTypeUrl = _data["sysScreenTypeUrl"];
            this.sysHospitalAreaName = _data["sysHospitalAreaName"];
            if (Array.isArray(_data["details"])) {
                this.details = [] as any;
                for (let item of _data["details"])
                    this.details!.push(SysScreenDetailView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysScreenItemView {
        data = typeof data === 'object' ? data : {};
        let result = new SysScreenItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysScreenTypeId"] = this.sysScreenTypeId;
        data["name"] = this.name;
        data["remark"] = this.remark;
        data["code"] = this.code;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["id"] = this.id;
        data["sequence"] = this.sequence;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["sysScreenTypeName"] = this.sysScreenTypeName;
        data["sysScreenTypeUrl"] = this.sysScreenTypeUrl;
        data["sysHospitalAreaName"] = this.sysHospitalAreaName;
        if (Array.isArray(this.details)) {
            data["details"] = [];
            for (let item of this.details)
                data["details"].push(item.toJSON());
        }
        return data;
    }
}

/** 大屏明细 */
export interface ISysScreenItemView {
    /** [大屏分类标识](#大屏分类) */
    sysScreenTypeId: string;
    /** 大屏名称 */
    name: string;
    /** 备注 */
    remark?: string | undefined;
    /** 大屏标识，客户端使用 */
    code: string;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 大屏分类名称 */
    sysScreenTypeName?: string | undefined;
    /** 大屏分类路径 */
    sysScreenTypeUrl?: string | undefined;
    /** 归属透析室名称 */
    sysHospitalAreaName?: string | undefined;
    /** 大屏属性 */
    details?: SysScreenDetailView[] | undefined;
}

/** Reponse */
export class SysScreenItemViewResultEntry implements ISysScreenItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysScreenItemView;

    constructor(data?: ISysScreenItemViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysScreenItemView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysScreenItemViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysScreenItemViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysScreenItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysScreenItemView;
}

/** 候诊大屏 */
export class WaitingScreenView implements IWaitingScreenView {
    /** 背景颜色 */
    backgroundColor?: string | undefined;
    /** 文字颜色 */
    wordsColor?: string | undefined;
    /** 刷新时间 */
    freshFrequency?: number | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 透析日 `DIC.DIALYSIS.WEEKDAY` */
    weekday?: number;
    /** 透析日显示值 */
    weekdayLabel?: string | undefined;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName?: string | undefined;
    /** 班次简称 *班,中,晚* */
    shiftShortName?: string | undefined;
    /** 班次序列 */
    shiftSequence?: number;
    /** 开始时间 *HH:mm:ss* */
    shiftBeginTime?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    shiftEndTime?: string | undefined;
    /** 医院logo */
    hospitalLogo?: string | undefined;
    /** 医院名称 */
    hospitalName?: string | undefined;
    /** 健康宣教 */
    healthEducations?: any | undefined;
    /** 公告信息 */
    notices?: any | undefined;
    /** 明细 */
    waitingScreenViewItems?: WaitingScreenViewItem[] | undefined;

    constructor(data?: IWaitingScreenView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.backgroundColor = _data["backgroundColor"];
            this.wordsColor = _data["wordsColor"];
            this.freshFrequency = _data["freshFrequency"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.weekday = _data["weekday"];
            this.weekdayLabel = _data["weekdayLabel"];
            this.shiftName = _data["shiftName"];
            this.shiftShortName = _data["shiftShortName"];
            this.shiftSequence = _data["shiftSequence"];
            this.shiftBeginTime = _data["shiftBeginTime"];
            this.shiftEndTime = _data["shiftEndTime"];
            this.hospitalLogo = _data["hospitalLogo"];
            this.hospitalName = _data["hospitalName"];
            this.healthEducations = _data["healthEducations"];
            this.notices = _data["notices"];
            if (Array.isArray(_data["waitingScreenViewItems"])) {
                this.waitingScreenViewItems = [] as any;
                for (let item of _data["waitingScreenViewItems"])
                    this.waitingScreenViewItems!.push(WaitingScreenViewItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): WaitingScreenView {
        data = typeof data === 'object' ? data : {};
        let result = new WaitingScreenView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["backgroundColor"] = this.backgroundColor;
        data["wordsColor"] = this.wordsColor;
        data["freshFrequency"] = this.freshFrequency;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["weekday"] = this.weekday;
        data["weekdayLabel"] = this.weekdayLabel;
        data["shiftName"] = this.shiftName;
        data["shiftShortName"] = this.shiftShortName;
        data["shiftSequence"] = this.shiftSequence;
        data["shiftBeginTime"] = this.shiftBeginTime;
        data["shiftEndTime"] = this.shiftEndTime;
        data["hospitalLogo"] = this.hospitalLogo;
        data["hospitalName"] = this.hospitalName;
        data["healthEducations"] = this.healthEducations;
        data["notices"] = this.notices;
        if (Array.isArray(this.waitingScreenViewItems)) {
            data["waitingScreenViewItems"] = [];
            for (let item of this.waitingScreenViewItems)
                data["waitingScreenViewItems"].push(item.toJSON());
        }
        return data;
    }
}

/** 候诊大屏 */
export interface IWaitingScreenView {
    /** 背景颜色 */
    backgroundColor?: string | undefined;
    /** 文字颜色 */
    wordsColor?: string | undefined;
    /** 刷新时间 */
    freshFrequency?: number | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 透析日 `DIC.DIALYSIS.WEEKDAY` */
    weekday?: number;
    /** 透析日显示值 */
    weekdayLabel?: string | undefined;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName?: string | undefined;
    /** 班次简称 *班,中,晚* */
    shiftShortName?: string | undefined;
    /** 班次序列 */
    shiftSequence?: number;
    /** 开始时间 *HH:mm:ss* */
    shiftBeginTime?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    shiftEndTime?: string | undefined;
    /** 医院logo */
    hospitalLogo?: string | undefined;
    /** 医院名称 */
    hospitalName?: string | undefined;
    /** 健康宣教 */
    healthEducations?: any | undefined;
    /** 公告信息 */
    notices?: any | undefined;
    /** 明细 */
    waitingScreenViewItems?: WaitingScreenViewItem[] | undefined;
}

export class WaitingScreenViewItem implements IWaitingScreenViewItem {
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE`  *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式显示值 */
    dialysisModeLabel?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 颜色代码显示值 */
    colorLabel?: string | undefined;
    /** 图标 */
    icon?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet?: number | undefined;
    /** 剩余的透析时长 *时* */
    dialysisDurationSurplus?: string | undefined;
    /** 治疗状态  `DIC.DIALYSIS.STATUS` *未签到、已签到、透析中、已下机* */
    status?: string | undefined;
    /** 治疗状态显示值 */
    statusLabel?: string | undefined;
    /** 透析区间名称 */
    deptDialysisAreaName?: string | undefined;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    deptDialysisAreaType?: string | undefined;
    /** 类型显示值 */
    deptDialysisAreaTypeLabel?: string | undefined;
    /** 图标 */
    deptDialysisAreaIcon?: string | undefined;
    /** 图标显示值 */
    deptDialysisAreaIconLabel?: string | undefined;
    /** 是否阳性分区0,1 */
    deptDialysisAreaPositive?: number;
    /** 序列 */
    deptDialysisAreaSequence?: number;
    /** 透析床位名称 */
    deptDialysisBedName?: string | undefined;
    /** 序列 */
    deptDialysisBedSequence?: number;
    /** 科室设备编号 */
    devCode?: string | undefined;
    /** 科室设备类型 */
    devType?: string | undefined;
    /** 科室设备型号 */
    devModel?: string | undefined;
    /** 是否阳性 *如阳性不可改为阴性* */
    devPositive?: number | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    patientGender?: string | undefined;
    /** 性别显示值 */
    patientGenderLabel?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    patientSource?: string | undefined;
    /** 来源显示值 */
    patientSourceLabel?: string | undefined;
    /** 患者是否阳性0,1 */
    patientPositive?: number;

    constructor(data?: IWaitingScreenViewItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shiftName = _data["shiftName"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.color = _data["color"];
            this.colorLabel = _data["colorLabel"];
            this.icon = _data["icon"];
            this.remark = _data["remark"];
            this.dialysisDurationSet = _data["dialysisDurationSet"];
            this.dialysisDurationSurplus = _data["dialysisDurationSurplus"];
            this.status = _data["status"];
            this.statusLabel = _data["statusLabel"];
            this.deptDialysisAreaName = _data["deptDialysisAreaName"];
            this.deptDialysisAreaType = _data["deptDialysisAreaType"];
            this.deptDialysisAreaTypeLabel = _data["deptDialysisAreaTypeLabel"];
            this.deptDialysisAreaIcon = _data["deptDialysisAreaIcon"];
            this.deptDialysisAreaIconLabel = _data["deptDialysisAreaIconLabel"];
            this.deptDialysisAreaPositive = _data["deptDialysisAreaPositive"];
            this.deptDialysisAreaSequence = _data["deptDialysisAreaSequence"];
            this.deptDialysisBedName = _data["deptDialysisBedName"];
            this.deptDialysisBedSequence = _data["deptDialysisBedSequence"];
            this.devCode = _data["devCode"];
            this.devType = _data["devType"];
            this.devModel = _data["devModel"];
            this.devPositive = _data["devPositive"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.patientGender = _data["patientGender"];
            this.patientGenderLabel = _data["patientGenderLabel"];
            this.patientSource = _data["patientSource"];
            this.patientSourceLabel = _data["patientSourceLabel"];
            this.patientPositive = _data["patientPositive"];
        }
    }

    static fromJS(data: any): WaitingScreenViewItem {
        data = typeof data === 'object' ? data : {};
        let result = new WaitingScreenViewItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shiftName"] = this.shiftName;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["color"] = this.color;
        data["colorLabel"] = this.colorLabel;
        data["icon"] = this.icon;
        data["remark"] = this.remark;
        data["dialysisDurationSet"] = this.dialysisDurationSet;
        data["dialysisDurationSurplus"] = this.dialysisDurationSurplus;
        data["status"] = this.status;
        data["statusLabel"] = this.statusLabel;
        data["deptDialysisAreaName"] = this.deptDialysisAreaName;
        data["deptDialysisAreaType"] = this.deptDialysisAreaType;
        data["deptDialysisAreaTypeLabel"] = this.deptDialysisAreaTypeLabel;
        data["deptDialysisAreaIcon"] = this.deptDialysisAreaIcon;
        data["deptDialysisAreaIconLabel"] = this.deptDialysisAreaIconLabel;
        data["deptDialysisAreaPositive"] = this.deptDialysisAreaPositive;
        data["deptDialysisAreaSequence"] = this.deptDialysisAreaSequence;
        data["deptDialysisBedName"] = this.deptDialysisBedName;
        data["deptDialysisBedSequence"] = this.deptDialysisBedSequence;
        data["devCode"] = this.devCode;
        data["devType"] = this.devType;
        data["devModel"] = this.devModel;
        data["devPositive"] = this.devPositive;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["patientGender"] = this.patientGender;
        data["patientGenderLabel"] = this.patientGenderLabel;
        data["patientSource"] = this.patientSource;
        data["patientSourceLabel"] = this.patientSourceLabel;
        data["patientPositive"] = this.patientPositive;
        return data;
    }
}

export interface IWaitingScreenViewItem {
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE`  *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式显示值 */
    dialysisModeLabel?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 颜色代码显示值 */
    colorLabel?: string | undefined;
    /** 图标 */
    icon?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet?: number | undefined;
    /** 剩余的透析时长 *时* */
    dialysisDurationSurplus?: string | undefined;
    /** 治疗状态  `DIC.DIALYSIS.STATUS` *未签到、已签到、透析中、已下机* */
    status?: string | undefined;
    /** 治疗状态显示值 */
    statusLabel?: string | undefined;
    /** 透析区间名称 */
    deptDialysisAreaName?: string | undefined;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    deptDialysisAreaType?: string | undefined;
    /** 类型显示值 */
    deptDialysisAreaTypeLabel?: string | undefined;
    /** 图标 */
    deptDialysisAreaIcon?: string | undefined;
    /** 图标显示值 */
    deptDialysisAreaIconLabel?: string | undefined;
    /** 是否阳性分区0,1 */
    deptDialysisAreaPositive?: number;
    /** 序列 */
    deptDialysisAreaSequence?: number;
    /** 透析床位名称 */
    deptDialysisBedName?: string | undefined;
    /** 序列 */
    deptDialysisBedSequence?: number;
    /** 科室设备编号 */
    devCode?: string | undefined;
    /** 科室设备类型 */
    devType?: string | undefined;
    /** 科室设备型号 */
    devModel?: string | undefined;
    /** 是否阳性 *如阳性不可改为阴性* */
    devPositive?: number | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    patientGender?: string | undefined;
    /** 性别显示值 */
    patientGenderLabel?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    patientSource?: string | undefined;
    /** 来源显示值 */
    patientSourceLabel?: string | undefined;
    /** 患者是否阳性0,1 */
    patientPositive?: number;
}

/** Reponse */
export class WaitingScreenViewResultEntry implements IWaitingScreenViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: WaitingScreenView;

    constructor(data?: IWaitingScreenViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? WaitingScreenView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): WaitingScreenViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new WaitingScreenViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IWaitingScreenViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: WaitingScreenView;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}