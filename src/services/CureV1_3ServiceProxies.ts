/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import {ServiceProxyBase} from './ServiceProxyBase'
import axios, { AxiosError, type AxiosInstance, type AxiosRequestConfig, type AxiosResponse, type CancelToken } from 'axios';

import dayjs from 'dayjs';

export class CentralInformationServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 中心信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    centralInformationGET(id: string , cancelToken?: CancelToken | undefined): Promise<CentralInformationViewResultEntry> {
        let url_ = this.baseUrl + "/api/CentralInformation/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCentralInformationGET(_response));
        });
    }

    protected processCentralInformationGET(response: AxiosResponse): Promise<CentralInformationViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CentralInformationViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CentralInformationViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CentralInformationViewResultEntry>(null as any);
    }

    /**
     * 中心信息 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    centralInformationPOST(id: string, body: CentralInformationEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CentralInformation/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCentralInformationPOST(_response));
        });
    }

    protected processCentralInformationPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 中心信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CentralInformationViewResult> {
        let url_ = this.baseUrl + "/api/CentralInformation/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter(_response));
        });
    }

    protected processFilter(response: AxiosResponse): Promise<CentralInformationViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CentralInformationViewResult.fromJS(resultData200);
            return Promise.resolve<CentralInformationViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CentralInformationViewResult>(null as any);
    }

    /**
     * 中心信息 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    centralInformationPOST2(body: CentralInformationEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CentralInformation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCentralInformationPOST2(_response));
        });
    }

    protected processCentralInformationPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 中心信息 -- 根据Id删除数据
     * @return Success
     */
    delete(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CentralInformation/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete(_response));
        });
    }

    protected processDelete(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureAssementServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析评估记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureAssement(id: string , cancelToken?: CancelToken | undefined): Promise<CureAssementViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureAssement/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureAssement(_response));
        });
    }

    protected processCureAssement(response: AxiosResponse): Promise<CureAssementViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureAssementViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureAssementViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureAssementViewResultEntry>(null as any);
    }

    /**
     * 透析评估记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter2(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureAssementViewResult> {
        let url_ = this.baseUrl + "/api/CureAssement/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter2(_response));
        });
    }

    protected processFilter2(response: AxiosResponse): Promise<CureAssementViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureAssementViewResult.fromJS(resultData200);
            return Promise.resolve<CureAssementViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureAssementViewResult>(null as any);
    }
}

export class DevWaterProcessRecordServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 水处理记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    devWaterProcessRecordGET(id: string , cancelToken?: CancelToken | undefined): Promise<DevWaterProcessRecordViewResultEntry> {
        let url_ = this.baseUrl + "/api/DevWaterProcessRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevWaterProcessRecordGET(_response));
        });
    }

    protected processDevWaterProcessRecordGET(response: AxiosResponse): Promise<DevWaterProcessRecordViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevWaterProcessRecordViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DevWaterProcessRecordViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevWaterProcessRecordViewResultEntry>(null as any);
    }

    /**
     * 水处理记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    devWaterProcessRecordPOST(id: string, body: DevWaterProcessRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevWaterProcessRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevWaterProcessRecordPOST(_response));
        });
    }

    protected processDevWaterProcessRecordPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 水处理记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter3(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DevWaterProcessRecordViewResult> {
        let url_ = this.baseUrl + "/api/DevWaterProcessRecord/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter3(_response));
        });
    }

    protected processFilter3(response: AxiosResponse): Promise<DevWaterProcessRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevWaterProcessRecordViewResult.fromJS(resultData200);
            return Promise.resolve<DevWaterProcessRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevWaterProcessRecordViewResult>(null as any);
    }

    /**
     * 水处理记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    devWaterProcessRecordPOST2(body: DevWaterProcessRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevWaterProcessRecord";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevWaterProcessRecordPOST2(_response));
        });
    }

    protected processDevWaterProcessRecordPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 水处理记录 -- 根据Id删除数据
     * @return Success
     */
    delete2(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevWaterProcessRecord/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete2(_response));
        });
    }

    protected processDelete2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 导出水设备消毒记录
     * @param type (optional)
     * @param waterDeviceCode (optional)
     * @param waterDeviceModel (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @return Success
     */
    export(type: string | undefined, waterDeviceCode: string | undefined, waterDeviceModel: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevWaterProcessRecord/Export?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (waterDeviceCode === null)
            throw new Error("The parameter 'waterDeviceCode' cannot be null.");
        else if (waterDeviceCode !== undefined)
            url_ += "waterDeviceCode=" + encodeURIComponent("" + waterDeviceCode) + "&";
        if (waterDeviceModel === null)
            throw new Error("The parameter 'waterDeviceModel' cannot be null.");
        else if (waterDeviceModel !== undefined)
            url_ += "waterDeviceModel=" + encodeURIComponent("" + waterDeviceModel) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport(_response));
        });
    }

    protected processExport(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class HospitalInfectionRecordServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 院感评估记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    hospitalInfectionRecordGET(id: string , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionRecordViewResultEntry> {
        let url_ = this.baseUrl + "/api/HospitalInfectionRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionRecordGET(_response));
        });
    }

    protected processHospitalInfectionRecordGET(response: AxiosResponse): Promise<HospitalInfectionRecordViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionRecordViewResultEntry.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionRecordViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionRecordViewResultEntry>(null as any);
    }

    /**
     * 院感评估记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionRecordPOST(id: string, body: HospitalInfectionRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionRecordPOST(_response));
        });
    }

    protected processHospitalInfectionRecordPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 院感评估记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter4(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionRecordViewResult> {
        let url_ = this.baseUrl + "/api/HospitalInfectionRecord/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter4(_response));
        });
    }

    protected processFilter4(response: AxiosResponse): Promise<HospitalInfectionRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionRecordViewResult.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionRecordViewResult>(null as any);
    }

    /**
     * 院感评估记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionRecordPOST2(body: HospitalInfectionRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionRecord";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionRecordPOST2(_response));
        });
    }

    protected processHospitalInfectionRecordPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 院感评估记录 -- 根据Id删除数据
     * @return Success
     */
    delete3(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionRecord/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete3(_response));
        });
    }

    protected processDelete3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class OtherServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 对外接口 -- 院感科血透接口(血液病人透析记录)
     * @param dateStart (optional) 透析日期(起始时间)，格式：yyyy-MM-dd
     * @param dateEnd (optional) 透析日期(结束时间)，格式：yyyy-MM-dd
     * @return Success
     */
    cure(dateStart: string | undefined, dateEnd: string | undefined , cancelToken?: CancelToken | undefined): Promise<HospitalSenseCureViewResult> {
        let url_ = this.baseUrl + "/api/Other/HospitalSense/Cure?";
        if (dateStart === null)
            throw new Error("The parameter 'dateStart' cannot be null.");
        else if (dateStart !== undefined)
            url_ += "dateStart=" + encodeURIComponent("" + dateStart) + "&";
        if (dateEnd === null)
            throw new Error("The parameter 'dateEnd' cannot be null.");
        else if (dateEnd !== undefined)
            url_ += "dateEnd=" + encodeURIComponent("" + dateEnd) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCure(_response));
        });
    }

    protected processCure(response: AxiosResponse): Promise<HospitalSenseCureViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalSenseCureViewResult.fromJS(resultData200);
            return Promise.resolve<HospitalSenseCureViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalSenseCureViewResult>(null as any);
    }

    /**
     * 对外接口 -- 院感科血透接口(血液病人登记表)
     * @return Success
     */
    patient(  cancelToken?: CancelToken | undefined): Promise<HospitalSensePatientViewResult> {
        let url_ = this.baseUrl + "/api/Other/HospitalSense/Patient";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatient(_response));
        });
    }

    protected processPatient(response: AxiosResponse): Promise<HospitalSensePatientViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalSensePatientViewResult.fromJS(resultData200);
            return Promise.resolve<HospitalSensePatientViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalSensePatientViewResult>(null as any);
    }

    /**
     * 对外接口 -- 院感科血透接口(血液病人透析记录)
     * @param dateStart (optional) 透析日期(起始时间)，格式：yyyy-MM-dd
     * @param dateEnd (optional) 透析日期(结束时间)，格式：yyyy-MM-dd
     * @return Success
     */
    cure2(dateStart: string | undefined, dateEnd: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatBloodInforBloodViewResult> {
        let url_ = this.baseUrl + "/api/Other/HospitalSense/XingTai/Cure?";
        if (dateStart === null)
            throw new Error("The parameter 'dateStart' cannot be null.");
        else if (dateStart !== undefined)
            url_ += "dateStart=" + encodeURIComponent("" + dateStart) + "&";
        if (dateEnd === null)
            throw new Error("The parameter 'dateEnd' cannot be null.");
        else if (dateEnd !== undefined)
            url_ += "dateEnd=" + encodeURIComponent("" + dateEnd) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCure2(_response));
        });
    }

    protected processCure2(response: AxiosResponse): Promise<PatBloodInforBloodViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatBloodInforBloodViewResult.fromJS(resultData200);
            return Promise.resolve<PatBloodInforBloodViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatBloodInforBloodViewResult>(null as any);
    }

    /**
     * 对外接口 -- 院感科血透接口(血液病人登记表)
     * @return Success
     */
    patient2(  cancelToken?: CancelToken | undefined): Promise<PatInforBloodViewResult> {
        let url_ = this.baseUrl + "/api/Other/HospitalSense/XingTai/Patient";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatient2(_response));
        });
    }

    protected processPatient2(response: AxiosResponse): Promise<PatInforBloodViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatInforBloodViewResult.fromJS(resultData200);
            return Promise.resolve<PatInforBloodViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatInforBloodViewResult>(null as any);
    }

    /**
     * 对外接口 - 查询呼叫大屏类型
     * @return Success
     */
    queryScreen(  cancelToken?: CancelToken | undefined): Promise<QueryScreentInfoViewResult> {
        let url_ = this.baseUrl + "/api/Other/QueryScreen";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryScreen(_response));
        });
    }

    protected processQueryScreen(response: AxiosResponse): Promise<QueryScreentInfoViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QueryScreentInfoViewResult.fromJS(resultData200);
            return Promise.resolve<QueryScreentInfoViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QueryScreentInfoViewResult>(null as any);
    }

    /**
     * 对外接口 -- [芜湖]信息科EMR系统血透接口(血液病人透析记录)
     * @param hisno (optional) 患者住院号门诊号
     * @param start (optional) 透析日期(起始时间)，格式：yyyy-MM-dd
     * @param end (optional) 透析日期(结束时间)，格式：yyyy-MM-dd
     * @return Success
     */
    hisViewRecord(hisno: string | undefined, start: string | undefined, end: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientBatchCureRecordViewResult> {
        let url_ = this.baseUrl + "/api/Other/HisViewRecord?";
        if (hisno === null)
            throw new Error("The parameter 'hisno' cannot be null.");
        else if (hisno !== undefined)
            url_ += "hisno=" + encodeURIComponent("" + hisno) + "&";
        if (start === null)
            throw new Error("The parameter 'start' cannot be null.");
        else if (start !== undefined)
            url_ += "start=" + encodeURIComponent("" + start) + "&";
        if (end === null)
            throw new Error("The parameter 'end' cannot be null.");
        else if (end !== undefined)
            url_ += "end=" + encodeURIComponent("" + end) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHisViewRecord(_response));
        });
    }

    protected processHisViewRecord(response: AxiosResponse): Promise<PatientBatchCureRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientBatchCureRecordViewResult.fromJS(resultData200);
            return Promise.resolve<PatientBatchCureRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientBatchCureRecordViewResult>(null as any);
    }

    /**
     * 透析记录 -- 根据条件查询数据
     * @param print (optional) 为1时，签名显示生效
     * @return Success
     */
    file(id: string, print: number | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordFileViewResultEntry> {
        let url_ = this.baseUrl + "/api/Other/File/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (print === null)
            throw new Error("The parameter 'print' cannot be null.");
        else if (print !== undefined)
            url_ += "print=" + encodeURIComponent("" + print) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFile(_response));
        });
    }

    protected processFile(response: AxiosResponse): Promise<CureRecordFileViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordFileViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureRecordFileViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordFileViewResultEntry>(null as any);
    }

    /**
     * 评估记录 -- 根据条件查询数据
     * @param hisno (optional)
     * @param start (optional)
     * @param end (optional)
     * @return Success
     */
    hisViewAssementRecord(hisno: string | undefined, start: string | undefined, end: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientBatchAssementViewResult> {
        let url_ = this.baseUrl + "/api/Other/HisViewAssementRecord?";
        if (hisno === null)
            throw new Error("The parameter 'hisno' cannot be null.");
        else if (hisno !== undefined)
            url_ += "hisno=" + encodeURIComponent("" + hisno) + "&";
        if (start === null)
            throw new Error("The parameter 'start' cannot be null.");
        else if (start !== undefined)
            url_ += "start=" + encodeURIComponent("" + start) + "&";
        if (end === null)
            throw new Error("The parameter 'end' cannot be null.");
        else if (end !== undefined)
            url_ += "end=" + encodeURIComponent("" + end) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHisViewAssementRecord(_response));
        });
    }

    protected processHisViewAssementRecord(response: AxiosResponse): Promise<PatientBatchAssementViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientBatchAssementViewResult.fromJS(resultData200);
            return Promise.resolve<PatientBatchAssementViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientBatchAssementViewResult>(null as any);
    }

    /**
     * 评估记录 -- 根据条件查询数据
     * @return Success
     */
    assementFile(id: string , cancelToken?: CancelToken | undefined): Promise<PatientAssementViewResultEntry> {
        let url_ = this.baseUrl + "/api/Other/AssementFile/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAssementFile(_response));
        });
    }

    protected processAssementFile(response: AxiosResponse): Promise<PatientAssementViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientAssementViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientAssementViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientAssementViewResultEntry>(null as any);
    }

    /**
     * 排床记录 -- 根据条件查询数据
     * @param date (optional)
     * @param areaId (optional)
     * @param shifts (optional)
     * @param areas (optional)
     * @return Success
     */
    outSchedule(date: string | undefined, areaId: string | undefined, shifts: string | undefined, areas: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureScheduleDetailViewResultEntry> {
        let url_ = this.baseUrl + "/api/Other/OutSchedule?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (areaId === null)
            throw new Error("The parameter 'areaId' cannot be null.");
        else if (areaId !== undefined)
            url_ += "areaId=" + encodeURIComponent("" + areaId) + "&";
        if (shifts === null)
            throw new Error("The parameter 'shifts' cannot be null.");
        else if (shifts !== undefined)
            url_ += "shifts=" + encodeURIComponent("" + shifts) + "&";
        if (areas === null)
            throw new Error("The parameter 'areas' cannot be null.");
        else if (areas !== undefined)
            url_ += "areas=" + encodeURIComponent("" + areas) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processOutSchedule(_response));
        });
    }

    protected processOutSchedule(response: AxiosResponse): Promise<CureScheduleDetailViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureScheduleDetailViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureScheduleDetailViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureScheduleDetailViewResultEntry>(null as any);
    }

    /**
     * 单点登录
     * @param token (optional) sessionID：token
     * @return Success
     */
    ssoLogin(token: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Other/SsoLogin?";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSsoLogin(_response));
        });
    }

    protected processSsoLogin(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 单点登录
     * @param userName (optional) userName
     * @param userCode (optional) userCode
     * @return Success
     */
    cfSsoLogin(userName: string | undefined, userCode: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Other/CfSsoLogin?";
        if (userName === null)
            throw new Error("The parameter 'userName' cannot be null.");
        else if (userName !== undefined)
            url_ += "userName=" + encodeURIComponent("" + userName) + "&";
        if (userCode === null)
            throw new Error("The parameter 'userCode' cannot be null.");
        else if (userCode !== undefined)
            url_ += "userCode=" + encodeURIComponent("" + userCode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCfSsoLogin(_response));
        });
    }

    protected processCfSsoLogin(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PrognosisTmplFormServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 转归报告模板 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    prognosisTmplFormGET(id: string , cancelToken?: CancelToken | undefined): Promise<PrognosisTmplFormViewResultEntry> {
        let url_ = this.baseUrl + "/api/PrognosisTmplForm/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPrognosisTmplFormGET(_response));
        });
    }

    protected processPrognosisTmplFormGET(response: AxiosResponse): Promise<PrognosisTmplFormViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PrognosisTmplFormViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PrognosisTmplFormViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PrognosisTmplFormViewResultEntry>(null as any);
    }

    /**
     * 转归报告模板 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    prognosisTmplFormPOST(id: string, body: PrognosisTmplFormEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PrognosisTmplForm/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPrognosisTmplFormPOST(_response));
        });
    }

    protected processPrognosisTmplFormPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 转归报告模板 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter5(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PrognosisTmplFormViewResult> {
        let url_ = this.baseUrl + "/api/PrognosisTmplForm/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter5(_response));
        });
    }

    protected processFilter5(response: AxiosResponse): Promise<PrognosisTmplFormViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PrognosisTmplFormViewResult.fromJS(resultData200);
            return Promise.resolve<PrognosisTmplFormViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PrognosisTmplFormViewResult>(null as any);
    }

    /**
     * 表单模板 -- 根据code查询数据
     * @param code (optional) code
     * @return Success
     */
    byCode(code: string | undefined , cancelToken?: CancelToken | undefined): Promise<PrognosisTmplFormResultEntry> {
        let url_ = this.baseUrl + "/api/PrognosisTmplForm/ByCode?";
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processByCode(_response));
        });
    }

    protected processByCode(response: AxiosResponse): Promise<PrognosisTmplFormResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PrognosisTmplFormResultEntry.fromJS(resultData200);
            return Promise.resolve<PrognosisTmplFormResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PrognosisTmplFormResultEntry>(null as any);
    }

    /**
     * 表单模板 -- 根据Id查询Data数据(有数据返回TRUE，无数据返回FALSE)
     * @param design (optional)
     * @return Success
     */
    dataGET(id: string, design: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<JObjectResultEntry> {
        let url_ = this.baseUrl + "/api/PrognosisTmplForm/Data/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (design === null)
            throw new Error("The parameter 'design' cannot be null.");
        else if (design !== undefined)
            url_ += "design=" + encodeURIComponent("" + design) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDataGET(_response));
        });
    }

    protected processDataGET(response: AxiosResponse): Promise<JObjectResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JObjectResultEntry.fromJS(resultData200);
            return Promise.resolve<JObjectResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<JObjectResultEntry>(null as any);
    }

    /**
     * 表单模板 -- 更新表单内容
     * @param body (optional)
     * @return Success
     */
    dataPOST(id: string, body: PrognosisTmplFormDataEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PrognosisTmplForm/Data/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDataPOST(_response));
        });
    }

    protected processDataPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 自定义话术模板字段列表
     * @return Success
     */
    tags(  cancelToken?: CancelToken | undefined): Promise<ModelTagViewResult> {
        let url_ = this.baseUrl + "/api/PrognosisTmplForm/Tags";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTags(_response));
        });
    }

    protected processTags(response: AxiosResponse): Promise<ModelTagViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ModelTagViewResult.fromJS(resultData200);
            return Promise.resolve<ModelTagViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ModelTagViewResult>(null as any);
    }

    /**
     * 自定义话术模板明细 -- 根据患者标识或者透析记录单标识填充数据
     * @param code 自定义话术模板code
     * @param patientId 患者标识
     * @return Success
     */
    patientTmplForm(code: string, patientId: string , cancelToken?: CancelToken | undefined): Promise<TmplFormDataViewResult> {
        let url_ = this.baseUrl + "/api/PrognosisTmplForm/PatientTmplForm/{code}/{patientId}";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code));
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientTmplForm(_response));
        });
    }

    protected processPatientTmplForm(response: AxiosResponse): Promise<TmplFormDataViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TmplFormDataViewResult.fromJS(resultData200);
            return Promise.resolve<TmplFormDataViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TmplFormDataViewResult>(null as any);
    }

    /**
     * 转归报告模板 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    prognosisTmplFormPOST2(body: PrognosisTmplFormEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PrognosisTmplForm";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPrognosisTmplFormPOST2(_response));
        });
    }

    protected processPrognosisTmplFormPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 表单模板 -- 表单复制
     * @return Success
     */
    copy(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PrognosisTmplForm/Copy/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCopy(_response));
        });
    }

    protected processCopy(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 转归报告模板 -- 根据Id删除数据
     * @return Success
     */
    delete4(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PrognosisTmplForm/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete4(_response));
        });
    }

    protected processDelete4(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RtmMessageServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 消息记录 -- 根据Id查询数据并更新消息状态为已读
     * @return Success
     */
    rtmMessageGET(id: string , cancelToken?: CancelToken | undefined): Promise<RtmMessageViewResultEntry> {
        let url_ = this.baseUrl + "/api/RtmMessage/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRtmMessageGET(_response));
        });
    }

    protected processRtmMessageGET(response: AxiosResponse): Promise<RtmMessageViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RtmMessageViewResultEntry.fromJS(resultData200);
            return Promise.resolve<RtmMessageViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RtmMessageViewResultEntry>(null as any);
    }

    /**
     * 消息记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    rtmMessagePOST(id: string, body: RtmMessageViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RtmMessage/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRtmMessagePOST(_response));
        });
    }

    protected processRtmMessagePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 消息记录 -- 根据条件查询数据
     * @param type (optional) 消息类型 1:通知 2:待办 3:报警 4:预警 为空或填写其他内容均返回全部
     * @param isRead (optional) 消息状态 0:未读 1:已读 为空或填写其他内容均返回全部
     * @param filter (optional)
     * @return Success
     */
    filter6(type: string | undefined, isRead: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RtmMessageViewResult> {
        let url_ = this.baseUrl + "/api/RtmMessage/Filter?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (isRead === null)
            throw new Error("The parameter 'isRead' cannot be null.");
        else if (isRead !== undefined)
            url_ += "isRead=" + encodeURIComponent("" + isRead) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter6(_response));
        });
    }

    protected processFilter6(response: AxiosResponse): Promise<RtmMessageViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RtmMessageViewResult.fromJS(resultData200);
            return Promise.resolve<RtmMessageViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RtmMessageViewResult>(null as any);
    }

    /**
     * 消息记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    rtmMessagePOST2(body: RtmMessageViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RtmMessage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRtmMessagePOST2(_response));
        });
    }

    protected processRtmMessagePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 消息记录 - 批量更新消息状态为已读
     * @param body (optional) 消息Id集合
     * @return Success
     */
    batch(body: string[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RtmMessage/Msg/Batch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatch(_response));
        });
    }

    protected processBatch(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 消息记录 - 关注
     * @param id 消息Id
     * @return Success
     */
    focus(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RtmMessage/{id}/Focus";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFocus(_response));
        });
    }

    protected processFocus(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 消息记录 -- 根据Id删除数据
     * @return Success
     */
    delete5(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RtmMessage/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete5(_response));
        });
    }

    protected processDelete5(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 消息记录 -- 根据Id批量删除数据
     * @param body (optional)
     * @return Success
     */
    batch2(body: string[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RtmMessage/Delete/Batch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatch2(_response));
        });
    }

    protected processBatch2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RtmMessageFileServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 消息附件 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    rtmMessageFileGET(id: string , cancelToken?: CancelToken | undefined): Promise<RtmMessageFileResultEntry> {
        let url_ = this.baseUrl + "/api/RtmMessageFile/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRtmMessageFileGET(_response));
        });
    }

    protected processRtmMessageFileGET(response: AxiosResponse): Promise<RtmMessageFileResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RtmMessageFileResultEntry.fromJS(resultData200);
            return Promise.resolve<RtmMessageFileResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RtmMessageFileResultEntry>(null as any);
    }

    /**
     * 消息附件 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    rtmMessageFilePOST(id: string, body: RtmMessageFileViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RtmMessageFile/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRtmMessageFilePOST(_response));
        });
    }

    protected processRtmMessageFilePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 消息附件 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter7(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RtmMessageFileResult> {
        let url_ = this.baseUrl + "/api/RtmMessageFile/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter7(_response));
        });
    }

    protected processFilter7(response: AxiosResponse): Promise<RtmMessageFileResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RtmMessageFileResult.fromJS(resultData200);
            return Promise.resolve<RtmMessageFileResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RtmMessageFileResult>(null as any);
    }

    /**
     * 消息附件 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    rtmMessageFilePOST2(body: RtmMessageFileViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RtmMessageFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRtmMessageFilePOST2(_response));
        });
    }

    protected processRtmMessageFilePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 消息附件 -- 根据Id删除数据
     * @return Success
     */
    delete6(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RtmMessageFile/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete6(_response));
        });
    }

    protected processDelete6(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

/** 中心信息 */
export class CentralInformationEditModel implements ICentralInformationEditModel {
    /** 信息类型 */
    type!: string;
    /** 登记日期 */
    date!: dayjs.Dayjs;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICentralInformationEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.dataValue = _data["dataValue"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CentralInformationEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CentralInformationEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["dataValue"] = this.dataValue;
        data["remark"] = this.remark;
        return data;
    }
}

/** 中心信息 */
export interface ICentralInformationEditModel {
    /** 信息类型 */
    type: string;
    /** 登记日期 */
    date: dayjs.Dayjs;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 中心信息 */
export class CentralInformationView implements ICentralInformationView {
    /** 信息类型 */
    type!: string;
    /** 登记日期 */
    date!: dayjs.Dayjs;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICentralInformationView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.dataValue = _data["dataValue"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CentralInformationView {
        data = typeof data === 'object' ? data : {};
        let result = new CentralInformationView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["dataValue"] = this.dataValue;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 中心信息 */
export interface ICentralInformationView {
    /** 信息类型 */
    type: string;
    /** 登记日期 */
    date: dayjs.Dayjs;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CentralInformationViewResult implements ICentralInformationViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CentralInformationView[] | undefined;

    constructor(data?: ICentralInformationViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CentralInformationView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CentralInformationViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CentralInformationViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICentralInformationViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CentralInformationView[] | undefined;
}

/** Reponse */
export class CentralInformationViewResultEntry implements ICentralInformationViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CentralInformationView;

    constructor(data?: ICentralInformationViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CentralInformationView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CentralInformationViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CentralInformationViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICentralInformationViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CentralInformationView;
}

/** 透析评估记录 */
export class CureAssementView implements ICureAssementView {
    /** [透析记录标识](#透析记录) */
    cureRecordId!: string;
    /** 评估类型 `DIC.DIALYSIS.ASSEMENT.TYPE` *透前评估,透析评估,透后评估* */
    type!: string;
    /** [表单模板标识](#表单模板) */
    tmplFormId!: string;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 表单结构 */
    data?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureAssementView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.type = _data["type"];
            this.tmplFormId = _data["tmplFormId"];
            this.dataValue = _data["dataValue"];
            this.patientId = _data["patientId"];
            this.data = _data["data"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureAssementView {
        data = typeof data === 'object' ? data : {};
        let result = new CureAssementView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["type"] = this.type;
        data["tmplFormId"] = this.tmplFormId;
        data["dataValue"] = this.dataValue;
        data["patientId"] = this.patientId;
        data["data"] = this.data;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析评估记录 */
export interface ICureAssementView {
    /** [透析记录标识](#透析记录) */
    cureRecordId: string;
    /** 评估类型 `DIC.DIALYSIS.ASSEMENT.TYPE` *透前评估,透析评估,透后评估* */
    type: string;
    /** [表单模板标识](#表单模板) */
    tmplFormId: string;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 表单结构 */
    data?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureAssementViewResult implements ICureAssementViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureAssementView[] | undefined;

    constructor(data?: ICureAssementViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureAssementView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureAssementViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureAssementViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureAssementViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureAssementView[] | undefined;
}

/** Reponse */
export class CureAssementViewResultEntry implements ICureAssementViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureAssementView;

    constructor(data?: ICureAssementViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureAssementView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureAssementViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureAssementViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureAssementViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureAssementView;
}

/** 患者排床床位信息 */
export class CureBedItem implements ICureBedItem {
    /** 透析床位标识 */
    deptDialysisBedId?: string | undefined;
    /** 透析床位名称 */
    deptDialysisBedName?: string | undefined;
    /** 序列 */
    deptDialysisBedSequence?: number;
    /** 科室设备标识 */
    devId?: string | undefined;
    /** 科室设备编号 */
    devCode?: string | undefined;
    /** 科室设备类型 */
    devType?: string | undefined;
    /** 科室设备型号 */
    devModel?: string | undefined;
    /** 是否阳性 *如阳性不可改为阴性* */
    devPositive?: number;
    /** 科室设备是否可用 */
    devAvailable?: number;
    /** 启用状态0,1 */
    deptDialysisBedEnabled?: number;
    /** 患者排床床位上的患者信息 */
    patients?: CurePatient[] | undefined;

    constructor(data?: ICureBedItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deptDialysisBedId = _data["deptDialysisBedId"];
            this.deptDialysisBedName = _data["deptDialysisBedName"];
            this.deptDialysisBedSequence = _data["deptDialysisBedSequence"];
            this.devId = _data["devId"];
            this.devCode = _data["devCode"];
            this.devType = _data["devType"];
            this.devModel = _data["devModel"];
            this.devPositive = _data["devPositive"];
            this.devAvailable = _data["devAvailable"];
            this.deptDialysisBedEnabled = _data["deptDialysisBedEnabled"];
            if (Array.isArray(_data["patients"])) {
                this.patients = [] as any;
                for (let item of _data["patients"])
                    this.patients!.push(CurePatient.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureBedItem {
        data = typeof data === 'object' ? data : {};
        let result = new CureBedItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deptDialysisBedId"] = this.deptDialysisBedId;
        data["deptDialysisBedName"] = this.deptDialysisBedName;
        data["deptDialysisBedSequence"] = this.deptDialysisBedSequence;
        data["devId"] = this.devId;
        data["devCode"] = this.devCode;
        data["devType"] = this.devType;
        data["devModel"] = this.devModel;
        data["devPositive"] = this.devPositive;
        data["devAvailable"] = this.devAvailable;
        data["deptDialysisBedEnabled"] = this.deptDialysisBedEnabled;
        if (Array.isArray(this.patients)) {
            data["patients"] = [];
            for (let item of this.patients)
                data["patients"].push(item.toJSON());
        }
        return data;
    }
}

/** 患者排床床位信息 */
export interface ICureBedItem {
    /** 透析床位标识 */
    deptDialysisBedId?: string | undefined;
    /** 透析床位名称 */
    deptDialysisBedName?: string | undefined;
    /** 序列 */
    deptDialysisBedSequence?: number;
    /** 科室设备标识 */
    devId?: string | undefined;
    /** 科室设备编号 */
    devCode?: string | undefined;
    /** 科室设备类型 */
    devType?: string | undefined;
    /** 科室设备型号 */
    devModel?: string | undefined;
    /** 是否阳性 *如阳性不可改为阴性* */
    devPositive?: number;
    /** 科室设备是否可用 */
    devAvailable?: number;
    /** 启用状态0,1 */
    deptDialysisBedEnabled?: number;
    /** 患者排床床位上的患者信息 */
    patients?: CurePatient[] | undefined;
}

/** 床位患者明细 */
export class CureBedPatientDetail implements ICureBedPatientDetail {
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs | undefined;
    /** 透析日 `DIC.DIALYSIS.WEEKDAY` */
    weekday?: number;
    /** 床位标识 */
    bedId?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 区间标识 */
    dialysisAreaId?: string | undefined;
    /** 床位 */
    dialysisAreaName?: string | undefined;
    /** 透析日名称 */
    weekdayName?: string | undefined;
    dossierNum?: string | undefined;
    /** 班次标识 */
    shiftId?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者是否阳性0,1 */
    patientPositive?: number;
    /** 透析方式 `DIC.DIALYSIS.MODE`  *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式名称 */
    dialysisModeName?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 颜色代码名称 */
    colorName?: string | undefined;
    /** 字体颜色 `DIC.SYS.FONTCOLOR` 可自定义颜色 */
    fontColor?: string | undefined;
    /** 字体颜色名称 */
    fontColorName?: string | undefined;
    /** 透析器标识 */
    dialyzerId?: string | undefined;
    /** 透析器名称 */
    dialyzerName?: string | undefined;
    /** 透析器数量 */
    dialyzerCount?: string | undefined;
    /** 血滤器标识 */
    filterId?: string | undefined;
    /** 血滤器名称 */
    filterName?: string | undefined;
    /** 血滤器数量 */
    filterCount?: string | undefined;
    /** 灌流器标识 */
    perfusionId?: string | undefined;
    /** 灌流器名称 */
    perfusionName?: string | undefined;
    /** 灌流器数量 */
    perfusionCount?: string | undefined;
    /** 图标 */
    icon?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 抗凝剂类型 */
    anticoagulantName?: string | undefined;
    /** 剂量 */
    anticoagulantTotal?: string | undefined;
    /** 费用组套 */
    cureCostGroups?: CureCostGroupView[] | undefined;

    constructor(data?: ICureBedPatientDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.weekday = _data["weekday"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.weekdayName = _data["weekdayName"];
            this.dossierNum = _data["dossierNum"];
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.patientPositive = _data["patientPositive"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisModeName = _data["dialysisModeName"];
            this.color = _data["color"];
            this.colorName = _data["colorName"];
            this.fontColor = _data["fontColor"];
            this.fontColorName = _data["fontColorName"];
            this.dialyzerId = _data["dialyzerId"];
            this.dialyzerName = _data["dialyzerName"];
            this.dialyzerCount = _data["dialyzerCount"];
            this.filterId = _data["filterId"];
            this.filterName = _data["filterName"];
            this.filterCount = _data["filterCount"];
            this.perfusionId = _data["perfusionId"];
            this.perfusionName = _data["perfusionName"];
            this.perfusionCount = _data["perfusionCount"];
            this.icon = _data["icon"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.remark = _data["remark"];
            this.anticoagulantName = _data["anticoagulantName"];
            this.anticoagulantTotal = _data["anticoagulantTotal"];
            if (Array.isArray(_data["cureCostGroups"])) {
                this.cureCostGroups = [] as any;
                for (let item of _data["cureCostGroups"])
                    this.cureCostGroups!.push(CureCostGroupView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureBedPatientDetail {
        data = typeof data === 'object' ? data : {};
        let result = new CureBedPatientDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["weekday"] = this.weekday;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["weekdayName"] = this.weekdayName;
        data["dossierNum"] = this.dossierNum;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["patientPositive"] = this.patientPositive;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisModeName"] = this.dialysisModeName;
        data["color"] = this.color;
        data["colorName"] = this.colorName;
        data["fontColor"] = this.fontColor;
        data["fontColorName"] = this.fontColorName;
        data["dialyzerId"] = this.dialyzerId;
        data["dialyzerName"] = this.dialyzerName;
        data["dialyzerCount"] = this.dialyzerCount;
        data["filterId"] = this.filterId;
        data["filterName"] = this.filterName;
        data["filterCount"] = this.filterCount;
        data["perfusionId"] = this.perfusionId;
        data["perfusionName"] = this.perfusionName;
        data["perfusionCount"] = this.perfusionCount;
        data["icon"] = this.icon;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["remark"] = this.remark;
        data["anticoagulantName"] = this.anticoagulantName;
        data["anticoagulantTotal"] = this.anticoagulantTotal;
        if (Array.isArray(this.cureCostGroups)) {
            data["cureCostGroups"] = [];
            for (let item of this.cureCostGroups)
                data["cureCostGroups"].push(item.toJSON());
        }
        return data;
    }
}

/** 床位患者明细 */
export interface ICureBedPatientDetail {
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs | undefined;
    /** 透析日 `DIC.DIALYSIS.WEEKDAY` */
    weekday?: number;
    /** 床位标识 */
    bedId?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 区间标识 */
    dialysisAreaId?: string | undefined;
    /** 床位 */
    dialysisAreaName?: string | undefined;
    /** 透析日名称 */
    weekdayName?: string | undefined;
    dossierNum?: string | undefined;
    /** 班次标识 */
    shiftId?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者是否阳性0,1 */
    patientPositive?: number;
    /** 透析方式 `DIC.DIALYSIS.MODE`  *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式名称 */
    dialysisModeName?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 颜色代码名称 */
    colorName?: string | undefined;
    /** 字体颜色 `DIC.SYS.FONTCOLOR` 可自定义颜色 */
    fontColor?: string | undefined;
    /** 字体颜色名称 */
    fontColorName?: string | undefined;
    /** 透析器标识 */
    dialyzerId?: string | undefined;
    /** 透析器名称 */
    dialyzerName?: string | undefined;
    /** 透析器数量 */
    dialyzerCount?: string | undefined;
    /** 血滤器标识 */
    filterId?: string | undefined;
    /** 血滤器名称 */
    filterName?: string | undefined;
    /** 血滤器数量 */
    filterCount?: string | undefined;
    /** 灌流器标识 */
    perfusionId?: string | undefined;
    /** 灌流器名称 */
    perfusionName?: string | undefined;
    /** 灌流器数量 */
    perfusionCount?: string | undefined;
    /** 图标 */
    icon?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 抗凝剂类型 */
    anticoagulantName?: string | undefined;
    /** 剂量 */
    anticoagulantTotal?: string | undefined;
    /** 费用组套 */
    cureCostGroups?: CureCostGroupView[] | undefined;
}

export class CureCostGroupView implements ICureCostGroupView {
    /** 耗材分类代码 */
    roomItemTypeCode!: string;
    /** [耗材标识](项目清单Id) */
    roomItemListId!: string;
    /** 耗材数量 */
    count!: number;
    /** 批号管理 */
    batchManage!: number | undefined;
    /** 编码 */
    code?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 耗材编码 */
    devBarCode?: string | undefined;
    /** 项目标识 */
    cureRecordConsumableId?: string | undefined;
    /** 项目排序 */
    sequence?: number;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 种类名称 */
    roomItemTypeName?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 售价 */
    sellingPrice?: number | undefined;
    /** 基本单位 */
    unit?: string | undefined;
    /** 基本单位显示值 */
    unitLabel?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` */
    unitLevel1?: string | undefined;
    /** 一级单位显示值 */
    unitLevel1Label?: string | undefined;
    /** 一级单位与基本单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 项目启用状态0,1 */
    enabled?: number;
    /** 库存 *基本单位的库存* */
    inventoryCount?: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 批号明细 */
    batchItems?: CureRecordConsumableItemView[] | undefined;

    constructor(data?: ICureCostGroupView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemTypeCode = _data["roomItemTypeCode"];
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
            this.batchManage = _data["batchManage"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.devBarCode = _data["devBarCode"];
            this.cureRecordConsumableId = _data["cureRecordConsumableId"];
            this.sequence = _data["sequence"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.spec = _data["spec"];
            this.sellingPrice = _data["sellingPrice"];
            this.unit = _data["unit"];
            this.unitLabel = _data["unitLabel"];
            this.usageMode = _data["usageMode"];
            this.usageModeLabel = _data["usageModeLabel"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitLevel1Label = _data["unitLevel1Label"];
            if (Array.isArray(_data["unitList"])) {
                this.unitList = [] as any;
                for (let item of _data["unitList"])
                    this.unitList!.push(LabelModel.fromJS(item));
            }
            this.enabled = _data["enabled"];
            this.inventoryCount = _data["inventoryCount"];
            this.batchNo = _data["batchNo"];
            if (Array.isArray(_data["batchItems"])) {
                this.batchItems = [] as any;
                for (let item of _data["batchItems"])
                    this.batchItems!.push(CureRecordConsumableItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureCostGroupView {
        data = typeof data === 'object' ? data : {};
        let result = new CureCostGroupView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemTypeCode"] = this.roomItemTypeCode;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        data["batchManage"] = this.batchManage;
        data["code"] = this.code;
        data["name"] = this.name;
        data["devBarCode"] = this.devBarCode;
        data["cureRecordConsumableId"] = this.cureRecordConsumableId;
        data["sequence"] = this.sequence;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["spec"] = this.spec;
        data["sellingPrice"] = this.sellingPrice;
        data["unit"] = this.unit;
        data["unitLabel"] = this.unitLabel;
        data["usageMode"] = this.usageMode;
        data["usageModeLabel"] = this.usageModeLabel;
        data["unitLevel1"] = this.unitLevel1;
        data["unitLevel1Label"] = this.unitLevel1Label;
        if (Array.isArray(this.unitList)) {
            data["unitList"] = [];
            for (let item of this.unitList)
                data["unitList"].push(item.toJSON());
        }
        data["enabled"] = this.enabled;
        data["inventoryCount"] = this.inventoryCount;
        data["batchNo"] = this.batchNo;
        if (Array.isArray(this.batchItems)) {
            data["batchItems"] = [];
            for (let item of this.batchItems)
                data["batchItems"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICureCostGroupView {
    /** 耗材分类代码 */
    roomItemTypeCode: string;
    /** [耗材标识](项目清单Id) */
    roomItemListId: string;
    /** 耗材数量 */
    count: number;
    /** 批号管理 */
    batchManage: number | undefined;
    /** 编码 */
    code?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 耗材编码 */
    devBarCode?: string | undefined;
    /** 项目标识 */
    cureRecordConsumableId?: string | undefined;
    /** 项目排序 */
    sequence?: number;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 种类名称 */
    roomItemTypeName?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 售价 */
    sellingPrice?: number | undefined;
    /** 基本单位 */
    unit?: string | undefined;
    /** 基本单位显示值 */
    unitLabel?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` */
    unitLevel1?: string | undefined;
    /** 一级单位显示值 */
    unitLevel1Label?: string | undefined;
    /** 一级单位与基本单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 项目启用状态0,1 */
    enabled?: number;
    /** 库存 *基本单位的库存* */
    inventoryCount?: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 批号明细 */
    batchItems?: CureRecordConsumableItemView[] | undefined;
}

/** 透析区间信息 */
export class CureDialysisItem implements ICureDialysisItem {
    /** 透析区间标识 */
    deptDialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    deptDialysisAreaName?: string | undefined;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    deptDialysisAreaType?: string | undefined;
    /** 类型名称 */
    deptDialysisAreaTypeName?: string | undefined;
    /** 图标 */
    deptDialysisAreaIcon?: string | undefined;
    /** 图标 */
    deptDialysisAreaIconLabel?: string | undefined;
    /** 是否阳性分区0,1 */
    deptDialysisAreaPositive?: number;
    /** 序列 */
    deptDialysisAreaSequence?: number;
    /** 启用状态0,1 */
    deptDialysisAreaEnabled?: number;
    /** 患者排床床位信息 */
    bedItems?: CureBedItem[] | undefined;

    constructor(data?: ICureDialysisItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deptDialysisAreaId = _data["deptDialysisAreaId"];
            this.deptDialysisAreaName = _data["deptDialysisAreaName"];
            this.deptDialysisAreaType = _data["deptDialysisAreaType"];
            this.deptDialysisAreaTypeName = _data["deptDialysisAreaTypeName"];
            this.deptDialysisAreaIcon = _data["deptDialysisAreaIcon"];
            this.deptDialysisAreaIconLabel = _data["deptDialysisAreaIconLabel"];
            this.deptDialysisAreaPositive = _data["deptDialysisAreaPositive"];
            this.deptDialysisAreaSequence = _data["deptDialysisAreaSequence"];
            this.deptDialysisAreaEnabled = _data["deptDialysisAreaEnabled"];
            if (Array.isArray(_data["bedItems"])) {
                this.bedItems = [] as any;
                for (let item of _data["bedItems"])
                    this.bedItems!.push(CureBedItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureDialysisItem {
        data = typeof data === 'object' ? data : {};
        let result = new CureDialysisItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deptDialysisAreaId"] = this.deptDialysisAreaId;
        data["deptDialysisAreaName"] = this.deptDialysisAreaName;
        data["deptDialysisAreaType"] = this.deptDialysisAreaType;
        data["deptDialysisAreaTypeName"] = this.deptDialysisAreaTypeName;
        data["deptDialysisAreaIcon"] = this.deptDialysisAreaIcon;
        data["deptDialysisAreaIconLabel"] = this.deptDialysisAreaIconLabel;
        data["deptDialysisAreaPositive"] = this.deptDialysisAreaPositive;
        data["deptDialysisAreaSequence"] = this.deptDialysisAreaSequence;
        data["deptDialysisAreaEnabled"] = this.deptDialysisAreaEnabled;
        if (Array.isArray(this.bedItems)) {
            data["bedItems"] = [];
            for (let item of this.bedItems)
                data["bedItems"].push(item.toJSON());
        }
        return data;
    }
}

/** 透析区间信息 */
export interface ICureDialysisItem {
    /** 透析区间标识 */
    deptDialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    deptDialysisAreaName?: string | undefined;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    deptDialysisAreaType?: string | undefined;
    /** 类型名称 */
    deptDialysisAreaTypeName?: string | undefined;
    /** 图标 */
    deptDialysisAreaIcon?: string | undefined;
    /** 图标 */
    deptDialysisAreaIconLabel?: string | undefined;
    /** 是否阳性分区0,1 */
    deptDialysisAreaPositive?: number;
    /** 序列 */
    deptDialysisAreaSequence?: number;
    /** 启用状态0,1 */
    deptDialysisAreaEnabled?: number;
    /** 患者排床床位信息 */
    bedItems?: CureBedItem[] | undefined;
}

/** 患者排床详细信息 */
export class CurePatient implements ICurePatient {
    isShift?: boolean;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 透析日 `DIC.DIALYSIS.WEEKDAY` */
    weekday?: number;
    /** 透析日名称 */
    weekdayName?: string | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName?: string | undefined;
    /** 班次颜色 */
    shiftColor?: string | undefined;
    /** 班次序列 */
    sequence?: number;
    /** 开始时间 *HH:mm:ss* */
    beginTime?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    endTime?: string | undefined;
    patient?: CureBedPatientDetail;

    constructor(data?: ICurePatient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isShift = _data["isShift"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.weekday = _data["weekday"];
            this.weekdayName = _data["weekdayName"];
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.shiftColor = _data["shiftColor"];
            this.sequence = _data["sequence"];
            this.beginTime = _data["beginTime"];
            this.endTime = _data["endTime"];
            this.patient = _data["patient"] ? CureBedPatientDetail.fromJS(_data["patient"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CurePatient {
        data = typeof data === 'object' ? data : {};
        let result = new CurePatient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isShift"] = this.isShift;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["weekday"] = this.weekday;
        data["weekdayName"] = this.weekdayName;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["shiftColor"] = this.shiftColor;
        data["sequence"] = this.sequence;
        data["beginTime"] = this.beginTime;
        data["endTime"] = this.endTime;
        data["patient"] = this.patient ? this.patient.toJSON() : <any>undefined;
        return data;
    }
}

/** 患者排床详细信息 */
export interface ICurePatient {
    isShift?: boolean;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 透析日 `DIC.DIALYSIS.WEEKDAY` */
    weekday?: number;
    /** 透析日名称 */
    weekdayName?: string | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName?: string | undefined;
    /** 班次颜色 */
    shiftColor?: string | undefined;
    /** 班次序列 */
    sequence?: number;
    /** 开始时间 *HH:mm:ss* */
    beginTime?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    endTime?: string | undefined;
    patient?: CureBedPatientDetail;
}

/** 透析耗材 */
export class CureRecordConsumableItemView implements ICureRecordConsumableItemView {
    /** [透析耗材标识](#透析耗材) */
    cureRecordConsumableId?: string | undefined;
    /** [入库记录标识](#入库记录) */
    roomRecordInId?: string | undefined;
    /** 耗材数量 */
    batchCount!: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 批号剩余数量 */
    surplusCount?: number;
    /** 批号有效期 */
    expiryDate?: dayjs.Dayjs | undefined;

    constructor(data?: ICureRecordConsumableItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordConsumableId = _data["cureRecordConsumableId"];
            this.roomRecordInId = _data["roomRecordInId"];
            this.batchCount = _data["batchCount"];
            this.batchNo = _data["batchNo"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.surplusCount = _data["surplusCount"];
            this.expiryDate = _data["expiryDate"] ? dayjs(_data["expiryDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordConsumableItemView {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordConsumableItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordConsumableId"] = this.cureRecordConsumableId;
        data["roomRecordInId"] = this.roomRecordInId;
        data["batchCount"] = this.batchCount;
        data["batchNo"] = this.batchNo;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["surplusCount"] = this.surplusCount;
        data["expiryDate"] = this.expiryDate ? this.expiryDate.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析耗材 */
export interface ICureRecordConsumableItemView {
    /** [透析耗材标识](#透析耗材) */
    cureRecordConsumableId?: string | undefined;
    /** [入库记录标识](#入库记录) */
    roomRecordInId?: string | undefined;
    /** 耗材数量 */
    batchCount: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 批号剩余数量 */
    surplusCount?: number;
    /** 批号有效期 */
    expiryDate?: dayjs.Dayjs | undefined;
}

export class CureRecordFileView implements ICureRecordFileView {
    /** 标识 */
    id?: string | undefined;
    /** 上一次透析标识 */
    lastId?: string | undefined;
    /** 下一次透析标识 */
    nextId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    assementBefore?: CureRecordItemAssement;
    assementAfter?: CureRecordItemAssement;
    assementDialysis?: CureRecordItemAssement;
    /** 表头行数 */
    row?: number | undefined;
    /** 透析记录单HTML文本 */
    content?: string | undefined;

    constructor(data?: ICureRecordFileView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.lastId = _data["lastId"];
            this.nextId = _data["nextId"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftName = _data["shiftName"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.bedName = _data["bedName"];
            this.patientName = _data["patientName"];
            this.assementBefore = _data["assementBefore"] ? CureRecordItemAssement.fromJS(_data["assementBefore"]) : <any>undefined;
            this.assementAfter = _data["assementAfter"] ? CureRecordItemAssement.fromJS(_data["assementAfter"]) : <any>undefined;
            this.assementDialysis = _data["assementDialysis"] ? CureRecordItemAssement.fromJS(_data["assementDialysis"]) : <any>undefined;
            this.row = _data["row"];
            this.content = _data["content"];
        }
    }

    static fromJS(data: any): CureRecordFileView {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordFileView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["lastId"] = this.lastId;
        data["nextId"] = this.nextId;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftName"] = this.shiftName;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["bedName"] = this.bedName;
        data["patientName"] = this.patientName;
        data["assementBefore"] = this.assementBefore ? this.assementBefore.toJSON() : <any>undefined;
        data["assementAfter"] = this.assementAfter ? this.assementAfter.toJSON() : <any>undefined;
        data["assementDialysis"] = this.assementDialysis ? this.assementDialysis.toJSON() : <any>undefined;
        data["row"] = this.row;
        data["content"] = this.content;
        return data;
    }
}

export interface ICureRecordFileView {
    /** 标识 */
    id?: string | undefined;
    /** 上一次透析标识 */
    lastId?: string | undefined;
    /** 下一次透析标识 */
    nextId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    assementBefore?: CureRecordItemAssement;
    assementAfter?: CureRecordItemAssement;
    assementDialysis?: CureRecordItemAssement;
    /** 表头行数 */
    row?: number | undefined;
    /** 透析记录单HTML文本 */
    content?: string | undefined;
}

/** Reponse */
export class CureRecordFileViewResultEntry implements ICureRecordFileViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordFileView;

    constructor(data?: ICureRecordFileViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureRecordFileView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordFileViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordFileViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureRecordFileViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordFileView;
}

/** 透前评估 */
export class CureRecordItemAssement implements ICureRecordItemAssement {
    /** 表单结构 */
    data?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** 受支持的表单自定义数据 */
    values?: SysFormValueView[] | undefined;

    constructor(data?: ICureRecordItemAssement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"];
            this.dataValue = _data["dataValue"];
            if (Array.isArray(_data["values"])) {
                this.values = [] as any;
                for (let item of _data["values"])
                    this.values!.push(SysFormValueView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordItemAssement {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemAssement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data;
        data["dataValue"] = this.dataValue;
        if (Array.isArray(this.values)) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item.toJSON());
        }
        return data;
    }
}

/** 透前评估 */
export interface ICureRecordItemAssement {
    /** 表单结构 */
    data?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** 受支持的表单自定义数据 */
    values?: SysFormValueView[] | undefined;
}

/** 透析排床 */
export class CureScheduleDetailView implements ICureScheduleDetailView {
    /** 班次 */
    sysHospitalAreas?: SysHospitalArea[] | undefined;
    /** 透析区间 */
    deptDialysisAreas?: DeptDialysisArea[] | undefined;
    /** 班次 */
    cureShifts?: CureShift[] | undefined;
    /** 患者排床透析区间信息 */
    dialysisItems?: CureDialysisItem[] | undefined;

    constructor(data?: ICureScheduleDetailView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["sysHospitalAreas"])) {
                this.sysHospitalAreas = [] as any;
                for (let item of _data["sysHospitalAreas"])
                    this.sysHospitalAreas!.push(SysHospitalArea.fromJS(item));
            }
            if (Array.isArray(_data["deptDialysisAreas"])) {
                this.deptDialysisAreas = [] as any;
                for (let item of _data["deptDialysisAreas"])
                    this.deptDialysisAreas!.push(DeptDialysisArea.fromJS(item));
            }
            if (Array.isArray(_data["cureShifts"])) {
                this.cureShifts = [] as any;
                for (let item of _data["cureShifts"])
                    this.cureShifts!.push(CureShift.fromJS(item));
            }
            if (Array.isArray(_data["dialysisItems"])) {
                this.dialysisItems = [] as any;
                for (let item of _data["dialysisItems"])
                    this.dialysisItems!.push(CureDialysisItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureScheduleDetailView {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleDetailView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.sysHospitalAreas)) {
            data["sysHospitalAreas"] = [];
            for (let item of this.sysHospitalAreas)
                data["sysHospitalAreas"].push(item.toJSON());
        }
        if (Array.isArray(this.deptDialysisAreas)) {
            data["deptDialysisAreas"] = [];
            for (let item of this.deptDialysisAreas)
                data["deptDialysisAreas"].push(item.toJSON());
        }
        if (Array.isArray(this.cureShifts)) {
            data["cureShifts"] = [];
            for (let item of this.cureShifts)
                data["cureShifts"].push(item.toJSON());
        }
        if (Array.isArray(this.dialysisItems)) {
            data["dialysisItems"] = [];
            for (let item of this.dialysisItems)
                data["dialysisItems"].push(item.toJSON());
        }
        return data;
    }
}

/** 透析排床 */
export interface ICureScheduleDetailView {
    /** 班次 */
    sysHospitalAreas?: SysHospitalArea[] | undefined;
    /** 透析区间 */
    deptDialysisAreas?: DeptDialysisArea[] | undefined;
    /** 班次 */
    cureShifts?: CureShift[] | undefined;
    /** 患者排床透析区间信息 */
    dialysisItems?: CureDialysisItem[] | undefined;
}

/** Reponse */
export class CureScheduleDetailViewResultEntry implements ICureScheduleDetailViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureScheduleDetailView;

    constructor(data?: ICureScheduleDetailViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureScheduleDetailView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureScheduleDetailViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleDetailViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureScheduleDetailViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureScheduleDetailView;
}

/** 透析班次 */
export class CureShift implements ICureShift {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○不允许重复* */
    name?: string | undefined;
    /** 简称 *○不允许重复* */
    shortName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    beginTime?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    endDate?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureShift) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.beginTime = _data["beginTime"];
            this.endDate = _data["endDate"];
            this.color = _data["color"];
            this.remark = _data["remark"];
            this.sequence = _data["sequence"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureShift {
        data = typeof data === 'object' ? data : {};
        let result = new CureShift();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["beginTime"] = this.beginTime;
        data["endDate"] = this.endDate;
        data["color"] = this.color;
        data["remark"] = this.remark;
        data["sequence"] = this.sequence;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析班次 */
export interface ICureShift {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○不允许重复* */
    name?: string | undefined;
    /** 简称 *○不允许重复* */
    shortName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    beginTime?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    endDate?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 透析区间 */
export class DeptDialysisArea implements IDeptDialysisArea {
    /** 标识 */
    id?: string | undefined;
    /** [归属透析室标识](透析室) */
    sysHospitalAreaId?: string | undefined;
    /** 名称 *○同一个`sys_hospital_area_id`下不允许重复* */
    name?: string | undefined;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    type?: string | undefined;
    /** 阳性分区0,1 */
    positive?: number;
    /** 最大床位数量 */
    bedMax?: number | undefined;
    /** 已有床位数量 */
    bedCount?: number | undefined;
    /** 所在建筑 */
    build?: string | undefined;
    /** 所在楼层 */
    floor?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 图标 `DIC.DIALYSIS.AREA.ICON` */
    icon?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    sysHospitalAreas?: SysHospitalArea;

    constructor(data?: IDeptDialysisArea) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.positive = _data["positive"];
            this.bedMax = _data["bedMax"];
            this.bedCount = _data["bedCount"];
            this.build = _data["build"];
            this.floor = _data["floor"];
            this.color = _data["color"];
            this.icon = _data["icon"];
            this.remark = _data["remark"];
            this.sequence = _data["sequence"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.sysHospitalAreas = _data["sysHospitalAreas"] ? SysHospitalArea.fromJS(_data["sysHospitalAreas"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptDialysisArea {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisArea();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["name"] = this.name;
        data["type"] = this.type;
        data["positive"] = this.positive;
        data["bedMax"] = this.bedMax;
        data["bedCount"] = this.bedCount;
        data["build"] = this.build;
        data["floor"] = this.floor;
        data["color"] = this.color;
        data["icon"] = this.icon;
        data["remark"] = this.remark;
        data["sequence"] = this.sequence;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["sysHospitalAreas"] = this.sysHospitalAreas ? this.sysHospitalAreas.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析区间 */
export interface IDeptDialysisArea {
    /** 标识 */
    id?: string | undefined;
    /** [归属透析室标识](透析室) */
    sysHospitalAreaId?: string | undefined;
    /** 名称 *○同一个`sys_hospital_area_id`下不允许重复* */
    name?: string | undefined;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    type?: string | undefined;
    /** 阳性分区0,1 */
    positive?: number;
    /** 最大床位数量 */
    bedMax?: number | undefined;
    /** 已有床位数量 */
    bedCount?: number | undefined;
    /** 所在建筑 */
    build?: string | undefined;
    /** 所在楼层 */
    floor?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 图标 `DIC.DIALYSIS.AREA.ICON` */
    icon?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    sysHospitalAreas?: SysHospitalArea;
}

/** 水处理记录 */
export class DevWaterProcessRecordEditModel implements IDevWaterProcessRecordEditModel {
    /** [水处理设备标识](#水处理设备) */
    devWaterProcessInfoId?: string | undefined;
    /** 日期 */
    date!: dayjs.Dayjs;
    /** 记录类型 `DIC.WATER.DEVICE.RECORD.TYPE` *检测记录,维护记录,消毒记录，运行记录* */
    type!: string;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** [表单模板标识](#表单模板) */
    tmplFormId!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDevWaterProcessRecordEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.devWaterProcessInfoId = _data["devWaterProcessInfoId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.dataValue = _data["dataValue"];
            this.tmplFormId = _data["tmplFormId"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DevWaterProcessRecordEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DevWaterProcessRecordEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["devWaterProcessInfoId"] = this.devWaterProcessInfoId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["type"] = this.type;
        data["dataValue"] = this.dataValue;
        data["tmplFormId"] = this.tmplFormId;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 水处理记录 */
export interface IDevWaterProcessRecordEditModel {
    /** [水处理设备标识](#水处理设备) */
    devWaterProcessInfoId?: string | undefined;
    /** 日期 */
    date: dayjs.Dayjs;
    /** 记录类型 `DIC.WATER.DEVICE.RECORD.TYPE` *检测记录,维护记录,消毒记录，运行记录* */
    type: string;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** [表单模板标识](#表单模板) */
    tmplFormId: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
}

/** 水处理记录 */
export class DevWaterProcessRecordView implements IDevWaterProcessRecordView {
    /** [水处理设备标识](#水处理设备) */
    devWaterProcessInfoId?: string | undefined;
    /** 日期 */
    date!: dayjs.Dayjs;
    /** 记录类型 `DIC.WATER.DEVICE.RECORD.TYPE` *检测记录,维护记录,消毒记录，运行记录* */
    type!: string;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** [表单模板标识](#表单模板) */
    tmplFormId!: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 自定义模板 */
    data?: string | undefined;
    /** 记录类型 字典标签 */
    typeLabel?: string | undefined;
    /** 水处理机名称 */
    waterDeviceNo?: string | undefined;
    /** 水处理机编码 */
    waterDeviceCode?: string | undefined;
    /** 水处理机类型 */
    waterDeviceType?: string | undefined;
    /** 水处理机类型展示值 */
    waterDeviceTypeLabel?: string | undefined;
    /** 水处理机型号 */
    waterDeviceModel?: string | undefined;
    /** 水处理机型号 - 展示值 */
    waterDeviceModelLabel?: string | undefined;

    constructor(data?: IDevWaterProcessRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.devWaterProcessInfoId = _data["devWaterProcessInfoId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.dataValue = _data["dataValue"];
            this.tmplFormId = _data["tmplFormId"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.data = _data["data"];
            this.typeLabel = _data["typeLabel"];
            this.waterDeviceNo = _data["waterDeviceNo"];
            this.waterDeviceCode = _data["waterDeviceCode"];
            this.waterDeviceType = _data["waterDeviceType"];
            this.waterDeviceTypeLabel = _data["waterDeviceTypeLabel"];
            this.waterDeviceModel = _data["waterDeviceModel"];
            this.waterDeviceModelLabel = _data["waterDeviceModelLabel"];
        }
    }

    static fromJS(data: any): DevWaterProcessRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new DevWaterProcessRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["devWaterProcessInfoId"] = this.devWaterProcessInfoId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["type"] = this.type;
        data["dataValue"] = this.dataValue;
        data["tmplFormId"] = this.tmplFormId;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["data"] = this.data;
        data["typeLabel"] = this.typeLabel;
        data["waterDeviceNo"] = this.waterDeviceNo;
        data["waterDeviceCode"] = this.waterDeviceCode;
        data["waterDeviceType"] = this.waterDeviceType;
        data["waterDeviceTypeLabel"] = this.waterDeviceTypeLabel;
        data["waterDeviceModel"] = this.waterDeviceModel;
        data["waterDeviceModelLabel"] = this.waterDeviceModelLabel;
        return data;
    }
}

/** 水处理记录 */
export interface IDevWaterProcessRecordView {
    /** [水处理设备标识](#水处理设备) */
    devWaterProcessInfoId?: string | undefined;
    /** 日期 */
    date: dayjs.Dayjs;
    /** 记录类型 `DIC.WATER.DEVICE.RECORD.TYPE` *检测记录,维护记录,消毒记录，运行记录* */
    type: string;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** [表单模板标识](#表单模板) */
    tmplFormId: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 自定义模板 */
    data?: string | undefined;
    /** 记录类型 字典标签 */
    typeLabel?: string | undefined;
    /** 水处理机名称 */
    waterDeviceNo?: string | undefined;
    /** 水处理机编码 */
    waterDeviceCode?: string | undefined;
    /** 水处理机类型 */
    waterDeviceType?: string | undefined;
    /** 水处理机类型展示值 */
    waterDeviceTypeLabel?: string | undefined;
    /** 水处理机型号 */
    waterDeviceModel?: string | undefined;
    /** 水处理机型号 - 展示值 */
    waterDeviceModelLabel?: string | undefined;
}

/** Reponse */
export class DevWaterProcessRecordViewResult implements IDevWaterProcessRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevWaterProcessRecordView[] | undefined;

    constructor(data?: IDevWaterProcessRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevWaterProcessRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevWaterProcessRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevWaterProcessRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevWaterProcessRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevWaterProcessRecordView[] | undefined;
}

/** Reponse */
export class DevWaterProcessRecordViewResultEntry implements IDevWaterProcessRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevWaterProcessRecordView;

    constructor(data?: IDevWaterProcessRecordViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DevWaterProcessRecordView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DevWaterProcessRecordViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DevWaterProcessRecordViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDevWaterProcessRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevWaterProcessRecordView;
}

/** 文件列表 */
export class HfsFiles implements IHfsFiles {
    /** 标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
    /** 文件路径 */
    path?: string | undefined;
    /** url */
    url?: string | undefined;
    /** 状态0,1 *0：临时 1：正式* */
    status?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IHfsFiles) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.extension = _data["extension"];
            this.length = _data["length"];
            this.path = _data["path"];
            this.url = _data["url"];
            this.status = _data["status"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HfsFiles {
        data = typeof data === 'object' ? data : {};
        let result = new HfsFiles();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["extension"] = this.extension;
        data["length"] = this.length;
        data["path"] = this.path;
        data["url"] = this.url;
        data["status"] = this.status;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 文件列表 */
export interface IHfsFiles {
    /** 标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
    /** 文件路径 */
    path?: string | undefined;
    /** url */
    url?: string | undefined;
    /** 状态0,1 *0：临时 1：正式* */
    status?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 院感评估记录 */
export class HospitalInfectionRecordEditModel implements IHospitalInfectionRecordEditModel {
    /** 检测日期 */
    date!: dayjs.Dayjs;
    /** [设备标识](#科室设备) */
    devInfoId!: string;
    /** 评估类型 `DIC.INFECTION.TYPE` *透析液检测,内毒素检测,电解质检测* */
    type!: string;
    /** [表单模板标识](#表单模板) */
    tmplFormId!: string;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;

    constructor(data?: IHospitalInfectionRecordEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.devInfoId = _data["devInfoId"];
            this.type = _data["type"];
            this.tmplFormId = _data["tmplFormId"];
            this.dataValue = _data["dataValue"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionRecordEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionRecordEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["devInfoId"] = this.devInfoId;
        data["type"] = this.type;
        data["tmplFormId"] = this.tmplFormId;
        data["dataValue"] = this.dataValue;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 院感评估记录 */
export interface IHospitalInfectionRecordEditModel {
    /** 检测日期 */
    date: dayjs.Dayjs;
    /** [设备标识](#科室设备) */
    devInfoId: string;
    /** 评估类型 `DIC.INFECTION.TYPE` *透析液检测,内毒素检测,电解质检测* */
    type: string;
    /** [表单模板标识](#表单模板) */
    tmplFormId: string;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
}

/** 院感评估记录 */
export class HospitalInfectionRecordView implements IHospitalInfectionRecordView {
    /** 检测日期 */
    date!: dayjs.Dayjs;
    /** [设备标识](#科室设备) */
    devInfoId!: string;
    /** 评估类型 `DIC.INFECTION.TYPE` *透析液检测,内毒素检测,电解质检测* */
    type!: string;
    /** [表单模板标识](#表单模板) */
    tmplFormId!: string;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 设备名称 */
    devCode?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 模板内容 */
    tmplFormData?: string | undefined;

    constructor(data?: IHospitalInfectionRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.devInfoId = _data["devInfoId"];
            this.type = _data["type"];
            this.tmplFormId = _data["tmplFormId"];
            this.dataValue = _data["dataValue"];
            this.id = _data["id"];
            this.devCode = _data["devCode"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.tmplFormData = _data["tmplFormData"];
        }
    }

    static fromJS(data: any): HospitalInfectionRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["devInfoId"] = this.devInfoId;
        data["type"] = this.type;
        data["tmplFormId"] = this.tmplFormId;
        data["dataValue"] = this.dataValue;
        data["id"] = this.id;
        data["devCode"] = this.devCode;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["tmplFormData"] = this.tmplFormData;
        return data;
    }
}

/** 院感评估记录 */
export interface IHospitalInfectionRecordView {
    /** 检测日期 */
    date: dayjs.Dayjs;
    /** [设备标识](#科室设备) */
    devInfoId: string;
    /** 评估类型 `DIC.INFECTION.TYPE` *透析液检测,内毒素检测,电解质检测* */
    type: string;
    /** [表单模板标识](#表单模板) */
    tmplFormId: string;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 设备名称 */
    devCode?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 模板内容 */
    tmplFormData?: string | undefined;
}

/** Reponse */
export class HospitalInfectionRecordViewResult implements IHospitalInfectionRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionRecordView[] | undefined;

    constructor(data?: IHospitalInfectionRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HospitalInfectionRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalInfectionRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionRecordView[] | undefined;
}

/** Reponse */
export class HospitalInfectionRecordViewResultEntry implements IHospitalInfectionRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionRecordView;

    constructor(data?: IHospitalInfectionRecordViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? HospitalInfectionRecordView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionRecordViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionRecordViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionRecordView;
}

/** 院感科血透接口(血液病人透析记录) */
export class HospitalSenseCureView implements IHospitalSenseCureView {
    /** 唯一主键 -- 出入院信息表中的唯一标识，与住院号可取同一个值 -- 门诊号 */
    id?: string | undefined;
    /** 病例号 -- 患者在医院信息系统中（门诊+住院）的唯一身份标识。无论患者在门诊还是住院，该标识都应指向同一患者 -- 门诊号 */
    patienT_ID?: string | undefined;
    /** 病人来源 -- 病人此次血透的来源：门诊病人填“MZ”,住院病人填“ZY” */
    patienttype?: string | undefined;
    /** 患者姓名 -- 患者名字 */
    patienT_NAME?: string | undefined;
    /** 性别 -- 患者性别，男、女 */
    sex?: string | undefined;
    /** 年龄 -- 患者年龄 */
    age?: number;
    /** 年龄单位 -- 患者年龄单位 */
    agE_UNIT?: string | undefined;
    /** 透析日期 -- 患者透析的时间 */
    txdate?: string | undefined;
    /** 透析机器号 -- 透析仪器的编号 */
    txmachineno?: string | undefined;
    /** 血管通路类型 -- 血管通路类型：1、内瘘。2、人工血管。3、隧道式中心静脉导管。4、非隧道式中心静脉导管。5、其他通路（如输液港） */
    xgaccesstype?: string | undefined;
    /** 中心静脉置管部位 -- 导管穿刺部位：如股静脉、左颈静脉、右颈静脉等 */
    txzxjmzgbw?: string | undefined;
    /** 累计透析次数 -- 在本医院累计透析的次数 */
    tX_COUNT?: number;

    constructor(data?: IHospitalSenseCureView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patienT_ID = _data["patienT_ID"];
            this.patienttype = _data["patienttype"];
            this.patienT_NAME = _data["patienT_NAME"];
            this.sex = _data["sex"];
            this.age = _data["age"];
            this.agE_UNIT = _data["agE_UNIT"];
            this.txdate = _data["txdate"];
            this.txmachineno = _data["txmachineno"];
            this.xgaccesstype = _data["xgaccesstype"];
            this.txzxjmzgbw = _data["txzxjmzgbw"];
            this.tX_COUNT = _data["tX_COUNT"];
        }
    }

    static fromJS(data: any): HospitalSenseCureView {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalSenseCureView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patienT_ID"] = this.patienT_ID;
        data["patienttype"] = this.patienttype;
        data["patienT_NAME"] = this.patienT_NAME;
        data["sex"] = this.sex;
        data["age"] = this.age;
        data["agE_UNIT"] = this.agE_UNIT;
        data["txdate"] = this.txdate;
        data["txmachineno"] = this.txmachineno;
        data["xgaccesstype"] = this.xgaccesstype;
        data["txzxjmzgbw"] = this.txzxjmzgbw;
        data["tX_COUNT"] = this.tX_COUNT;
        return data;
    }
}

/** 院感科血透接口(血液病人透析记录) */
export interface IHospitalSenseCureView {
    /** 唯一主键 -- 出入院信息表中的唯一标识，与住院号可取同一个值 -- 门诊号 */
    id?: string | undefined;
    /** 病例号 -- 患者在医院信息系统中（门诊+住院）的唯一身份标识。无论患者在门诊还是住院，该标识都应指向同一患者 -- 门诊号 */
    patienT_ID?: string | undefined;
    /** 病人来源 -- 病人此次血透的来源：门诊病人填“MZ”,住院病人填“ZY” */
    patienttype?: string | undefined;
    /** 患者姓名 -- 患者名字 */
    patienT_NAME?: string | undefined;
    /** 性别 -- 患者性别，男、女 */
    sex?: string | undefined;
    /** 年龄 -- 患者年龄 */
    age?: number;
    /** 年龄单位 -- 患者年龄单位 */
    agE_UNIT?: string | undefined;
    /** 透析日期 -- 患者透析的时间 */
    txdate?: string | undefined;
    /** 透析机器号 -- 透析仪器的编号 */
    txmachineno?: string | undefined;
    /** 血管通路类型 -- 血管通路类型：1、内瘘。2、人工血管。3、隧道式中心静脉导管。4、非隧道式中心静脉导管。5、其他通路（如输液港） */
    xgaccesstype?: string | undefined;
    /** 中心静脉置管部位 -- 导管穿刺部位：如股静脉、左颈静脉、右颈静脉等 */
    txzxjmzgbw?: string | undefined;
    /** 累计透析次数 -- 在本医院累计透析的次数 */
    tX_COUNT?: number;
}

/** Reponse */
export class HospitalSenseCureViewResult implements IHospitalSenseCureViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalSenseCureView[] | undefined;

    constructor(data?: IHospitalSenseCureViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HospitalSenseCureView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalSenseCureViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalSenseCureViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IHospitalSenseCureViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalSenseCureView[] | undefined;
}

/** 院感科血透接口(血液病人登记表) */
export class HospitalSensePatientView implements IHospitalSensePatientView {
    /** 唯一主键 -- 出入院信息表中的唯一标识，与住院号可取同一个值 -- 门诊号 */
    id?: string | undefined;
    /** 病例号 -- 患者在医院信息系统中（门诊+住院）的唯一身份标识。无论患者在门诊还是住院，该标识都应指向同一患者 -- 门诊号 */
    patienT_ID?: string | undefined;
    /** 病人来源 -- 病人此次血透的来源：门诊病人填“MZ”,住院病人填“ZY” */
    patienttype?: string | undefined;
    /** 患者姓名 -- 患者名字 */
    patienT_NAME?: string | undefined;
    /** 性别 -- 患者性别，男、女 */
    sex?: string | undefined;
    /** 身份证号码 -- 患者身份证号 */
    iD_CARD_ID?: string | undefined;
    /** 年龄 -- 患者年龄 */
    age?: number;
    /** 年龄单位 -- 患者年龄单位 */
    agE_UNIT?: string | undefined;
    /** 诊断编号 -- 诊断编号 */
    infecT_DIAGN_ID?: string | undefined;
    /** 诊断名称 -- 诊断名称 */
    infecT_DIAGN_NAME?: string | undefined;
    /** 血透场所 -- 曾在几所血透场所接受过血透治疗 */
    countcure?: string | undefined;
    /** 透析频率 -- 如：一周一次、一周二次等 */
    tX_FREQUENCY?: string | undefined;
    /** 累计透析次数 -- 在本医院累计透析的次数 */
    tX_COUNT?: number;
    /** 首次登记时间 -- 第一次在医院登记血透的时间 */
    dj_time?: dayjs.Dayjs | undefined;

    constructor(data?: IHospitalSensePatientView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patienT_ID = _data["patienT_ID"];
            this.patienttype = _data["patienttype"];
            this.patienT_NAME = _data["patienT_NAME"];
            this.sex = _data["sex"];
            this.iD_CARD_ID = _data["iD_CARD_ID"];
            this.age = _data["age"];
            this.agE_UNIT = _data["agE_UNIT"];
            this.infecT_DIAGN_ID = _data["infecT_DIAGN_ID"];
            this.infecT_DIAGN_NAME = _data["infecT_DIAGN_NAME"];
            this.countcure = _data["countcure"];
            this.tX_FREQUENCY = _data["tX_FREQUENCY"];
            this.tX_COUNT = _data["tX_COUNT"];
            this.dj_time = _data["dj_time"] ? dayjs(_data["dj_time"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalSensePatientView {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalSensePatientView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patienT_ID"] = this.patienT_ID;
        data["patienttype"] = this.patienttype;
        data["patienT_NAME"] = this.patienT_NAME;
        data["sex"] = this.sex;
        data["iD_CARD_ID"] = this.iD_CARD_ID;
        data["age"] = this.age;
        data["agE_UNIT"] = this.agE_UNIT;
        data["infecT_DIAGN_ID"] = this.infecT_DIAGN_ID;
        data["infecT_DIAGN_NAME"] = this.infecT_DIAGN_NAME;
        data["countcure"] = this.countcure;
        data["tX_FREQUENCY"] = this.tX_FREQUENCY;
        data["tX_COUNT"] = this.tX_COUNT;
        data["dj_time"] = this.dj_time ? this.dj_time.toISOString() : <any>undefined;
        return data;
    }
}

/** 院感科血透接口(血液病人登记表) */
export interface IHospitalSensePatientView {
    /** 唯一主键 -- 出入院信息表中的唯一标识，与住院号可取同一个值 -- 门诊号 */
    id?: string | undefined;
    /** 病例号 -- 患者在医院信息系统中（门诊+住院）的唯一身份标识。无论患者在门诊还是住院，该标识都应指向同一患者 -- 门诊号 */
    patienT_ID?: string | undefined;
    /** 病人来源 -- 病人此次血透的来源：门诊病人填“MZ”,住院病人填“ZY” */
    patienttype?: string | undefined;
    /** 患者姓名 -- 患者名字 */
    patienT_NAME?: string | undefined;
    /** 性别 -- 患者性别，男、女 */
    sex?: string | undefined;
    /** 身份证号码 -- 患者身份证号 */
    iD_CARD_ID?: string | undefined;
    /** 年龄 -- 患者年龄 */
    age?: number;
    /** 年龄单位 -- 患者年龄单位 */
    agE_UNIT?: string | undefined;
    /** 诊断编号 -- 诊断编号 */
    infecT_DIAGN_ID?: string | undefined;
    /** 诊断名称 -- 诊断名称 */
    infecT_DIAGN_NAME?: string | undefined;
    /** 血透场所 -- 曾在几所血透场所接受过血透治疗 */
    countcure?: string | undefined;
    /** 透析频率 -- 如：一周一次、一周二次等 */
    tX_FREQUENCY?: string | undefined;
    /** 累计透析次数 -- 在本医院累计透析的次数 */
    tX_COUNT?: number;
    /** 首次登记时间 -- 第一次在医院登记血透的时间 */
    dj_time?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class HospitalSensePatientViewResult implements IHospitalSensePatientViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalSensePatientView[] | undefined;

    constructor(data?: IHospitalSensePatientViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HospitalSensePatientView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalSensePatientViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalSensePatientViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IHospitalSensePatientViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalSensePatientView[] | undefined;
}

/** Reponse */
export class JObjectResultEntry implements IJObjectResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: string | undefined;

    constructor(data?: IJObjectResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"];
        }
    }

    static fromJS(data: any): JObjectResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new JObjectResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data;
        return data;
    }
}

/** Reponse */
export interface IJObjectResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: string | undefined;
}

export class LabelModel implements ILabelModel {
    /** 显示值 */
    label?: string | undefined;
    /** 值 */
    value?: string | undefined;

    constructor(data?: ILabelModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.label = _data["label"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): LabelModel {
        data = typeof data === 'object' ? data : {};
        let result = new LabelModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["label"] = this.label;
        data["value"] = this.value;
        return data;
    }
}

export interface ILabelModel {
    /** 显示值 */
    label?: string | undefined;
    /** 值 */
    value?: string | undefined;
}

/** 标签对应的描述 */
export class ModelTagView implements IModelTagView {
    /** 分类名称 */
    name?: string | undefined;
    /** 标签 */
    tags?: string[] | undefined;

    constructor(data?: IModelTagView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(item);
            }
        }
    }

    static fromJS(data: any): ModelTagView {
        data = typeof data === 'object' ? data : {};
        let result = new ModelTagView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item);
        }
        return data;
    }
}

/** 标签对应的描述 */
export interface IModelTagView {
    /** 分类名称 */
    name?: string | undefined;
    /** 标签 */
    tags?: string[] | undefined;
}

/** Reponse */
export class ModelTagViewResult implements IModelTagViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ModelTagView[] | undefined;

    constructor(data?: IModelTagViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ModelTagView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ModelTagViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new ModelTagViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IModelTagViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ModelTagView[] | undefined;
}

/** 患者透析信息 */
export class PatBloodInforBloodView implements IPatBloodInforBloodView {
    /** 血透患者ID唯一号 */
    reqno?: string | undefined;
    /** 本次血透的唯一号（同一病人每2-4天透析一次， 每次的唯一号） */
    samreqno?: string | undefined;
    /** 开始时间 */
    begtime?: string | undefined;
    /** 结束时间 */
    endtime?: string | undefined;
    /** 是否感染 */
    isgr?: string | undefined;
    /** 透析机号 */
    txjh?: string | undefined;
    /** 透析次数 */
    txcs?: number;
    /** 导管类型（长期，临时，内漏） */
    gglx?: string | undefined;
    /** 病人类型 */
    brlx?: string | undefined;

    constructor(data?: IPatBloodInforBloodView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.reqno = _data["reqno"];
            this.samreqno = _data["samreqno"];
            this.begtime = _data["begtime"];
            this.endtime = _data["endtime"];
            this.isgr = _data["isgr"];
            this.txjh = _data["txjh"];
            this.txcs = _data["txcs"];
            this.gglx = _data["gglx"];
            this.brlx = _data["brlx"];
        }
    }

    static fromJS(data: any): PatBloodInforBloodView {
        data = typeof data === 'object' ? data : {};
        let result = new PatBloodInforBloodView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reqno"] = this.reqno;
        data["samreqno"] = this.samreqno;
        data["begtime"] = this.begtime;
        data["endtime"] = this.endtime;
        data["isgr"] = this.isgr;
        data["txjh"] = this.txjh;
        data["txcs"] = this.txcs;
        data["gglx"] = this.gglx;
        data["brlx"] = this.brlx;
        return data;
    }
}

/** 患者透析信息 */
export interface IPatBloodInforBloodView {
    /** 血透患者ID唯一号 */
    reqno?: string | undefined;
    /** 本次血透的唯一号（同一病人每2-4天透析一次， 每次的唯一号） */
    samreqno?: string | undefined;
    /** 开始时间 */
    begtime?: string | undefined;
    /** 结束时间 */
    endtime?: string | undefined;
    /** 是否感染 */
    isgr?: string | undefined;
    /** 透析机号 */
    txjh?: string | undefined;
    /** 透析次数 */
    txcs?: number;
    /** 导管类型（长期，临时，内漏） */
    gglx?: string | undefined;
    /** 病人类型 */
    brlx?: string | undefined;
}

/** Reponse */
export class PatBloodInforBloodViewResult implements IPatBloodInforBloodViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatBloodInforBloodView[] | undefined;

    constructor(data?: IPatBloodInforBloodViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatBloodInforBloodView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatBloodInforBloodViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatBloodInforBloodViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatBloodInforBloodViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatBloodInforBloodView[] | undefined;
}

/** 血透患者记录 */
export class PatInforBloodView implements IPatInforBloodView {
    /** 血透患者ID 唯一号 */
    reqno?: string | undefined;
    /** 姓名 */
    patname?: string | undefined;
    /** 性别 -- 患者性别，男、女 */
    sex?: string | undefined;
    /** 年龄 -- 患者年龄 */
    age?: number;
    /** 身份证号 */
    idNo?: string | undefined;
    /** 地址 */
    address?: string | undefined;
    /** 出生日期 */
    birthday?: string | undefined;
    /** 电话 */
    phones?: string | undefined;
    /** 状态 */
    state?: string | undefined;
    /** 删除标志 */
    del?: string | undefined;

    constructor(data?: IPatInforBloodView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.reqno = _data["reqno"];
            this.patname = _data["patname"];
            this.sex = _data["sex"];
            this.age = _data["age"];
            this.idNo = _data["idNo"];
            this.address = _data["address"];
            this.birthday = _data["birthday"];
            this.phones = _data["phones"];
            this.state = _data["state"];
            this.del = _data["del"];
        }
    }

    static fromJS(data: any): PatInforBloodView {
        data = typeof data === 'object' ? data : {};
        let result = new PatInforBloodView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reqno"] = this.reqno;
        data["patname"] = this.patname;
        data["sex"] = this.sex;
        data["age"] = this.age;
        data["idNo"] = this.idNo;
        data["address"] = this.address;
        data["birthday"] = this.birthday;
        data["phones"] = this.phones;
        data["state"] = this.state;
        data["del"] = this.del;
        return data;
    }
}

/** 血透患者记录 */
export interface IPatInforBloodView {
    /** 血透患者ID 唯一号 */
    reqno?: string | undefined;
    /** 姓名 */
    patname?: string | undefined;
    /** 性别 -- 患者性别，男、女 */
    sex?: string | undefined;
    /** 年龄 -- 患者年龄 */
    age?: number;
    /** 身份证号 */
    idNo?: string | undefined;
    /** 地址 */
    address?: string | undefined;
    /** 出生日期 */
    birthday?: string | undefined;
    /** 电话 */
    phones?: string | undefined;
    /** 状态 */
    state?: string | undefined;
    /** 删除标志 */
    del?: string | undefined;
}

/** Reponse */
export class PatInforBloodViewResult implements IPatInforBloodViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatInforBloodView[] | undefined;

    constructor(data?: IPatInforBloodViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatInforBloodView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatInforBloodViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatInforBloodViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatInforBloodViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatInforBloodView[] | undefined;
}

/** 透析评估 */
export class PatientAssementView implements IPatientAssementView {
    /** 标识 */
    id?: string | undefined;
    /** 评估时间 */
    date?: dayjs.Dayjs;
    /** 评估类型 */
    type?: string | undefined;
    /** 评估类型显示值 */
    typeLabel?: string | undefined;
    /** 表单结构 */
    data?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** 填表人 */
    preparer?: string | undefined;
    /** 创建人 */
    creater?: string | undefined;

    constructor(data?: IPatientAssementView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.typeLabel = _data["typeLabel"];
            this.data = _data["data"];
            this.dataValue = _data["dataValue"];
            this.preparer = _data["preparer"];
            this.creater = _data["creater"];
        }
    }

    static fromJS(data: any): PatientAssementView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientAssementView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["type"] = this.type;
        data["typeLabel"] = this.typeLabel;
        data["data"] = this.data;
        data["dataValue"] = this.dataValue;
        data["preparer"] = this.preparer;
        data["creater"] = this.creater;
        return data;
    }
}

/** 透析评估 */
export interface IPatientAssementView {
    /** 标识 */
    id?: string | undefined;
    /** 评估时间 */
    date?: dayjs.Dayjs;
    /** 评估类型 */
    type?: string | undefined;
    /** 评估类型显示值 */
    typeLabel?: string | undefined;
    /** 表单结构 */
    data?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** 填表人 */
    preparer?: string | undefined;
    /** 创建人 */
    creater?: string | undefined;
}

/** Reponse */
export class PatientAssementViewResultEntry implements IPatientAssementViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientAssementView;

    constructor(data?: IPatientAssementViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientAssementView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientAssementViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientAssementViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientAssementViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientAssementView;
}

/** 患者信息批量查询/导出/打印 - 评估信息 */
export class PatientBatchAssementView implements IPatientBatchAssementView {
    /** 标识 */
    id?: string | undefined;
    /** 评估时间 */
    date?: dayjs.Dayjs;
    /** 评估类型 */
    type?: string | undefined;
    /** 评估类型显示值 */
    typeLabel?: string | undefined;
    /** 表单结构 */
    data?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** 填表人 */
    preparer?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 性别 */
    genderLabel?: string | undefined;
    /** 出生日期 */
    birthDate?: dayjs.Dayjs | undefined;
    /** 年龄 */
    age?: string | undefined;
    cureRecordId?: string | undefined;

    constructor(data?: IPatientBatchAssementView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.typeLabel = _data["typeLabel"];
            this.data = _data["data"];
            this.dataValue = _data["dataValue"];
            this.preparer = _data["preparer"];
            this.patientName = _data["patientName"];
            this.gender = _data["gender"];
            this.genderLabel = _data["genderLabel"];
            this.birthDate = _data["birthDate"] ? dayjs(_data["birthDate"].toString()) : <any>undefined;
            this.age = _data["age"];
            this.cureRecordId = _data["cureRecordId"];
        }
    }

    static fromJS(data: any): PatientBatchAssementView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBatchAssementView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["type"] = this.type;
        data["typeLabel"] = this.typeLabel;
        data["data"] = this.data;
        data["dataValue"] = this.dataValue;
        data["preparer"] = this.preparer;
        data["patientName"] = this.patientName;
        data["gender"] = this.gender;
        data["genderLabel"] = this.genderLabel;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["age"] = this.age;
        data["cureRecordId"] = this.cureRecordId;
        return data;
    }
}

/** 患者信息批量查询/导出/打印 - 评估信息 */
export interface IPatientBatchAssementView {
    /** 标识 */
    id?: string | undefined;
    /** 评估时间 */
    date?: dayjs.Dayjs;
    /** 评估类型 */
    type?: string | undefined;
    /** 评估类型显示值 */
    typeLabel?: string | undefined;
    /** 表单结构 */
    data?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** 填表人 */
    preparer?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 性别 */
    genderLabel?: string | undefined;
    /** 出生日期 */
    birthDate?: dayjs.Dayjs | undefined;
    /** 年龄 */
    age?: string | undefined;
    cureRecordId?: string | undefined;
}

/** Reponse */
export class PatientBatchAssementViewResult implements IPatientBatchAssementViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBatchAssementView[] | undefined;

    constructor(data?: IPatientBatchAssementViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientBatchAssementView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientBatchAssementViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBatchAssementViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientBatchAssementViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBatchAssementView[] | undefined;
}

/** 患者信息批量查询/导出/打印 - 透析记录单 */
export class PatientBatchCureRecordView implements IPatientBatchCureRecordView {
    /** 标识 */
    id?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式显示值 */
    dialysisModeLabel?: string | undefined;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet?: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路)标识 */
    patientVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    patientVascularAccessType?: string | undefined;
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessName?: string | undefined;
    patientOtherVascularAccessType?: string | undefined;
    /** 治疗状态 */
    status?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前体重方式显示值 */
    beforeWeightModeLabel?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后体重方式显示值 */
    afterWeightModeLabel?: string | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 称重脱水量 *ml* */
    ufvWeight?: number | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    source?: string | undefined;
    /** 来源显示值 */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 诊断显示值 */
    diagnosisLabel?: string | undefined;
    /** 病区 *住院的* */
    ward?: string | undefined;
    /** 床位 *住院的* */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者姓名拼音码 */
    patientPinyinCode?: string | undefined;
    /** 患者姓名五笔码 */
    patientWubiCode?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 性别显示值 */
    genderLabel?: string | undefined;
    /** 治疗状态 */
    statusLabel?: string | undefined;
    /** 透析龄 */
    dialysisAge?: string | undefined;
    /** 透析器;灌流器 */
    txqNames?: string | undefined;
    /** 抗凝剂(抗凝剂+剂量) */
    knjNames?: string | undefined;
    /** 抗凝剂(剂量) */
    knjTotal?: string | undefined;
    /** ;
            血压 (透前,透后) */
    blutdruck?: string | undefined;
    /** ;
            血压 (透前,透后) */
    afterBlood?: string | undefined;
    /** 取消原因 */
    cancelReason?: string | undefined;
    /** ;
            透中事件 (时间:名称,处理内容) */
    tzEvents?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 上一次透析标识 */
    lastId?: string | undefined;
    /** 下一次透析标识 */
    nextId?: string | undefined;

    constructor(data?: IPatientBatchCureRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sn = _data["sn"];
            this.patientId = _data["patientId"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.dialysisDurationSet = _data["dialysisDurationSet"];
            this.bestWeight = _data["bestWeight"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.patientVascularAccessType = _data["patientVascularAccessType"];
            this.patientOtherVascularAccessId = _data["patientOtherVascularAccessId"];
            this.patientOtherVascularAccessName = _data["patientOtherVascularAccessName"];
            this.patientOtherVascularAccessType = _data["patientOtherVascularAccessType"];
            this.status = _data["status"];
            this.beforeWeight = _data["beforeWeight"];
            this.beforeWeightMode = _data["beforeWeightMode"];
            this.beforeWeightModeLabel = _data["beforeWeightModeLabel"];
            this.deductionWeight = _data["deductionWeight"];
            this.ufg = _data["ufg"];
            this.afterWeight = _data["afterWeight"];
            this.afterWeightMode = _data["afterWeightMode"];
            this.afterWeightModeLabel = _data["afterWeightModeLabel"];
            this.ufv = _data["ufv"];
            this.ufvWeight = _data["ufvWeight"];
            this.dialysisDurationFact = _data["dialysisDurationFact"];
            this.age = _data["age"];
            this.source = _data["source"];
            this.sourceLabel = _data["sourceLabel"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.diagnosis = _data["diagnosis"];
            this.diagnosisLabel = _data["diagnosisLabel"];
            this.ward = _data["ward"];
            this.bed = _data["bed"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            this.remark = _data["remark"];
            this.patientName = _data["patientName"];
            this.idNumber = _data["idNumber"];
            this.idType = _data["idType"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.patientPinyinCode = _data["patientPinyinCode"];
            this.patientWubiCode = _data["patientWubiCode"];
            this.gender = _data["gender"];
            this.genderLabel = _data["genderLabel"];
            this.statusLabel = _data["statusLabel"];
            this.dialysisAge = _data["dialysisAge"];
            this.txqNames = _data["txqNames"];
            this.knjNames = _data["knjNames"];
            this.knjTotal = _data["knjTotal"];
            this.blutdruck = _data["blutdruck"];
            this.afterBlood = _data["afterBlood"];
            this.cancelReason = _data["cancelReason"];
            this.tzEvents = _data["tzEvents"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.lastId = _data["lastId"];
            this.nextId = _data["nextId"];
        }
    }

    static fromJS(data: any): PatientBatchCureRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBatchCureRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sn"] = this.sn;
        data["patientId"] = this.patientId;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["dialysisDurationSet"] = this.dialysisDurationSet;
        data["bestWeight"] = this.bestWeight;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["patientVascularAccessType"] = this.patientVascularAccessType;
        data["patientOtherVascularAccessId"] = this.patientOtherVascularAccessId;
        data["patientOtherVascularAccessName"] = this.patientOtherVascularAccessName;
        data["patientOtherVascularAccessType"] = this.patientOtherVascularAccessType;
        data["status"] = this.status;
        data["beforeWeight"] = this.beforeWeight;
        data["beforeWeightMode"] = this.beforeWeightMode;
        data["beforeWeightModeLabel"] = this.beforeWeightModeLabel;
        data["deductionWeight"] = this.deductionWeight;
        data["ufg"] = this.ufg;
        data["afterWeight"] = this.afterWeight;
        data["afterWeightMode"] = this.afterWeightMode;
        data["afterWeightModeLabel"] = this.afterWeightModeLabel;
        data["ufv"] = this.ufv;
        data["ufvWeight"] = this.ufvWeight;
        data["dialysisDurationFact"] = this.dialysisDurationFact;
        data["age"] = this.age;
        data["source"] = this.source;
        data["sourceLabel"] = this.sourceLabel;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["diagnosis"] = this.diagnosis;
        data["diagnosisLabel"] = this.diagnosisLabel;
        data["ward"] = this.ward;
        data["bed"] = this.bed;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        data["remark"] = this.remark;
        data["patientName"] = this.patientName;
        data["idNumber"] = this.idNumber;
        data["idType"] = this.idType;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["patientPinyinCode"] = this.patientPinyinCode;
        data["patientWubiCode"] = this.patientWubiCode;
        data["gender"] = this.gender;
        data["genderLabel"] = this.genderLabel;
        data["statusLabel"] = this.statusLabel;
        data["dialysisAge"] = this.dialysisAge;
        data["txqNames"] = this.txqNames;
        data["knjNames"] = this.knjNames;
        data["knjTotal"] = this.knjTotal;
        data["blutdruck"] = this.blutdruck;
        data["afterBlood"] = this.afterBlood;
        data["cancelReason"] = this.cancelReason;
        data["tzEvents"] = this.tzEvents;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["lastId"] = this.lastId;
        data["nextId"] = this.nextId;
        return data;
    }
}

/** 患者信息批量查询/导出/打印 - 透析记录单 */
export interface IPatientBatchCureRecordView {
    /** 标识 */
    id?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式显示值 */
    dialysisModeLabel?: string | undefined;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet?: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路)标识 */
    patientVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    patientVascularAccessType?: string | undefined;
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessName?: string | undefined;
    patientOtherVascularAccessType?: string | undefined;
    /** 治疗状态 */
    status?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前体重方式显示值 */
    beforeWeightModeLabel?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后体重方式显示值 */
    afterWeightModeLabel?: string | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 称重脱水量 *ml* */
    ufvWeight?: number | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    source?: string | undefined;
    /** 来源显示值 */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 诊断显示值 */
    diagnosisLabel?: string | undefined;
    /** 病区 *住院的* */
    ward?: string | undefined;
    /** 床位 *住院的* */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者姓名拼音码 */
    patientPinyinCode?: string | undefined;
    /** 患者姓名五笔码 */
    patientWubiCode?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 性别显示值 */
    genderLabel?: string | undefined;
    /** 治疗状态 */
    statusLabel?: string | undefined;
    /** 透析龄 */
    dialysisAge?: string | undefined;
    /** 透析器;灌流器 */
    txqNames?: string | undefined;
    /** 抗凝剂(抗凝剂+剂量) */
    knjNames?: string | undefined;
    /** 抗凝剂(剂量) */
    knjTotal?: string | undefined;
    /** ;
            血压 (透前,透后) */
    blutdruck?: string | undefined;
    /** ;
            血压 (透前,透后) */
    afterBlood?: string | undefined;
    /** 取消原因 */
    cancelReason?: string | undefined;
    /** ;
            透中事件 (时间:名称,处理内容) */
    tzEvents?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 上一次透析标识 */
    lastId?: string | undefined;
    /** 下一次透析标识 */
    nextId?: string | undefined;
}

/** Reponse */
export class PatientBatchCureRecordViewResult implements IPatientBatchCureRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBatchCureRecordView[] | undefined;

    constructor(data?: IPatientBatchCureRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientBatchCureRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientBatchCureRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBatchCureRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientBatchCureRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBatchCureRecordView[] | undefined;
}

/** 转归报告分类 */
export class PrognosisFormType implements IPrognosisFormType {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 代码(用于字典检索) *○不允许重复,前缀继承父节点以点隔开* */
    code?: string | undefined;
    /** 表单类型 0:自定义模板 1:话术模板 */
    type?: number;
    /** 序列 */
    sequence?: number;
    /** 分类 */
    category?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPrognosisFormType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.type = _data["type"];
            this.sequence = _data["sequence"];
            this.category = _data["category"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PrognosisFormType {
        data = typeof data === 'object' ? data : {};
        let result = new PrognosisFormType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["type"] = this.type;
        data["sequence"] = this.sequence;
        data["category"] = this.category;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 转归报告分类 */
export interface IPrognosisFormType {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 代码(用于字典检索) *○不允许重复,前缀继承父节点以点隔开* */
    code?: string | undefined;
    /** 表单类型 0:自定义模板 1:话术模板 */
    type?: number;
    /** 序列 */
    sequence?: number;
    /** 分类 */
    category?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 转归报告模板 */
export class PrognosisTmplForm implements IPrognosisTmplForm {
    /** 标识 */
    id?: string | undefined;
    /** [转归报告分类标识](转归报告分类) */
    prognosisFormTypeId?: string | undefined;
    /** 表单名称 */
    name?: string | undefined;
    /** 版本 */
    version?: string | undefined;
    /** 表单结构 */
    data?: string | undefined;
    /** 默认应用0,1 */
    default?: number;
    /** 已使用0,1 */
    used?: number;
    /** 系统内置0,1 *内置的不允许编辑/删除* */
    system?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    prognosisFormTypes?: PrognosisFormType;

    constructor(data?: IPrognosisTmplForm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.prognosisFormTypeId = _data["prognosisFormTypeId"];
            this.name = _data["name"];
            this.version = _data["version"];
            this.data = _data["data"];
            this.default = _data["default"];
            this.used = _data["used"];
            this.system = _data["system"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.prognosisFormTypes = _data["prognosisFormTypes"] ? PrognosisFormType.fromJS(_data["prognosisFormTypes"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PrognosisTmplForm {
        data = typeof data === 'object' ? data : {};
        let result = new PrognosisTmplForm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["prognosisFormTypeId"] = this.prognosisFormTypeId;
        data["name"] = this.name;
        data["version"] = this.version;
        data["data"] = this.data;
        data["default"] = this.default;
        data["used"] = this.used;
        data["system"] = this.system;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["prognosisFormTypes"] = this.prognosisFormTypes ? this.prognosisFormTypes.toJSON() : <any>undefined;
        return data;
    }
}

/** 转归报告模板 */
export interface IPrognosisTmplForm {
    /** 标识 */
    id?: string | undefined;
    /** [转归报告分类标识](转归报告分类) */
    prognosisFormTypeId?: string | undefined;
    /** 表单名称 */
    name?: string | undefined;
    /** 版本 */
    version?: string | undefined;
    /** 表单结构 */
    data?: string | undefined;
    /** 默认应用0,1 */
    default?: number;
    /** 已使用0,1 */
    used?: number;
    /** 系统内置0,1 *内置的不允许编辑/删除* */
    system?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    prognosisFormTypes?: PrognosisFormType;
}

export class PrognosisTmplFormDataEditModel implements IPrognosisTmplFormDataEditModel {
    /** 表单结构 */
    data!: string;

    constructor(data?: IPrognosisTmplFormDataEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"];
        }
    }

    static fromJS(data: any): PrognosisTmplFormDataEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PrognosisTmplFormDataEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data;
        return data;
    }
}

export interface IPrognosisTmplFormDataEditModel {
    /** 表单结构 */
    data: string;
}

/** 转归报告模板 */
export class PrognosisTmplFormEditModel implements IPrognosisTmplFormEditModel {
    /** [转归报告分类标识](#转归报告分类) */
    prognosisFormTypeId!: string;
    /** 表单名称 */
    name!: string;
    /** 版本 */
    version!: string;
    /** 默认应用0,1 */
    default!: number;
    /** 启用状态0,1 */
    enabled!: number;

    constructor(data?: IPrognosisTmplFormEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.prognosisFormTypeId = _data["prognosisFormTypeId"];
            this.name = _data["name"];
            this.version = _data["version"];
            this.default = _data["default"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): PrognosisTmplFormEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PrognosisTmplFormEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["prognosisFormTypeId"] = this.prognosisFormTypeId;
        data["name"] = this.name;
        data["version"] = this.version;
        data["default"] = this.default;
        data["enabled"] = this.enabled;
        return data;
    }
}

/** 转归报告模板 */
export interface IPrognosisTmplFormEditModel {
    /** [转归报告分类标识](#转归报告分类) */
    prognosisFormTypeId: string;
    /** 表单名称 */
    name: string;
    /** 版本 */
    version: string;
    /** 默认应用0,1 */
    default: number;
    /** 启用状态0,1 */
    enabled: number;
}

/** Reponse */
export class PrognosisTmplFormResultEntry implements IPrognosisTmplFormResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PrognosisTmplForm;

    constructor(data?: IPrognosisTmplFormResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PrognosisTmplForm.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PrognosisTmplFormResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PrognosisTmplFormResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPrognosisTmplFormResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PrognosisTmplForm;
}

/** 转归报告模板 */
export class PrognosisTmplFormView implements IPrognosisTmplFormView {
    /** [转归报告分类标识](#转归报告分类) */
    prognosisFormTypeId!: string;
    /** 表单名称 */
    name!: string;
    /** 版本 */
    version!: string;
    /** 默认应用0,1 */
    default!: number;
    /** 启用状态0,1 */
    enabled!: number;
    /** 标识 */
    id?: string | undefined;
    /** 代码(用于字典检索) *○不允许重复,前缀继承父节点以点隔开* */
    prognosisFormTypeCode?: string | undefined;
    /** 已使用0,1 */
    used?: number;
    /** 系统内置0,1 *内置的不允许编辑/删除* */
    system?: number;
    /** 模板 */
    data?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPrognosisTmplFormView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.prognosisFormTypeId = _data["prognosisFormTypeId"];
            this.name = _data["name"];
            this.version = _data["version"];
            this.default = _data["default"];
            this.enabled = _data["enabled"];
            this.id = _data["id"];
            this.prognosisFormTypeCode = _data["prognosisFormTypeCode"];
            this.used = _data["used"];
            this.system = _data["system"];
            this.data = _data["data"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PrognosisTmplFormView {
        data = typeof data === 'object' ? data : {};
        let result = new PrognosisTmplFormView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["prognosisFormTypeId"] = this.prognosisFormTypeId;
        data["name"] = this.name;
        data["version"] = this.version;
        data["default"] = this.default;
        data["enabled"] = this.enabled;
        data["id"] = this.id;
        data["prognosisFormTypeCode"] = this.prognosisFormTypeCode;
        data["used"] = this.used;
        data["system"] = this.system;
        data["data"] = this.data;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 转归报告模板 */
export interface IPrognosisTmplFormView {
    /** [转归报告分类标识](#转归报告分类) */
    prognosisFormTypeId: string;
    /** 表单名称 */
    name: string;
    /** 版本 */
    version: string;
    /** 默认应用0,1 */
    default: number;
    /** 启用状态0,1 */
    enabled: number;
    /** 标识 */
    id?: string | undefined;
    /** 代码(用于字典检索) *○不允许重复,前缀继承父节点以点隔开* */
    prognosisFormTypeCode?: string | undefined;
    /** 已使用0,1 */
    used?: number;
    /** 系统内置0,1 *内置的不允许编辑/删除* */
    system?: number;
    /** 模板 */
    data?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PrognosisTmplFormViewResult implements IPrognosisTmplFormViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PrognosisTmplFormView[] | undefined;

    constructor(data?: IPrognosisTmplFormViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PrognosisTmplFormView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PrognosisTmplFormViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PrognosisTmplFormViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPrognosisTmplFormViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PrognosisTmplFormView[] | undefined;
}

/** Reponse */
export class PrognosisTmplFormViewResultEntry implements IPrognosisTmplFormViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PrognosisTmplFormView;

    constructor(data?: IPrognosisTmplFormViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PrognosisTmplFormView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PrognosisTmplFormViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PrognosisTmplFormViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPrognosisTmplFormViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PrognosisTmplFormView;
}

/** 大屏详细信息 */
export class QueryScreentInfoDetailView implements IQueryScreentInfoDetailView {
    /** 编码 */
    code?: string | undefined;
    /** 序号 */
    sequence?: number;
    /** 屏幕名称 */
    name?: string | undefined;
    /** url地址 */
    url?: string | undefined;
    /** 归属透析室名称 */
    sysHospitalAreaName?: string | undefined;
    /** 归属透析室Id */
    sysHospitalAreaId?: string | undefined;

    constructor(data?: IQueryScreentInfoDetailView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.sequence = _data["sequence"];
            this.name = _data["name"];
            this.url = _data["url"];
            this.sysHospitalAreaName = _data["sysHospitalAreaName"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
        }
    }

    static fromJS(data: any): QueryScreentInfoDetailView {
        data = typeof data === 'object' ? data : {};
        let result = new QueryScreentInfoDetailView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["sequence"] = this.sequence;
        data["name"] = this.name;
        data["url"] = this.url;
        data["sysHospitalAreaName"] = this.sysHospitalAreaName;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        return data;
    }
}

/** 大屏详细信息 */
export interface IQueryScreentInfoDetailView {
    /** 编码 */
    code?: string | undefined;
    /** 序号 */
    sequence?: number;
    /** 屏幕名称 */
    name?: string | undefined;
    /** url地址 */
    url?: string | undefined;
    /** 归属透析室名称 */
    sysHospitalAreaName?: string | undefined;
    /** 归属透析室Id */
    sysHospitalAreaId?: string | undefined;
}

/** 候诊大屏 */
export class QueryScreentInfoView implements IQueryScreentInfoView {
    /** 大屏详细信息列表 */
    lists?: QueryScreentInfoDetailView[] | undefined;
    /** 屏幕类型 */
    sysScreenTypeName?: string | undefined;

    constructor(data?: IQueryScreentInfoView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["lists"])) {
                this.lists = [] as any;
                for (let item of _data["lists"])
                    this.lists!.push(QueryScreentInfoDetailView.fromJS(item));
            }
            this.sysScreenTypeName = _data["sysScreenTypeName"];
        }
    }

    static fromJS(data: any): QueryScreentInfoView {
        data = typeof data === 'object' ? data : {};
        let result = new QueryScreentInfoView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.lists)) {
            data["lists"] = [];
            for (let item of this.lists)
                data["lists"].push(item.toJSON());
        }
        data["sysScreenTypeName"] = this.sysScreenTypeName;
        return data;
    }
}

/** 候诊大屏 */
export interface IQueryScreentInfoView {
    /** 大屏详细信息列表 */
    lists?: QueryScreentInfoDetailView[] | undefined;
    /** 屏幕类型 */
    sysScreenTypeName?: string | undefined;
}

/** Reponse */
export class QueryScreentInfoViewResult implements IQueryScreentInfoViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: QueryScreentInfoView[] | undefined;

    constructor(data?: IQueryScreentInfoViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(QueryScreentInfoView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): QueryScreentInfoViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new QueryScreentInfoViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IQueryScreentInfoViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: QueryScreentInfoView[] | undefined;
}

/** Reponse */
export class Result implements IResult {
    /** 返回结果(true,false) */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 相关的链接地址 */
    url?: string | undefined;
    count?: number;
    /** 数据 */
    data?: any | undefined;

    constructor(data?: IResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.url = _data["url"];
            this.count = _data["count"];
            this.data = _data["data"];
        }
    }

    static fromJS(data: any): Result {
        data = typeof data === 'object' ? data : {};
        let result = new Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["url"] = this.url;
        data["count"] = this.count;
        data["data"] = this.data;
        return data;
    }
}

/** Reponse */
export interface IResult {
    /** 返回结果(true,false) */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 相关的链接地址 */
    url?: string | undefined;
    count?: number;
    /** 数据 */
    data?: any | undefined;
}

/** 消息记录 */
export class RtmMessage implements IRtmMessage {
    /** 标识 */
    id?: string | undefined;
    /** sys|userId */
    from?: string | undefined;
    /** 标题 */
    title?: string | undefined;
    /** 内容 */
    content?: string | undefined;
    /** 消息类型 *NOTIFICATION/通知,TODO/待办,WARN/报警,WARN_EARLY/预警* */
    type?: string | undefined;
    /** 操作类型 *CHANGE_BED/换床,PRESCRIPTION_REFUSE/拒绝处方,PRESCRIPTION_AGAIN/修改处方* */
    operationType?: string | undefined;
    /** 操作参数 */
    operationParameters?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRtmMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.from = _data["from"];
            this.title = _data["title"];
            this.content = _data["content"];
            this.type = _data["type"];
            this.operationType = _data["operationType"];
            this.operationParameters = _data["operationParameters"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RtmMessage {
        data = typeof data === 'object' ? data : {};
        let result = new RtmMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["from"] = this.from;
        data["title"] = this.title;
        data["content"] = this.content;
        data["type"] = this.type;
        data["operationType"] = this.operationType;
        data["operationParameters"] = this.operationParameters;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 消息记录 */
export interface IRtmMessage {
    /** 标识 */
    id?: string | undefined;
    /** sys|userId */
    from?: string | undefined;
    /** 标题 */
    title?: string | undefined;
    /** 内容 */
    content?: string | undefined;
    /** 消息类型 *NOTIFICATION/通知,TODO/待办,WARN/报警,WARN_EARLY/预警* */
    type?: string | undefined;
    /** 操作类型 *CHANGE_BED/换床,PRESCRIPTION_REFUSE/拒绝处方,PRESCRIPTION_AGAIN/修改处方* */
    operationType?: string | undefined;
    /** 操作参数 */
    operationParameters?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 消息附件 */
export class RtmMessageFile implements IRtmMessageFile {
    /** 标识 */
    id?: string | undefined;
    /** [消息标识](消息记录) */
    rtmMessageId?: string | undefined;
    /** [文件标识](文件列表) */
    hfsFilesId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    rtmMessages?: RtmMessage;
    hfsFiless?: HfsFiles;

    constructor(data?: IRtmMessageFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.rtmMessageId = _data["rtmMessageId"];
            this.hfsFilesId = _data["hfsFilesId"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.rtmMessages = _data["rtmMessages"] ? RtmMessage.fromJS(_data["rtmMessages"]) : <any>undefined;
            this.hfsFiless = _data["hfsFiless"] ? HfsFiles.fromJS(_data["hfsFiless"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RtmMessageFile {
        data = typeof data === 'object' ? data : {};
        let result = new RtmMessageFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["rtmMessageId"] = this.rtmMessageId;
        data["hfsFilesId"] = this.hfsFilesId;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["rtmMessages"] = this.rtmMessages ? this.rtmMessages.toJSON() : <any>undefined;
        data["hfsFiless"] = this.hfsFiless ? this.hfsFiless.toJSON() : <any>undefined;
        return data;
    }
}

/** 消息附件 */
export interface IRtmMessageFile {
    /** 标识 */
    id?: string | undefined;
    /** [消息标识](消息记录) */
    rtmMessageId?: string | undefined;
    /** [文件标识](文件列表) */
    hfsFilesId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    rtmMessages?: RtmMessage;
    hfsFiless?: HfsFiles;
}

/** Reponse */
export class RtmMessageFileResult implements IRtmMessageFileResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RtmMessageFile[] | undefined;

    constructor(data?: IRtmMessageFileResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RtmMessageFile.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RtmMessageFileResult {
        data = typeof data === 'object' ? data : {};
        let result = new RtmMessageFileResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRtmMessageFileResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RtmMessageFile[] | undefined;
}

/** Reponse */
export class RtmMessageFileResultEntry implements IRtmMessageFileResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RtmMessageFile;

    constructor(data?: IRtmMessageFileResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RtmMessageFile.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RtmMessageFileResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RtmMessageFileResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRtmMessageFileResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RtmMessageFile;
}

/** 消息附件 (ViewModel) */
export class RtmMessageFileViewModel implements IRtmMessageFileViewModel {
    /** [消息标识](消息记录Id) */
    rtmMessageId!: string;
    /** [文件标识](文件列表Id) */
    hfsFilesId!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IRtmMessageFileViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.rtmMessageId = _data["rtmMessageId"];
            this.hfsFilesId = _data["hfsFilesId"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): RtmMessageFileViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RtmMessageFileViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtmMessageId"] = this.rtmMessageId;
        data["hfsFilesId"] = this.hfsFilesId;
        data["remark"] = this.remark;
        return data;
    }
}

/** 消息附件 (ViewModel) */
export interface IRtmMessageFileViewModel {
    /** [消息标识](消息记录Id) */
    rtmMessageId: string;
    /** [文件标识](文件列表Id) */
    hfsFilesId: string;
    /** 备注 */
    remark?: string | undefined;
}

export class RtmMessageView implements IRtmMessageView {
    /** 消息Id */
    id?: string | undefined;
    /** 发送者 */
    from?: string | undefined;
    /** 消息类型 NOTIFICATION/通知,TODO/待办,WARN/报警 */
    type?: string | undefined;
    /** 消息类型 NOTIFICATION/通知,TODO/待办,WARN/报警 */
    typeLabel?: string | undefined;
    /** 消息标题 */
    title?: string | undefined;
    /** 内容 */
    content?: string | undefined;
    /** 操作类型 *CHANGE_BED/换床,PRESCRIPTION_REFUSE/拒绝处方,PRESCRIPTION_AGAIN/修改处方* */
    operationType?: string | undefined;
    /** 操作参数 */
    operationParameters?: string | undefined;
    /** 是否已读0,1 */
    hasRead?: number;
    /** 是否关注0,1 */
    focus?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRtmMessageView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.from = _data["from"];
            this.type = _data["type"];
            this.typeLabel = _data["typeLabel"];
            this.title = _data["title"];
            this.content = _data["content"];
            this.operationType = _data["operationType"];
            this.operationParameters = _data["operationParameters"];
            this.hasRead = _data["hasRead"];
            this.focus = _data["focus"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RtmMessageView {
        data = typeof data === 'object' ? data : {};
        let result = new RtmMessageView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["from"] = this.from;
        data["type"] = this.type;
        data["typeLabel"] = this.typeLabel;
        data["title"] = this.title;
        data["content"] = this.content;
        data["operationType"] = this.operationType;
        data["operationParameters"] = this.operationParameters;
        data["hasRead"] = this.hasRead;
        data["focus"] = this.focus;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IRtmMessageView {
    /** 消息Id */
    id?: string | undefined;
    /** 发送者 */
    from?: string | undefined;
    /** 消息类型 NOTIFICATION/通知,TODO/待办,WARN/报警 */
    type?: string | undefined;
    /** 消息类型 NOTIFICATION/通知,TODO/待办,WARN/报警 */
    typeLabel?: string | undefined;
    /** 消息标题 */
    title?: string | undefined;
    /** 内容 */
    content?: string | undefined;
    /** 操作类型 *CHANGE_BED/换床,PRESCRIPTION_REFUSE/拒绝处方,PRESCRIPTION_AGAIN/修改处方* */
    operationType?: string | undefined;
    /** 操作参数 */
    operationParameters?: string | undefined;
    /** 是否已读0,1 */
    hasRead?: number;
    /** 是否关注0,1 */
    focus?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 消息记录 (ViewModel) */
export class RtmMessageViewModel implements IRtmMessageViewModel {
    /** sys|userId */
    from!: string;
    /** 标题 */
    title!: string;
    /** 内容 */
    content!: string;
    /** 消息类型 *NOTIFICATION/通知,TODO/待办,WARN/报警,WARN_EARLY/预警* */
    type!: string;
    /** 操作类型 *CHANGE_BED/换床,PRESCRIPTION_REFUSE/拒绝处方,PRESCRIPTION_AGAIN/修改处方* */
    operationType?: string | undefined;
    /** 操作参数 */
    operationParameters?: string | undefined;

    constructor(data?: IRtmMessageViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.from = _data["from"];
            this.title = _data["title"];
            this.content = _data["content"];
            this.type = _data["type"];
            this.operationType = _data["operationType"];
            this.operationParameters = _data["operationParameters"];
        }
    }

    static fromJS(data: any): RtmMessageViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RtmMessageViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["from"] = this.from;
        data["title"] = this.title;
        data["content"] = this.content;
        data["type"] = this.type;
        data["operationType"] = this.operationType;
        data["operationParameters"] = this.operationParameters;
        return data;
    }
}

/** 消息记录 (ViewModel) */
export interface IRtmMessageViewModel {
    /** sys|userId */
    from: string;
    /** 标题 */
    title: string;
    /** 内容 */
    content: string;
    /** 消息类型 *NOTIFICATION/通知,TODO/待办,WARN/报警,WARN_EARLY/预警* */
    type: string;
    /** 操作类型 *CHANGE_BED/换床,PRESCRIPTION_REFUSE/拒绝处方,PRESCRIPTION_AGAIN/修改处方* */
    operationType?: string | undefined;
    /** 操作参数 */
    operationParameters?: string | undefined;
}

/** Reponse */
export class RtmMessageViewResult implements IRtmMessageViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RtmMessageView[] | undefined;

    constructor(data?: IRtmMessageViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RtmMessageView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RtmMessageViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RtmMessageViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRtmMessageViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RtmMessageView[] | undefined;
}

/** Reponse */
export class RtmMessageViewResultEntry implements IRtmMessageViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RtmMessageView;

    constructor(data?: IRtmMessageViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RtmMessageView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RtmMessageViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RtmMessageViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRtmMessageViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RtmMessageView;
}

/** 自定义表单数据 */
export class SysFormValueView implements ISysFormValueView {
    /** 名称 */
    name?: string | undefined;
    /** 键 */
    key?: string | undefined;
    /** 值 */
    value?: any | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 是否在透析记录单显示0,1 *只在透析记录单中评估内容自动生成场景下生效* */
    cureRecordShow?: number;

    constructor(data?: ISysFormValueView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.key = _data["key"];
            this.value = _data["value"];
            this.unit = _data["unit"];
            this.cureRecordShow = _data["cureRecordShow"];
        }
    }

    static fromJS(data: any): SysFormValueView {
        data = typeof data === 'object' ? data : {};
        let result = new SysFormValueView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["key"] = this.key;
        data["value"] = this.value;
        data["unit"] = this.unit;
        data["cureRecordShow"] = this.cureRecordShow;
        return data;
    }
}

/** 自定义表单数据 */
export interface ISysFormValueView {
    /** 名称 */
    name?: string | undefined;
    /** 键 */
    key?: string | undefined;
    /** 值 */
    value?: any | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 是否在透析记录单显示0,1 *只在透析记录单中评估内容自动生成场景下生效* */
    cureRecordShow?: number;
}

/** 透析室 */
export class SysHospitalArea implements ISysHospitalArea {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysHospitalArea) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.parentId = _data["parentId"];
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysHospitalArea {
        data = typeof data === 'object' ? data : {};
        let result = new SysHospitalArea();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["parentId"] = this.parentId;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析室 */
export interface ISysHospitalArea {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

export class TmplFormDataView implements ITmplFormDataView {
    /** 模板标识 */
    tmplFormId?: string | undefined;
    /** 模板名称 */
    tmplFormName?: string | undefined;
    /** 模板内容 */
    content?: string | undefined;

    constructor(data?: ITmplFormDataView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tmplFormId = _data["tmplFormId"];
            this.tmplFormName = _data["tmplFormName"];
            this.content = _data["content"];
        }
    }

    static fromJS(data: any): TmplFormDataView {
        data = typeof data === 'object' ? data : {};
        let result = new TmplFormDataView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tmplFormId"] = this.tmplFormId;
        data["tmplFormName"] = this.tmplFormName;
        data["content"] = this.content;
        return data;
    }
}

export interface ITmplFormDataView {
    /** 模板标识 */
    tmplFormId?: string | undefined;
    /** 模板名称 */
    tmplFormName?: string | undefined;
    /** 模板内容 */
    content?: string | undefined;
}

/** Reponse */
export class TmplFormDataViewResult implements ITmplFormDataViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: TmplFormDataView[] | undefined;

    constructor(data?: ITmplFormDataViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(TmplFormDataView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TmplFormDataViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new TmplFormDataViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ITmplFormDataViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: TmplFormDataView[] | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}