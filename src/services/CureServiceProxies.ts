/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import {ServiceProxyBase} from './ServiceProxyBase'
import axios, { AxiosError, type AxiosInstance, type AxiosRequestConfig, type AxiosResponse, type CancelToken } from 'axios';

import dayjs from 'dayjs';

export class CureServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 查询今日就诊列表
     * @param date 日期（yyyyMMdd）
     * @param dialysisAreaId (optional) 透析分区（多个以逗号隔开，为空查全部）
     * @param shiftId (optional) 透析班次（多个以逗号隔开，为空查全部）
     * @param dialysisMode (optional) 透析方式value（多个以逗号隔开，为空查全部）
     * @param infectiousDiseases (optional) 传染病（多个以逗号隔开，为空查全部）
     * @param focus (optional) 显示我关注的患者（全部：0/空 我关注的：1 我未关注的：2）
     * @param emptyBed (optional) 显示空床非空床（全部：0/空 非空床：1 空床：2）
     * @param gender (optional) 性别value（全部：0/空 男：1 女：2）
     * @param sort (optional) 排序（床位顺序：1 签到顺序：2）
     * @param hospitalAreaId (optional)
     * @param bedOrShift (optional)
     * @return Success
     */
    cure(date: string, dialysisAreaId: string | undefined, shiftId: string | undefined, dialysisMode: string | undefined, infectiousDiseases: string | undefined, focus: string | undefined, emptyBed: string | undefined, gender: string | undefined, sort: string | undefined, hospitalAreaId: string | undefined, bedOrShift: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureTodayViewResult> {
        let url_ = this.baseUrl + "/api/Cure/{date}?";
        if (date === undefined || date === null)
            throw new Error("The parameter 'date' must be defined.");
        url_ = url_.replace("{date}", encodeURIComponent("" + date));
        if (dialysisAreaId === null)
            throw new Error("The parameter 'dialysisAreaId' cannot be null.");
        else if (dialysisAreaId !== undefined)
            url_ += "dialysisAreaId=" + encodeURIComponent("" + dialysisAreaId) + "&";
        if (shiftId === null)
            throw new Error("The parameter 'shiftId' cannot be null.");
        else if (shiftId !== undefined)
            url_ += "shiftId=" + encodeURIComponent("" + shiftId) + "&";
        if (dialysisMode === null)
            throw new Error("The parameter 'dialysisMode' cannot be null.");
        else if (dialysisMode !== undefined)
            url_ += "dialysisMode=" + encodeURIComponent("" + dialysisMode) + "&";
        if (infectiousDiseases === null)
            throw new Error("The parameter 'infectiousDiseases' cannot be null.");
        else if (infectiousDiseases !== undefined)
            url_ += "infectiousDiseases=" + encodeURIComponent("" + infectiousDiseases) + "&";
        if (focus === null)
            throw new Error("The parameter 'focus' cannot be null.");
        else if (focus !== undefined)
            url_ += "focus=" + encodeURIComponent("" + focus) + "&";
        if (emptyBed === null)
            throw new Error("The parameter 'emptyBed' cannot be null.");
        else if (emptyBed !== undefined)
            url_ += "emptyBed=" + encodeURIComponent("" + emptyBed) + "&";
        if (gender === null)
            throw new Error("The parameter 'gender' cannot be null.");
        else if (gender !== undefined)
            url_ += "gender=" + encodeURIComponent("" + gender) + "&";
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        else if (sort !== undefined)
            url_ += "sort=" + encodeURIComponent("" + sort) + "&";
        if (hospitalAreaId === null)
            throw new Error("The parameter 'hospitalAreaId' cannot be null.");
        else if (hospitalAreaId !== undefined)
            url_ += "hospitalAreaId=" + encodeURIComponent("" + hospitalAreaId) + "&";
        if (bedOrShift === null)
            throw new Error("The parameter 'bedOrShift' cannot be null.");
        else if (bedOrShift !== undefined)
            url_ += "bedOrShift=" + encodeURIComponent("" + bedOrShift) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCure(_response));
        });
    }

    protected processCure(response: AxiosResponse): Promise<CureTodayViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureTodayViewResult.fromJS(resultData200);
            return Promise.resolve<CureTodayViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureTodayViewResult>(null as any);
    }

    /**
     * 今日就诊 - 查询缓存的查询条件
     * @return Success
     */
    todayFilterGET(  cancelToken?: CancelToken | undefined): Promise<StringResultEntry> {
        let url_ = this.baseUrl + "/api/Cure/TodayFilter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTodayFilterGET(_response));
        });
    }

    protected processTodayFilterGET(response: AxiosResponse): Promise<StringResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = StringResultEntry.fromJS(resultData200);
            return Promise.resolve<StringResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<StringResultEntry>(null as any);
    }

    /**
     * 今日就诊 - 更新缓存的查询条件
     * @param body (optional)
     * @return Success
     */
    todayFilterPOST(body: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/TodayFilter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTodayFilterPOST(_response));
        });
    }

    protected processTodayFilterPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 关注 - 未关注时会增加到我的关注，否则会从我的关注中删除
     * @param recordId 透析记录标识
     * @return Success
     */
    focus(recordId: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/{recordId}/Focus";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFocus(_response));
        });
    }

    protected processFocus(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者本周排床记录
     * @param patientId 患者标识
     * @param startDate (optional) 开始时间(yyyy-MM-dd)
     * @param endDate (optional) 结束时间(yyyy-MM-dd)
     * @return Success
     */
    patientScheduleWeekday(patientId: string, startDate: string | undefined, endDate: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientScheduleWeekdayViewResult> {
        let url_ = this.baseUrl + "/api/Cure/PatientScheduleWeekday/{patientId}?";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientScheduleWeekday(_response));
        });
    }

    protected processPatientScheduleWeekday(response: AxiosResponse): Promise<PatientScheduleWeekdayViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientScheduleWeekdayViewResult.fromJS(resultData200);
            return Promise.resolve<PatientScheduleWeekdayViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientScheduleWeekdayViewResult>(null as any);
    }

    /**
     * 流程信息 - 查询 - 当前流程/已经执行的流程/可执行的流程
     * @param id 透析排床标识或者透析记录标识
     * @return Success
     */
    cureStatus(id: string , cancelToken?: CancelToken | undefined): Promise<CureStatusViewResultEntry> {
        let url_ = this.baseUrl + "/api/Cure/CureStatus/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureStatus(_response));
        });
    }

    protected processCureStatus(response: AxiosResponse): Promise<CureStatusViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureStatusViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureStatusViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureStatusViewResultEntry>(null as any);
    }

    /**
     * 获取患者干体重与偏移量调整数据
     * @param patientId 患者标识
     * @param recordId (optional) 透析记录单标识
     * @return Success
     */
    patientRoutine(patientId: string, recordId: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientRoutineViewResultEntry> {
        let url_ = this.baseUrl + "/api/Cure/PatientRoutine/{patientId}?";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        if (recordId === null)
            throw new Error("The parameter 'recordId' cannot be null.");
        else if (recordId !== undefined)
            url_ += "recordId=" + encodeURIComponent("" + recordId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientRoutine(_response));
        });
    }

    protected processPatientRoutine(response: AxiosResponse): Promise<PatientRoutineViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientRoutineViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientRoutineViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientRoutineViewResultEntry>(null as any);
    }

    /**
     * 透中透析患者
     * @param dialysisDate (optional) 透析日期(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    patientCureMiddle(dialysisDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientCureMiddleViewResult> {
        let url_ = this.baseUrl + "/api/Cure/PatientCureMiddle?";
        if (dialysisDate === null)
            throw new Error("The parameter 'dialysisDate' cannot be null.");
        else if (dialysisDate !== undefined)
            url_ += "dialysisDate=" + encodeURIComponent("" + dialysisDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientCureMiddle(_response));
        });
    }

    protected processPatientCureMiddle(response: AxiosResponse): Promise<PatientCureMiddleViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientCureMiddleViewResult.fromJS(resultData200);
            return Promise.resolve<PatientCureMiddleViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientCureMiddleViewResult>(null as any);
    }

    /**
     * 今日收费项目
     * @param recordId 透析记录标识
     * @param filter (optional) 查询条件
     * @return Success
     */
    chargeCure(recordId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureChargeViewResult> {
        let url_ = this.baseUrl + "/api/Cure/ChargeCure/{recordId}";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processChargeCure(_response));
        });
    }

    protected processChargeCure(response: AxiosResponse): Promise<CureChargeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureChargeViewResult.fromJS(resultData200);
            return Promise.resolve<CureChargeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureChargeViewResult>(null as any);
    }

    /**
     * 透析患者 - 查询 -- 根据时间段、区域、班次查询
     * @param startDate (optional) 开始时间(yyyy-MM-dd)
     * @param endDate (optional) 结束时间(yyyy-MM-dd)
     * @param dialysisAreaId (optional) 透析分区（多个以逗号隔开，为空查全部）
     * @param shiftId (optional) 透析班次（多个以逗号隔开，为空查全部）
     * @param filter (optional) 查询条件
     * @return Success
     */
    patientCure(startDate: string | undefined, endDate: string | undefined, dialysisAreaId: string | undefined, shiftId: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientCureViewResult> {
        let url_ = this.baseUrl + "/api/Cure/PatientCure?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (dialysisAreaId === null)
            throw new Error("The parameter 'dialysisAreaId' cannot be null.");
        else if (dialysisAreaId !== undefined)
            url_ += "dialysisAreaId=" + encodeURIComponent("" + dialysisAreaId) + "&";
        if (shiftId === null)
            throw new Error("The parameter 'shiftId' cannot be null.");
        else if (shiftId !== undefined)
            url_ += "shiftId=" + encodeURIComponent("" + shiftId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientCure(_response));
        });
    }

    protected processPatientCure(response: AxiosResponse): Promise<PatientCureViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientCureViewResult.fromJS(resultData200);
            return Promise.resolve<PatientCureViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientCureViewResult>(null as any);
    }

    /**
     * 查询床位是否已经排床
     * @param date (optional) 透析日期（yyyy-MM-dd）
     * @param patientId (optional) 患者标识
     * @param shiftId (optional) 班次标识
     * @param emptyBed (optional) 显示空床非空床（全部：0/空 非空床：1 空床：2）
     * @param areaId (optional)
     * @param bedId (optional)
     * @return Success
     */
    bedStatus(date: string | undefined, patientId: string | undefined, shiftId: string | undefined, emptyBed: string | undefined, areaId: string | undefined, bedId: string | undefined , cancelToken?: CancelToken | undefined): Promise<BedStatusViewResult> {
        let url_ = this.baseUrl + "/api/Cure/BedStatus?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        if (shiftId === null)
            throw new Error("The parameter 'shiftId' cannot be null.");
        else if (shiftId !== undefined)
            url_ += "shiftId=" + encodeURIComponent("" + shiftId) + "&";
        if (emptyBed === null)
            throw new Error("The parameter 'emptyBed' cannot be null.");
        else if (emptyBed !== undefined)
            url_ += "emptyBed=" + encodeURIComponent("" + emptyBed) + "&";
        if (areaId === null)
            throw new Error("The parameter 'areaId' cannot be null.");
        else if (areaId !== undefined)
            url_ += "areaId=" + encodeURIComponent("" + areaId) + "&";
        if (bedId === null)
            throw new Error("The parameter 'bedId' cannot be null.");
        else if (bedId !== undefined)
            url_ += "bedId=" + encodeURIComponent("" + bedId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBedStatus(_response));
        });
    }

    protected processBedStatus(response: AxiosResponse): Promise<BedStatusViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = BedStatusViewResult.fromJS(resultData200);
            return Promise.resolve<BedStatusViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BedStatusViewResult>(null as any);
    }

    /**
     * 透析排床 -- 根据就诊卡号排床
     * @param body (optional)
     * @return Success
     */
    schedule(body: CureScheduleQuickEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/Schedule";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSchedule(_response));
        });
    }

    protected processSchedule(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 设备报修
     * @param body (optional)
     * @return Success
     */
    devRepairs(body: DevRepairsLogEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/DevRepairs";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevRepairs(_response));
        });
    }

    protected processDevRepairs(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者检验项到期提醒
     * @param patientId 患者标识
     * @return Success
     */
    lisRemindGET(patientId: string , cancelToken?: CancelToken | undefined): Promise<PatientLisRemindViewResult> {
        let url_ = this.baseUrl + "/api/Cure/LisRemind/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processLisRemindGET(_response));
        });
    }

    protected processLisRemindGET(response: AxiosResponse): Promise<PatientLisRemindViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientLisRemindViewResult.fromJS(resultData200);
            return Promise.resolve<PatientLisRemindViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientLisRemindViewResult>(null as any);
    }

    /**
     * 患者检验项到期提醒
     * @param id 患者检验项标识
     * @return Success
     */
    lisRemindPOST(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/Delete/LisRemind/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processLisRemindPOST(_response));
        });
    }

    protected processLisRemindPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 口服用药
     * @param patientId 患者标识
     * @param filter (optional)
     * @return Success
     */
    orally(patientId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureDaCustomViewResult> {
        let url_ = this.baseUrl + "/api/Cure/Orally/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processOrally(_response));
        });
    }

    protected processOrally(response: AxiosResponse): Promise<CureDaCustomViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDaCustomViewResult.fromJS(resultData200);
            return Promise.resolve<CureDaCustomViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDaCustomViewResult>(null as any);
    }

    /**
     * 扫描枪数据(开启扫码核对功能，并且点击交叉核对界面时使用)
     * @param recordId 透析记录标识
     * @return Success
     */
    scan(recordId: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/{recordId}/Scan";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processScan(_response));
        });
    }

    protected processScan(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 获取可分配床位
     * @param patientId (optional)
     * @param date (optional)
     * @param shiftId (optional)
     * @param areaId (optional)
     * @param hospitalAreaId (optional)
     * @param filter (optional)
     * @return Success
     */
    queryUseBed(patientId: string | undefined, date: dayjs.Dayjs | undefined, shiftId: string | undefined, areaId: string | undefined, hospitalAreaId: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptDialysisBedResult> {
        let url_ = this.baseUrl + "/api/Cure/QueryUseBed?";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent(date ? "" + date.toISOString() : "") + "&";
        if (shiftId === null)
            throw new Error("The parameter 'shiftId' cannot be null.");
        else if (shiftId !== undefined)
            url_ += "shiftId=" + encodeURIComponent("" + shiftId) + "&";
        if (areaId === null)
            throw new Error("The parameter 'areaId' cannot be null.");
        else if (areaId !== undefined)
            url_ += "areaId=" + encodeURIComponent("" + areaId) + "&";
        if (hospitalAreaId === null)
            throw new Error("The parameter 'hospitalAreaId' cannot be null.");
        else if (hospitalAreaId !== undefined)
            url_ += "hospitalAreaId=" + encodeURIComponent("" + hospitalAreaId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryUseBed(_response));
        });
    }

    protected processQueryUseBed(response: AxiosResponse): Promise<DeptDialysisBedResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptDialysisBedResult.fromJS(resultData200);
            return Promise.resolve<DeptDialysisBedResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptDialysisBedResult>(null as any);
    }

    /**
     * 透前 - 透前测量 - 签到 - 修改签到时间
     * @param body (optional)
     * @return Success
     */
    signinTime(recordId: string, body: dayjs.Dayjs | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/{recordId}/SigninTime";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSigninTime(_response));
        });
    }

    protected processSigninTime(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透前 - 透前测量 - 查询
     * @param dialysisDate (optional) 透析日期(yyyy-MM-dd)
     * @param sort (optional) 排序（床位顺序：1 签到顺序：2）
     * @param filter (optional) 查询条件
     * @return Success
     */
    measureCureBeforeGET(dialysisDate: string | undefined, sort: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<MeasureCureBeforeViewResult> {
        let url_ = this.baseUrl + "/api/Cure/MeasureCureBefore?";
        if (dialysisDate === null)
            throw new Error("The parameter 'dialysisDate' cannot be null.");
        else if (dialysisDate !== undefined)
            url_ += "dialysisDate=" + encodeURIComponent("" + dialysisDate) + "&";
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        else if (sort !== undefined)
            url_ += "sort=" + encodeURIComponent("" + sort) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMeasureCureBeforeGET(_response));
        });
    }

    protected processMeasureCureBeforeGET(response: AxiosResponse): Promise<MeasureCureBeforeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MeasureCureBeforeViewResult.fromJS(resultData200);
            return Promise.resolve<MeasureCureBeforeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MeasureCureBeforeViewResult>(null as any);
    }

    /**
     * 透前 - 透前测量 - 查询 -- 根据透析排床标识或者透析记录标识查询（根据Signin，判断是否签到）
     * @param id 透析排床标识或者透析记录标识
     * @return Success
     */
    measureCureBeforeGET2(id: string , cancelToken?: CancelToken | undefined): Promise<MeasureCureBeforeViewResultEntry> {
        let url_ = this.baseUrl + "/api/Cure/MeasureCureBefore/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMeasureCureBeforeGET2(_response));
        });
    }

    protected processMeasureCureBeforeGET2(response: AxiosResponse): Promise<MeasureCureBeforeViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MeasureCureBeforeViewResultEntry.fromJS(resultData200);
            return Promise.resolve<MeasureCureBeforeViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MeasureCureBeforeViewResultEntry>(null as any);
    }

    /**
     * 透前 - 透前测量 - 编辑
     * @param cureScheduleId 透析排床标识
     * @param body (optional)
     * @return Success
     */
    measureCureBeforePOST(cureScheduleId: string, body: MeasureCureBeforeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/{cureScheduleId}/MeasureCureBefore";
        if (cureScheduleId === undefined || cureScheduleId === null)
            throw new Error("The parameter 'cureScheduleId' must be defined.");
        url_ = url_.replace("{cureScheduleId}", encodeURIComponent("" + cureScheduleId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMeasureCureBeforePOST(_response));
        });
    }

    protected processMeasureCureBeforePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透前 - 制定处方/确认处方 - 查询
     * @param step 0:制定处方 1:确认处方
     * @param dialysisDate (optional) 透析日期(yyyy-MM-dd)
     * @param sort (optional) 排序（床位顺序：1 签到顺序：2）
     * @param filter (optional) 查询条件
     * @return Success
     */
    prescriptionCureBeforeGET(step: number, dialysisDate: string | undefined, sort: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PrescriptionCureBeforeViewResult> {
        let url_ = this.baseUrl + "/api/Cure/{step}/PrescriptionCureBefore?";
        if (step === undefined || step === null)
            throw new Error("The parameter 'step' must be defined.");
        url_ = url_.replace("{step}", encodeURIComponent("" + step));
        if (dialysisDate === null)
            throw new Error("The parameter 'dialysisDate' cannot be null.");
        else if (dialysisDate !== undefined)
            url_ += "dialysisDate=" + encodeURIComponent("" + dialysisDate) + "&";
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        else if (sort !== undefined)
            url_ += "sort=" + encodeURIComponent("" + sort) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPrescriptionCureBeforeGET(_response));
        });
    }

    protected processPrescriptionCureBeforeGET(response: AxiosResponse): Promise<PrescriptionCureBeforeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PrescriptionCureBeforeViewResult.fromJS(resultData200);
            return Promise.resolve<PrescriptionCureBeforeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PrescriptionCureBeforeViewResult>(null as any);
    }

    /**
     * 透前 - 制定处方/确认处方 - 查询 -- 根据透析记录ID查询
     * @param step 0:制定处方 1:确认处方
     * @param recordId 透析记录ID
     * @return Success
     */
    prescriptionCureBeforeGET2(step: number, recordId: string , cancelToken?: CancelToken | undefined): Promise<PrescriptionCureBeforeViewResultEntry> {
        let url_ = this.baseUrl + "/api/Cure/{step}/PrescriptionCureBefore/{recordId}";
        if (step === undefined || step === null)
            throw new Error("The parameter 'step' must be defined.");
        url_ = url_.replace("{step}", encodeURIComponent("" + step));
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPrescriptionCureBeforeGET2(_response));
        });
    }

    protected processPrescriptionCureBeforeGET2(response: AxiosResponse): Promise<PrescriptionCureBeforeViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PrescriptionCureBeforeViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PrescriptionCureBeforeViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PrescriptionCureBeforeViewResultEntry>(null as any);
    }

    /**
     * 透前 - 制定处方 - 编辑
     * @param recordId 透析记录标识
     * @param isPre (optional) 是否透前
     * @param body (optional)
     * @return Success
     */
    prescriptionCureBeforePOST(recordId: string, isPre: boolean | undefined, body: PrescriptionCureBeforeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/{recordId}/PrescriptionCureBefore?";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        if (isPre === null)
            throw new Error("The parameter 'isPre' cannot be null.");
        else if (isPre !== undefined)
            url_ += "isPre=" + encodeURIComponent("" + isPre) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPrescriptionCureBeforePOST(_response));
        });
    }

    protected processPrescriptionCureBeforePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透前 - 制定处方 - 批量制定
     * @param body (optional) 透析记录标识集合
     * @return Success
     */
    batch(body: string[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/PrescriptionCureBefore/Batch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatch(_response));
        });
    }

    protected processBatch(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透前 - 确认处方 - 确认/拒绝
     * @param recordId 透析记录标识
     * @param check 1 确认;0 拒绝
     * @param body (optional)
     * @return Success
     */
    confirmPrescriptionCureBefore(recordId: string, check: number, body: CureRecordCheckEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/{recordId}/ConfirmPrescriptionCureBefore/{check}";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        if (check === undefined || check === null)
            throw new Error("The parameter 'check' must be defined.");
        url_ = url_.replace("{check}", encodeURIComponent("" + check));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processConfirmPrescriptionCureBefore(_response));
        });
    }

    protected processConfirmPrescriptionCureBefore(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透前 - 确认处方 - 批量确认
     * @param body (optional)
     * @return Success
     */
    batch2(body: string[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/ConfirmPrescriptionCureBefore/Batch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatch2(_response));
        });
    }

    protected processBatch2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透前 - 透前评估 - 查询 -- 根据时间段查询
     * @param startDate (optional) 开始时间(yyyy-MM-dd)
     * @param endDate (optional) 结束时间(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    period(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<AssementCureBeforeViewResult> {
        let url_ = this.baseUrl + "/api/Cure/AssementCureBefore/Period?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPeriod(_response));
        });
    }

    protected processPeriod(response: AxiosResponse): Promise<AssementCureBeforeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AssementCureBeforeViewResult.fromJS(resultData200);
            return Promise.resolve<AssementCureBeforeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AssementCureBeforeViewResult>(null as any);
    }

    /**
     * 透前 - 透前评估 - 查询 -- 根据透析记录ID查询
     * @param recordId 透析记录ID
     * @return Success
     */
    assementCureBeforeGET(recordId: string , cancelToken?: CancelToken | undefined): Promise<AssementCureBeforeViewResultEntry> {
        let url_ = this.baseUrl + "/api/Cure/AssementCureBefore/{recordId}";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAssementCureBeforeGET(_response));
        });
    }

    protected processAssementCureBeforeGET(response: AxiosResponse): Promise<AssementCureBeforeViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AssementCureBeforeViewResultEntry.fromJS(resultData200);
            return Promise.resolve<AssementCureBeforeViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AssementCureBeforeViewResultEntry>(null as any);
    }

    /**
     * 透前 - 透前评估 - 编辑(有则更新，无则新增)
     * @param recordId 透析记录ID
     * @param body (optional)
     * @return Success
     */
    assementCureBeforePOST(recordId: string, body: AssementCureBeforeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/AssementCureBefore/{recordId}";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAssementCureBeforePOST(_response));
        });
    }

    protected processAssementCureBeforePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透前 - 透前评估 - 查询 -- 根据患者标识查询
     * @param patientId 患者标识
     * @param filter (optional) 查询条件
     * @return Success
     */
    patient(patientId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<AssementCureBeforeViewResult> {
        let url_ = this.baseUrl + "/api/Cure/AssementCureBefore/Patient/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatient(_response));
        });
    }

    protected processPatient(response: AxiosResponse): Promise<AssementCureBeforeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AssementCureBeforeViewResult.fromJS(resultData200);
            return Promise.resolve<AssementCureBeforeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AssementCureBeforeViewResult>(null as any);
    }

    /**
     * 透前 - 透前评估 - 删除 -- 根据透前评估标识删除数据
     * @param cureAssementId 透前评估记录标识
     * @return Success
     */
    assementCureBeforePOST2(cureAssementId: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/Delete/{cureAssementId}/AssementCureBefore";
        if (cureAssementId === undefined || cureAssementId === null)
            throw new Error("The parameter 'cureAssementId' must be defined.");
        url_ = url_.replace("{cureAssementId}", encodeURIComponent("" + cureAssementId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAssementCureBeforePOST2(_response));
        });
    }

    protected processAssementCureBeforePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透前 - 耗材准备 - 汇总 -- 根据时间段查询
     * @param shiftId (optional) 透析班次（多个以逗号隔开，为空查全部）
     * @param dialysisAreaId (optional) 透析区间（多个以逗号隔开，为空查全部）
     * @param startDate (optional) 开始时间(yyyy-MM-dd)
     * @param endDate (optional) 结束时间(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    period2(shiftId: string | undefined, dialysisAreaId: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<ConsumableSummaryCureBeforeViewResult> {
        let url_ = this.baseUrl + "/api/Cure/ConsumableSummaryCureBeforeView/Period?";
        if (shiftId === null)
            throw new Error("The parameter 'shiftId' cannot be null.");
        else if (shiftId !== undefined)
            url_ += "shiftId=" + encodeURIComponent("" + shiftId) + "&";
        if (dialysisAreaId === null)
            throw new Error("The parameter 'dialysisAreaId' cannot be null.");
        else if (dialysisAreaId !== undefined)
            url_ += "dialysisAreaId=" + encodeURIComponent("" + dialysisAreaId) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPeriod2(_response));
        });
    }

    protected processPeriod2(response: AxiosResponse): Promise<ConsumableSummaryCureBeforeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ConsumableSummaryCureBeforeViewResult.fromJS(resultData200);
            return Promise.resolve<ConsumableSummaryCureBeforeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ConsumableSummaryCureBeforeViewResult>(null as any);
    }

    /**
     * 透前 - 耗材准备 - 明细 -- 根据时间段查询
     * @param shiftId (optional) 透析班次（多个以逗号隔开，为空查全部）
     * @param dialysisAreaId (optional) 透析区间（多个以逗号隔开，为空查全部）
     * @param startDate (optional) 开始时间(yyyy-MM-dd)
     * @param endDate (optional) 结束时间(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    period3(shiftId: string | undefined, dialysisAreaId: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<ConsumableListCureBeforeViewResult> {
        let url_ = this.baseUrl + "/api/Cure/ConsumableListCureBefore/Period?";
        if (shiftId === null)
            throw new Error("The parameter 'shiftId' cannot be null.");
        else if (shiftId !== undefined)
            url_ += "shiftId=" + encodeURIComponent("" + shiftId) + "&";
        if (dialysisAreaId === null)
            throw new Error("The parameter 'dialysisAreaId' cannot be null.");
        else if (dialysisAreaId !== undefined)
            url_ += "dialysisAreaId=" + encodeURIComponent("" + dialysisAreaId) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPeriod3(_response));
        });
    }

    protected processPeriod3(response: AxiosResponse): Promise<ConsumableListCureBeforeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ConsumableListCureBeforeViewResult.fromJS(resultData200);
            return Promise.resolve<ConsumableListCureBeforeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ConsumableListCureBeforeViewResult>(null as any);
    }

    /**
     * 透前 - 耗材准备 - 明细 -- 根据时间段查询 -- 导出
     * @param shiftId (optional) 透析班次（多个以逗号隔开，为空查全部）
     * @param dialysisAreaId (optional) 透析区间（多个以逗号隔开，为空查全部）
     * @param startDate (optional) 开始时间(yyyy-MM-dd)
     * @param endDate (optional) 结束时间(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    export(shiftId: string | undefined, dialysisAreaId: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/ConsumableListCureBefore/Export?";
        if (shiftId === null)
            throw new Error("The parameter 'shiftId' cannot be null.");
        else if (shiftId !== undefined)
            url_ += "shiftId=" + encodeURIComponent("" + shiftId) + "&";
        if (dialysisAreaId === null)
            throw new Error("The parameter 'dialysisAreaId' cannot be null.");
        else if (dialysisAreaId !== undefined)
            url_ += "dialysisAreaId=" + encodeURIComponent("" + dialysisAreaId) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport(_response));
        });
    }

    protected processExport(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透前 - 药品准备 - 汇总 -- 根据时间段查询
     * @param shiftId (optional) 透析班次（多个以逗号隔开，为空查全部）
     * @param dialysisAreaId (optional) 透析区间（多个以逗号隔开，为空查全部）
     * @param startDate (optional) 开始时间(yyyy-MM-dd)
     * @param endDate (optional) 结束时间(yyyy-MM-dd)
     * @param source (optional) 门诊住院OUTPATIENT 门诊 INPATIENT 住院
     * @param filter (optional) 查询条件
     * @return Success
     */
    period4(shiftId: string | undefined, dialysisAreaId: string | undefined, startDate: string | undefined, endDate: string | undefined, source: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DrugSummaryCureBeforeViewResult> {
        let url_ = this.baseUrl + "/api/Cure/DrugSummaryCureBeforeView/Period?";
        if (shiftId === null)
            throw new Error("The parameter 'shiftId' cannot be null.");
        else if (shiftId !== undefined)
            url_ += "shiftId=" + encodeURIComponent("" + shiftId) + "&";
        if (dialysisAreaId === null)
            throw new Error("The parameter 'dialysisAreaId' cannot be null.");
        else if (dialysisAreaId !== undefined)
            url_ += "dialysisAreaId=" + encodeURIComponent("" + dialysisAreaId) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "Source=" + encodeURIComponent("" + source) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPeriod4(_response));
        });
    }

    protected processPeriod4(response: AxiosResponse): Promise<DrugSummaryCureBeforeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DrugSummaryCureBeforeViewResult.fromJS(resultData200);
            return Promise.resolve<DrugSummaryCureBeforeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DrugSummaryCureBeforeViewResult>(null as any);
    }

    /**
     * 透前 - 药品准备 - 明细 -- 根据时间段查询
     * @param shiftId (optional) 透析班次（多个以逗号隔开，为空查全部）
     * @param dialysisAreaId (optional) 透析区间（多个以逗号隔开，为空查全部）
     * @param startDate (optional) 开始时间(yyyy-MM-dd)
     * @param endDate (optional) 结束时间(yyyy-MM-dd)
     * @param source (optional) 门诊住院OUTPATIENT 门诊 INPATIENT 住院
     * @param filter (optional) 查询条件
     * @return Success
     */
    period5(shiftId: string | undefined, dialysisAreaId: string | undefined, startDate: string | undefined, endDate: string | undefined, source: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DrugListCureBeforeViewResult> {
        let url_ = this.baseUrl + "/api/Cure/DrugListCureBefore/Period?";
        if (shiftId === null)
            throw new Error("The parameter 'shiftId' cannot be null.");
        else if (shiftId !== undefined)
            url_ += "shiftId=" + encodeURIComponent("" + shiftId) + "&";
        if (dialysisAreaId === null)
            throw new Error("The parameter 'dialysisAreaId' cannot be null.");
        else if (dialysisAreaId !== undefined)
            url_ += "dialysisAreaId=" + encodeURIComponent("" + dialysisAreaId) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (source === null)
            throw new Error("The parameter 'source' cannot be null.");
        else if (source !== undefined)
            url_ += "Source=" + encodeURIComponent("" + source) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPeriod5(_response));
        });
    }

    protected processPeriod5(response: AxiosResponse): Promise<DrugListCureBeforeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DrugListCureBeforeViewResult.fromJS(resultData200);
            return Promise.resolve<DrugListCureBeforeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DrugListCureBeforeViewResult>(null as any);
    }

    /**
     * 透前 - 透前准备 -- 数据生成
     * @param startDate (optional) 开始时间(yyyy-MM-dd)
     * @param endDate (optional) 结束时间(yyyy-MM-dd)
     * @return Success
     */
    createOrUpdate(startDate: string | undefined, endDate: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/ConsumableSummaryCureBefore/CreateOrUpdate?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCreateOrUpdate(_response));
        });
    }

    protected processCreateOrUpdate(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透中 - 透析耗材 - 查询 -- 根据时间段查询
     * @param startDate (optional) 开始时间(yyyy-MM-dd)
     * @param endDate (optional) 结束时间(yyyy-MM-dd)
     * @param dialysisAreaIds (optional) 透析分区（多个以逗号隔开，为空查全部）
     * @param shiftIds (optional) 透析班次（多个以逗号隔开，为空查全部）
     * @param key (optional) 查询条件
     * @param sort (optional) 排序（床位顺序：1 签到顺序：2）
     * @param filter (optional) 分页条件
     * @return Success
     */
    period6(startDate: string | undefined, endDate: string | undefined, dialysisAreaIds: string | undefined, shiftIds: string | undefined, key: string | undefined, sort: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordConsumableVerifyViewResult> {
        let url_ = this.baseUrl + "/api/Cure/CureConsumableVerify/Period?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (dialysisAreaIds === null)
            throw new Error("The parameter 'dialysisAreaIds' cannot be null.");
        else if (dialysisAreaIds !== undefined)
            url_ += "dialysisAreaIds=" + encodeURIComponent("" + dialysisAreaIds) + "&";
        if (shiftIds === null)
            throw new Error("The parameter 'shiftIds' cannot be null.");
        else if (shiftIds !== undefined)
            url_ += "shiftIds=" + encodeURIComponent("" + shiftIds) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        else if (sort !== undefined)
            url_ += "sort=" + encodeURIComponent("" + sort) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPeriod6(_response));
        });
    }

    protected processPeriod6(response: AxiosResponse): Promise<CureRecordConsumableVerifyViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordConsumableVerifyViewResult.fromJS(resultData200);
            return Promise.resolve<CureRecordConsumableVerifyViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordConsumableVerifyViewResult>(null as any);
    }

    /**
     * 透中 - 透析耗材 - 查询 -- 根据时间段查询 -- 导出
     * @param startDate (optional) 开始时间(yyyy-MM-dd)
     * @param endDate (optional) 结束时间(yyyy-MM-dd)
     * @param dialysisAreaIds (optional) 透析分区（多个以逗号隔开，为空查全部）
     * @param shiftIds (optional) 透析班次（多个以逗号隔开，为空查全部）
     * @param key (optional) 查询条件
     * @param sort (optional) 排序（床位顺序：1 签到顺序：2）
     * @param filter (optional) 分页条件
     * @return Success
     */
    export2(startDate: string | undefined, endDate: string | undefined, dialysisAreaIds: string | undefined, shiftIds: string | undefined, key: string | undefined, sort: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/CureConsumableVerify/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (dialysisAreaIds === null)
            throw new Error("The parameter 'dialysisAreaIds' cannot be null.");
        else if (dialysisAreaIds !== undefined)
            url_ += "dialysisAreaIds=" + encodeURIComponent("" + dialysisAreaIds) + "&";
        if (shiftIds === null)
            throw new Error("The parameter 'shiftIds' cannot be null.");
        else if (shiftIds !== undefined)
            url_ += "shiftIds=" + encodeURIComponent("" + shiftIds) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        else if (sort !== undefined)
            url_ += "sort=" + encodeURIComponent("" + sort) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport2(_response));
        });
    }

    protected processExport2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透中 - 透析耗材 -- 批量核对
     * @param checkTime (optional) 修改时间(护士修改前台传入，相反系统默认时间)
     * @param body (optional) 透析记录单标识
     * @return Success
     */
    check(checkTime: string | undefined, body: string[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/CureConsumableVerify/Check?";
        if (checkTime === null)
            throw new Error("The parameter 'checkTime' cannot be null.");
        else if (checkTime !== undefined)
            url_ += "checkTime=" + encodeURIComponent("" + checkTime) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCheck(_response));
        });
    }

    protected processCheck(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透中 - 透析医嘱 - 查询 -- 根据时间段查询
     * @param startDate (optional) 开始时间(yyyy-MM-dd)
     * @param endDate (optional) 结束时间(yyyy-MM-dd)
     * @param usage (optional) 用法
     * @param filter (optional) 查询条件
     * @param key (optional) 查询条件
     * @return Success
     */
    period7(startDate: string | undefined, endDate: string | undefined, usage: string | undefined, filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureDaViewResult> {
        let url_ = this.baseUrl + "/api/Cure/DaCureMiddle/Period?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (usage === null)
            throw new Error("The parameter 'usage' cannot be null.");
        else if (usage !== undefined)
            url_ += "usage=" + encodeURIComponent("" + usage) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPeriod7(_response));
        });
    }

    protected processPeriod7(response: AxiosResponse): Promise<CureDaViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDaViewResult.fromJS(resultData200);
            return Promise.resolve<CureDaViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDaViewResult>(null as any);
    }

    /**
     * 透中 - 透析医嘱 - 查询 -- 根据透析记录单ID查询
     * @param recordId 透析记录单ID
     * @param filter (optional) 查询条件
     * @param key (optional) 名称/拼音码/五笔码
     * @return Success
     */
    daCureMiddleGET(recordId: string, filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureDaViewResult> {
        let url_ = this.baseUrl + "/api/Cure/DaCureMiddle/{recordId}?";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDaCureMiddleGET(_response));
        });
    }

    protected processDaCureMiddleGET(response: AxiosResponse): Promise<CureDaViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDaViewResult.fromJS(resultData200);
            return Promise.resolve<CureDaViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDaViewResult>(null as any);
    }

    /**
     * 透中 - 透析医嘱 - 查询 -- 根据患者标识查询
     * @param patientId 患者标识
     * @param filter (optional) 查询条件
     * @param key (optional) 名称/拼音码/五笔码
     * @return Success
     */
    patient2(patientId: string, filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureDaViewResult> {
        let url_ = this.baseUrl + "/api/Cure/DaCureMiddle/Patient/{patientId}?";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatient2(_response));
        });
    }

    protected processPatient2(response: AxiosResponse): Promise<CureDaViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDaViewResult.fromJS(resultData200);
            return Promise.resolve<CureDaViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDaViewResult>(null as any);
    }

    /**
     * 透中 - 临时医嘱 - 查询 -- 根据患者标识查询
     * @param patientId 患者标识
     * @param dialysisDate (optional) 查询条件
     * @param recordId (optional) 名称/拼音码/五笔码
     * @param b_revocation (optional)
     * @return Success
     */
    patient3(patientId: string, dialysisDate: dayjs.Dayjs | undefined, recordId: string | undefined, b_revocation: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<CureDaViewResult> {
        let url_ = this.baseUrl + "/api/Cure/DaCure/Patient/{patientId}?";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        if (dialysisDate === null)
            throw new Error("The parameter 'dialysisDate' cannot be null.");
        else if (dialysisDate !== undefined)
            url_ += "dialysisDate=" + encodeURIComponent(dialysisDate ? "" + dialysisDate.toISOString() : "") + "&";
        if (recordId === null)
            throw new Error("The parameter 'recordId' cannot be null.");
        else if (recordId !== undefined)
            url_ += "recordId=" + encodeURIComponent("" + recordId) + "&";
        if (b_revocation === null)
            throw new Error("The parameter 'b_revocation' cannot be null.");
        else if (b_revocation !== undefined)
            url_ += "b_revocation=" + encodeURIComponent("" + b_revocation) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatient3(_response));
        });
    }

    protected processPatient3(response: AxiosResponse): Promise<CureDaViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDaViewResult.fromJS(resultData200);
            return Promise.resolve<CureDaViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDaViewResult>(null as any);
    }

    /**
     * 透中 - 透析医嘱 - 查询 -- 药品依从性查询
     * @param patientId (optional) 患者id
     * @param roomItemListId (optional) 药品id
     * @param startTime (optional) 开始时间
     * @param stopTime (optional) 结束时间
     * @return Success
     */
    drugInclue(patientId: string | undefined, roomItemListId: string | undefined, startTime: string | undefined, stopTime: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureMiddleDrugInclueViewResult> {
        let url_ = this.baseUrl + "/api/Cure/DaCureMiddle/DrugInclue?";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        if (roomItemListId === null)
            throw new Error("The parameter 'roomItemListId' cannot be null.");
        else if (roomItemListId !== undefined)
            url_ += "roomItemListId=" + encodeURIComponent("" + roomItemListId) + "&";
        if (startTime === null)
            throw new Error("The parameter 'startTime' cannot be null.");
        else if (startTime !== undefined)
            url_ += "startTime=" + encodeURIComponent("" + startTime) + "&";
        if (stopTime === null)
            throw new Error("The parameter 'stopTime' cannot be null.");
        else if (stopTime !== undefined)
            url_ += "stopTime=" + encodeURIComponent("" + stopTime) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDrugInclue(_response));
        });
    }

    protected processDrugInclue(response: AxiosResponse): Promise<CureMiddleDrugInclueViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureMiddleDrugInclueViewResult.fromJS(resultData200);
            return Promise.resolve<CureMiddleDrugInclueViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureMiddleDrugInclueViewResult>(null as any);
    }

    /**
     * 透中 - 透析医嘱 - 查询 -- 根据组合标识查询
     * @param groupId 组合标识
     * @return Success
     */
    groupGET(groupId: string , cancelToken?: CancelToken | undefined): Promise<CureDaViewResult> {
        let url_ = this.baseUrl + "/api/Cure/DaCureMiddle/Group/{groupId}";
        if (groupId === undefined || groupId === null)
            throw new Error("The parameter 'groupId' must be defined.");
        url_ = url_.replace("{groupId}", encodeURIComponent("" + groupId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGroupGET(_response));
        });
    }

    protected processGroupGET(response: AxiosResponse): Promise<CureDaViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDaViewResult.fromJS(resultData200);
            return Promise.resolve<CureDaViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDaViewResult>(null as any);
    }

    /**
     * 透中 - 透析医嘱 - 查询 -- 根据透析医嘱ID查询
     * @param cureDaId 透析医嘱ID
     * @return Success
     */
    details(cureDaId: string , cancelToken?: CancelToken | undefined): Promise<CureDaViewResultEntry> {
        let url_ = this.baseUrl + "/api/Cure/DaCureMiddle/Details/{cureDaId}";
        if (cureDaId === undefined || cureDaId === null)
            throw new Error("The parameter 'cureDaId' must be defined.");
        url_ = url_.replace("{cureDaId}", encodeURIComponent("" + cureDaId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetails(_response));
        });
    }

    protected processDetails(response: AxiosResponse): Promise<CureDaViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDaViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureDaViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDaViewResultEntry>(null as any);
    }

    /**
     * 透中 - 透析医嘱 -- 批量新增数据
     * @param body (optional)
     * @return Success
     */
    daCureMiddlePOST(body: CureDaEditModel[][] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/DaCureMiddle";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDaCureMiddlePOST(_response));
        });
    }

    protected processDaCureMiddlePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透中 - 透析医嘱 -- 批量更新数据
     * @param groupId (optional) 医嘱组合标识
     * @param body (optional) 为多个实体时，为组合医嘱；不允许组合医嘱与单个医嘱混传
     * @return Success
     */
    update(groupId: string | undefined, body: CureDaEditModel[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/DaCureMiddle/Update?";
        if (groupId === null)
            throw new Error("The parameter 'groupId' cannot be null.");
        else if (groupId !== undefined)
            url_ += "groupId=" + encodeURIComponent("" + groupId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdate(_response));
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透中 - 透析医嘱 -- 批量核对
     * @param checkTime (optional) 修改时间(护士修改前台传入，相反系统默认时间)
     * @param isDialyis (optional) 是否流程中
     * @param body (optional) 组合标识
     * @return Success
     */
    check2(checkTime: string | undefined, isDialyis: number | undefined, body: string[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/DaCureMiddle/Check?";
        if (checkTime === null)
            throw new Error("The parameter 'checkTime' cannot be null.");
        else if (checkTime !== undefined)
            url_ += "checkTime=" + encodeURIComponent("" + checkTime) + "&";
        if (isDialyis === null)
            throw new Error("The parameter 'isDialyis' cannot be null.");
        else if (isDialyis !== undefined)
            url_ += "isDialyis=" + encodeURIComponent("" + isDialyis) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCheck2(_response));
        });
    }

    protected processCheck2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透中 - 透析医嘱 -- 批量执行
     * @param execTime (optional) 执行时间(护士修改前台传入，相反系统默认时间)
     * @param isDialyis (optional) 是否流程中
     * @param body (optional) 组合标识
     * @return Success
     */
    exec(execTime: string | undefined, isDialyis: number | undefined, body: string[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/DaCureMiddle/Exec?";
        if (execTime === null)
            throw new Error("The parameter 'execTime' cannot be null.");
        else if (execTime !== undefined)
            url_ += "execTime=" + encodeURIComponent("" + execTime) + "&";
        if (isDialyis === null)
            throw new Error("The parameter 'isDialyis' cannot be null.");
        else if (isDialyis !== undefined)
            url_ += "isDialyis=" + encodeURIComponent("" + isDialyis) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExec(_response));
        });
    }

    protected processExec(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透中 - 透析医嘱 -- 作废
     * @param groupId (optional) 组合标识
     * @param body (optional) 作废原因
     * @return Success
     */
    void(groupId: string | undefined, body: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/DaCureMiddle/Void?";
        if (groupId === null)
            throw new Error("The parameter 'groupId' cannot be null.");
        else if (groupId !== undefined)
            url_ += "groupId=" + encodeURIComponent("" + groupId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processVoid(_response));
        });
    }

    protected processVoid(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透中 - 透析医嘱 -- 修改医嘱核对和执行时间
     * @param execTime (optional) 执行时间(护士修改前台传入，相反系统默认时间)
     * @param checkTime (optional) 核对时间(护士修改前台传入，相反系统默认时间)
     * @param body (optional) 组合标识
     * @return Success
     */
    editExecTime(execTime: string | undefined, checkTime: string | undefined, body: string[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/DaCureMiddle/EditExecTime?";
        if (execTime === null)
            throw new Error("The parameter 'execTime' cannot be null.");
        else if (execTime !== undefined)
            url_ += "execTime=" + encodeURIComponent("" + execTime) + "&";
        if (checkTime === null)
            throw new Error("The parameter 'checkTime' cannot be null.");
        else if (checkTime !== undefined)
            url_ += "checkTime=" + encodeURIComponent("" + checkTime) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processEditExecTime(_response));
        });
    }

    protected processEditExecTime(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透中 - 透析医嘱 -- 撤销
     * @param groupId (optional) 组合标识
     * @return Success
     */
    revocation(groupId: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/DaCureMiddle/Revocation?";
        if (groupId === null)
            throw new Error("The parameter 'groupId' cannot be null.");
        else if (groupId !== undefined)
            url_ += "groupId=" + encodeURIComponent("" + groupId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRevocation(_response));
        });
    }

    protected processRevocation(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透中 - 透析医嘱 -- 生成组合医嘱
     * @param body (optional) 透析医嘱标识
     * @return Success
     */
    groupPOST(body: string[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/DaCureMiddle/Group";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGroupPOST(_response));
        });
    }

    protected processGroupPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透中 - 透析医嘱 -- 拒绝
     * @param body (optional)
     * @return Success
     */
    refuse(body: CureDaLogEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/DaCureMiddle/Refuse";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRefuse(_response));
        });
    }

    protected processRefuse(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透中 - 穿刺/上机 - 查询 -- 根据透析记录ID查询
     * @param recordId 透析记录ID
     * @return Success
     */
    onCureMiddleGET(recordId: string , cancelToken?: CancelToken | undefined): Promise<OnCureMiddleViewResultEntry> {
        let url_ = this.baseUrl + "/api/Cure/OnCureMiddle/{recordId}";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processOnCureMiddleGET(_response));
        });
    }

    protected processOnCureMiddleGET(response: AxiosResponse): Promise<OnCureMiddleViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = OnCureMiddleViewResultEntry.fromJS(resultData200);
            return Promise.resolve<OnCureMiddleViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<OnCureMiddleViewResultEntry>(null as any);
    }

    /**
     * 透中 - 穿刺/上机 - 确认
     * @param recordId 透析记录ID
     * @param body (optional)
     * @return Success
     */
    onCureMiddlePOST(recordId: string, body: OnCureMiddleEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/{recordId}/OnCureMiddle";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processOnCureMiddlePOST(_response));
        });
    }

    protected processOnCureMiddlePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透中 - 交叉核对 - 查询 -- 根据透析记录ID查询
     * @param recordId 透析记录标识
     * @param verify (optional) 是否耗材核对
     * @return Success
     */
    verifyCureMiddleGET(recordId: string, verify: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<VerifyCureMiddleViewResultEntry> {
        let url_ = this.baseUrl + "/api/Cure/VerifyCureMiddle/{recordId}?";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        if (verify === null)
            throw new Error("The parameter 'verify' cannot be null.");
        else if (verify !== undefined)
            url_ += "verify=" + encodeURIComponent("" + verify) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processVerifyCureMiddleGET(_response));
        });
    }

    protected processVerifyCureMiddleGET(response: AxiosResponse): Promise<VerifyCureMiddleViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = VerifyCureMiddleViewResultEntry.fromJS(resultData200);
            return Promise.resolve<VerifyCureMiddleViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<VerifyCureMiddleViewResultEntry>(null as any);
    }

    /**
     * 透中 - 交叉核对 - 核对
     * @param recordId 透析记录标识
     * @param body (optional)
     * @return Success
     */
    verifyCureMiddlePOST(recordId: string, body: CureRecordVerifyEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/{recordId}/VerifyCureMiddle";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processVerifyCureMiddlePOST(_response));
        });
    }

    protected processVerifyCureMiddlePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透中 - 耗材核对 - 核对
     * @param recordId 透析记录标识
     * @param body (optional) 核对耗材
     * @return Success
     */
    consumablesVerify(recordId: string, body: CureRecordVerifyEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/{recordId}/ConsumablesVerify";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processConsumablesVerify(_response));
        });
    }

    protected processConsumablesVerify(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透中 - 透析监测 - 查询 -- 根据时间段查询
     * @param startDate (optional) 开始时间(yyyy-MM-dd)
     * @param endDate (optional) 结束时间(yyyy-MM-dd)
     * @param key (optional) 查询条件
     * @param filter (optional) 查询条件
     * @return Success
     */
    period8(startDate: string | undefined, endDate: string | undefined, key: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<MonitorCureMiddleViewResult> {
        let url_ = this.baseUrl + "/api/Cure/MonitorCureMiddle/Period?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPeriod8(_response));
        });
    }

    protected processPeriod8(response: AxiosResponse): Promise<MonitorCureMiddleViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MonitorCureMiddleViewResult.fromJS(resultData200);
            return Promise.resolve<MonitorCureMiddleViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MonitorCureMiddleViewResult>(null as any);
    }

    /**
     * 透中 - 透析监测 - 查询 --查询当前患者 姓名,透析号,班次,床号
     * @return Success
     */
    curePatient(recordId: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/CurePatient/{recordId}";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCurePatient(_response));
        });
    }

    protected processCurePatient(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透中 - 透析监测 - 查询 -- 根据透析记录ID查询
     * @param recordId 根据透析记录ID
     * @return Success
     */
    monitorCureMiddleGET(recordId: string , cancelToken?: CancelToken | undefined): Promise<MonitorCureMiddleViewResult> {
        let url_ = this.baseUrl + "/api/Cure/MonitorCureMiddle/{recordId}";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMonitorCureMiddleGET(_response));
        });
    }

    protected processMonitorCureMiddleGET(response: AxiosResponse): Promise<MonitorCureMiddleViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MonitorCureMiddleViewResult.fromJS(resultData200);
            return Promise.resolve<MonitorCureMiddleViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MonitorCureMiddleViewResult>(null as any);
    }

    /**
     * 透中 - 透析监测 - 查询 -- 根据透析监测ID查询
     * @param monitorId 透析监测ID
     * @return Success
     */
    details2(monitorId: string , cancelToken?: CancelToken | undefined): Promise<MonitorCureMiddleViewResultEntry> {
        let url_ = this.baseUrl + "/api/Cure/MonitorCureMiddle/Details/{monitorId}";
        if (monitorId === undefined || monitorId === null)
            throw new Error("The parameter 'monitorId' must be defined.");
        url_ = url_.replace("{monitorId}", encodeURIComponent("" + monitorId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetails2(_response));
        });
    }

    protected processDetails2(response: AxiosResponse): Promise<MonitorCureMiddleViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MonitorCureMiddleViewResultEntry.fromJS(resultData200);
            return Promise.resolve<MonitorCureMiddleViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MonitorCureMiddleViewResultEntry>(null as any);
    }

    /**
     * 透中 - 透析监测 - 查询 -- 一键同步联机盒上报的与所传时间最近的数据
     * @param recordId 透析记录ID
     * @param monitorTime (optional) 监测时间(yyyy-MM-dd HH:mm:ss)
     * @return Success
     */
    sync(recordId: string, monitorTime: string | undefined , cancelToken?: CancelToken | undefined): Promise<MonitorCureMiddleViewResultEntry> {
        let url_ = this.baseUrl + "/api/Cure/MonitorCureMiddle/Sync/{recordId}?";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        if (monitorTime === null)
            throw new Error("The parameter 'monitorTime' cannot be null.");
        else if (monitorTime !== undefined)
            url_ += "monitorTime=" + encodeURIComponent("" + monitorTime) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSync(_response));
        });
    }

    protected processSync(response: AxiosResponse): Promise<MonitorCureMiddleViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MonitorCureMiddleViewResultEntry.fromJS(resultData200);
            return Promise.resolve<MonitorCureMiddleViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MonitorCureMiddleViewResultEntry>(null as any);
    }

    /**
     * 透中 - 透析监测 - 查询 -- 同步血压计
     * @param recordId 透析记录ID
     * @return Success
     */
    syncSphygmometerData(recordId: string , cancelToken?: CancelToken | undefined): Promise<MonitorCureMiddleViewResultEntry> {
        let url_ = this.baseUrl + "/api/Cure/MonitorCureMiddle/SyncSphygmometerData/{recordId}";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSyncSphygmometerData(_response));
        });
    }

    protected processSyncSphygmometerData(response: AxiosResponse): Promise<MonitorCureMiddleViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MonitorCureMiddleViewResultEntry.fromJS(resultData200);
            return Promise.resolve<MonitorCureMiddleViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MonitorCureMiddleViewResultEntry>(null as any);
    }

    /**
     * 透中 - 透析监测 - 新增
     * @param body (optional)
     * @return Success
     */
    monitorCureMiddlePOST(body: MonitorCureMiddleEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/MonitorCureMiddle";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMonitorCureMiddlePOST(_response));
        });
    }

    protected processMonitorCureMiddlePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透中 - 透析监测 - 编辑
     * @param cureMonitorId 透中监测记录标识
     * @param body (optional)
     * @return Success
     */
    monitorCureMiddlePOST2(cureMonitorId: string, body: MonitorCureMiddleEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/{cureMonitorId}/MonitorCureMiddle";
        if (cureMonitorId === undefined || cureMonitorId === null)
            throw new Error("The parameter 'cureMonitorId' must be defined.");
        url_ = url_.replace("{cureMonitorId}", encodeURIComponent("" + cureMonitorId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMonitorCureMiddlePOST2(_response));
        });
    }

    protected processMonitorCureMiddlePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透中 - 透析监测 - 联机测血压
     * @param recordId 透析记录标识
     * @return Success
     */
    box(recordId: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/MonitorCureMiddle/Box/{recordId}";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBox(_response));
        });
    }

    protected processBox(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透中 - 透析监测 - 删除 -- 根据透析监测记录Id删除数据
     * @param cureMonitorId 透中监测记录标识
     * @return Success
     */
    monitorCureMiddlePOST3(cureMonitorId: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/Delete/{cureMonitorId}/MonitorCureMiddle";
        if (cureMonitorId === undefined || cureMonitorId === null)
            throw new Error("The parameter 'cureMonitorId' must be defined.");
        url_ = url_.replace("{cureMonitorId}", encodeURIComponent("" + cureMonitorId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMonitorCureMiddlePOST3(_response));
        });
    }

    protected processMonitorCureMiddlePOST3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透中 - 透析监测 - 查询 --最新一条监测数据
     * @param recordId 透析记录ID
     * @return Success
     */
    monitorCureLatest(recordId: string , cancelToken?: CancelToken | undefined): Promise<MonitorCureMiddleViewResultEntry> {
        let url_ = this.baseUrl + "/api/Cure/MonitorCureLatest/{recordId}";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMonitorCureLatest(_response));
        });
    }

    protected processMonitorCureLatest(response: AxiosResponse): Promise<MonitorCureMiddleViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MonitorCureMiddleViewResultEntry.fromJS(resultData200);
            return Promise.resolve<MonitorCureMiddleViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MonitorCureMiddleViewResultEntry>(null as any);
    }

    /**
     * 透中 - 透中事件 - 查询 -- 根据时间段查询
     * @param startDate (optional) 开始时间(yyyy-MM-dd)
     * @param endDate (optional) 结束时间(yyyy-MM-dd)
     * @param key (optional) 查询条件
     * @param filter (optional) 查询条件
     * @return Success
     */
    period9(startDate: string | undefined, endDate: string | undefined, key: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<ComplicationCureMiddleViewResult> {
        let url_ = this.baseUrl + "/api/Cure/ComplicationCureMiddle/Period?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPeriod9(_response));
        });
    }

    protected processPeriod9(response: AxiosResponse): Promise<ComplicationCureMiddleViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ComplicationCureMiddleViewResult.fromJS(resultData200);
            return Promise.resolve<ComplicationCureMiddleViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ComplicationCureMiddleViewResult>(null as any);
    }

    /**
     * 透中 - 透中事件 - 查询 -- 根据透析记录ID查询
     * @param recordId 根据透析记录ID查询
     * @return Success
     */
    complicationCureMiddleGET(recordId: string , cancelToken?: CancelToken | undefined): Promise<ComplicationCureMiddleViewResult> {
        let url_ = this.baseUrl + "/api/Cure/ComplicationCureMiddle/{recordId}";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processComplicationCureMiddleGET(_response));
        });
    }

    protected processComplicationCureMiddleGET(response: AxiosResponse): Promise<ComplicationCureMiddleViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ComplicationCureMiddleViewResult.fromJS(resultData200);
            return Promise.resolve<ComplicationCureMiddleViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ComplicationCureMiddleViewResult>(null as any);
    }

    /**
     * 透中 - 透中事件 - 查询 -- 根据透中事件ID查询
     * @param complicationId 根据透中事件ID查询
     * @return Success
     */
    details3(complicationId: string , cancelToken?: CancelToken | undefined): Promise<ComplicationCureMiddleViewResultEntry> {
        let url_ = this.baseUrl + "/api/Cure/ComplicationCureMiddle/Details/{complicationId}";
        if (complicationId === undefined || complicationId === null)
            throw new Error("The parameter 'complicationId' must be defined.");
        url_ = url_.replace("{complicationId}", encodeURIComponent("" + complicationId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetails3(_response));
        });
    }

    protected processDetails3(response: AxiosResponse): Promise<ComplicationCureMiddleViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ComplicationCureMiddleViewResultEntry.fromJS(resultData200);
            return Promise.resolve<ComplicationCureMiddleViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ComplicationCureMiddleViewResultEntry>(null as any);
    }

    /**
     * 透中 - 透中事件 - 新增
     * @param body (optional)
     * @return Success
     */
    complicationCureMiddlePOST(body: ComplicationCureMiddleEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/ComplicationCureMiddle";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processComplicationCureMiddlePOST(_response));
        });
    }

    protected processComplicationCureMiddlePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透中 - 透中事件 - 新增
     * @param body (optional)
     * @return Success
     */
    complicationCureMiddles(body: ComplicationCureMiddleEditModel[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/ComplicationCureMiddles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processComplicationCureMiddles(_response));
        });
    }

    protected processComplicationCureMiddles(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透中 - 透中事件 - 编辑
     * @param cureComplicationId 透中事件记录标识
     * @param body (optional)
     * @return Success
     */
    complicationCureMiddlePOST2(cureComplicationId: string, body: ComplicationCureMiddleEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/{cureComplicationId}/ComplicationCureMiddle";
        if (cureComplicationId === undefined || cureComplicationId === null)
            throw new Error("The parameter 'cureComplicationId' must be defined.");
        url_ = url_.replace("{cureComplicationId}", encodeURIComponent("" + cureComplicationId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processComplicationCureMiddlePOST2(_response));
        });
    }

    protected processComplicationCureMiddlePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透中 - 透中事件 - 删除 -- 根据透中事件标识删除数据
     * @param cureComplicationId 透中事件记录标识
     * @return Success
     */
    complicationCureMiddlePOST3(cureComplicationId: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/Delete/{cureComplicationId}/ComplicationCureMiddle";
        if (cureComplicationId === undefined || cureComplicationId === null)
            throw new Error("The parameter 'cureComplicationId' must be defined.");
        url_ = url_.replace("{cureComplicationId}", encodeURIComponent("" + cureComplicationId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processComplicationCureMiddlePOST3(_response));
        });
    }

    protected processComplicationCureMiddlePOST3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析 - 透析评估 - 查询 -- 根据时间段查询
     * @param startDate (optional) 开始时间(yyyy-MM-dd)
     * @param endDate (optional) 结束时间(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    period10(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<AssementCureDialysisViewResult> {
        let url_ = this.baseUrl + "/api/Cure/AssementCureDialysis/Period?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPeriod10(_response));
        });
    }

    protected processPeriod10(response: AxiosResponse): Promise<AssementCureDialysisViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AssementCureDialysisViewResult.fromJS(resultData200);
            return Promise.resolve<AssementCureDialysisViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AssementCureDialysisViewResult>(null as any);
    }

    /**
     * 透析 - 透析评估 - 查询 -- 根据透析记录ID查询
     * @param recordId 透析记录ID
     * @return Success
     */
    assementCureDialysisGET(recordId: string , cancelToken?: CancelToken | undefined): Promise<AssementCureDialysisViewResultEntry> {
        let url_ = this.baseUrl + "/api/Cure/AssementCureDialysis/{recordId}";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAssementCureDialysisGET(_response));
        });
    }

    protected processAssementCureDialysisGET(response: AxiosResponse): Promise<AssementCureDialysisViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AssementCureDialysisViewResultEntry.fromJS(resultData200);
            return Promise.resolve<AssementCureDialysisViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AssementCureDialysisViewResultEntry>(null as any);
    }

    /**
     * 透析 - 透析评估 - 编辑(有则更新，无则新增)
     * @param recordId 透析记录ID
     * @param body (optional)
     * @return Success
     */
    assementCureDialysisPOST(recordId: string, body: AssementCureDialysisEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/AssementCureDialysis/{recordId}";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAssementCureDialysisPOST(_response));
        });
    }

    protected processAssementCureDialysisPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析 - 透析评估 - 查询 -- 根据患者标识查询
     * @param patientId 患者标识
     * @param filter (optional) 查询条件
     * @return Success
     */
    patient4(patientId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<AssementCureDialysisViewResult> {
        let url_ = this.baseUrl + "/api/Cure/AssementCureDialysis/Patient/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatient4(_response));
        });
    }

    protected processPatient4(response: AxiosResponse): Promise<AssementCureDialysisViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AssementCureDialysisViewResult.fromJS(resultData200);
            return Promise.resolve<AssementCureDialysisViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AssementCureDialysisViewResult>(null as any);
    }

    /**
     * 透后 - 下机 - 查询 -- 根据时间段查询
     * @param startDate (optional) 开始时间(yyyy-MM-dd)
     * @param endDate (optional) 结束时间(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    period11(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<OffCureAfterViewResult> {
        let url_ = this.baseUrl + "/api/Cure/OffCureAfter/Period?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPeriod11(_response));
        });
    }

    protected processPeriod11(response: AxiosResponse): Promise<OffCureAfterViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = OffCureAfterViewResult.fromJS(resultData200);
            return Promise.resolve<OffCureAfterViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<OffCureAfterViewResult>(null as any);
    }

    /**
     * 透后 - 下机 - 查询 -- 根据透析记录ID查询
     * @param recordId 透析记录ID
     * @return Success
     */
    offCureAfterGET(recordId: string , cancelToken?: CancelToken | undefined): Promise<OffCureAfterViewResultEntry> {
        let url_ = this.baseUrl + "/api/Cure/OffCureAfter/{recordId}";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processOffCureAfterGET(_response));
        });
    }

    protected processOffCureAfterGET(response: AxiosResponse): Promise<OffCureAfterViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = OffCureAfterViewResultEntry.fromJS(resultData200);
            return Promise.resolve<OffCureAfterViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<OffCureAfterViewResultEntry>(null as any);
    }

    /**
     * 透后 - 下机 - 编辑
     * @param recordId 透析记录ID
     * @param body (optional)
     * @return Success
     */
    offCureAfterPOST(recordId: string, body: OffCureAfterEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/{recordId}/OffCureAfter";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processOffCureAfterPOST(_response));
        });
    }

    protected processOffCureAfterPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透后 - 消毒 - 查询 -- 根据时间段查询
     * @param startDate (optional) 开始时间(yyyy-MM-dd)
     * @param endDate (optional) 结束时间(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    period12(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DisinfectCureAfterViewResult> {
        let url_ = this.baseUrl + "/api/Cure/DisinfectCureAfter/Period?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPeriod12(_response));
        });
    }

    protected processPeriod12(response: AxiosResponse): Promise<DisinfectCureAfterViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DisinfectCureAfterViewResult.fromJS(resultData200);
            return Promise.resolve<DisinfectCureAfterViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DisinfectCureAfterViewResult>(null as any);
    }

    /**
     * 透后 - 消毒 - 查询 -- 根据时间段查询
     * @param startDate (optional) 开始时间(yyyy-MM-dd)
     * @param endDate (optional) 结束时间(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    export3(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/DisinfectCureAfter/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport3(_response));
        });
    }

    protected processExport3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透后 - 消毒 - 查询 -- 根据透析记录ID查询
     * @param recordId 透析记录ID
     * @return Success
     */
    disinfectCureAfterGET(recordId: string , cancelToken?: CancelToken | undefined): Promise<DisinfectCureAfterViewResultEntry> {
        let url_ = this.baseUrl + "/api/Cure/DisinfectCureAfter/{recordId}";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDisinfectCureAfterGET(_response));
        });
    }

    protected processDisinfectCureAfterGET(response: AxiosResponse): Promise<DisinfectCureAfterViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DisinfectCureAfterViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DisinfectCureAfterViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DisinfectCureAfterViewResultEntry>(null as any);
    }

    /**
     * 透后 - 消毒 - 执行
     * @param recordId 透析记录ID
     * @param body (optional)
     * @return Success
     */
    disinfectCureAfterPOST(recordId: string, body: DisinfectCureAfterEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/{recordId}/DisinfectCureAfter";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDisinfectCureAfterPOST(_response));
        });
    }

    protected processDisinfectCureAfterPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透后 - 透后评估 - 查询 -- 根据时间段查询
     * @param startDate (optional) 开始时间(yyyy-MM-dd)
     * @param endDate (optional) 结束时间(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    period13(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<AssementCureAfterViewResult> {
        let url_ = this.baseUrl + "/api/Cure/AssementCureAfter/Period?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPeriod13(_response));
        });
    }

    protected processPeriod13(response: AxiosResponse): Promise<AssementCureAfterViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AssementCureAfterViewResult.fromJS(resultData200);
            return Promise.resolve<AssementCureAfterViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AssementCureAfterViewResult>(null as any);
    }

    /**
     * 透后 - 透后评估 - 查询 -- 根据透析记录ID查询
     * @param recordId 透析记录ID
     * @return Success
     */
    assementCureAfterGET(recordId: string , cancelToken?: CancelToken | undefined): Promise<AssementCureAfterViewResultEntry> {
        let url_ = this.baseUrl + "/api/Cure/AssementCureAfter/{recordId}";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAssementCureAfterGET(_response));
        });
    }

    protected processAssementCureAfterGET(response: AxiosResponse): Promise<AssementCureAfterViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AssementCureAfterViewResultEntry.fromJS(resultData200);
            return Promise.resolve<AssementCureAfterViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AssementCureAfterViewResultEntry>(null as any);
    }

    /**
     * 透后 - 透后评估 - 编辑(有则更新，无则新增)
     * @param recordId 透析记录ID
     * @param body (optional)
     * @return Success
     */
    assementCureAfterPOST(recordId: string, body: AssementCureAfterEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/AssementCureAfter/{recordId}";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAssementCureAfterPOST(_response));
        });
    }

    protected processAssementCureAfterPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透后 - 透后评估 - 查询 -- 根据患者标识查询
     * @param patientId 患者标识
     * @param filter (optional) 查询条件
     * @return Success
     */
    patient5(patientId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<AssementCureAfterViewResult> {
        let url_ = this.baseUrl + "/api/Cure/AssementCureAfter/Patient/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatient5(_response));
        });
    }

    protected processPatient5(response: AxiosResponse): Promise<AssementCureAfterViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AssementCureAfterViewResult.fromJS(resultData200);
            return Promise.resolve<AssementCureAfterViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AssementCureAfterViewResult>(null as any);
    }

    /**
     * 透后 - 透后评估 - 删除 -- 根据透后评估标识删除数据
     * @param cureAssementId 透后评估记录标识
     * @return Success
     */
    assementCureAfterPOST2(cureAssementId: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/Delete/{cureAssementId}/AssementCureAfter";
        if (cureAssementId === undefined || cureAssementId === null)
            throw new Error("The parameter 'cureAssementId' must be defined.");
        url_ = url_.replace("{cureAssementId}", encodeURIComponent("" + cureAssementId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAssementCureAfterPOST2(_response));
        });
    }

    protected processAssementCureAfterPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透后 - 交班看板 - 查询 -- 根据交班看板记录ID
     * @param deptShrId 根据交班看板记录ID
     * @return Success
     */
    details4(deptShrId: string , cancelToken?: CancelToken | undefined): Promise<DeptShrCureAfterViewResultEntry> {
        let url_ = this.baseUrl + "/api/Cure/DeptShrCureAfter/Details/{deptShrId}";
        if (deptShrId === undefined || deptShrId === null)
            throw new Error("The parameter 'deptShrId' must be defined.");
        url_ = url_.replace("{deptShrId}", encodeURIComponent("" + deptShrId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetails4(_response));
        });
    }

    protected processDetails4(response: AxiosResponse): Promise<DeptShrCureAfterViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptShrCureAfterViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DeptShrCureAfterViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptShrCureAfterViewResultEntry>(null as any);
    }

    /**
     * 透后 - 交班看板 - 查询 -- 根据时间段查询
     * @param startDate (optional) 开始时间(yyyy-MM-dd)
     * @param endDate (optional) 结束时间(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    period14(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptShrCureAfterViewResult> {
        let url_ = this.baseUrl + "/api/Cure/DeptShrCureAfter/Period?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPeriod14(_response));
        });
    }

    protected processPeriod14(response: AxiosResponse): Promise<DeptShrCureAfterViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptShrCureAfterViewResult.fromJS(resultData200);
            return Promise.resolve<DeptShrCureAfterViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptShrCureAfterViewResult>(null as any);
    }

    /**
     * 透后 - 交班看板 - 生成批量交班模板 -- 根据透析区间与班次
     * @param date 透析日期(yyyyMMdd)
     * @param dialysisAreaId (optional) 透析分区（多个以逗号隔开，为空查全部）
     * @param shiftId (optional) 透析班次（不允许为空）
     * @return Success
     */
    tmpl(date: string, dialysisAreaId: string | undefined, shiftId: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptShrCureAfterViewResult> {
        let url_ = this.baseUrl + "/api/Cure/DeptShrCureAfter/Tmpl/{date}?";
        if (date === undefined || date === null)
            throw new Error("The parameter 'date' must be defined.");
        url_ = url_.replace("{date}", encodeURIComponent("" + date));
        if (dialysisAreaId === null)
            throw new Error("The parameter 'dialysisAreaId' cannot be null.");
        else if (dialysisAreaId !== undefined)
            url_ += "dialysisAreaId=" + encodeURIComponent("" + dialysisAreaId) + "&";
        if (shiftId === null)
            throw new Error("The parameter 'shiftId' cannot be null.");
        else if (shiftId !== undefined)
            url_ += "shiftId=" + encodeURIComponent("" + shiftId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTmpl(_response));
        });
    }

    protected processTmpl(response: AxiosResponse): Promise<DeptShrCureAfterViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptShrCureAfterViewResult.fromJS(resultData200);
            return Promise.resolve<DeptShrCureAfterViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptShrCureAfterViewResult>(null as any);
    }

    /**
     * 透后 - 交班看板 - 新增
     * @param body (optional)
     * @return Success
     */
    deptShrCureAfter(body: DeptShrCureAfterEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/DeptShrCureAfter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptShrCureAfter(_response));
        });
    }

    protected processDeptShrCureAfter(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透后 - 交班看板 - 新增 - 批量
     * @param body (optional)
     * @return Success
     */
    batch3(body: DeptShrCureAfterEditModel[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/DeptShrCureAfter/Batch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatch3(_response));
        });
    }

    protected processBatch3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透后 - 交班看板 - 编辑
     * @param deptShrId 交班看板记录标识
     * @param body (optional)
     * @return Success
     */
    deptShrCureAfter2(deptShrId: string, body: DeptShrCureAfterEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/{deptShrId}/DeptShrCureAfter";
        if (deptShrId === undefined || deptShrId === null)
            throw new Error("The parameter 'deptShrId' must be defined.");
        url_ = url_.replace("{deptShrId}", encodeURIComponent("" + deptShrId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptShrCureAfter2(_response));
        });
    }

    protected processDeptShrCureAfter2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透后 - 交班看板 - 删除 -- 根据交班看板标识删除数据
     * @param deptShrId 交班看板记录标识
     * @return Success
     */
    deptShrCureAfter3(deptShrId: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/Delete/{deptShrId}/DeptShrCureAfter";
        if (deptShrId === undefined || deptShrId === null)
            throw new Error("The parameter 'deptShrId' must be defined.");
        url_ = url_.replace("{deptShrId}", encodeURIComponent("" + deptShrId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptShrCureAfter3(_response));
        });
    }

    protected processDeptShrCureAfter3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透后 - 透后小结 -- 根据时间段查询
     * @param startDate (optional) 开始时间(yyyy-MM-dd)
     * @param endDate (optional) 结束时间(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    period15(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SummaryCureAfterViewResult> {
        let url_ = this.baseUrl + "/api/Cure/SummaryCureAfter/Period?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPeriod15(_response));
        });
    }

    protected processPeriod15(response: AxiosResponse): Promise<SummaryCureAfterViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SummaryCureAfterViewResult.fromJS(resultData200);
            return Promise.resolve<SummaryCureAfterViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SummaryCureAfterViewResult>(null as any);
    }

    /**
     * 透后 - 透后病程记录 -- 根据时间段查询
     * @param startDate (optional) 开始时间(yyyy-MM-dd)
     * @param endDate (optional) 结束时间(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    period16(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureCourseViewResult> {
        let url_ = this.baseUrl + "/api/Cure/CourseCureAfter/Period?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPeriod16(_response));
        });
    }

    protected processPeriod16(response: AxiosResponse): Promise<CureCourseViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureCourseViewResult.fromJS(resultData200);
            return Promise.resolve<CureCourseViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureCourseViewResult>(null as any);
    }

    /**
     * 透后 - 透后小结 -- 根据透析记录ID查询模板
     * @param recordId 透析记录ID
     * @return Success
     */
    tmpl2(recordId: string , cancelToken?: CancelToken | undefined): Promise<TmplCommonResult> {
        let url_ = this.baseUrl + "/api/Cure/SummaryCureAfter/Tmpl/{recordId}";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTmpl2(_response));
        });
    }

    protected processTmpl2(response: AxiosResponse): Promise<TmplCommonResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TmplCommonResult.fromJS(resultData200);
            return Promise.resolve<TmplCommonResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TmplCommonResult>(null as any);
    }

    /**
     * 透后 - 透后小结 - 查询 -- 根据透析记录ID查询
     * @param recordId 根据透析记录ID查询
     * @return Success
     */
    summaryCureAfterGET(recordId: string , cancelToken?: CancelToken | undefined): Promise<SummaryCureAfterViewResultEntry> {
        let url_ = this.baseUrl + "/api/Cure/SummaryCureAfter/{recordId}";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSummaryCureAfterGET(_response));
        });
    }

    protected processSummaryCureAfterGET(response: AxiosResponse): Promise<SummaryCureAfterViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SummaryCureAfterViewResultEntry.fromJS(resultData200);
            return Promise.resolve<SummaryCureAfterViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SummaryCureAfterViewResultEntry>(null as any);
    }

    /**
     * 透后 - 透后小结 - 编辑(有则更新，无则新增)
     * @param recordId 透析记录ID
     * @param body (optional)
     * @return Success
     */
    summaryCureAfterPOST(recordId: string, body: SummaryCureAfterEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/SummaryCureAfter/{recordId}";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSummaryCureAfterPOST(_response));
        });
    }

    protected processSummaryCureAfterPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透后 - 透后小结 - 删除 -- 根据透后小结标识删除数据
     * @param cureSummaryId 透后小结记录标识
     * @return Success
     */
    summaryCureAfterPOST2(cureSummaryId: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/Delete/{cureSummaryId}/SummaryCureAfter";
        if (cureSummaryId === undefined || cureSummaryId === null)
            throw new Error("The parameter 'cureSummaryId' must be defined.");
        url_ = url_.replace("{cureSummaryId}", encodeURIComponent("" + cureSummaryId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSummaryCureAfterPOST2(_response));
        });
    }

    protected processSummaryCureAfterPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透后 - 透后小结 -- 根据透析记录ID查询模板
     * @param recordId 透析记录ID
     * @return Success
     */
    tmpl3(recordId: string , cancelToken?: CancelToken | undefined): Promise<TmplCommonResult> {
        let url_ = this.baseUrl + "/api/Cure/CourseCureAfter/Tmpl/{recordId}";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTmpl3(_response));
        });
    }

    protected processTmpl3(response: AxiosResponse): Promise<TmplCommonResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TmplCommonResult.fromJS(resultData200);
            return Promise.resolve<TmplCommonResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TmplCommonResult>(null as any);
    }

    /**
     * 透后 - 透后病程记录 - 编辑（有则更新，无则新增）
     * @param recordId 透析记录ID
     * @param body (optional)
     * @return Success
     */
    courseCureAfterPOST(recordId: string, body: CureCourseEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/CourseCureAfter/{recordId}";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCourseCureAfterPOST(_response));
        });
    }

    protected processCourseCureAfterPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透后 - 透后病程记录 - 查询 -- 根据透析记录ID查询
     * @param recordId 根据透析记录ID查询
     * @return Success
     */
    courseCureAfterGET(recordId: string , cancelToken?: CancelToken | undefined): Promise<CureCourseViewResultEntry> {
        let url_ = this.baseUrl + "/api/Cure/CourseCureAfter/{recordId}";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCourseCureAfterGET(_response));
        });
    }

    protected processCourseCureAfterGET(response: AxiosResponse): Promise<CureCourseViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureCourseViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureCourseViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureCourseViewResultEntry>(null as any);
    }

    /**
     * 透后病程记录 - 删除 - 根据透后病程记录标识删除数据
     * @return Success
     */
    courseCureAfterPOST2(cureCourseId: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/Delete/{cureCourseId}/CourseCureAfter";
        if (cureCourseId === undefined || cureCourseId === null)
            throw new Error("The parameter 'cureCourseId' must be defined.");
        url_ = url_.replace("{cureCourseId}", encodeURIComponent("" + cureCourseId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCourseCureAfterPOST2(_response));
        });
    }

    protected processCourseCureAfterPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 交叉核对后更新条码
     * @param cureRecordConsumableId 耗材项目标识
     * @param body (optional) 条码
     * @return Success
     */
    updateCode(cureRecordConsumableId: string, body: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/{cureRecordConsumableId}/UpdateCode";
        if (cureRecordConsumableId === undefined || cureRecordConsumableId === null)
            throw new Error("The parameter 'cureRecordConsumableId' must be defined.");
        url_ = url_.replace("{cureRecordConsumableId}", encodeURIComponent("" + cureRecordConsumableId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdateCode(_response));
        });
    }

    protected processUpdateCode(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 取消透析 - 在交叉核对之前都可以取消透析
     * @param recordId 透析记录ID
     * @param body (optional) 取消透析原因
     * @return Success
     */
    cancel(recordId: string, body: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/{recordId}/Cancel";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCancel(_response));
        });
    }

    protected processCancel(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析流程修改上机事件参数后，可以修改上机时间
     * @param recordId 透析记录ID
     * @param body (optional) 编辑
     * @return Success
     */
    editTimeOn(recordId: string, body: CureTimeOnEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/EditTimeOn/{recordId}";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processEditTimeOn(_response));
        });
    }

    protected processEditTimeOn(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 编辑透析记录单
     * @param body (optional)
     * @return Success
     */
    editCureRecord(recordId: string, body: CureRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/{recordId}/EditCureRecord";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processEditCureRecord(_response));
        });
    }

    protected processEditCureRecord(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 编辑透前评估
     * @param body (optional)
     * @return Success
     */
    editCureAssementBefore(recordId: string, body: AssementCureRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/EditCureAssementBefore/{recordId}";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processEditCureAssementBefore(_response));
        });
    }

    protected processEditCureAssementBefore(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 编辑透后评估
     * @param body (optional)
     * @return Success
     */
    editCureAssementAfter(recordId: string, body: AssementCureRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/EditCureAssementAfter/{recordId}";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processEditCureAssementAfter(_response));
        });
    }

    protected processEditCureAssementAfter(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 评估表单(血管通路评估/跌倒/坠床评估/营养状况评估) - 查询 -- 根据时间段查询
     * @param code (optional)
     * @param startDate (optional) 开始时间(yyyy-MM-dd)
     * @param endDate (optional) 结束时间(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    period17(code: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<AssementCureViewResult> {
        let url_ = this.baseUrl + "/api/Cure/AssementCure/Period?";
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPeriod17(_response));
        });
    }

    protected processPeriod17(response: AxiosResponse): Promise<AssementCureViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AssementCureViewResult.fromJS(resultData200);
            return Promise.resolve<AssementCureViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AssementCureViewResult>(null as any);
    }

    /**
     * 评估表单(血管通路评估/跌倒/坠床评估/营养状况评估) - 查询 -- 根据透析记录ID查询
     * @param code (optional)
     * @param recordId 透析记录ID
     * @return Success
     */
    assementCureGET(code: string | undefined, recordId: string , cancelToken?: CancelToken | undefined): Promise<AssementCureViewResultEntry> {
        let url_ = this.baseUrl + "/api/Cure/AssementCure/{recordId}?";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAssementCureGET(_response));
        });
    }

    protected processAssementCureGET(response: AxiosResponse): Promise<AssementCureViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AssementCureViewResultEntry.fromJS(resultData200);
            return Promise.resolve<AssementCureViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AssementCureViewResultEntry>(null as any);
    }

    /**
     * 评估表单(血管通路评估/跌倒/坠床评估/营养状况评估) - 编辑(有则更新，无则新增)
     * @param code (optional)
     * @param recordId 透析记录ID
     * @param body (optional)
     * @return Success
     */
    assementCurePOST(code: string | undefined, recordId: string, body: AssementCureEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/AssementCure/{recordId}?";
        if (recordId === undefined || recordId === null)
            throw new Error("The parameter 'recordId' must be defined.");
        url_ = url_.replace("{recordId}", encodeURIComponent("" + recordId));
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAssementCurePOST(_response));
        });
    }

    protected processAssementCurePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 评估表单(血管通路评估/跌倒/坠床评估/营养状况评估) - 查询 -- 根据患者标识查询
     * @param code (optional)
     * @param recordId (optional) 透析记录单
     * @param patientId 患者标识
     * @param filter (optional) 查询条件
     * @return Success
     */
    patient6(code: string | undefined, recordId: string | undefined, patientId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<AssementCureViewResult> {
        let url_ = this.baseUrl + "/api/Cure/AssementCure/Patient/{patientId}?";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (recordId === null)
            throw new Error("The parameter 'recordId' cannot be null.");
        else if (recordId !== undefined)
            url_ += "recordId=" + encodeURIComponent("" + recordId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatient6(_response));
        });
    }

    protected processPatient6(response: AxiosResponse): Promise<AssementCureViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AssementCureViewResult.fromJS(resultData200);
            return Promise.resolve<AssementCureViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AssementCureViewResult>(null as any);
    }

    /**
     * 评估表单(血管通路评估/跌倒/坠床评估/营养状况评估) - 新增时，先根据模板查询出数据(电子病历使用)
     * @param code (optional)
     * @param patientId (optional)
     * @param assement_inherit (optional)
     * @param date (optional)
     * @return Success
     */
    medicalRecordGET(code: string | undefined, patientId: string | undefined, assement_inherit: string | undefined, date: string | undefined , cancelToken?: CancelToken | undefined): Promise<AssementCureViewResultEntry> {
        let url_ = this.baseUrl + "/api/Cure/AssementCure/MedicalRecord?";
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        if (assement_inherit === null)
            throw new Error("The parameter 'assement_inherit' cannot be null.");
        else if (assement_inherit !== undefined)
            url_ += "assement_inherit=" + encodeURIComponent("" + assement_inherit) + "&";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMedicalRecordGET(_response));
        });
    }

    protected processMedicalRecordGET(response: AxiosResponse): Promise<AssementCureViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AssementCureViewResultEntry.fromJS(resultData200);
            return Promise.resolve<AssementCureViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AssementCureViewResultEntry>(null as any);
    }

    /**
     * 评估表单(血管通路评估/跌倒/坠床评估/营养状况评估) - 新增数据(电子病历使用)
     * @param code (optional)
     * @param body (optional)
     * @return Success
     */
    medicalRecordPOST(code: string | undefined, body: AssementCureEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/AssementCure/MedicalRecord?";
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMedicalRecordPOST(_response));
        });
    }

    protected processMedicalRecordPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 评估表单(血管通路评估/跌倒/坠床评估/营养状况评估) - 更新数据(电子病历使用)
     * @param cureAssementID 评估ID
     * @param body (optional)
     * @return Success
     */
    medicalRecordPOST2(cureAssementID: string, body: AssementCureEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/AssementCure/MedicalRecord/{cureAssementID}";
        if (cureAssementID === undefined || cureAssementID === null)
            throw new Error("The parameter 'cureAssementID' must be defined.");
        url_ = url_.replace("{cureAssementID}", encodeURIComponent("" + cureAssementID));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMedicalRecordPOST2(_response));
        });
    }

    protected processMedicalRecordPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 评估表单 - 删除 -- 根据评估表单标识删除数据
     * @param cureAssementId 评估表单记录标识
     * @return Success
     */
    assementCurePOST2(cureAssementId: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/Delete/{cureAssementId}/AssementCure";
        if (cureAssementId === undefined || cureAssementId === null)
            throw new Error("The parameter 'cureAssementId' must be defined.");
        url_ = url_.replace("{cureAssementId}", encodeURIComponent("" + cureAssementId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAssementCurePOST2(_response));
        });
    }

    protected processAssementCurePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    printCureInfo(body: CureInfoPrint | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/PrintCureInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPrintCureInfo(_response));
        });
    }

    protected processPrintCureInfo(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析信息打印查询
     * @param filter (optional)
     * @return Success
     */
    printCureInfoSearch(stDate: string, endDate: string, shiftName: string, area: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordViewResult> {
        let url_ = this.baseUrl + "/api/Cure/PrintCureInfoSearch/{stDate}/{endDate}/{shiftName}/{area}";
        if (stDate === undefined || stDate === null)
            throw new Error("The parameter 'stDate' must be defined.");
        url_ = url_.replace("{stDate}", encodeURIComponent("" + stDate));
        if (endDate === undefined || endDate === null)
            throw new Error("The parameter 'endDate' must be defined.");
        url_ = url_.replace("{endDate}", encodeURIComponent("" + endDate));
        if (shiftName === undefined || shiftName === null)
            throw new Error("The parameter 'shiftName' must be defined.");
        url_ = url_.replace("{shiftName}", encodeURIComponent("" + shiftName));
        if (area === undefined || area === null)
            throw new Error("The parameter 'area' must be defined.");
        url_ = url_.replace("{area}", encodeURIComponent("" + area));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPrintCureInfoSearch(_response));
        });
    }

    protected processPrintCureInfoSearch(response: AxiosResponse): Promise<CureRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordViewResult.fromJS(resultData200);
            return Promise.resolve<CureRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordViewResult>(null as any);
    }

    /**
     * 透析信息打印查询
     * @param filter (optional)
     * @param stDate (optional)
     * @param endDate (optional)
     * @param shiftName (optional)
     * @param area (optional)
     * @param name (optional)
     * @return Success
     */
    printRecordSearch(filter: string | undefined, stDate: string | undefined, endDate: string | undefined, shiftName: string | undefined, area: string | undefined, name: string | undefined , cancelToken?: CancelToken | undefined): Promise<PrintRecordViewResult> {
        let url_ = this.baseUrl + "/api/Cure/PrintRecordSearch?";
        if (stDate === null)
            throw new Error("The parameter 'stDate' cannot be null.");
        else if (stDate !== undefined)
            url_ += "stDate=" + encodeURIComponent("" + stDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (shiftName === null)
            throw new Error("The parameter 'shiftName' cannot be null.");
        else if (shiftName !== undefined)
            url_ += "shiftName=" + encodeURIComponent("" + shiftName) + "&";
        if (area === null)
            throw new Error("The parameter 'area' cannot be null.");
        else if (area !== undefined)
            url_ += "area=" + encodeURIComponent("" + area) + "&";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPrintRecordSearch(_response));
        });
    }

    protected processPrintRecordSearch(response: AxiosResponse): Promise<PrintRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PrintRecordViewResult.fromJS(resultData200);
            return Promise.resolve<PrintRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PrintRecordViewResult>(null as any);
    }

    /**
     * 透前 - 注射贴 - 明细 -- 根据时间段查询
     * @param shiftId (optional) 透析班次（多个以逗号隔开，为空查全部）
     * @param dialysisAreaId (optional) 透析区间（多个以逗号隔开，为空查全部）
     * @param startDate (optional) 开始时间(yyyy-MM-dd)
     * @param endDate (optional) 结束时间(yyyy-MM-dd)
     * @param key (optional)
     * @param type (optional) 打印类型
     * @param sort (optional)
     * @param filter (optional) 查询条件
     * @return Success
     */
    period18(shiftId: string | undefined, dialysisAreaId: string | undefined, startDate: string | undefined, endDate: string | undefined, key: string | undefined, type: string | undefined, sort: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureBeforePrintViewResult> {
        let url_ = this.baseUrl + "/api/Cure/InjectionPlasterCureBefore/Period?";
        if (shiftId === null)
            throw new Error("The parameter 'shiftId' cannot be null.");
        else if (shiftId !== undefined)
            url_ += "shiftId=" + encodeURIComponent("" + shiftId) + "&";
        if (dialysisAreaId === null)
            throw new Error("The parameter 'dialysisAreaId' cannot be null.");
        else if (dialysisAreaId !== undefined)
            url_ += "dialysisAreaId=" + encodeURIComponent("" + dialysisAreaId) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        else if (sort !== undefined)
            url_ += "sort=" + encodeURIComponent("" + sort) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPeriod18(_response));
        });
    }

    protected processPeriod18(response: AxiosResponse): Promise<CureBeforePrintViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureBeforePrintViewResult.fromJS(resultData200);
            return Promise.resolve<CureBeforePrintViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureBeforePrintViewResult>(null as any);
    }

    /**
     * 透析记录单补录
     * @param body (optional)
     * @return Success
     */
    replenish(patientId: string, body: CureReplenish | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Cure/Replenish/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processReplenish(_response));
        });
    }

    protected processReplenish(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class AssementCureAfterEditModel implements IAssementCureAfterEditModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** [表单模板标识](表单模板) */
    tmplFormId?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    timeAssement?: dayjs.Dayjs | undefined;

    constructor(data?: IAssementCureAfterEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.patientId = _data["patientId"];
            this.tmplFormId = _data["tmplFormId"];
            this.dataValue = _data["dataValue"];
            this.timeAssement = _data["timeAssement"] ? dayjs(_data["timeAssement"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AssementCureAfterEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new AssementCureAfterEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["patientId"] = this.patientId;
        data["tmplFormId"] = this.tmplFormId;
        data["dataValue"] = this.dataValue;
        data["timeAssement"] = this.timeAssement ? this.timeAssement.toISOString() : <any>undefined;
        return data;
    }
}

export interface IAssementCureAfterEditModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** [表单模板标识](表单模板) */
    tmplFormId?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    timeAssement?: dayjs.Dayjs | undefined;
}

export class AssementCureAfterView implements IAssementCureAfterView {
    /** [透析记录标识](透析记录Id) */
    cureRecordId?: string | undefined;
    /** [表单模板标识](表单模板) */
    tmplFormId?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    timeAssement?: dayjs.Dayjs | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 是否已经下机 */
    hasDown?: boolean;
    /** 是否已经评估 */
    hasAssement?: boolean;
    /** 表单结构 */
    data?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 透后评估标识 */
    cureAssementAfterID?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IAssementCureAfterView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.tmplFormId = _data["tmplFormId"];
            this.dataValue = _data["dataValue"];
            this.timeAssement = _data["timeAssement"] ? dayjs(_data["timeAssement"].toString()) : <any>undefined;
            this.timeOff = _data["timeOff"] ? dayjs(_data["timeOff"].toString()) : <any>undefined;
            this.hasDown = _data["hasDown"];
            this.hasAssement = _data["hasAssement"];
            this.data = _data["data"];
            this.sn = _data["sn"];
            this.patientId = _data["patientId"];
            this.surnameCode = _data["surnameCode"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.cureAssementAfterID = _data["cureAssementAfterID"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AssementCureAfterView {
        data = typeof data === 'object' ? data : {};
        let result = new AssementCureAfterView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["tmplFormId"] = this.tmplFormId;
        data["dataValue"] = this.dataValue;
        data["timeAssement"] = this.timeAssement ? this.timeAssement.toISOString() : <any>undefined;
        data["timeOff"] = this.timeOff ? this.timeOff.toISOString() : <any>undefined;
        data["hasDown"] = this.hasDown;
        data["hasAssement"] = this.hasAssement;
        data["data"] = this.data;
        data["sn"] = this.sn;
        data["patientId"] = this.patientId;
        data["surnameCode"] = this.surnameCode;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["cureAssementAfterID"] = this.cureAssementAfterID;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IAssementCureAfterView {
    /** [透析记录标识](透析记录Id) */
    cureRecordId?: string | undefined;
    /** [表单模板标识](表单模板) */
    tmplFormId?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    timeAssement?: dayjs.Dayjs | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 是否已经下机 */
    hasDown?: boolean;
    /** 是否已经评估 */
    hasAssement?: boolean;
    /** 表单结构 */
    data?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 透后评估标识 */
    cureAssementAfterID?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class AssementCureAfterViewResult implements IAssementCureAfterViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: AssementCureAfterView[] | undefined;

    constructor(data?: IAssementCureAfterViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(AssementCureAfterView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AssementCureAfterViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new AssementCureAfterViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IAssementCureAfterViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: AssementCureAfterView[] | undefined;
}

/** Reponse */
export class AssementCureAfterViewResultEntry implements IAssementCureAfterViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: AssementCureAfterView;

    constructor(data?: IAssementCureAfterViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? AssementCureAfterView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AssementCureAfterViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new AssementCureAfterViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IAssementCureAfterViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: AssementCureAfterView;
}

export class AssementCureBeforeEditModel implements IAssementCureBeforeEditModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** [表单模板标识](表单模板) */
    tmplFormId?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    timeAssement?: dayjs.Dayjs | undefined;

    constructor(data?: IAssementCureBeforeEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.patientId = _data["patientId"];
            this.tmplFormId = _data["tmplFormId"];
            this.dataValue = _data["dataValue"];
            this.timeAssement = _data["timeAssement"] ? dayjs(_data["timeAssement"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AssementCureBeforeEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new AssementCureBeforeEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["patientId"] = this.patientId;
        data["tmplFormId"] = this.tmplFormId;
        data["dataValue"] = this.dataValue;
        data["timeAssement"] = this.timeAssement ? this.timeAssement.toISOString() : <any>undefined;
        return data;
    }
}

export interface IAssementCureBeforeEditModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** [表单模板标识](表单模板) */
    tmplFormId?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    timeAssement?: dayjs.Dayjs | undefined;
}

export class AssementCureBeforeView implements IAssementCureBeforeView {
    /** [透析记录标识](透析记录Id) */
    cureRecordId?: string | undefined;
    /** [表单模板标识](表单模板) */
    tmplFormId?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    timeAssement?: dayjs.Dayjs | undefined;
    /** 是否已经评估 */
    hasAssement?: boolean;
    /** 表单结构 */
    data?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 透前评估标识 */
    cureAssementBeforeID?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IAssementCureBeforeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.tmplFormId = _data["tmplFormId"];
            this.dataValue = _data["dataValue"];
            this.timeAssement = _data["timeAssement"] ? dayjs(_data["timeAssement"].toString()) : <any>undefined;
            this.hasAssement = _data["hasAssement"];
            this.data = _data["data"];
            this.sn = _data["sn"];
            this.patientId = _data["patientId"];
            this.surnameCode = _data["surnameCode"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.cureAssementBeforeID = _data["cureAssementBeforeID"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AssementCureBeforeView {
        data = typeof data === 'object' ? data : {};
        let result = new AssementCureBeforeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["tmplFormId"] = this.tmplFormId;
        data["dataValue"] = this.dataValue;
        data["timeAssement"] = this.timeAssement ? this.timeAssement.toISOString() : <any>undefined;
        data["hasAssement"] = this.hasAssement;
        data["data"] = this.data;
        data["sn"] = this.sn;
        data["patientId"] = this.patientId;
        data["surnameCode"] = this.surnameCode;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["cureAssementBeforeID"] = this.cureAssementBeforeID;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IAssementCureBeforeView {
    /** [透析记录标识](透析记录Id) */
    cureRecordId?: string | undefined;
    /** [表单模板标识](表单模板) */
    tmplFormId?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    timeAssement?: dayjs.Dayjs | undefined;
    /** 是否已经评估 */
    hasAssement?: boolean;
    /** 表单结构 */
    data?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 透前评估标识 */
    cureAssementBeforeID?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class AssementCureBeforeViewResult implements IAssementCureBeforeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: AssementCureBeforeView[] | undefined;

    constructor(data?: IAssementCureBeforeViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(AssementCureBeforeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AssementCureBeforeViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new AssementCureBeforeViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IAssementCureBeforeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: AssementCureBeforeView[] | undefined;
}

/** Reponse */
export class AssementCureBeforeViewResultEntry implements IAssementCureBeforeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: AssementCureBeforeView;

    constructor(data?: IAssementCureBeforeViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? AssementCureBeforeView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AssementCureBeforeViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new AssementCureBeforeViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IAssementCureBeforeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: AssementCureBeforeView;
}

/** 透析评估 */
export class AssementCureDialysisEditModel implements IAssementCureDialysisEditModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** [表单模板标识](表单模板) */
    tmplFormId?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    timeAssement?: dayjs.Dayjs | undefined;

    constructor(data?: IAssementCureDialysisEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.patientId = _data["patientId"];
            this.tmplFormId = _data["tmplFormId"];
            this.dataValue = _data["dataValue"];
            this.timeAssement = _data["timeAssement"] ? dayjs(_data["timeAssement"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AssementCureDialysisEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new AssementCureDialysisEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["patientId"] = this.patientId;
        data["tmplFormId"] = this.tmplFormId;
        data["dataValue"] = this.dataValue;
        data["timeAssement"] = this.timeAssement ? this.timeAssement.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析评估 */
export interface IAssementCureDialysisEditModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** [表单模板标识](表单模板) */
    tmplFormId?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    timeAssement?: dayjs.Dayjs | undefined;
}

/** 透析评估 */
export class AssementCureDialysisView implements IAssementCureDialysisView {
    /** [透析记录标识](透析记录Id) */
    cureRecordId?: string | undefined;
    /** [表单模板标识](表单模板) */
    tmplFormId?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    timeAssement?: dayjs.Dayjs | undefined;
    /** 是否已经评估 */
    hasAssement?: boolean;
    /** 表单结构 */
    data?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 透前评估标识 */
    cureAssementID?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IAssementCureDialysisView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.tmplFormId = _data["tmplFormId"];
            this.dataValue = _data["dataValue"];
            this.timeAssement = _data["timeAssement"] ? dayjs(_data["timeAssement"].toString()) : <any>undefined;
            this.hasAssement = _data["hasAssement"];
            this.data = _data["data"];
            this.sn = _data["sn"];
            this.patientId = _data["patientId"];
            this.surnameCode = _data["surnameCode"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.cureAssementID = _data["cureAssementID"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AssementCureDialysisView {
        data = typeof data === 'object' ? data : {};
        let result = new AssementCureDialysisView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["tmplFormId"] = this.tmplFormId;
        data["dataValue"] = this.dataValue;
        data["timeAssement"] = this.timeAssement ? this.timeAssement.toISOString() : <any>undefined;
        data["hasAssement"] = this.hasAssement;
        data["data"] = this.data;
        data["sn"] = this.sn;
        data["patientId"] = this.patientId;
        data["surnameCode"] = this.surnameCode;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["cureAssementID"] = this.cureAssementID;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析评估 */
export interface IAssementCureDialysisView {
    /** [透析记录标识](透析记录Id) */
    cureRecordId?: string | undefined;
    /** [表单模板标识](表单模板) */
    tmplFormId?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    timeAssement?: dayjs.Dayjs | undefined;
    /** 是否已经评估 */
    hasAssement?: boolean;
    /** 表单结构 */
    data?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 透前评估标识 */
    cureAssementID?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class AssementCureDialysisViewResult implements IAssementCureDialysisViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: AssementCureDialysisView[] | undefined;

    constructor(data?: IAssementCureDialysisViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(AssementCureDialysisView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AssementCureDialysisViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new AssementCureDialysisViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IAssementCureDialysisViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: AssementCureDialysisView[] | undefined;
}

/** Reponse */
export class AssementCureDialysisViewResultEntry implements IAssementCureDialysisViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: AssementCureDialysisView;

    constructor(data?: IAssementCureDialysisViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? AssementCureDialysisView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AssementCureDialysisViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new AssementCureDialysisViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IAssementCureDialysisViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: AssementCureDialysisView;
}

/** 评估表单 */
export class AssementCureEditModel implements IAssementCureEditModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** [表单模板标识](表单模板) */
    tmplFormId?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;

    constructor(data?: IAssementCureEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.patientId = _data["patientId"];
            this.tmplFormId = _data["tmplFormId"];
            this.dataValue = _data["dataValue"];
        }
    }

    static fromJS(data: any): AssementCureEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new AssementCureEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["patientId"] = this.patientId;
        data["tmplFormId"] = this.tmplFormId;
        data["dataValue"] = this.dataValue;
        return data;
    }
}

/** 评估表单 */
export interface IAssementCureEditModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** [表单模板标识](表单模板) */
    tmplFormId?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
}

export class AssementCureRecordEditModel implements IAssementCureRecordEditModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId!: string;
    /** [表单模板标识](表单模板) */
    tmplFormId?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** 评估人 */
    assementNurseId?: string | undefined;
    /** 评估人 */
    assementNurseName?: string | undefined;
    timeAssement?: dayjs.Dayjs | undefined;

    constructor(data?: IAssementCureRecordEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.tmplFormId = _data["tmplFormId"];
            this.dataValue = _data["dataValue"];
            this.assementNurseId = _data["assementNurseId"];
            this.assementNurseName = _data["assementNurseName"];
            this.timeAssement = _data["timeAssement"] ? dayjs(_data["timeAssement"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AssementCureRecordEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new AssementCureRecordEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["tmplFormId"] = this.tmplFormId;
        data["dataValue"] = this.dataValue;
        data["assementNurseId"] = this.assementNurseId;
        data["assementNurseName"] = this.assementNurseName;
        data["timeAssement"] = this.timeAssement ? this.timeAssement.toISOString() : <any>undefined;
        return data;
    }
}

export interface IAssementCureRecordEditModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId: string;
    /** [表单模板标识](表单模板) */
    tmplFormId?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** 评估人 */
    assementNurseId?: string | undefined;
    /** 评估人 */
    assementNurseName?: string | undefined;
    timeAssement?: dayjs.Dayjs | undefined;
}

/** 评估表单 */
export class AssementCureView implements IAssementCureView {
    /** [透析记录标识](透析记录Id) */
    cureRecordId?: string | undefined;
    /** [表单模板标识](表单模板) */
    tmplFormId?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** 是否已经评估 */
    hasAssement?: boolean;
    /** 表单结构 */
    data?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 评估记录标识 */
    cureAssementID?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IAssementCureView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.tmplFormId = _data["tmplFormId"];
            this.dataValue = _data["dataValue"];
            this.hasAssement = _data["hasAssement"];
            this.data = _data["data"];
            this.sn = _data["sn"];
            this.patientId = _data["patientId"];
            this.surnameCode = _data["surnameCode"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.cureAssementID = _data["cureAssementID"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AssementCureView {
        data = typeof data === 'object' ? data : {};
        let result = new AssementCureView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["tmplFormId"] = this.tmplFormId;
        data["dataValue"] = this.dataValue;
        data["hasAssement"] = this.hasAssement;
        data["data"] = this.data;
        data["sn"] = this.sn;
        data["patientId"] = this.patientId;
        data["surnameCode"] = this.surnameCode;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["cureAssementID"] = this.cureAssementID;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 评估表单 */
export interface IAssementCureView {
    /** [透析记录标识](透析记录Id) */
    cureRecordId?: string | undefined;
    /** [表单模板标识](表单模板) */
    tmplFormId?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** 是否已经评估 */
    hasAssement?: boolean;
    /** 表单结构 */
    data?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 评估记录标识 */
    cureAssementID?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class AssementCureViewResult implements IAssementCureViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: AssementCureView[] | undefined;

    constructor(data?: IAssementCureViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(AssementCureView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AssementCureViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new AssementCureViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IAssementCureViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: AssementCureView[] | undefined;
}

/** Reponse */
export class AssementCureViewResultEntry implements IAssementCureViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: AssementCureView;

    constructor(data?: IAssementCureViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? AssementCureView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AssementCureViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new AssementCureViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IAssementCureViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: AssementCureView;
}

export class BedStatusView implements IBedStatusView {
    /** 显示空床非空床非空床：1 空床：2 */
    emptyBed?: number;
    /** 班次标识 */
    shfitId?: string | undefined;
    /** 班次名称 */
    shfitName?: string | undefined;
    /** 排床标识 */
    scheduleId?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 床位标识 */
    dialysisBedId?: string | undefined;
    /** 床位名称 */
    dialysisBedName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;

    constructor(data?: IBedStatusView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.emptyBed = _data["emptyBed"];
            this.shfitId = _data["shfitId"];
            this.shfitName = _data["shfitName"];
            this.scheduleId = _data["scheduleId"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.dialysisBedId = _data["dialysisBedId"];
            this.dialysisBedName = _data["dialysisBedName"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
        }
    }

    static fromJS(data: any): BedStatusView {
        data = typeof data === 'object' ? data : {};
        let result = new BedStatusView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emptyBed"] = this.emptyBed;
        data["shfitId"] = this.shfitId;
        data["shfitName"] = this.shfitName;
        data["scheduleId"] = this.scheduleId;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["dialysisBedId"] = this.dialysisBedId;
        data["dialysisBedName"] = this.dialysisBedName;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        return data;
    }
}

export interface IBedStatusView {
    /** 显示空床非空床非空床：1 空床：2 */
    emptyBed?: number;
    /** 班次标识 */
    shfitId?: string | undefined;
    /** 班次名称 */
    shfitName?: string | undefined;
    /** 排床标识 */
    scheduleId?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 床位标识 */
    dialysisBedId?: string | undefined;
    /** 床位名称 */
    dialysisBedName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
}

/** Reponse */
export class BedStatusViewResult implements IBedStatusViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: BedStatusView[] | undefined;

    constructor(data?: IBedStatusViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(BedStatusView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BedStatusViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new BedStatusViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IBedStatusViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: BedStatusView[] | undefined;
}

/** 卡片按钮 */
export class Button implements IButton {
    /** 按钮关键字 */
    commandKey?: string | undefined;
    /** 按钮名称 */
    name?: string | undefined;
    /** 排序 */
    sort?: number;

    constructor(data?: IButton) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.commandKey = _data["commandKey"];
            this.name = _data["name"];
            this.sort = _data["sort"];
        }
    }

    static fromJS(data: any): Button {
        data = typeof data === 'object' ? data : {};
        let result = new Button();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["commandKey"] = this.commandKey;
        data["name"] = this.name;
        data["sort"] = this.sort;
        return data;
    }
}

/** 卡片按钮 */
export interface IButton {
    /** 按钮关键字 */
    commandKey?: string | undefined;
    /** 按钮名称 */
    name?: string | undefined;
    /** 排序 */
    sort?: number;
}

export class ComplicationCureMiddleEditModel implements IComplicationCureMiddleEditModel {
    /** 发生时间 */
    occurredTime!: dayjs.Dayjs;
    /** 透析记录标识 */
    cureRecordId!: string;
    /** 并发症 */
    name!: string;
    /** 处理 */
    dispose!: ComplicationItem[];
    /** 原因 */
    cause!: ComplicationItem[];
    /** 备注 */
    remark?: string | undefined;
    /** 文件列表 */
    complicationFiles?: ComplicationFileItem[] | undefined;

    constructor(data?: IComplicationCureMiddleEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.dispose = [];
            this.cause = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.occurredTime = _data["occurredTime"] ? dayjs(_data["occurredTime"].toString()) : <any>undefined;
            this.cureRecordId = _data["cureRecordId"];
            this.name = _data["name"];
            if (Array.isArray(_data["dispose"])) {
                this.dispose = [] as any;
                for (let item of _data["dispose"])
                    this.dispose!.push(ComplicationItem.fromJS(item));
            }
            if (Array.isArray(_data["cause"])) {
                this.cause = [] as any;
                for (let item of _data["cause"])
                    this.cause!.push(ComplicationItem.fromJS(item));
            }
            this.remark = _data["remark"];
            if (Array.isArray(_data["complicationFiles"])) {
                this.complicationFiles = [] as any;
                for (let item of _data["complicationFiles"])
                    this.complicationFiles!.push(ComplicationFileItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ComplicationCureMiddleEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new ComplicationCureMiddleEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["occurredTime"] = this.occurredTime ? this.occurredTime.toISOString() : <any>undefined;
        data["cureRecordId"] = this.cureRecordId;
        data["name"] = this.name;
        if (Array.isArray(this.dispose)) {
            data["dispose"] = [];
            for (let item of this.dispose)
                data["dispose"].push(item.toJSON());
        }
        if (Array.isArray(this.cause)) {
            data["cause"] = [];
            for (let item of this.cause)
                data["cause"].push(item.toJSON());
        }
        data["remark"] = this.remark;
        if (Array.isArray(this.complicationFiles)) {
            data["complicationFiles"] = [];
            for (let item of this.complicationFiles)
                data["complicationFiles"].push(item.toJSON());
        }
        return data;
    }
}

export interface IComplicationCureMiddleEditModel {
    /** 发生时间 */
    occurredTime: dayjs.Dayjs;
    /** 透析记录标识 */
    cureRecordId: string;
    /** 并发症 */
    name: string;
    /** 处理 */
    dispose: ComplicationItem[];
    /** 原因 */
    cause: ComplicationItem[];
    /** 备注 */
    remark?: string | undefined;
    /** 文件列表 */
    complicationFiles?: ComplicationFileItem[] | undefined;
}

export class ComplicationCureMiddleView implements IComplicationCureMiddleView {
    /** 发生时间 */
    occurredTime!: dayjs.Dayjs;
    /** 透析记录标识 */
    cureRecordId!: string;
    /** 并发症 */
    name!: string;
    /** 处理 */
    dispose!: ComplicationItem[];
    /** 原因 */
    cause!: ComplicationItem[];
    /** 备注 */
    remark?: string | undefined;
    /** 文件列表 */
    complicationFiles?: ComplicationFileItem[] | undefined;
    /** 透中事件记录标识 */
    cureComplicationId?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 操作者标识 */
    operatorId?: string | undefined;
    /** 操作者姓名 */
    operatorName?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IComplicationCureMiddleView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.dispose = [];
            this.cause = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.occurredTime = _data["occurredTime"] ? dayjs(_data["occurredTime"].toString()) : <any>undefined;
            this.cureRecordId = _data["cureRecordId"];
            this.name = _data["name"];
            if (Array.isArray(_data["dispose"])) {
                this.dispose = [] as any;
                for (let item of _data["dispose"])
                    this.dispose!.push(ComplicationItem.fromJS(item));
            }
            if (Array.isArray(_data["cause"])) {
                this.cause = [] as any;
                for (let item of _data["cause"])
                    this.cause!.push(ComplicationItem.fromJS(item));
            }
            this.remark = _data["remark"];
            if (Array.isArray(_data["complicationFiles"])) {
                this.complicationFiles = [] as any;
                for (let item of _data["complicationFiles"])
                    this.complicationFiles!.push(ComplicationFileItem.fromJS(item));
            }
            this.cureComplicationId = _data["cureComplicationId"];
            this.sn = _data["sn"];
            this.patientId = _data["patientId"];
            this.surnameCode = _data["surnameCode"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.operatorId = _data["operatorId"];
            this.operatorName = _data["operatorName"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ComplicationCureMiddleView {
        data = typeof data === 'object' ? data : {};
        let result = new ComplicationCureMiddleView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["occurredTime"] = this.occurredTime ? this.occurredTime.toISOString() : <any>undefined;
        data["cureRecordId"] = this.cureRecordId;
        data["name"] = this.name;
        if (Array.isArray(this.dispose)) {
            data["dispose"] = [];
            for (let item of this.dispose)
                data["dispose"].push(item.toJSON());
        }
        if (Array.isArray(this.cause)) {
            data["cause"] = [];
            for (let item of this.cause)
                data["cause"].push(item.toJSON());
        }
        data["remark"] = this.remark;
        if (Array.isArray(this.complicationFiles)) {
            data["complicationFiles"] = [];
            for (let item of this.complicationFiles)
                data["complicationFiles"].push(item.toJSON());
        }
        data["cureComplicationId"] = this.cureComplicationId;
        data["sn"] = this.sn;
        data["patientId"] = this.patientId;
        data["surnameCode"] = this.surnameCode;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["operatorId"] = this.operatorId;
        data["operatorName"] = this.operatorName;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IComplicationCureMiddleView {
    /** 发生时间 */
    occurredTime: dayjs.Dayjs;
    /** 透析记录标识 */
    cureRecordId: string;
    /** 并发症 */
    name: string;
    /** 处理 */
    dispose: ComplicationItem[];
    /** 原因 */
    cause: ComplicationItem[];
    /** 备注 */
    remark?: string | undefined;
    /** 文件列表 */
    complicationFiles?: ComplicationFileItem[] | undefined;
    /** 透中事件记录标识 */
    cureComplicationId?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 操作者标识 */
    operatorId?: string | undefined;
    /** 操作者姓名 */
    operatorName?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class ComplicationCureMiddleViewResult implements IComplicationCureMiddleViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ComplicationCureMiddleView[] | undefined;

    constructor(data?: IComplicationCureMiddleViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ComplicationCureMiddleView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ComplicationCureMiddleViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new ComplicationCureMiddleViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IComplicationCureMiddleViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ComplicationCureMiddleView[] | undefined;
}

/** Reponse */
export class ComplicationCureMiddleViewResultEntry implements IComplicationCureMiddleViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: ComplicationCureMiddleView;

    constructor(data?: IComplicationCureMiddleViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? ComplicationCureMiddleView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ComplicationCureMiddleViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new ComplicationCureMiddleViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IComplicationCureMiddleViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: ComplicationCureMiddleView;
}

export class ComplicationFileItem implements IComplicationFileItem {
    /** 文件标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 文件路径 */
    url?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;

    constructor(data?: IComplicationFileItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.url = _data["url"];
            this.extension = _data["extension"];
            this.length = _data["length"];
        }
    }

    static fromJS(data: any): ComplicationFileItem {
        data = typeof data === 'object' ? data : {};
        let result = new ComplicationFileItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["url"] = this.url;
        data["extension"] = this.extension;
        data["length"] = this.length;
        return data;
    }
}

export interface IComplicationFileItem {
    /** 文件标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 文件路径 */
    url?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
}

export class ComplicationItem implements IComplicationItem {
    /** 名称 */
    name?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IComplicationItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): ComplicationItem {
        data = typeof data === 'object' ? data : {};
        let result = new ComplicationItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["remark"] = this.remark;
        return data;
    }
}

export interface IComplicationItem {
    /** 名称 */
    name?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

export class ConsumableListCureBeforeView implements IConsumableListCureBeforeView {
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 透析方式 */
    dialysisModeName?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 床位标识 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析器 */
    roomItemListTXQ?: string | undefined;
    /** 灌流器 */
    roomItemListGLQ?: string | undefined;
    /** 血滤器 */
    roomItemListXLQ?: string | undefined;
    /** 血路管 */
    roomItemListXLG?: string | undefined;
    /** 内瘘针 */
    roomItemListNLZ?: string | undefined;
    /** 置换液管路 */
    roomItemListZHYGL?: string | undefined;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** 总量 */
    total?: string | undefined;
    /** 序号，用于根据床号排序 */
    sequence?: number;

    constructor(data?: IConsumableListCureBeforeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.patientName = _data["patientName"];
            this.dialysisModeName = _data["dialysisModeName"];
            this.shiftName = _data["shiftName"];
            this.patientNameFull = _data["patientNameFull"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.roomItemListTXQ = _data["roomItemListTXQ"];
            this.roomItemListGLQ = _data["roomItemListGLQ"];
            this.roomItemListXLQ = _data["roomItemListXLQ"];
            this.roomItemListXLG = _data["roomItemListXLG"];
            this.roomItemListNLZ = _data["roomItemListNLZ"];
            this.roomItemListZHYGL = _data["roomItemListZHYGL"];
            this.anticoagulantName = _data["anticoagulantName"];
            this.total = _data["total"];
            this.sequence = _data["sequence"];
        }
    }

    static fromJS(data: any): ConsumableListCureBeforeView {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableListCureBeforeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["patientName"] = this.patientName;
        data["dialysisModeName"] = this.dialysisModeName;
        data["shiftName"] = this.shiftName;
        data["patientNameFull"] = this.patientNameFull;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["roomItemListTXQ"] = this.roomItemListTXQ;
        data["roomItemListGLQ"] = this.roomItemListGLQ;
        data["roomItemListXLQ"] = this.roomItemListXLQ;
        data["roomItemListXLG"] = this.roomItemListXLG;
        data["roomItemListNLZ"] = this.roomItemListNLZ;
        data["roomItemListZHYGL"] = this.roomItemListZHYGL;
        data["anticoagulantName"] = this.anticoagulantName;
        data["total"] = this.total;
        data["sequence"] = this.sequence;
        return data;
    }
}

export interface IConsumableListCureBeforeView {
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 透析方式 */
    dialysisModeName?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 床位标识 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析器 */
    roomItemListTXQ?: string | undefined;
    /** 灌流器 */
    roomItemListGLQ?: string | undefined;
    /** 血滤器 */
    roomItemListXLQ?: string | undefined;
    /** 血路管 */
    roomItemListXLG?: string | undefined;
    /** 内瘘针 */
    roomItemListNLZ?: string | undefined;
    /** 置换液管路 */
    roomItemListZHYGL?: string | undefined;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** 总量 */
    total?: string | undefined;
    /** 序号，用于根据床号排序 */
    sequence?: number;
}

/** Reponse */
export class ConsumableListCureBeforeViewResult implements IConsumableListCureBeforeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableListCureBeforeView[] | undefined;

    constructor(data?: IConsumableListCureBeforeViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ConsumableListCureBeforeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ConsumableListCureBeforeViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableListCureBeforeViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IConsumableListCureBeforeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableListCureBeforeView[] | undefined;
}

export class ConsumableSummaryCureBeforeView implements IConsumableSummaryCureBeforeView {
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 透析器 */
    roomItemListTXQ?: string | undefined;
    /** 灌流器 */
    roomItemListGLQ?: string | undefined;
    /** 血滤器 */
    roomItemListXLQ?: string | undefined;
    /** 血路管 */
    roomItemListXLG?: string | undefined;
    /** 内瘘针 */
    roomItemListNLZ?: string | undefined;
    /** 置换液管路 */
    roomItemListZHYGL?: string | undefined;
    /** 抗凝剂 */
    roomItemListKNJ?: string | undefined;

    constructor(data?: IConsumableSummaryCureBeforeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.roomItemListTXQ = _data["roomItemListTXQ"];
            this.roomItemListGLQ = _data["roomItemListGLQ"];
            this.roomItemListXLQ = _data["roomItemListXLQ"];
            this.roomItemListXLG = _data["roomItemListXLG"];
            this.roomItemListNLZ = _data["roomItemListNLZ"];
            this.roomItemListZHYGL = _data["roomItemListZHYGL"];
            this.roomItemListKNJ = _data["roomItemListKNJ"];
        }
    }

    static fromJS(data: any): ConsumableSummaryCureBeforeView {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableSummaryCureBeforeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["roomItemListTXQ"] = this.roomItemListTXQ;
        data["roomItemListGLQ"] = this.roomItemListGLQ;
        data["roomItemListXLQ"] = this.roomItemListXLQ;
        data["roomItemListXLG"] = this.roomItemListXLG;
        data["roomItemListNLZ"] = this.roomItemListNLZ;
        data["roomItemListZHYGL"] = this.roomItemListZHYGL;
        data["roomItemListKNJ"] = this.roomItemListKNJ;
        return data;
    }
}

export interface IConsumableSummaryCureBeforeView {
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 透析器 */
    roomItemListTXQ?: string | undefined;
    /** 灌流器 */
    roomItemListGLQ?: string | undefined;
    /** 血滤器 */
    roomItemListXLQ?: string | undefined;
    /** 血路管 */
    roomItemListXLG?: string | undefined;
    /** 内瘘针 */
    roomItemListNLZ?: string | undefined;
    /** 置换液管路 */
    roomItemListZHYGL?: string | undefined;
    /** 抗凝剂 */
    roomItemListKNJ?: string | undefined;
}

/** Reponse */
export class ConsumableSummaryCureBeforeViewResult implements IConsumableSummaryCureBeforeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableSummaryCureBeforeView[] | undefined;

    constructor(data?: IConsumableSummaryCureBeforeViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ConsumableSummaryCureBeforeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ConsumableSummaryCureBeforeViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new ConsumableSummaryCureBeforeViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IConsumableSummaryCureBeforeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ConsumableSummaryCureBeforeView[] | undefined;
}

export class CureBeforePrintView implements ICureBeforePrintView {
    /** 日期 */
    date?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 药品名称 */
    drugName?: string[] | undefined;
    /** 班次排序 */
    shiftOrder?: number | undefined;
    /** 区间排序 */
    areaOrder?: number | undefined;
    /** 床号排序 */
    bedOrder?: number | undefined;
    /** 班次排序 */
    shiftId?: string | undefined;
    /** 床位排序 */
    bedName?: string | undefined;
    /** 床位标识 */
    bedId?: string | undefined;
    /** 区间标识 */
    areaId?: string | undefined;
    /** 用法 */
    usage?: string | undefined;

    constructor(data?: ICureBeforePrintView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.patientName = _data["patientName"];
            if (Array.isArray(_data["drugName"])) {
                this.drugName = [] as any;
                for (let item of _data["drugName"])
                    this.drugName!.push(item);
            }
            this.shiftOrder = _data["shiftOrder"];
            this.areaOrder = _data["areaOrder"];
            this.bedOrder = _data["bedOrder"];
            this.shiftId = _data["shiftId"];
            this.bedName = _data["bedName"];
            this.bedId = _data["bedId"];
            this.areaId = _data["areaId"];
            this.usage = _data["usage"];
        }
    }

    static fromJS(data: any): CureBeforePrintView {
        data = typeof data === 'object' ? data : {};
        let result = new CureBeforePrintView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["patientName"] = this.patientName;
        if (Array.isArray(this.drugName)) {
            data["drugName"] = [];
            for (let item of this.drugName)
                data["drugName"].push(item);
        }
        data["shiftOrder"] = this.shiftOrder;
        data["areaOrder"] = this.areaOrder;
        data["bedOrder"] = this.bedOrder;
        data["shiftId"] = this.shiftId;
        data["bedName"] = this.bedName;
        data["bedId"] = this.bedId;
        data["areaId"] = this.areaId;
        data["usage"] = this.usage;
        return data;
    }
}

export interface ICureBeforePrintView {
    /** 日期 */
    date?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 药品名称 */
    drugName?: string[] | undefined;
    /** 班次排序 */
    shiftOrder?: number | undefined;
    /** 区间排序 */
    areaOrder?: number | undefined;
    /** 床号排序 */
    bedOrder?: number | undefined;
    /** 班次排序 */
    shiftId?: string | undefined;
    /** 床位排序 */
    bedName?: string | undefined;
    /** 床位标识 */
    bedId?: string | undefined;
    /** 区间标识 */
    areaId?: string | undefined;
    /** 用法 */
    usage?: string | undefined;
}

/** Reponse */
export class CureBeforePrintViewResult implements ICureBeforePrintViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureBeforePrintView[] | undefined;

    constructor(data?: ICureBeforePrintViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureBeforePrintView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureBeforePrintViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureBeforePrintViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureBeforePrintViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureBeforePrintView[] | undefined;
}

/** 今日收费项目 */
export class CureChargeView implements ICureChargeView {
    /** 项目 */
    name?: string | undefined;
    /** 类别 */
    type?: string | undefined;
    /** 单价 */
    price?: number | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 数量 */
    count?: number | undefined;
    /** 总价 */
    total?: number | undefined;
    /** 时间 */
    time?: dayjs.Dayjs | undefined;

    constructor(data?: ICureChargeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.type = _data["type"];
            this.price = _data["price"];
            this.unit = _data["unit"];
            this.count = _data["count"];
            this.total = _data["total"];
            this.time = _data["time"] ? dayjs(_data["time"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureChargeView {
        data = typeof data === 'object' ? data : {};
        let result = new CureChargeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["type"] = this.type;
        data["price"] = this.price;
        data["unit"] = this.unit;
        data["count"] = this.count;
        data["total"] = this.total;
        data["time"] = this.time ? this.time.toISOString() : <any>undefined;
        return data;
    }
}

/** 今日收费项目 */
export interface ICureChargeView {
    /** 项目 */
    name?: string | undefined;
    /** 类别 */
    type?: string | undefined;
    /** 单价 */
    price?: number | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 数量 */
    count?: number | undefined;
    /** 总价 */
    total?: number | undefined;
    /** 时间 */
    time?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureChargeViewResult implements ICureChargeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureChargeView[] | undefined;

    constructor(data?: ICureChargeViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureChargeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureChargeViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureChargeViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureChargeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureChargeView[] | undefined;
}

export class CureCostGroupView implements ICureCostGroupView {
    /** 耗材分类代码 */
    roomItemTypeCode!: string;
    /** [耗材标识](项目清单Id) */
    roomItemListId!: string;
    /** 耗材数量 */
    count!: number;
    /** 批号管理 */
    batchManage!: number | undefined;
    /** 编码 */
    code?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 耗材编码 */
    devBarCode?: string | undefined;
    /** 项目标识 */
    cureRecordConsumableId?: string | undefined;
    /** 项目排序 */
    sequence?: number;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 种类名称 */
    roomItemTypeName?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 售价 */
    sellingPrice?: number | undefined;
    /** 基本单位 */
    unit?: string | undefined;
    /** 基本单位显示值 */
    unitLabel?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` */
    unitLevel1?: string | undefined;
    /** 一级单位显示值 */
    unitLevel1Label?: string | undefined;
    /** 一级单位与基本单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 项目启用状态0,1 */
    enabled?: number;
    /** 库存 *基本单位的库存* */
    inventoryCount?: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 批号明细 */
    batchItems?: CureRecordConsumableItemView[] | undefined;

    constructor(data?: ICureCostGroupView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemTypeCode = _data["roomItemTypeCode"];
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
            this.batchManage = _data["batchManage"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.devBarCode = _data["devBarCode"];
            this.cureRecordConsumableId = _data["cureRecordConsumableId"];
            this.sequence = _data["sequence"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.spec = _data["spec"];
            this.sellingPrice = _data["sellingPrice"];
            this.unit = _data["unit"];
            this.unitLabel = _data["unitLabel"];
            this.usageMode = _data["usageMode"];
            this.usageModeLabel = _data["usageModeLabel"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitLevel1Label = _data["unitLevel1Label"];
            if (Array.isArray(_data["unitList"])) {
                this.unitList = [] as any;
                for (let item of _data["unitList"])
                    this.unitList!.push(LabelModel.fromJS(item));
            }
            this.enabled = _data["enabled"];
            this.inventoryCount = _data["inventoryCount"];
            this.batchNo = _data["batchNo"];
            if (Array.isArray(_data["batchItems"])) {
                this.batchItems = [] as any;
                for (let item of _data["batchItems"])
                    this.batchItems!.push(CureRecordConsumableItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureCostGroupView {
        data = typeof data === 'object' ? data : {};
        let result = new CureCostGroupView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemTypeCode"] = this.roomItemTypeCode;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        data["batchManage"] = this.batchManage;
        data["code"] = this.code;
        data["name"] = this.name;
        data["devBarCode"] = this.devBarCode;
        data["cureRecordConsumableId"] = this.cureRecordConsumableId;
        data["sequence"] = this.sequence;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["spec"] = this.spec;
        data["sellingPrice"] = this.sellingPrice;
        data["unit"] = this.unit;
        data["unitLabel"] = this.unitLabel;
        data["usageMode"] = this.usageMode;
        data["usageModeLabel"] = this.usageModeLabel;
        data["unitLevel1"] = this.unitLevel1;
        data["unitLevel1Label"] = this.unitLevel1Label;
        if (Array.isArray(this.unitList)) {
            data["unitList"] = [];
            for (let item of this.unitList)
                data["unitList"].push(item.toJSON());
        }
        data["enabled"] = this.enabled;
        data["inventoryCount"] = this.inventoryCount;
        data["batchNo"] = this.batchNo;
        if (Array.isArray(this.batchItems)) {
            data["batchItems"] = [];
            for (let item of this.batchItems)
                data["batchItems"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICureCostGroupView {
    /** 耗材分类代码 */
    roomItemTypeCode: string;
    /** [耗材标识](项目清单Id) */
    roomItemListId: string;
    /** 耗材数量 */
    count: number;
    /** 批号管理 */
    batchManage: number | undefined;
    /** 编码 */
    code?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 耗材编码 */
    devBarCode?: string | undefined;
    /** 项目标识 */
    cureRecordConsumableId?: string | undefined;
    /** 项目排序 */
    sequence?: number;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 种类名称 */
    roomItemTypeName?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 售价 */
    sellingPrice?: number | undefined;
    /** 基本单位 */
    unit?: string | undefined;
    /** 基本单位显示值 */
    unitLabel?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` */
    unitLevel1?: string | undefined;
    /** 一级单位显示值 */
    unitLevel1Label?: string | undefined;
    /** 一级单位与基本单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 项目启用状态0,1 */
    enabled?: number;
    /** 库存 *基本单位的库存* */
    inventoryCount?: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 批号明细 */
    batchItems?: CureRecordConsumableItemView[] | undefined;
}

/** 透后病程记录 */
export class CureCourseEditModel implements ICureCourseEditModel {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 病程记录内容 */
    content!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureCourseEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.content = _data["content"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureCourseEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureCourseEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["content"] = this.content;
        data["remark"] = this.remark;
        return data;
    }
}

/** 透后病程记录 */
export interface ICureCourseEditModel {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 病程记录内容 */
    content: string;
    /** 备注 */
    remark?: string | undefined;
}

/** 透后病程记录 */
export class CureCourseView implements ICureCourseView {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 病程记录内容 */
    content!: string;
    /** 备注 */
    remark?: string | undefined;
    /** id */
    id?: string | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 是否已经下机 */
    hasDown?: boolean;
    /** 是否已经透后病程记录 */
    hasCureCourse?: boolean;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 标识 */
    cureCourseId?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 记录人员名称 */
    sysUserName?: string | undefined;
    /** 记录人员别名 */
    sysUserName2?: string | undefined;
    /** 记录人员全名 */
    sysUserNameFull?: string | undefined;
    /** [记录人员标识](#用户信息) */
    sysUserId?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureCourseView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.content = _data["content"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.timeOff = _data["timeOff"] ? dayjs(_data["timeOff"].toString()) : <any>undefined;
            this.hasDown = _data["hasDown"];
            this.hasCureCourse = _data["hasCureCourse"];
            this.patientId = _data["patientId"];
            this.cureCourseId = _data["cureCourseId"];
            this.sn = _data["sn"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.surnameCode = _data["surnameCode"];
            this.sysUserName = _data["sysUserName"];
            this.sysUserName2 = _data["sysUserName2"];
            this.sysUserNameFull = _data["sysUserNameFull"];
            this.sysUserId = _data["sysUserId"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureCourseView {
        data = typeof data === 'object' ? data : {};
        let result = new CureCourseView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["content"] = this.content;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["timeOff"] = this.timeOff ? this.timeOff.toISOString() : <any>undefined;
        data["hasDown"] = this.hasDown;
        data["hasCureCourse"] = this.hasCureCourse;
        data["patientId"] = this.patientId;
        data["cureCourseId"] = this.cureCourseId;
        data["sn"] = this.sn;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["surnameCode"] = this.surnameCode;
        data["sysUserName"] = this.sysUserName;
        data["sysUserName2"] = this.sysUserName2;
        data["sysUserNameFull"] = this.sysUserNameFull;
        data["sysUserId"] = this.sysUserId;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 透后病程记录 */
export interface ICureCourseView {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 病程记录内容 */
    content: string;
    /** 备注 */
    remark?: string | undefined;
    /** id */
    id?: string | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 是否已经下机 */
    hasDown?: boolean;
    /** 是否已经透后病程记录 */
    hasCureCourse?: boolean;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 标识 */
    cureCourseId?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 记录人员名称 */
    sysUserName?: string | undefined;
    /** 记录人员别名 */
    sysUserName2?: string | undefined;
    /** 记录人员全名 */
    sysUserNameFull?: string | undefined;
    /** [记录人员标识](#用户信息) */
    sysUserId?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureCourseViewResult implements ICureCourseViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureCourseView[] | undefined;

    constructor(data?: ICureCourseViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureCourseView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureCourseViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureCourseViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureCourseViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureCourseView[] | undefined;
}

/** Reponse */
export class CureCourseViewResultEntry implements ICureCourseViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureCourseView;

    constructor(data?: ICureCourseViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureCourseView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureCourseViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureCourseViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureCourseViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureCourseView;
}

/** 口服用药添加频次 */
export class CureDaCustomView implements ICureDaCustomView {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` */
    unit?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 自备药0,1 */
    owned!: number;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 执行日期 */
    execDate!: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 基本单位（用于组合规格） `DIC.SYS.UNIT` */
    unitBase?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel?: string | undefined;
    /** 一级单位（用于组合规格） `DIC.SYS.UNIT` */
    unitLevel1?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立医生标识 */
    doctorId?: string | undefined;
    /** 开立医生姓名 */
    doctorName?: string | undefined;
    /** 核对护士标识 */
    checkNurseId?: string | undefined;
    /** 核对护士姓名 */
    checkNurseName?: string | undefined;
    /** 执行护士标识 */
    nurseId?: string | undefined;
    /** 执行护士姓名 */
    nurseName?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 核对时间 */
    checkTime?: dayjs.Dayjs | undefined;
    /** 执行时间 */
    execTime?: dayjs.Dayjs | undefined;
    /** 执行状态 `DIC.DIALYSIS.DA.STATUS` *待核对,已核对(待执行),已撤销,待调整,已执行* */
    status?: string | undefined;
    /** 长期医嘱标识 *医嘱来源* */
    patientDaLongtermId?: string | undefined;
    /** 临时医嘱标识 *医嘱来源* */
    patientDaTemporaryId?: string | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 区域 */
    deptDialysisAreaId?: string | undefined;
    /** 区域排序 */
    deptDialysisSequence?: number | undefined;
    /** 区域名称 */
    deptDialysisAreaName?: string | undefined;
    /** 床号 */
    bedNumber?: string | undefined;
    /** 床位序号 */
    bedSequence?: number | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    patientAge?: string | undefined;
    patientGender?: string | undefined;
    patientDept?: string | undefined;
    patientInNo?: string | undefined;
    patientBed?: string | undefined;
    hospName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 患者拼音首字母 */
    pinYinCode?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 医嘱类型 */
    cureDaTypeName?: string | undefined;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 分组 */
    group?: string | undefined;
    /** 项目分类标识 */
    roomItemTypeId?: string | undefined;
    /** 数量单位名称 */
    unitName?: string | undefined;
    /** 单次用量单位名称 */
    singleUnitName?: string | undefined;
    /** 用法名称 */
    usageName?: string | undefined;
    /** 执行状态名称 */
    statusName?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 是否允许核对(未核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能核对)(用户权限未判断) */
    allowCheck?: boolean;
    /** 是否允许编辑(未核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能核对)(用户权限未判断) */
    allowModify?: boolean;
    /** 是否允许执行(已核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能执行)(用户权限未判断) */
    allowExec?: boolean;
    /** 是否允许撤销(未执行未撤销的医嘱，才能撤销)(用户权限未判断) */
    allowRevocation?: boolean;
    /** 撤销人 */
    revocationer?: string | undefined;
    /** 撤销时间 */
    revocationTime?: dayjs.Dayjs | undefined;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 来源标签 */
    source?: string | undefined;
    /** 药品库存 */
    inventoryCount?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 床位标识 */
    deptDialysisBedId?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    execNurseName?: string | undefined;
    execNurseTime?: string | undefined;
    openTimeHH?: string | undefined;
    openTimeDate?: string | undefined;
    /** 频次 */
    interval?: string | undefined;
    /** 频次 `DIC.DA.INTERVAL` */
    intervalName?: string | undefined;

    constructor(data?: ICureDaCustomView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.type = _data["type"];
            this.content = _data["content"];
            this.name = _data["name"];
            this.roomItemListId = _data["roomItemListId"];
            this.usage = _data["usage"];
            this.dosage = _data["dosage"];
            this.unit = _data["unit"];
            this.singleDosage = _data["singleDosage"];
            this.singleUnit = _data["singleUnit"];
            this.orally = _data["orally"];
            this.owned = _data["owned"];
            this.doctorCreateTime = _data["doctorCreateTime"] ? dayjs(_data["doctorCreateTime"].toString()) : <any>undefined;
            this.execDate = _data["execDate"] ? dayjs(_data["execDate"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.unitBase = _data["unitBase"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.unitLevel1 = _data["unitLevel1"];
            this.groupId = _data["groupId"];
            this.doctorId = _data["doctorId"];
            this.doctorName = _data["doctorName"];
            this.checkNurseId = _data["checkNurseId"];
            this.checkNurseName = _data["checkNurseName"];
            this.nurseId = _data["nurseId"];
            this.nurseName = _data["nurseName"];
            this.onNurseId = _data["onNurseId"];
            this.onNurseName = _data["onNurseName"];
            this.checkTime = _data["checkTime"] ? dayjs(_data["checkTime"].toString()) : <any>undefined;
            this.execTime = _data["execTime"] ? dayjs(_data["execTime"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.patientDaLongtermId = _data["patientDaLongtermId"];
            this.patientDaTemporaryId = _data["patientDaTemporaryId"];
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.deptDialysisAreaId = _data["deptDialysisAreaId"];
            this.deptDialysisSequence = _data["deptDialysisSequence"];
            this.deptDialysisAreaName = _data["deptDialysisAreaName"];
            this.bedNumber = _data["bedNumber"];
            this.bedSequence = _data["bedSequence"];
            this.patientName = _data["patientName"];
            this.patientAge = _data["patientAge"];
            this.patientGender = _data["patientGender"];
            this.patientDept = _data["patientDept"];
            this.patientInNo = _data["patientInNo"];
            this.patientBed = _data["patientBed"];
            this.hospName = _data["hospName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.surnameCode = _data["surnameCode"];
            this.pinYinCode = _data["pinYinCode"];
            this.idNumber = _data["idNumber"];
            this.idType = _data["idType"];
            this.cureDaTypeName = _data["cureDaTypeName"];
            this.cureDaContent = _data["cureDaContent"];
            this.group = _data["group"];
            this.roomItemTypeId = _data["roomItemTypeId"];
            this.unitName = _data["unitName"];
            this.singleUnitName = _data["singleUnitName"];
            this.usageName = _data["usageName"];
            this.statusName = _data["statusName"];
            this.specLabel = _data["specLabel"];
            this.nameGoods = _data["nameGoods"];
            if (Array.isArray(_data["unitList"])) {
                this.unitList = [] as any;
                for (let item of _data["unitList"])
                    this.unitList!.push(LabelModel.fromJS(item));
            }
            this.allowCheck = _data["allowCheck"];
            this.allowModify = _data["allowModify"];
            this.allowExec = _data["allowExec"];
            this.allowRevocation = _data["allowRevocation"];
            this.revocationer = _data["revocationer"];
            this.revocationTime = _data["revocationTime"] ? dayjs(_data["revocationTime"].toString()) : <any>undefined;
            this.typeName = _data["typeName"];
            this.source = _data["source"];
            this.inventoryCount = _data["inventoryCount"];
            this.id = _data["id"];
            this.deptDialysisBedId = _data["deptDialysisBedId"];
            this.patientId = _data["patientId"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.execNurseName = _data["execNurseName"];
            this.execNurseTime = _data["execNurseTime"];
            this.openTimeHH = _data["openTimeHH"];
            this.openTimeDate = _data["openTimeDate"];
            this.interval = _data["interval"];
            this.intervalName = _data["intervalName"];
        }
    }

    static fromJS(data: any): CureDaCustomView {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaCustomView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["type"] = this.type;
        data["content"] = this.content;
        data["name"] = this.name;
        data["roomItemListId"] = this.roomItemListId;
        data["usage"] = this.usage;
        data["dosage"] = this.dosage;
        data["unit"] = this.unit;
        data["singleDosage"] = this.singleDosage;
        data["singleUnit"] = this.singleUnit;
        data["orally"] = this.orally;
        data["owned"] = this.owned;
        data["doctorCreateTime"] = this.doctorCreateTime ? this.doctorCreateTime.toISOString() : <any>undefined;
        data["execDate"] = this.execDate ? this.execDate.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        data["unitBase"] = this.unitBase;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["unitLevel1"] = this.unitLevel1;
        data["groupId"] = this.groupId;
        data["doctorId"] = this.doctorId;
        data["doctorName"] = this.doctorName;
        data["checkNurseId"] = this.checkNurseId;
        data["checkNurseName"] = this.checkNurseName;
        data["nurseId"] = this.nurseId;
        data["nurseName"] = this.nurseName;
        data["onNurseId"] = this.onNurseId;
        data["onNurseName"] = this.onNurseName;
        data["checkTime"] = this.checkTime ? this.checkTime.toISOString() : <any>undefined;
        data["execTime"] = this.execTime ? this.execTime.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["patientDaLongtermId"] = this.patientDaLongtermId;
        data["patientDaTemporaryId"] = this.patientDaTemporaryId;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["deptDialysisAreaId"] = this.deptDialysisAreaId;
        data["deptDialysisSequence"] = this.deptDialysisSequence;
        data["deptDialysisAreaName"] = this.deptDialysisAreaName;
        data["bedNumber"] = this.bedNumber;
        data["bedSequence"] = this.bedSequence;
        data["patientName"] = this.patientName;
        data["patientAge"] = this.patientAge;
        data["patientGender"] = this.patientGender;
        data["patientDept"] = this.patientDept;
        data["patientInNo"] = this.patientInNo;
        data["patientBed"] = this.patientBed;
        data["hospName"] = this.hospName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["surnameCode"] = this.surnameCode;
        data["pinYinCode"] = this.pinYinCode;
        data["idNumber"] = this.idNumber;
        data["idType"] = this.idType;
        data["cureDaTypeName"] = this.cureDaTypeName;
        data["cureDaContent"] = this.cureDaContent;
        data["group"] = this.group;
        data["roomItemTypeId"] = this.roomItemTypeId;
        data["unitName"] = this.unitName;
        data["singleUnitName"] = this.singleUnitName;
        data["usageName"] = this.usageName;
        data["statusName"] = this.statusName;
        data["specLabel"] = this.specLabel;
        data["nameGoods"] = this.nameGoods;
        if (Array.isArray(this.unitList)) {
            data["unitList"] = [];
            for (let item of this.unitList)
                data["unitList"].push(item.toJSON());
        }
        data["allowCheck"] = this.allowCheck;
        data["allowModify"] = this.allowModify;
        data["allowExec"] = this.allowExec;
        data["allowRevocation"] = this.allowRevocation;
        data["revocationer"] = this.revocationer;
        data["revocationTime"] = this.revocationTime ? this.revocationTime.toISOString() : <any>undefined;
        data["typeName"] = this.typeName;
        data["source"] = this.source;
        data["inventoryCount"] = this.inventoryCount;
        data["id"] = this.id;
        data["deptDialysisBedId"] = this.deptDialysisBedId;
        data["patientId"] = this.patientId;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["execNurseName"] = this.execNurseName;
        data["execNurseTime"] = this.execNurseTime;
        data["openTimeHH"] = this.openTimeHH;
        data["openTimeDate"] = this.openTimeDate;
        data["interval"] = this.interval;
        data["intervalName"] = this.intervalName;
        return data;
    }
}

/** 口服用药添加频次 */
export interface ICureDaCustomView {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` */
    unit?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 自备药0,1 */
    owned: number;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 执行日期 */
    execDate: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 基本单位（用于组合规格） `DIC.SYS.UNIT` */
    unitBase?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel?: string | undefined;
    /** 一级单位（用于组合规格） `DIC.SYS.UNIT` */
    unitLevel1?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立医生标识 */
    doctorId?: string | undefined;
    /** 开立医生姓名 */
    doctorName?: string | undefined;
    /** 核对护士标识 */
    checkNurseId?: string | undefined;
    /** 核对护士姓名 */
    checkNurseName?: string | undefined;
    /** 执行护士标识 */
    nurseId?: string | undefined;
    /** 执行护士姓名 */
    nurseName?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 核对时间 */
    checkTime?: dayjs.Dayjs | undefined;
    /** 执行时间 */
    execTime?: dayjs.Dayjs | undefined;
    /** 执行状态 `DIC.DIALYSIS.DA.STATUS` *待核对,已核对(待执行),已撤销,待调整,已执行* */
    status?: string | undefined;
    /** 长期医嘱标识 *医嘱来源* */
    patientDaLongtermId?: string | undefined;
    /** 临时医嘱标识 *医嘱来源* */
    patientDaTemporaryId?: string | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 区域 */
    deptDialysisAreaId?: string | undefined;
    /** 区域排序 */
    deptDialysisSequence?: number | undefined;
    /** 区域名称 */
    deptDialysisAreaName?: string | undefined;
    /** 床号 */
    bedNumber?: string | undefined;
    /** 床位序号 */
    bedSequence?: number | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    patientAge?: string | undefined;
    patientGender?: string | undefined;
    patientDept?: string | undefined;
    patientInNo?: string | undefined;
    patientBed?: string | undefined;
    hospName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 患者拼音首字母 */
    pinYinCode?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 医嘱类型 */
    cureDaTypeName?: string | undefined;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 分组 */
    group?: string | undefined;
    /** 项目分类标识 */
    roomItemTypeId?: string | undefined;
    /** 数量单位名称 */
    unitName?: string | undefined;
    /** 单次用量单位名称 */
    singleUnitName?: string | undefined;
    /** 用法名称 */
    usageName?: string | undefined;
    /** 执行状态名称 */
    statusName?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 是否允许核对(未核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能核对)(用户权限未判断) */
    allowCheck?: boolean;
    /** 是否允许编辑(未核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能核对)(用户权限未判断) */
    allowModify?: boolean;
    /** 是否允许执行(已核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能执行)(用户权限未判断) */
    allowExec?: boolean;
    /** 是否允许撤销(未执行未撤销的医嘱，才能撤销)(用户权限未判断) */
    allowRevocation?: boolean;
    /** 撤销人 */
    revocationer?: string | undefined;
    /** 撤销时间 */
    revocationTime?: dayjs.Dayjs | undefined;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 来源标签 */
    source?: string | undefined;
    /** 药品库存 */
    inventoryCount?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 床位标识 */
    deptDialysisBedId?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    execNurseName?: string | undefined;
    execNurseTime?: string | undefined;
    openTimeHH?: string | undefined;
    openTimeDate?: string | undefined;
    /** 频次 */
    interval?: string | undefined;
    /** 频次 `DIC.DA.INTERVAL` */
    intervalName?: string | undefined;
}

/** Reponse */
export class CureDaCustomViewResult implements ICureDaCustomViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDaCustomView[] | undefined;

    constructor(data?: ICureDaCustomViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureDaCustomView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureDaCustomViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaCustomViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureDaCustomViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDaCustomView[] | undefined;
}

export class CureDaEditModel implements ICureDaEditModel {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` */
    unit?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 自备药0,1 */
    owned!: number;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 执行日期 */
    execDate!: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureDaEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.type = _data["type"];
            this.content = _data["content"];
            this.name = _data["name"];
            this.roomItemListId = _data["roomItemListId"];
            this.usage = _data["usage"];
            this.dosage = _data["dosage"];
            this.unit = _data["unit"];
            this.singleDosage = _data["singleDosage"];
            this.singleUnit = _data["singleUnit"];
            this.orally = _data["orally"];
            this.owned = _data["owned"];
            this.doctorCreateTime = _data["doctorCreateTime"] ? dayjs(_data["doctorCreateTime"].toString()) : <any>undefined;
            this.patientId = _data["patientId"];
            this.execDate = _data["execDate"] ? dayjs(_data["execDate"].toString()) : <any>undefined;
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureDaEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["type"] = this.type;
        data["content"] = this.content;
        data["name"] = this.name;
        data["roomItemListId"] = this.roomItemListId;
        data["usage"] = this.usage;
        data["dosage"] = this.dosage;
        data["unit"] = this.unit;
        data["singleDosage"] = this.singleDosage;
        data["singleUnit"] = this.singleUnit;
        data["orally"] = this.orally;
        data["owned"] = this.owned;
        data["doctorCreateTime"] = this.doctorCreateTime ? this.doctorCreateTime.toISOString() : <any>undefined;
        data["patientId"] = this.patientId;
        data["execDate"] = this.execDate ? this.execDate.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        return data;
    }
}

export interface ICureDaEditModel {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` */
    unit?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 自备药0,1 */
    owned: number;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 执行日期 */
    execDate: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
}

export class CureDaLogEditModel implements ICureDaLogEditModel {
    /** 组合标识 */
    groupId!: string;
    /** 修改原因 */
    cause?: string | undefined;
    /** 修改内容 */
    content?: string | undefined;

    constructor(data?: ICureDaLogEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.groupId = _data["groupId"];
            this.cause = _data["cause"];
            this.content = _data["content"];
        }
    }

    static fromJS(data: any): CureDaLogEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaLogEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupId"] = this.groupId;
        data["cause"] = this.cause;
        data["content"] = this.content;
        return data;
    }
}

export interface ICureDaLogEditModel {
    /** 组合标识 */
    groupId: string;
    /** 修改原因 */
    cause?: string | undefined;
    /** 修改内容 */
    content?: string | undefined;
}

/** 透析医嘱 */
export class CureDaView implements ICureDaView {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` */
    unit?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 自备药0,1 */
    owned!: number;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 执行日期 */
    execDate!: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 基本单位（用于组合规格） `DIC.SYS.UNIT` */
    unitBase?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel?: string | undefined;
    /** 一级单位（用于组合规格） `DIC.SYS.UNIT` */
    unitLevel1?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立医生标识 */
    doctorId?: string | undefined;
    /** 开立医生姓名 */
    doctorName?: string | undefined;
    /** 核对护士标识 */
    checkNurseId?: string | undefined;
    /** 核对护士姓名 */
    checkNurseName?: string | undefined;
    /** 执行护士标识 */
    nurseId?: string | undefined;
    /** 执行护士姓名 */
    nurseName?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 核对时间 */
    checkTime?: dayjs.Dayjs | undefined;
    /** 执行时间 */
    execTime?: dayjs.Dayjs | undefined;
    /** 执行状态 `DIC.DIALYSIS.DA.STATUS` *待核对,已核对(待执行),已撤销,待调整,已执行* */
    status?: string | undefined;
    /** 长期医嘱标识 *医嘱来源* */
    patientDaLongtermId?: string | undefined;
    /** 临时医嘱标识 *医嘱来源* */
    patientDaTemporaryId?: string | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 区域 */
    deptDialysisAreaId?: string | undefined;
    /** 区域排序 */
    deptDialysisSequence?: number | undefined;
    /** 区域名称 */
    deptDialysisAreaName?: string | undefined;
    /** 床号 */
    bedNumber?: string | undefined;
    /** 床位序号 */
    bedSequence?: number | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    patientAge?: string | undefined;
    patientGender?: string | undefined;
    patientDept?: string | undefined;
    patientInNo?: string | undefined;
    patientBed?: string | undefined;
    hospName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 患者拼音首字母 */
    pinYinCode?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 医嘱类型 */
    cureDaTypeName?: string | undefined;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 分组 */
    group?: string | undefined;
    /** 项目分类标识 */
    roomItemTypeId?: string | undefined;
    /** 数量单位名称 */
    unitName?: string | undefined;
    /** 单次用量单位名称 */
    singleUnitName?: string | undefined;
    /** 用法名称 */
    usageName?: string | undefined;
    /** 执行状态名称 */
    statusName?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 是否允许核对(未核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能核对)(用户权限未判断) */
    allowCheck?: boolean;
    /** 是否允许编辑(未核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能核对)(用户权限未判断) */
    allowModify?: boolean;
    /** 是否允许执行(已核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能执行)(用户权限未判断) */
    allowExec?: boolean;
    /** 是否允许撤销(未执行未撤销的医嘱，才能撤销)(用户权限未判断) */
    allowRevocation?: boolean;
    /** 撤销人 */
    revocationer?: string | undefined;
    /** 撤销时间 */
    revocationTime?: dayjs.Dayjs | undefined;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 来源标签 */
    source?: string | undefined;
    /** 药品库存 */
    inventoryCount?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 床位标识 */
    deptDialysisBedId?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    execNurseName?: string | undefined;
    execNurseTime?: string | undefined;
    openTimeHH?: string | undefined;
    openTimeDate?: string | undefined;

    constructor(data?: ICureDaView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.type = _data["type"];
            this.content = _data["content"];
            this.name = _data["name"];
            this.roomItemListId = _data["roomItemListId"];
            this.usage = _data["usage"];
            this.dosage = _data["dosage"];
            this.unit = _data["unit"];
            this.singleDosage = _data["singleDosage"];
            this.singleUnit = _data["singleUnit"];
            this.orally = _data["orally"];
            this.owned = _data["owned"];
            this.doctorCreateTime = _data["doctorCreateTime"] ? dayjs(_data["doctorCreateTime"].toString()) : <any>undefined;
            this.execDate = _data["execDate"] ? dayjs(_data["execDate"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.unitBase = _data["unitBase"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.unitLevel1 = _data["unitLevel1"];
            this.groupId = _data["groupId"];
            this.doctorId = _data["doctorId"];
            this.doctorName = _data["doctorName"];
            this.checkNurseId = _data["checkNurseId"];
            this.checkNurseName = _data["checkNurseName"];
            this.nurseId = _data["nurseId"];
            this.nurseName = _data["nurseName"];
            this.onNurseId = _data["onNurseId"];
            this.onNurseName = _data["onNurseName"];
            this.checkTime = _data["checkTime"] ? dayjs(_data["checkTime"].toString()) : <any>undefined;
            this.execTime = _data["execTime"] ? dayjs(_data["execTime"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.patientDaLongtermId = _data["patientDaLongtermId"];
            this.patientDaTemporaryId = _data["patientDaTemporaryId"];
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.deptDialysisAreaId = _data["deptDialysisAreaId"];
            this.deptDialysisSequence = _data["deptDialysisSequence"];
            this.deptDialysisAreaName = _data["deptDialysisAreaName"];
            this.bedNumber = _data["bedNumber"];
            this.bedSequence = _data["bedSequence"];
            this.patientName = _data["patientName"];
            this.patientAge = _data["patientAge"];
            this.patientGender = _data["patientGender"];
            this.patientDept = _data["patientDept"];
            this.patientInNo = _data["patientInNo"];
            this.patientBed = _data["patientBed"];
            this.hospName = _data["hospName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.surnameCode = _data["surnameCode"];
            this.pinYinCode = _data["pinYinCode"];
            this.idNumber = _data["idNumber"];
            this.idType = _data["idType"];
            this.cureDaTypeName = _data["cureDaTypeName"];
            this.cureDaContent = _data["cureDaContent"];
            this.group = _data["group"];
            this.roomItemTypeId = _data["roomItemTypeId"];
            this.unitName = _data["unitName"];
            this.singleUnitName = _data["singleUnitName"];
            this.usageName = _data["usageName"];
            this.statusName = _data["statusName"];
            this.specLabel = _data["specLabel"];
            this.nameGoods = _data["nameGoods"];
            if (Array.isArray(_data["unitList"])) {
                this.unitList = [] as any;
                for (let item of _data["unitList"])
                    this.unitList!.push(LabelModel.fromJS(item));
            }
            this.allowCheck = _data["allowCheck"];
            this.allowModify = _data["allowModify"];
            this.allowExec = _data["allowExec"];
            this.allowRevocation = _data["allowRevocation"];
            this.revocationer = _data["revocationer"];
            this.revocationTime = _data["revocationTime"] ? dayjs(_data["revocationTime"].toString()) : <any>undefined;
            this.typeName = _data["typeName"];
            this.source = _data["source"];
            this.inventoryCount = _data["inventoryCount"];
            this.id = _data["id"];
            this.deptDialysisBedId = _data["deptDialysisBedId"];
            this.patientId = _data["patientId"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.execNurseName = _data["execNurseName"];
            this.execNurseTime = _data["execNurseTime"];
            this.openTimeHH = _data["openTimeHH"];
            this.openTimeDate = _data["openTimeDate"];
        }
    }

    static fromJS(data: any): CureDaView {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["type"] = this.type;
        data["content"] = this.content;
        data["name"] = this.name;
        data["roomItemListId"] = this.roomItemListId;
        data["usage"] = this.usage;
        data["dosage"] = this.dosage;
        data["unit"] = this.unit;
        data["singleDosage"] = this.singleDosage;
        data["singleUnit"] = this.singleUnit;
        data["orally"] = this.orally;
        data["owned"] = this.owned;
        data["doctorCreateTime"] = this.doctorCreateTime ? this.doctorCreateTime.toISOString() : <any>undefined;
        data["execDate"] = this.execDate ? this.execDate.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        data["unitBase"] = this.unitBase;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["unitLevel1"] = this.unitLevel1;
        data["groupId"] = this.groupId;
        data["doctorId"] = this.doctorId;
        data["doctorName"] = this.doctorName;
        data["checkNurseId"] = this.checkNurseId;
        data["checkNurseName"] = this.checkNurseName;
        data["nurseId"] = this.nurseId;
        data["nurseName"] = this.nurseName;
        data["onNurseId"] = this.onNurseId;
        data["onNurseName"] = this.onNurseName;
        data["checkTime"] = this.checkTime ? this.checkTime.toISOString() : <any>undefined;
        data["execTime"] = this.execTime ? this.execTime.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["patientDaLongtermId"] = this.patientDaLongtermId;
        data["patientDaTemporaryId"] = this.patientDaTemporaryId;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["deptDialysisAreaId"] = this.deptDialysisAreaId;
        data["deptDialysisSequence"] = this.deptDialysisSequence;
        data["deptDialysisAreaName"] = this.deptDialysisAreaName;
        data["bedNumber"] = this.bedNumber;
        data["bedSequence"] = this.bedSequence;
        data["patientName"] = this.patientName;
        data["patientAge"] = this.patientAge;
        data["patientGender"] = this.patientGender;
        data["patientDept"] = this.patientDept;
        data["patientInNo"] = this.patientInNo;
        data["patientBed"] = this.patientBed;
        data["hospName"] = this.hospName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["surnameCode"] = this.surnameCode;
        data["pinYinCode"] = this.pinYinCode;
        data["idNumber"] = this.idNumber;
        data["idType"] = this.idType;
        data["cureDaTypeName"] = this.cureDaTypeName;
        data["cureDaContent"] = this.cureDaContent;
        data["group"] = this.group;
        data["roomItemTypeId"] = this.roomItemTypeId;
        data["unitName"] = this.unitName;
        data["singleUnitName"] = this.singleUnitName;
        data["usageName"] = this.usageName;
        data["statusName"] = this.statusName;
        data["specLabel"] = this.specLabel;
        data["nameGoods"] = this.nameGoods;
        if (Array.isArray(this.unitList)) {
            data["unitList"] = [];
            for (let item of this.unitList)
                data["unitList"].push(item.toJSON());
        }
        data["allowCheck"] = this.allowCheck;
        data["allowModify"] = this.allowModify;
        data["allowExec"] = this.allowExec;
        data["allowRevocation"] = this.allowRevocation;
        data["revocationer"] = this.revocationer;
        data["revocationTime"] = this.revocationTime ? this.revocationTime.toISOString() : <any>undefined;
        data["typeName"] = this.typeName;
        data["source"] = this.source;
        data["inventoryCount"] = this.inventoryCount;
        data["id"] = this.id;
        data["deptDialysisBedId"] = this.deptDialysisBedId;
        data["patientId"] = this.patientId;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["execNurseName"] = this.execNurseName;
        data["execNurseTime"] = this.execNurseTime;
        data["openTimeHH"] = this.openTimeHH;
        data["openTimeDate"] = this.openTimeDate;
        return data;
    }
}

/** 透析医嘱 */
export interface ICureDaView {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` */
    unit?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 自备药0,1 */
    owned: number;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 执行日期 */
    execDate: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 基本单位（用于组合规格） `DIC.SYS.UNIT` */
    unitBase?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel?: string | undefined;
    /** 一级单位（用于组合规格） `DIC.SYS.UNIT` */
    unitLevel1?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立医生标识 */
    doctorId?: string | undefined;
    /** 开立医生姓名 */
    doctorName?: string | undefined;
    /** 核对护士标识 */
    checkNurseId?: string | undefined;
    /** 核对护士姓名 */
    checkNurseName?: string | undefined;
    /** 执行护士标识 */
    nurseId?: string | undefined;
    /** 执行护士姓名 */
    nurseName?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 核对时间 */
    checkTime?: dayjs.Dayjs | undefined;
    /** 执行时间 */
    execTime?: dayjs.Dayjs | undefined;
    /** 执行状态 `DIC.DIALYSIS.DA.STATUS` *待核对,已核对(待执行),已撤销,待调整,已执行* */
    status?: string | undefined;
    /** 长期医嘱标识 *医嘱来源* */
    patientDaLongtermId?: string | undefined;
    /** 临时医嘱标识 *医嘱来源* */
    patientDaTemporaryId?: string | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 区域 */
    deptDialysisAreaId?: string | undefined;
    /** 区域排序 */
    deptDialysisSequence?: number | undefined;
    /** 区域名称 */
    deptDialysisAreaName?: string | undefined;
    /** 床号 */
    bedNumber?: string | undefined;
    /** 床位序号 */
    bedSequence?: number | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    patientAge?: string | undefined;
    patientGender?: string | undefined;
    patientDept?: string | undefined;
    patientInNo?: string | undefined;
    patientBed?: string | undefined;
    hospName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 患者拼音首字母 */
    pinYinCode?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 医嘱类型 */
    cureDaTypeName?: string | undefined;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 分组 */
    group?: string | undefined;
    /** 项目分类标识 */
    roomItemTypeId?: string | undefined;
    /** 数量单位名称 */
    unitName?: string | undefined;
    /** 单次用量单位名称 */
    singleUnitName?: string | undefined;
    /** 用法名称 */
    usageName?: string | undefined;
    /** 执行状态名称 */
    statusName?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 是否允许核对(未核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能核对)(用户权限未判断) */
    allowCheck?: boolean;
    /** 是否允许编辑(未核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能核对)(用户权限未判断) */
    allowModify?: boolean;
    /** 是否允许执行(已核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能执行)(用户权限未判断) */
    allowExec?: boolean;
    /** 是否允许撤销(未执行未撤销的医嘱，才能撤销)(用户权限未判断) */
    allowRevocation?: boolean;
    /** 撤销人 */
    revocationer?: string | undefined;
    /** 撤销时间 */
    revocationTime?: dayjs.Dayjs | undefined;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 来源标签 */
    source?: string | undefined;
    /** 药品库存 */
    inventoryCount?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 床位标识 */
    deptDialysisBedId?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    execNurseName?: string | undefined;
    execNurseTime?: string | undefined;
    openTimeHH?: string | undefined;
    openTimeDate?: string | undefined;
}

/** Reponse */
export class CureDaViewResult implements ICureDaViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDaView[] | undefined;

    constructor(data?: ICureDaViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureDaView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureDaViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureDaViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDaView[] | undefined;
}

/** Reponse */
export class CureDaViewResultEntry implements ICureDaViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureDaView;

    constructor(data?: ICureDaViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureDaView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureDaViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureDaViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureDaView;
}

export class CureFieldValueView implements ICureFieldValueView {
    /** 透析记录单 */
    cureRecordId?: string | undefined;
    /** 字段名 */
    fieldKey?: string | undefined;
    /** 字段值 */
    fieldValue?: string | undefined;
    /** 字段类型 */
    dataType?: string | undefined;
    /** 单位 */
    unit?: string | undefined;

    constructor(data?: ICureFieldValueView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.fieldKey = _data["fieldKey"];
            this.fieldValue = _data["fieldValue"];
            this.dataType = _data["dataType"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): CureFieldValueView {
        data = typeof data === 'object' ? data : {};
        let result = new CureFieldValueView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["fieldKey"] = this.fieldKey;
        data["fieldValue"] = this.fieldValue;
        data["dataType"] = this.dataType;
        data["unit"] = this.unit;
        return data;
    }
}

export interface ICureFieldValueView {
    /** 透析记录单 */
    cureRecordId?: string | undefined;
    /** 字段名 */
    fieldKey?: string | undefined;
    /** 字段值 */
    fieldValue?: string | undefined;
    /** 字段类型 */
    dataType?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
}

/** 透中事件 */
export class CureInfoPrint implements ICureInfoPrint {
    recordId?: string | undefined;

    constructor(data?: ICureInfoPrint) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.recordId = _data["recordId"];
        }
    }

    static fromJS(data: any): CureInfoPrint {
        data = typeof data === 'object' ? data : {};
        let result = new CureInfoPrint();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["recordId"] = this.recordId;
        return data;
    }
}

/** 透中事件 */
export interface ICureInfoPrint {
    recordId?: string | undefined;
}

/** 药品依从性 */
export class CureMiddleDrugInclueView implements ICureMiddleDrugInclueView {
    /** 日期 */
    date?: string | undefined;
    /** 是否已使用  0：1 */
    isUsed?: number;

    constructor(data?: ICureMiddleDrugInclueView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.isUsed = _data["isUsed"];
        }
    }

    static fromJS(data: any): CureMiddleDrugInclueView {
        data = typeof data === 'object' ? data : {};
        let result = new CureMiddleDrugInclueView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["isUsed"] = this.isUsed;
        return data;
    }
}

/** 药品依从性 */
export interface ICureMiddleDrugInclueView {
    /** 日期 */
    date?: string | undefined;
    /** 是否已使用  0：1 */
    isUsed?: number;
}

/** Reponse */
export class CureMiddleDrugInclueViewResult implements ICureMiddleDrugInclueViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureMiddleDrugInclueView[] | undefined;

    constructor(data?: ICureMiddleDrugInclueViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureMiddleDrugInclueView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureMiddleDrugInclueViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureMiddleDrugInclueViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureMiddleDrugInclueViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureMiddleDrugInclueView[] | undefined;
}

/** 透析记录 */
export class CureRecord implements ICureRecord {
    /** 标识 */
    id?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 透析机标识 */
    dialysisMachineId?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineType?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineTypeLabel?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel?: string | undefined;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet?: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路) */
    patientVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientVascularAccessType?: string | undefined;
    /** [血管通路](患者血管通路) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessType?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换方式 */
    rfmLabel?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 治疗流程状态 `DIC.DIALYSIS.STATUS` *已签到,上机准备,治疗中,已下机,已结束* */
    status?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前体重方式 */
    beforeWeightModeLabel?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 净脱水量 *ml Ultrafiltration Complete* */
    ufc?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后体重方式 */
    afterWeightModeLabel?: string | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 称重脱水量 *ml* */
    ufvWeight?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢* */
    beforeBpPosition?: string | undefined;
    /** 透前血压测量位置 */
    beforeBpPositionLabel?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透后血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢* */
    afterBpPosition?: string | undefined;
    /** 透后血压测量位置 */
    afterBpPositionLabel?: string | undefined;
    /** 透后收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 透后舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 透后脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 透前体重时间 */
    timeBeforeWeight?: dayjs.Dayjs | undefined;
    /** 透前血压时间 */
    timeBeforeBp?: dayjs.Dayjs | undefined;
    /** 医生制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 方案是否制定0,1 */
    enact?: number | undefined;
    /** 护士确认方案时间 */
    timeCheckNurse?: dayjs.Dayjs | undefined;
    /** 方案是否通过0,1 */
    check?: number | undefined;
    /** 透前评估时间 */
    timeAssementBefore?: dayjs.Dayjs | undefined;
    /** 穿刺时间 */
    timeOn?: dayjs.Dayjs | undefined;
    /** 交叉核对时间 */
    timeVerify?: dayjs.Dayjs | undefined;
    /** 首次监测时间 */
    timeFirstMonitor?: dayjs.Dayjs | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 消毒时间 */
    timeDisinfect?: dayjs.Dayjs | undefined;
    /** 透后评估时间 */
    timeAssementAfter?: dayjs.Dayjs | undefined;
    /** 透后体重时间 */
    timeAfterWeight?: dayjs.Dayjs | undefined;
    /** 透后血压时间 */
    timeAfterBp?: dayjs.Dayjs | undefined;
    /** 透后小结时间 */
    timeAfterSummary?: dayjs.Dayjs | undefined;
    /** 透析评估时间 */
    timeAssement?: dayjs.Dayjs | undefined;
    /** 透析评估医护标识 */
    assementUserId?: string | undefined;
    /** 透析评估医护姓名 */
    assementUserName?: string | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 制定方案医生标识 */
    enactDoctorId?: string | undefined;
    /** 制定方案医生姓名 */
    enactDoctorName?: string | undefined;
    /** 确认方案护士标识 */
    checkNurseId?: string | undefined;
    /** 确认方案护士姓名 */
    checkNurseName?: string | undefined;
    /** 透前评估护士标识 */
    assementBeforeNurseId?: string | undefined;
    /** 透前评估护士姓名 */
    assementBeforeNurseName?: string | undefined;
    /** 穿刺方法 `DIC.DIALYSIS.PUNCTURE.METHOD` */
    punctureMethod?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 上机体温 */
    onTemp?: number | undefined;
    /** 穿刺护士标识 */
    punctureNurseId?: string | undefined;
    /** 穿刺护士姓名 */
    punctureNurseName?: string | undefined;
    /** 核对护士标识 */
    verifyNurseId?: string | undefined;
    /** 核对护士姓名 */
    verifyNurseName?: string | undefined;
    /** 核对是否通过0,1 */
    verify?: number | undefined;
    /** 下机护士标识 */
    offNurseId?: string | undefined;
    /** 下机护士姓名 */
    offNurseName?: string | undefined;
    /** 下机体温 */
    offTemp?: number | undefined;
    /** 下机呼吸 */
    offBreathe?: number | undefined;
    /** 透后评估护士标识 */
    assementAfterNurseId?: string | undefined;
    /** 透后评估护士姓名 */
    assementAfterNurseName?: string | undefined;
    /** 透后小结护士标识 */
    summaryAfterNurseId?: string | undefined;
    /** 透后小结护士姓名 */
    summaryAfterNurseName?: string | undefined;
    /** 是否提前下机0,1 *判断标准：提前半个小时以上下机* */
    offEarly?: number | undefined;
    /** 提前下机原因 *字典模板* `DIC.DIALYSIS.OFFEARLY.TMPL` */
    offEarlyCause?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    source?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 病区 *住院的* */
    ward?: string | undefined;
    /** 床位 *住院的* */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 下次透析建议 */
    suggestionNext?: string | undefined;
    /** 取消透析原因 *在交叉核对之前都可以取消透析* */
    cancelReason?: string | undefined;
    /** 管床护士标识 */
    bedNurseId?: string | undefined;
    /** 管床护士姓名 */
    bedNurseName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 是否单超0,1 */
    iuf?: number;
    /** 单超方式 */
    iufMode?: string | undefined;
    /** 单超时间 *h* */
    iufHour?: number | undefined;
    /** 单超量 */
    iufValue?: number | undefined;
    /** 单超开始时间 */
    iufStartTime?: dayjs.Dayjs | undefined;
    /** 患者处方id */
    patientPrescriptionId?: string | undefined;
    /** 置管护士标识 */
    placementNurseId?: string | undefined;
    /** 置管护士姓名 */
    placementNurseName?: string | undefined;
    /** 质控护士标识 */
    qualityNurseId?: string | undefined;
    /** 质控护士姓名 */
    qualityNurseName?: string | undefined;
    /** 是否补录 */
    isReplenish?: number;
    /** 是否归档 */
    isArchive?: number;
    patients?: Patient;
    patientVascularAccesss?: PatientVascularAccess;
    patientOtherVascularAccesss?: PatientVascularAccess;

    constructor(data?: ICureRecord) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sn = _data["sn"];
            this.patientId = _data["patientId"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisMachineId = _data["dialysisMachineId"];
            this.dialysisMachineType = _data["dialysisMachineType"];
            this.dialysisMachineTypeLabel = _data["dialysisMachineTypeLabel"];
            this.dialysisMachineModel = _data["dialysisMachineModel"];
            this.dialysisMachineNo = _data["dialysisMachineNo"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.dialysisDurationSet = _data["dialysisDurationSet"];
            this.bestWeight = _data["bestWeight"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.patientVascularAccessType = _data["patientVascularAccessType"];
            this.patientOtherVascularAccessId = _data["patientOtherVascularAccessId"];
            this.patientOtherVascularAccessType = _data["patientOtherVascularAccessType"];
            this.rfm = _data["rfm"];
            this.rfmLabel = _data["rfmLabel"];
            this.rfr = _data["rfr"];
            this.rfv = _data["rfv"];
            this.status = _data["status"];
            this.beforeWeight = _data["beforeWeight"];
            this.beforeWeightMode = _data["beforeWeightMode"];
            this.beforeWeightModeLabel = _data["beforeWeightModeLabel"];
            this.deductionWeight = _data["deductionWeight"];
            this.ufg = _data["ufg"];
            this.ufc = _data["ufc"];
            this.afterWeight = _data["afterWeight"];
            this.afterWeightMode = _data["afterWeightMode"];
            this.afterWeightModeLabel = _data["afterWeightModeLabel"];
            this.ufv = _data["ufv"];
            this.ufvWeight = _data["ufvWeight"];
            this.beforeBpPosition = _data["beforeBpPosition"];
            this.beforeBpPositionLabel = _data["beforeBpPositionLabel"];
            this.beforeSbp = _data["beforeSbp"];
            this.beforeDbp = _data["beforeDbp"];
            this.beforePulse = _data["beforePulse"];
            this.afterBpPosition = _data["afterBpPosition"];
            this.afterBpPositionLabel = _data["afterBpPositionLabel"];
            this.afterSbp = _data["afterSbp"];
            this.afterDbp = _data["afterDbp"];
            this.afterPulse = _data["afterPulse"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeBeforeWeight = _data["timeBeforeWeight"] ? dayjs(_data["timeBeforeWeight"].toString()) : <any>undefined;
            this.timeBeforeBp = _data["timeBeforeBp"] ? dayjs(_data["timeBeforeBp"].toString()) : <any>undefined;
            this.timeEnactDoctor = _data["timeEnactDoctor"] ? dayjs(_data["timeEnactDoctor"].toString()) : <any>undefined;
            this.enact = _data["enact"];
            this.timeCheckNurse = _data["timeCheckNurse"] ? dayjs(_data["timeCheckNurse"].toString()) : <any>undefined;
            this.check = _data["check"];
            this.timeAssementBefore = _data["timeAssementBefore"] ? dayjs(_data["timeAssementBefore"].toString()) : <any>undefined;
            this.timeOn = _data["timeOn"] ? dayjs(_data["timeOn"].toString()) : <any>undefined;
            this.timeVerify = _data["timeVerify"] ? dayjs(_data["timeVerify"].toString()) : <any>undefined;
            this.timeFirstMonitor = _data["timeFirstMonitor"] ? dayjs(_data["timeFirstMonitor"].toString()) : <any>undefined;
            this.timeOff = _data["timeOff"] ? dayjs(_data["timeOff"].toString()) : <any>undefined;
            this.timeDisinfect = _data["timeDisinfect"] ? dayjs(_data["timeDisinfect"].toString()) : <any>undefined;
            this.timeAssementAfter = _data["timeAssementAfter"] ? dayjs(_data["timeAssementAfter"].toString()) : <any>undefined;
            this.timeAfterWeight = _data["timeAfterWeight"] ? dayjs(_data["timeAfterWeight"].toString()) : <any>undefined;
            this.timeAfterBp = _data["timeAfterBp"] ? dayjs(_data["timeAfterBp"].toString()) : <any>undefined;
            this.timeAfterSummary = _data["timeAfterSummary"] ? dayjs(_data["timeAfterSummary"].toString()) : <any>undefined;
            this.timeAssement = _data["timeAssement"] ? dayjs(_data["timeAssement"].toString()) : <any>undefined;
            this.assementUserId = _data["assementUserId"];
            this.assementUserName = _data["assementUserName"];
            this.dialysisDurationFact = _data["dialysisDurationFact"];
            this.enactDoctorId = _data["enactDoctorId"];
            this.enactDoctorName = _data["enactDoctorName"];
            this.checkNurseId = _data["checkNurseId"];
            this.checkNurseName = _data["checkNurseName"];
            this.assementBeforeNurseId = _data["assementBeforeNurseId"];
            this.assementBeforeNurseName = _data["assementBeforeNurseName"];
            this.punctureMethod = _data["punctureMethod"];
            this.onNurseId = _data["onNurseId"];
            this.onNurseName = _data["onNurseName"];
            this.onTemp = _data["onTemp"];
            this.punctureNurseId = _data["punctureNurseId"];
            this.punctureNurseName = _data["punctureNurseName"];
            this.verifyNurseId = _data["verifyNurseId"];
            this.verifyNurseName = _data["verifyNurseName"];
            this.verify = _data["verify"];
            this.offNurseId = _data["offNurseId"];
            this.offNurseName = _data["offNurseName"];
            this.offTemp = _data["offTemp"];
            this.offBreathe = _data["offBreathe"];
            this.assementAfterNurseId = _data["assementAfterNurseId"];
            this.assementAfterNurseName = _data["assementAfterNurseName"];
            this.summaryAfterNurseId = _data["summaryAfterNurseId"];
            this.summaryAfterNurseName = _data["summaryAfterNurseName"];
            this.offEarly = _data["offEarly"];
            this.offEarlyCause = _data["offEarlyCause"];
            this.age = _data["age"];
            this.source = _data["source"];
            this.sourceLabel = _data["sourceLabel"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.ward = _data["ward"];
            this.bed = _data["bed"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            this.suggestion = _data["suggestion"];
            this.suggestionNext = _data["suggestionNext"];
            this.cancelReason = _data["cancelReason"];
            this.bedNurseId = _data["bedNurseId"];
            this.bedNurseName = _data["bedNurseName"];
            this.remark = _data["remark"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.iuf = _data["iuf"];
            this.iufMode = _data["iufMode"];
            this.iufHour = _data["iufHour"];
            this.iufValue = _data["iufValue"];
            this.iufStartTime = _data["iufStartTime"] ? dayjs(_data["iufStartTime"].toString()) : <any>undefined;
            this.patientPrescriptionId = _data["patientPrescriptionId"];
            this.placementNurseId = _data["placementNurseId"];
            this.placementNurseName = _data["placementNurseName"];
            this.qualityNurseId = _data["qualityNurseId"];
            this.qualityNurseName = _data["qualityNurseName"];
            this.isReplenish = _data["isReplenish"];
            this.isArchive = _data["isArchive"];
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
            this.patientVascularAccesss = _data["patientVascularAccesss"] ? PatientVascularAccess.fromJS(_data["patientVascularAccesss"]) : <any>undefined;
            this.patientOtherVascularAccesss = _data["patientOtherVascularAccesss"] ? PatientVascularAccess.fromJS(_data["patientOtherVascularAccesss"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecord {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sn"] = this.sn;
        data["patientId"] = this.patientId;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisMachineId"] = this.dialysisMachineId;
        data["dialysisMachineType"] = this.dialysisMachineType;
        data["dialysisMachineTypeLabel"] = this.dialysisMachineTypeLabel;
        data["dialysisMachineModel"] = this.dialysisMachineModel;
        data["dialysisMachineNo"] = this.dialysisMachineNo;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["dialysisDurationSet"] = this.dialysisDurationSet;
        data["bestWeight"] = this.bestWeight;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["patientVascularAccessType"] = this.patientVascularAccessType;
        data["patientOtherVascularAccessId"] = this.patientOtherVascularAccessId;
        data["patientOtherVascularAccessType"] = this.patientOtherVascularAccessType;
        data["rfm"] = this.rfm;
        data["rfmLabel"] = this.rfmLabel;
        data["rfr"] = this.rfr;
        data["rfv"] = this.rfv;
        data["status"] = this.status;
        data["beforeWeight"] = this.beforeWeight;
        data["beforeWeightMode"] = this.beforeWeightMode;
        data["beforeWeightModeLabel"] = this.beforeWeightModeLabel;
        data["deductionWeight"] = this.deductionWeight;
        data["ufg"] = this.ufg;
        data["ufc"] = this.ufc;
        data["afterWeight"] = this.afterWeight;
        data["afterWeightMode"] = this.afterWeightMode;
        data["afterWeightModeLabel"] = this.afterWeightModeLabel;
        data["ufv"] = this.ufv;
        data["ufvWeight"] = this.ufvWeight;
        data["beforeBpPosition"] = this.beforeBpPosition;
        data["beforeBpPositionLabel"] = this.beforeBpPositionLabel;
        data["beforeSbp"] = this.beforeSbp;
        data["beforeDbp"] = this.beforeDbp;
        data["beforePulse"] = this.beforePulse;
        data["afterBpPosition"] = this.afterBpPosition;
        data["afterBpPositionLabel"] = this.afterBpPositionLabel;
        data["afterSbp"] = this.afterSbp;
        data["afterDbp"] = this.afterDbp;
        data["afterPulse"] = this.afterPulse;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toISOString() : <any>undefined;
        data["timeBeforeWeight"] = this.timeBeforeWeight ? this.timeBeforeWeight.toISOString() : <any>undefined;
        data["timeBeforeBp"] = this.timeBeforeBp ? this.timeBeforeBp.toISOString() : <any>undefined;
        data["timeEnactDoctor"] = this.timeEnactDoctor ? this.timeEnactDoctor.toISOString() : <any>undefined;
        data["enact"] = this.enact;
        data["timeCheckNurse"] = this.timeCheckNurse ? this.timeCheckNurse.toISOString() : <any>undefined;
        data["check"] = this.check;
        data["timeAssementBefore"] = this.timeAssementBefore ? this.timeAssementBefore.toISOString() : <any>undefined;
        data["timeOn"] = this.timeOn ? this.timeOn.toISOString() : <any>undefined;
        data["timeVerify"] = this.timeVerify ? this.timeVerify.toISOString() : <any>undefined;
        data["timeFirstMonitor"] = this.timeFirstMonitor ? this.timeFirstMonitor.toISOString() : <any>undefined;
        data["timeOff"] = this.timeOff ? this.timeOff.toISOString() : <any>undefined;
        data["timeDisinfect"] = this.timeDisinfect ? this.timeDisinfect.toISOString() : <any>undefined;
        data["timeAssementAfter"] = this.timeAssementAfter ? this.timeAssementAfter.toISOString() : <any>undefined;
        data["timeAfterWeight"] = this.timeAfterWeight ? this.timeAfterWeight.toISOString() : <any>undefined;
        data["timeAfterBp"] = this.timeAfterBp ? this.timeAfterBp.toISOString() : <any>undefined;
        data["timeAfterSummary"] = this.timeAfterSummary ? this.timeAfterSummary.toISOString() : <any>undefined;
        data["timeAssement"] = this.timeAssement ? this.timeAssement.toISOString() : <any>undefined;
        data["assementUserId"] = this.assementUserId;
        data["assementUserName"] = this.assementUserName;
        data["dialysisDurationFact"] = this.dialysisDurationFact;
        data["enactDoctorId"] = this.enactDoctorId;
        data["enactDoctorName"] = this.enactDoctorName;
        data["checkNurseId"] = this.checkNurseId;
        data["checkNurseName"] = this.checkNurseName;
        data["assementBeforeNurseId"] = this.assementBeforeNurseId;
        data["assementBeforeNurseName"] = this.assementBeforeNurseName;
        data["punctureMethod"] = this.punctureMethod;
        data["onNurseId"] = this.onNurseId;
        data["onNurseName"] = this.onNurseName;
        data["onTemp"] = this.onTemp;
        data["punctureNurseId"] = this.punctureNurseId;
        data["punctureNurseName"] = this.punctureNurseName;
        data["verifyNurseId"] = this.verifyNurseId;
        data["verifyNurseName"] = this.verifyNurseName;
        data["verify"] = this.verify;
        data["offNurseId"] = this.offNurseId;
        data["offNurseName"] = this.offNurseName;
        data["offTemp"] = this.offTemp;
        data["offBreathe"] = this.offBreathe;
        data["assementAfterNurseId"] = this.assementAfterNurseId;
        data["assementAfterNurseName"] = this.assementAfterNurseName;
        data["summaryAfterNurseId"] = this.summaryAfterNurseId;
        data["summaryAfterNurseName"] = this.summaryAfterNurseName;
        data["offEarly"] = this.offEarly;
        data["offEarlyCause"] = this.offEarlyCause;
        data["age"] = this.age;
        data["source"] = this.source;
        data["sourceLabel"] = this.sourceLabel;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["ward"] = this.ward;
        data["bed"] = this.bed;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        data["suggestion"] = this.suggestion;
        data["suggestionNext"] = this.suggestionNext;
        data["cancelReason"] = this.cancelReason;
        data["bedNurseId"] = this.bedNurseId;
        data["bedNurseName"] = this.bedNurseName;
        data["remark"] = this.remark;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["iuf"] = this.iuf;
        data["iufMode"] = this.iufMode;
        data["iufHour"] = this.iufHour;
        data["iufValue"] = this.iufValue;
        data["iufStartTime"] = this.iufStartTime ? this.iufStartTime.toISOString() : <any>undefined;
        data["patientPrescriptionId"] = this.patientPrescriptionId;
        data["placementNurseId"] = this.placementNurseId;
        data["placementNurseName"] = this.placementNurseName;
        data["qualityNurseId"] = this.qualityNurseId;
        data["qualityNurseName"] = this.qualityNurseName;
        data["isReplenish"] = this.isReplenish;
        data["isArchive"] = this.isArchive;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        data["patientVascularAccesss"] = this.patientVascularAccesss ? this.patientVascularAccesss.toJSON() : <any>undefined;
        data["patientOtherVascularAccesss"] = this.patientOtherVascularAccesss ? this.patientOtherVascularAccesss.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析记录 */
export interface ICureRecord {
    /** 标识 */
    id?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 透析机标识 */
    dialysisMachineId?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineType?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineTypeLabel?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel?: string | undefined;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet?: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路) */
    patientVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientVascularAccessType?: string | undefined;
    /** [血管通路](患者血管通路) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessType?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换方式 */
    rfmLabel?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 治疗流程状态 `DIC.DIALYSIS.STATUS` *已签到,上机准备,治疗中,已下机,已结束* */
    status?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前体重方式 */
    beforeWeightModeLabel?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 净脱水量 *ml Ultrafiltration Complete* */
    ufc?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后体重方式 */
    afterWeightModeLabel?: string | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 称重脱水量 *ml* */
    ufvWeight?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢* */
    beforeBpPosition?: string | undefined;
    /** 透前血压测量位置 */
    beforeBpPositionLabel?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透后血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢* */
    afterBpPosition?: string | undefined;
    /** 透后血压测量位置 */
    afterBpPositionLabel?: string | undefined;
    /** 透后收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 透后舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 透后脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 透前体重时间 */
    timeBeforeWeight?: dayjs.Dayjs | undefined;
    /** 透前血压时间 */
    timeBeforeBp?: dayjs.Dayjs | undefined;
    /** 医生制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 方案是否制定0,1 */
    enact?: number | undefined;
    /** 护士确认方案时间 */
    timeCheckNurse?: dayjs.Dayjs | undefined;
    /** 方案是否通过0,1 */
    check?: number | undefined;
    /** 透前评估时间 */
    timeAssementBefore?: dayjs.Dayjs | undefined;
    /** 穿刺时间 */
    timeOn?: dayjs.Dayjs | undefined;
    /** 交叉核对时间 */
    timeVerify?: dayjs.Dayjs | undefined;
    /** 首次监测时间 */
    timeFirstMonitor?: dayjs.Dayjs | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 消毒时间 */
    timeDisinfect?: dayjs.Dayjs | undefined;
    /** 透后评估时间 */
    timeAssementAfter?: dayjs.Dayjs | undefined;
    /** 透后体重时间 */
    timeAfterWeight?: dayjs.Dayjs | undefined;
    /** 透后血压时间 */
    timeAfterBp?: dayjs.Dayjs | undefined;
    /** 透后小结时间 */
    timeAfterSummary?: dayjs.Dayjs | undefined;
    /** 透析评估时间 */
    timeAssement?: dayjs.Dayjs | undefined;
    /** 透析评估医护标识 */
    assementUserId?: string | undefined;
    /** 透析评估医护姓名 */
    assementUserName?: string | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 制定方案医生标识 */
    enactDoctorId?: string | undefined;
    /** 制定方案医生姓名 */
    enactDoctorName?: string | undefined;
    /** 确认方案护士标识 */
    checkNurseId?: string | undefined;
    /** 确认方案护士姓名 */
    checkNurseName?: string | undefined;
    /** 透前评估护士标识 */
    assementBeforeNurseId?: string | undefined;
    /** 透前评估护士姓名 */
    assementBeforeNurseName?: string | undefined;
    /** 穿刺方法 `DIC.DIALYSIS.PUNCTURE.METHOD` */
    punctureMethod?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 上机体温 */
    onTemp?: number | undefined;
    /** 穿刺护士标识 */
    punctureNurseId?: string | undefined;
    /** 穿刺护士姓名 */
    punctureNurseName?: string | undefined;
    /** 核对护士标识 */
    verifyNurseId?: string | undefined;
    /** 核对护士姓名 */
    verifyNurseName?: string | undefined;
    /** 核对是否通过0,1 */
    verify?: number | undefined;
    /** 下机护士标识 */
    offNurseId?: string | undefined;
    /** 下机护士姓名 */
    offNurseName?: string | undefined;
    /** 下机体温 */
    offTemp?: number | undefined;
    /** 下机呼吸 */
    offBreathe?: number | undefined;
    /** 透后评估护士标识 */
    assementAfterNurseId?: string | undefined;
    /** 透后评估护士姓名 */
    assementAfterNurseName?: string | undefined;
    /** 透后小结护士标识 */
    summaryAfterNurseId?: string | undefined;
    /** 透后小结护士姓名 */
    summaryAfterNurseName?: string | undefined;
    /** 是否提前下机0,1 *判断标准：提前半个小时以上下机* */
    offEarly?: number | undefined;
    /** 提前下机原因 *字典模板* `DIC.DIALYSIS.OFFEARLY.TMPL` */
    offEarlyCause?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    source?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 病区 *住院的* */
    ward?: string | undefined;
    /** 床位 *住院的* */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 下次透析建议 */
    suggestionNext?: string | undefined;
    /** 取消透析原因 *在交叉核对之前都可以取消透析* */
    cancelReason?: string | undefined;
    /** 管床护士标识 */
    bedNurseId?: string | undefined;
    /** 管床护士姓名 */
    bedNurseName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 是否单超0,1 */
    iuf?: number;
    /** 单超方式 */
    iufMode?: string | undefined;
    /** 单超时间 *h* */
    iufHour?: number | undefined;
    /** 单超量 */
    iufValue?: number | undefined;
    /** 单超开始时间 */
    iufStartTime?: dayjs.Dayjs | undefined;
    /** 患者处方id */
    patientPrescriptionId?: string | undefined;
    /** 置管护士标识 */
    placementNurseId?: string | undefined;
    /** 置管护士姓名 */
    placementNurseName?: string | undefined;
    /** 质控护士标识 */
    qualityNurseId?: string | undefined;
    /** 质控护士姓名 */
    qualityNurseName?: string | undefined;
    /** 是否补录 */
    isReplenish?: number;
    /** 是否归档 */
    isArchive?: number;
    patients?: Patient;
    patientVascularAccesss?: PatientVascularAccess;
    patientOtherVascularAccesss?: PatientVascularAccess;
}

/** 患者透析抗凝剂药品 */
export class CureRecordAnticoagulantDrugEditModel implements ICureRecordAnticoagulantDrugEditModel {
    /** [透析记录标识](#透析记录) */
    cureRecordId!: string;
    /** 剂量 */
    usage?: number | undefined;
    /** 剂量单位 */
    unitUsage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** [耗材标识](#项目清单) */
    roomItemListId!: string;
    /** 药品名称 */
    roomItemListName?: string | undefined;
    /** 药品简称 */
    roomItemListShortName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 售价 */
    sellingPrice?: number;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;

    constructor(data?: ICureRecordAnticoagulantDrugEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.usage = _data["usage"];
            this.unitUsage = _data["unitUsage"];
            this.dosage = _data["dosage"];
            this.remark = _data["remark"];
            this.roomItemListId = _data["roomItemListId"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemListShortName = _data["roomItemListShortName"];
            this.roomItemListNameGoods = _data["roomItemListNameGoods"];
            this.sellingPrice = _data["sellingPrice"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitBase = _data["unitBase"];
            this.spec = _data["spec"];
            this.manufacturer = _data["manufacturer"];
        }
    }

    static fromJS(data: any): CureRecordAnticoagulantDrugEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordAnticoagulantDrugEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["usage"] = this.usage;
        data["unitUsage"] = this.unitUsage;
        data["dosage"] = this.dosage;
        data["remark"] = this.remark;
        data["roomItemListId"] = this.roomItemListId;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemListShortName"] = this.roomItemListShortName;
        data["roomItemListNameGoods"] = this.roomItemListNameGoods;
        data["sellingPrice"] = this.sellingPrice;
        data["unitLevel1"] = this.unitLevel1;
        data["unitBase"] = this.unitBase;
        data["spec"] = this.spec;
        data["manufacturer"] = this.manufacturer;
        return data;
    }
}

/** 患者透析抗凝剂药品 */
export interface ICureRecordAnticoagulantDrugEditModel {
    /** [透析记录标识](#透析记录) */
    cureRecordId: string;
    /** 剂量 */
    usage?: number | undefined;
    /** 剂量单位 */
    unitUsage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** [耗材标识](#项目清单) */
    roomItemListId: string;
    /** 药品名称 */
    roomItemListName?: string | undefined;
    /** 药品简称 */
    roomItemListShortName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 售价 */
    sellingPrice?: number;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
}

/** 患者透析抗凝剂药品 */
export class CureRecordAnticoagulantDrugView implements ICureRecordAnticoagulantDrugView {
    /** [透析记录标识](#透析记录) */
    cureRecordId!: string;
    /** 剂量 */
    usage?: number | undefined;
    /** 剂量单位 */
    unitUsage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** [耗材标识](#项目清单) */
    roomItemListId!: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 药品名称 */
    roomItemListName?: string | undefined;
    /** 药品简称 */
    roomItemListShortName?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;

    constructor(data?: ICureRecordAnticoagulantDrugView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.usage = _data["usage"];
            this.unitUsage = _data["unitUsage"];
            this.dosage = _data["dosage"];
            this.remark = _data["remark"];
            this.roomItemListId = _data["roomItemListId"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemListShortName = _data["roomItemListShortName"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitBase = _data["unitBase"];
            this.spec = _data["spec"];
            this.manufacturer = _data["manufacturer"];
        }
    }

    static fromJS(data: any): CureRecordAnticoagulantDrugView {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordAnticoagulantDrugView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["usage"] = this.usage;
        data["unitUsage"] = this.unitUsage;
        data["dosage"] = this.dosage;
        data["remark"] = this.remark;
        data["roomItemListId"] = this.roomItemListId;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemListShortName"] = this.roomItemListShortName;
        data["unitLevel1"] = this.unitLevel1;
        data["unitBase"] = this.unitBase;
        data["spec"] = this.spec;
        data["manufacturer"] = this.manufacturer;
        return data;
    }
}

/** 患者透析抗凝剂药品 */
export interface ICureRecordAnticoagulantDrugView {
    /** [透析记录标识](#透析记录) */
    cureRecordId: string;
    /** 剂量 */
    usage?: number | undefined;
    /** 剂量单位 */
    unitUsage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** [耗材标识](#项目清单) */
    roomItemListId: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 药品名称 */
    roomItemListName?: string | undefined;
    /** 药品简称 */
    roomItemListShortName?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
}

/** 确认处方记录 */
export class CureRecordCheckEditModel implements ICureRecordCheckEditModel {
    /** 透析方式 */
    causeMode?: string | undefined;
    /** 生命体征 */
    causeVitlsigns?: string | undefined;
    /** 抗凝剂 */
    causeAnticoagulant?: string | undefined;
    /** 透析液 */
    causeDialysate?: string | undefined;
    /** 耗材 */
    causeConsumable?: string | undefined;
    /** 医嘱 */
    causeDa?: string | undefined;
    /** 其它 */
    causeOther?: string | undefined;

    constructor(data?: ICureRecordCheckEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.causeMode = _data["causeMode"];
            this.causeVitlsigns = _data["causeVitlsigns"];
            this.causeAnticoagulant = _data["causeAnticoagulant"];
            this.causeDialysate = _data["causeDialysate"];
            this.causeConsumable = _data["causeConsumable"];
            this.causeDa = _data["causeDa"];
            this.causeOther = _data["causeOther"];
        }
    }

    static fromJS(data: any): CureRecordCheckEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordCheckEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["causeMode"] = this.causeMode;
        data["causeVitlsigns"] = this.causeVitlsigns;
        data["causeAnticoagulant"] = this.causeAnticoagulant;
        data["causeDialysate"] = this.causeDialysate;
        data["causeConsumable"] = this.causeConsumable;
        data["causeDa"] = this.causeDa;
        data["causeOther"] = this.causeOther;
        return data;
    }
}

/** 确认处方记录 */
export interface ICureRecordCheckEditModel {
    /** 透析方式 */
    causeMode?: string | undefined;
    /** 生命体征 */
    causeVitlsigns?: string | undefined;
    /** 抗凝剂 */
    causeAnticoagulant?: string | undefined;
    /** 透析液 */
    causeDialysate?: string | undefined;
    /** 耗材 */
    causeConsumable?: string | undefined;
    /** 医嘱 */
    causeDa?: string | undefined;
    /** 其它 */
    causeOther?: string | undefined;
}

/** 透析耗材 */
export class CureRecordConsumableItemView implements ICureRecordConsumableItemView {
    /** [透析耗材标识](#透析耗材) */
    cureRecordConsumableId?: string | undefined;
    /** [入库记录标识](#入库记录) */
    roomRecordInId?: string | undefined;
    /** 耗材数量 */
    batchCount!: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 批号剩余数量 */
    surplusCount?: number;
    /** 批号有效期 */
    expiryDate?: dayjs.Dayjs | undefined;

    constructor(data?: ICureRecordConsumableItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordConsumableId = _data["cureRecordConsumableId"];
            this.roomRecordInId = _data["roomRecordInId"];
            this.batchCount = _data["batchCount"];
            this.batchNo = _data["batchNo"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.surplusCount = _data["surplusCount"];
            this.expiryDate = _data["expiryDate"] ? dayjs(_data["expiryDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordConsumableItemView {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordConsumableItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordConsumableId"] = this.cureRecordConsumableId;
        data["roomRecordInId"] = this.roomRecordInId;
        data["batchCount"] = this.batchCount;
        data["batchNo"] = this.batchNo;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["surplusCount"] = this.surplusCount;
        data["expiryDate"] = this.expiryDate ? this.expiryDate.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析耗材 */
export interface ICureRecordConsumableItemView {
    /** [透析耗材标识](#透析耗材) */
    cureRecordConsumableId?: string | undefined;
    /** [入库记录标识](#入库记录) */
    roomRecordInId?: string | undefined;
    /** 耗材数量 */
    batchCount: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 批号剩余数量 */
    surplusCount?: number;
    /** 批号有效期 */
    expiryDate?: dayjs.Dayjs | undefined;
}

/** 透析耗材核对 */
export class CureRecordConsumableVerifyView implements ICureRecordConsumableVerifyView {
    /** 透析记录标识 */
    cureRecordId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 班次排序 */
    shiftSort?: number;
    /** 透析区间 */
    deptDialysisAreaName?: string | undefined;
    /** 透析区间排序 */
    deptDialysisAreaSort?: number;
    /** 床号 */
    bedNumber?: string | undefined;
    /** 床号顺序 */
    bedNumberSort?: number;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 透析器 */
    txq?: string | undefined;
    /** 血滤器 */
    xlq?: string | undefined;
    /** 灌流器 */
    glq?: string | undefined;
    /** 内瘘针 */
    nlz?: string | undefined;
    /** 置换液管路 */
    zhygl?: string | undefined;
    /** 血路管 */
    xlg?: string | undefined;
    /** 核对时间 */
    verifyTime?: dayjs.Dayjs | undefined;
    /** 核对护士 */
    verifyNurse?: string | undefined;
    /** 是否已核对 *0-未核对，显示核对按钮；1-已核对，显示核对时间和核对护士* */
    verify?: number;

    constructor(data?: ICureRecordConsumableVerifyView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftName = _data["shiftName"];
            this.shiftSort = _data["shiftSort"];
            this.deptDialysisAreaName = _data["deptDialysisAreaName"];
            this.deptDialysisAreaSort = _data["deptDialysisAreaSort"];
            this.bedNumber = _data["bedNumber"];
            this.bedNumberSort = _data["bedNumberSort"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.patientName = _data["patientName"];
            this.txq = _data["txq"];
            this.xlq = _data["xlq"];
            this.glq = _data["glq"];
            this.nlz = _data["nlz"];
            this.zhygl = _data["zhygl"];
            this.xlg = _data["xlg"];
            this.verifyTime = _data["verifyTime"] ? dayjs(_data["verifyTime"].toString()) : <any>undefined;
            this.verifyNurse = _data["verifyNurse"];
            this.verify = _data["verify"];
        }
    }

    static fromJS(data: any): CureRecordConsumableVerifyView {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordConsumableVerifyView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftName"] = this.shiftName;
        data["shiftSort"] = this.shiftSort;
        data["deptDialysisAreaName"] = this.deptDialysisAreaName;
        data["deptDialysisAreaSort"] = this.deptDialysisAreaSort;
        data["bedNumber"] = this.bedNumber;
        data["bedNumberSort"] = this.bedNumberSort;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toISOString() : <any>undefined;
        data["patientName"] = this.patientName;
        data["txq"] = this.txq;
        data["xlq"] = this.xlq;
        data["glq"] = this.glq;
        data["nlz"] = this.nlz;
        data["zhygl"] = this.zhygl;
        data["xlg"] = this.xlg;
        data["verifyTime"] = this.verifyTime ? this.verifyTime.toISOString() : <any>undefined;
        data["verifyNurse"] = this.verifyNurse;
        data["verify"] = this.verify;
        return data;
    }
}

/** 透析耗材核对 */
export interface ICureRecordConsumableVerifyView {
    /** 透析记录标识 */
    cureRecordId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 班次排序 */
    shiftSort?: number;
    /** 透析区间 */
    deptDialysisAreaName?: string | undefined;
    /** 透析区间排序 */
    deptDialysisAreaSort?: number;
    /** 床号 */
    bedNumber?: string | undefined;
    /** 床号顺序 */
    bedNumberSort?: number;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 透析器 */
    txq?: string | undefined;
    /** 血滤器 */
    xlq?: string | undefined;
    /** 灌流器 */
    glq?: string | undefined;
    /** 内瘘针 */
    nlz?: string | undefined;
    /** 置换液管路 */
    zhygl?: string | undefined;
    /** 血路管 */
    xlg?: string | undefined;
    /** 核对时间 */
    verifyTime?: dayjs.Dayjs | undefined;
    /** 核对护士 */
    verifyNurse?: string | undefined;
    /** 是否已核对 *0-未核对，显示核对按钮；1-已核对，显示核对时间和核对护士* */
    verify?: number;
}

/** Reponse */
export class CureRecordConsumableVerifyViewResult implements ICureRecordConsumableVerifyViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordConsumableVerifyView[] | undefined;

    constructor(data?: ICureRecordConsumableVerifyViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureRecordConsumableVerifyView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordConsumableVerifyViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordConsumableVerifyViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureRecordConsumableVerifyViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordConsumableVerifyView[] | undefined;
}

export class CureRecordEditModel implements ICureRecordEditModel {
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 设定透析时长 *分钟* */
    dialysisDurationSet?: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路Id) */
    patientVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    patientVascularAccessType?: string | undefined;
    /** [血管通路](患者血管通路Id) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessName?: string | undefined;
    patientOtherVascularAccessType?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换液速度 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *ml Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 预脱 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 实际脱水量 *ml* */
    ufv?: number | undefined;
    /** 净脱水量 *ml Ultrafiltration Complete* */
    ufc?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    beforeBpPosition?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透前体温 *℃* */
    onTemp?: number | undefined;
    /** 透后血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    afterBpPosition?: string | undefined;
    /** 透前收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 上机时间 */
    timeOn?: dayjs.Dayjs | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 穿刺方法 `DIC.DIALYSIS.PUNCTURE.METHOD` */
    punctureMethod?: string | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 穿刺护士ID */
    punctureNurseId?: string | undefined;
    /** 穿刺护士名称 */
    punctureNurseName?: string | undefined;
    /** 下机体温 */
    offTemp?: number | undefined;
    /** 下机呼吸 */
    offBreathe?: number | undefined;
    /** 制定方案医生标识 */
    enactDoctorId?: string | undefined;
    /** 制定方案医生姓名 */
    enactDoctorName?: string | undefined;
    /** 确认方案护士标识 */
    checkNurseId?: string | undefined;
    /** 确认方案护士姓名 */
    checkNurseName?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 交叉核对护士标识 */
    verifyNurseId?: string | undefined;
    /** 交叉核对护士姓名 */
    verifyNurseName?: string | undefined;
    /** 下机护士标识 */
    offNurseId?: string | undefined;
    /** 下机护士姓名 */
    offNurseName?: string | undefined;
    /** 医生制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 交叉核对时间 */
    timeVerify?: dayjs.Dayjs | undefined;
    /** 透后小结护士标识 */
    summaryAfterNurseId?: string | undefined;
    /** 透后小结护士姓名 */
    summaryAfterNurseName?: string | undefined;
    /** 管床护士标识 */
    bedNurseId?: string | undefined;
    /** 管床护士姓名 */
    bedNurseName?: string | undefined;
    /** 下次透析建议 */
    suggestionNext?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 来源 */
    source?: string | undefined;
    /** 床号名称 */
    bedName?: string | undefined;
    /** 透析区间 */
    bedId?: string | undefined;
    /** 床位id */
    dialysisAreaId?: string | undefined;
    /** 透析区间 */
    dialysisAreaName?: string | undefined;
    /** 置管护士标识 */
    placementNurseId?: string | undefined;
    /** 置管护士姓名 */
    placementNurseName?: string | undefined;
    /** 质控护士标识 */
    qualityNurseId?: string | undefined;
    /** 质控护士姓名 */
    qualityNurseName?: string | undefined;
    /** 透析液名称 */
    dialysateName?: string | undefined;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    antiTmplType?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1?: string | undefined;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *普通肝素/阿加曲班* */
    first?: number | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它 */
    anticoagulantOther?: string | undefined;
    /** 无肝素原因 */
    nonReason?: string | undefined;
    /** 费用组套 */
    cureCostGroups?: RoomRecordItem[] | undefined;
    /** 抗凝剂药品 */
    cureRecordAnticoagulantDrugs?: CureRecordAnticoagulantDrugEditModel[] | undefined;
    content?: string | undefined;
    cureCourseContent?: string | undefined;
    /** 开始时间 */
    beginDate?: dayjs.Dayjs | undefined;
    /** 停止时间 */
    endDate?: dayjs.Dayjs | undefined;
    /** 消毒时长 *分钟* */
    disinfectTime?: number | undefined;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** [机内消毒人](用户信息) */
    internalOperatorId?: string | undefined;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** [机外消毒人](用户信息) */
    externalOperatorId?: string | undefined;
    /** 床单元清洁 */
    bedUnitCleaning?: string | undefined;
    /** 过滤网更换 */
    filterScreenChanging?: string | undefined;
    /** 消毒温度 *℃* */
    disinfectTemp?: string | undefined;
    /** 消毒说明 */
    disinfectInstructions?: string | undefined;
    /** 是否单超0,1 */
    iuf?: number;
    /** 单超方式 */
    iufMode?: string | undefined;
    /** 单超时间 */
    iufHour?: number | undefined;
    /** 单超量 */
    iufValue?: number | undefined;
    /** 单超开始时间 */
    iufStartTime?: dayjs.Dayjs | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 自定义字段 */
    cureRecordFieldItems?: CureRecordFieldItemEditModel[] | undefined;

    constructor(data?: ICureRecordEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisDurationSet = _data["dialysisDurationSet"];
            this.bestWeight = _data["bestWeight"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.patientVascularAccessType = _data["patientVascularAccessType"];
            this.patientOtherVascularAccessId = _data["patientOtherVascularAccessId"];
            this.patientOtherVascularAccessName = _data["patientOtherVascularAccessName"];
            this.patientOtherVascularAccessType = _data["patientOtherVascularAccessType"];
            this.rfm = _data["rfm"];
            this.rfr = _data["rfr"];
            this.rfv = _data["rfv"];
            this.beforeWeight = _data["beforeWeight"];
            this.beforeWeightMode = _data["beforeWeightMode"];
            this.deductionWeight = _data["deductionWeight"];
            this.ufg = _data["ufg"];
            this.afterWeight = _data["afterWeight"];
            this.afterWeightMode = _data["afterWeightMode"];
            this.ufv = _data["ufv"];
            this.ufc = _data["ufc"];
            this.beforeBpPosition = _data["beforeBpPosition"];
            this.beforeSbp = _data["beforeSbp"];
            this.beforeDbp = _data["beforeDbp"];
            this.beforePulse = _data["beforePulse"];
            this.onTemp = _data["onTemp"];
            this.afterBpPosition = _data["afterBpPosition"];
            this.afterSbp = _data["afterSbp"];
            this.afterDbp = _data["afterDbp"];
            this.afterPulse = _data["afterPulse"];
            this.timeOn = _data["timeOn"] ? dayjs(_data["timeOn"].toString()) : <any>undefined;
            this.timeOff = _data["timeOff"] ? dayjs(_data["timeOff"].toString()) : <any>undefined;
            this.dialysisDurationFact = _data["dialysisDurationFact"];
            this.punctureMethod = _data["punctureMethod"];
            this.suggestion = _data["suggestion"];
            this.punctureNurseId = _data["punctureNurseId"];
            this.punctureNurseName = _data["punctureNurseName"];
            this.offTemp = _data["offTemp"];
            this.offBreathe = _data["offBreathe"];
            this.enactDoctorId = _data["enactDoctorId"];
            this.enactDoctorName = _data["enactDoctorName"];
            this.checkNurseId = _data["checkNurseId"];
            this.checkNurseName = _data["checkNurseName"];
            this.onNurseId = _data["onNurseId"];
            this.onNurseName = _data["onNurseName"];
            this.verifyNurseId = _data["verifyNurseId"];
            this.verifyNurseName = _data["verifyNurseName"];
            this.offNurseId = _data["offNurseId"];
            this.offNurseName = _data["offNurseName"];
            this.timeEnactDoctor = _data["timeEnactDoctor"] ? dayjs(_data["timeEnactDoctor"].toString()) : <any>undefined;
            this.timeVerify = _data["timeVerify"] ? dayjs(_data["timeVerify"].toString()) : <any>undefined;
            this.summaryAfterNurseId = _data["summaryAfterNurseId"];
            this.summaryAfterNurseName = _data["summaryAfterNurseName"];
            this.bedNurseId = _data["bedNurseId"];
            this.bedNurseName = _data["bedNurseName"];
            this.suggestionNext = _data["suggestionNext"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.source = _data["source"];
            this.bedName = _data["bedName"];
            this.bedId = _data["bedId"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.placementNurseId = _data["placementNurseId"];
            this.placementNurseName = _data["placementNurseName"];
            this.qualityNurseId = _data["qualityNurseId"];
            this.qualityNurseName = _data["qualityNurseName"];
            this.dialysateName = _data["dialysateName"];
            this.flowRate = _data["flowRate"];
            this.temp = _data["temp"];
            this.cond = _data["cond"];
            this.k = _data["k"];
            this.ca = _data["ca"];
            this.na = _data["na"];
            this.hco = _data["hco"];
            this.glucose = _data["glucose"];
            this.anticoagulantName = _data["anticoagulantName"];
            this.antiTmplType = _data["antiTmplType"];
            this.classify1 = _data["classify1"];
            this.classify2 = _data["classify2"];
            this.first = _data["first"];
            this.concentration = _data["concentration"];
            this.firstUnit = _data["firstUnit"];
            this.appendRate = _data["appendRate"];
            this.appendRateUnit = _data["appendRateUnit"];
            this.appendTime = _data["appendTime"];
            this.append = _data["append"];
            this.appendUnit = _data["appendUnit"];
            this.total = _data["total"];
            this.totalUnit = _data["totalUnit"];
            this.anticoagulantOther = _data["anticoagulantOther"];
            this.nonReason = _data["nonReason"];
            if (Array.isArray(_data["cureCostGroups"])) {
                this.cureCostGroups = [] as any;
                for (let item of _data["cureCostGroups"])
                    this.cureCostGroups!.push(RoomRecordItem.fromJS(item));
            }
            if (Array.isArray(_data["cureRecordAnticoagulantDrugs"])) {
                this.cureRecordAnticoagulantDrugs = [] as any;
                for (let item of _data["cureRecordAnticoagulantDrugs"])
                    this.cureRecordAnticoagulantDrugs!.push(CureRecordAnticoagulantDrugEditModel.fromJS(item));
            }
            this.content = _data["content"];
            this.cureCourseContent = _data["cureCourseContent"];
            this.beginDate = _data["beginDate"] ? dayjs(_data["beginDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? dayjs(_data["endDate"].toString()) : <any>undefined;
            this.disinfectTime = _data["disinfectTime"];
            this.programInternal = _data["programInternal"];
            this.internalOperatorId = _data["internalOperatorId"];
            this.programExterior = _data["programExterior"];
            this.externalOperatorId = _data["externalOperatorId"];
            this.bedUnitCleaning = _data["bedUnitCleaning"];
            this.filterScreenChanging = _data["filterScreenChanging"];
            this.disinfectTemp = _data["disinfectTemp"];
            this.disinfectInstructions = _data["disinfectInstructions"];
            this.iuf = _data["iuf"];
            this.iufMode = _data["iufMode"];
            this.iufHour = _data["iufHour"];
            this.iufValue = _data["iufValue"];
            this.iufStartTime = _data["iufStartTime"] ? dayjs(_data["iufStartTime"].toString()) : <any>undefined;
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.age = _data["age"];
            if (Array.isArray(_data["cureRecordFieldItems"])) {
                this.cureRecordFieldItems = [] as any;
                for (let item of _data["cureRecordFieldItems"])
                    this.cureRecordFieldItems!.push(CureRecordFieldItemEditModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisDurationSet"] = this.dialysisDurationSet;
        data["bestWeight"] = this.bestWeight;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["patientVascularAccessType"] = this.patientVascularAccessType;
        data["patientOtherVascularAccessId"] = this.patientOtherVascularAccessId;
        data["patientOtherVascularAccessName"] = this.patientOtherVascularAccessName;
        data["patientOtherVascularAccessType"] = this.patientOtherVascularAccessType;
        data["rfm"] = this.rfm;
        data["rfr"] = this.rfr;
        data["rfv"] = this.rfv;
        data["beforeWeight"] = this.beforeWeight;
        data["beforeWeightMode"] = this.beforeWeightMode;
        data["deductionWeight"] = this.deductionWeight;
        data["ufg"] = this.ufg;
        data["afterWeight"] = this.afterWeight;
        data["afterWeightMode"] = this.afterWeightMode;
        data["ufv"] = this.ufv;
        data["ufc"] = this.ufc;
        data["beforeBpPosition"] = this.beforeBpPosition;
        data["beforeSbp"] = this.beforeSbp;
        data["beforeDbp"] = this.beforeDbp;
        data["beforePulse"] = this.beforePulse;
        data["onTemp"] = this.onTemp;
        data["afterBpPosition"] = this.afterBpPosition;
        data["afterSbp"] = this.afterSbp;
        data["afterDbp"] = this.afterDbp;
        data["afterPulse"] = this.afterPulse;
        data["timeOn"] = this.timeOn ? this.timeOn.toISOString() : <any>undefined;
        data["timeOff"] = this.timeOff ? this.timeOff.toISOString() : <any>undefined;
        data["dialysisDurationFact"] = this.dialysisDurationFact;
        data["punctureMethod"] = this.punctureMethod;
        data["suggestion"] = this.suggestion;
        data["punctureNurseId"] = this.punctureNurseId;
        data["punctureNurseName"] = this.punctureNurseName;
        data["offTemp"] = this.offTemp;
        data["offBreathe"] = this.offBreathe;
        data["enactDoctorId"] = this.enactDoctorId;
        data["enactDoctorName"] = this.enactDoctorName;
        data["checkNurseId"] = this.checkNurseId;
        data["checkNurseName"] = this.checkNurseName;
        data["onNurseId"] = this.onNurseId;
        data["onNurseName"] = this.onNurseName;
        data["verifyNurseId"] = this.verifyNurseId;
        data["verifyNurseName"] = this.verifyNurseName;
        data["offNurseId"] = this.offNurseId;
        data["offNurseName"] = this.offNurseName;
        data["timeEnactDoctor"] = this.timeEnactDoctor ? this.timeEnactDoctor.toISOString() : <any>undefined;
        data["timeVerify"] = this.timeVerify ? this.timeVerify.toISOString() : <any>undefined;
        data["summaryAfterNurseId"] = this.summaryAfterNurseId;
        data["summaryAfterNurseName"] = this.summaryAfterNurseName;
        data["bedNurseId"] = this.bedNurseId;
        data["bedNurseName"] = this.bedNurseName;
        data["suggestionNext"] = this.suggestionNext;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["source"] = this.source;
        data["bedName"] = this.bedName;
        data["bedId"] = this.bedId;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["placementNurseId"] = this.placementNurseId;
        data["placementNurseName"] = this.placementNurseName;
        data["qualityNurseId"] = this.qualityNurseId;
        data["qualityNurseName"] = this.qualityNurseName;
        data["dialysateName"] = this.dialysateName;
        data["flowRate"] = this.flowRate;
        data["temp"] = this.temp;
        data["cond"] = this.cond;
        data["k"] = this.k;
        data["ca"] = this.ca;
        data["na"] = this.na;
        data["hco"] = this.hco;
        data["glucose"] = this.glucose;
        data["anticoagulantName"] = this.anticoagulantName;
        data["antiTmplType"] = this.antiTmplType;
        data["classify1"] = this.classify1;
        data["classify2"] = this.classify2;
        data["first"] = this.first;
        data["concentration"] = this.concentration;
        data["firstUnit"] = this.firstUnit;
        data["appendRate"] = this.appendRate;
        data["appendRateUnit"] = this.appendRateUnit;
        data["appendTime"] = this.appendTime;
        data["append"] = this.append;
        data["appendUnit"] = this.appendUnit;
        data["total"] = this.total;
        data["totalUnit"] = this.totalUnit;
        data["anticoagulantOther"] = this.anticoagulantOther;
        data["nonReason"] = this.nonReason;
        if (Array.isArray(this.cureCostGroups)) {
            data["cureCostGroups"] = [];
            for (let item of this.cureCostGroups)
                data["cureCostGroups"].push(item.toJSON());
        }
        if (Array.isArray(this.cureRecordAnticoagulantDrugs)) {
            data["cureRecordAnticoagulantDrugs"] = [];
            for (let item of this.cureRecordAnticoagulantDrugs)
                data["cureRecordAnticoagulantDrugs"].push(item.toJSON());
        }
        data["content"] = this.content;
        data["cureCourseContent"] = this.cureCourseContent;
        data["beginDate"] = this.beginDate ? this.beginDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["disinfectTime"] = this.disinfectTime;
        data["programInternal"] = this.programInternal;
        data["internalOperatorId"] = this.internalOperatorId;
        data["programExterior"] = this.programExterior;
        data["externalOperatorId"] = this.externalOperatorId;
        data["bedUnitCleaning"] = this.bedUnitCleaning;
        data["filterScreenChanging"] = this.filterScreenChanging;
        data["disinfectTemp"] = this.disinfectTemp;
        data["disinfectInstructions"] = this.disinfectInstructions;
        data["iuf"] = this.iuf;
        data["iufMode"] = this.iufMode;
        data["iufHour"] = this.iufHour;
        data["iufValue"] = this.iufValue;
        data["iufStartTime"] = this.iufStartTime ? this.iufStartTime.toISOString() : <any>undefined;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toISOString() : <any>undefined;
        data["age"] = this.age;
        if (Array.isArray(this.cureRecordFieldItems)) {
            data["cureRecordFieldItems"] = [];
            for (let item of this.cureRecordFieldItems)
                data["cureRecordFieldItems"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICureRecordEditModel {
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 设定透析时长 *分钟* */
    dialysisDurationSet?: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路Id) */
    patientVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    patientVascularAccessType?: string | undefined;
    /** [血管通路](患者血管通路Id) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessName?: string | undefined;
    patientOtherVascularAccessType?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换液速度 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *ml Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 预脱 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 实际脱水量 *ml* */
    ufv?: number | undefined;
    /** 净脱水量 *ml Ultrafiltration Complete* */
    ufc?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    beforeBpPosition?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透前体温 *℃* */
    onTemp?: number | undefined;
    /** 透后血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    afterBpPosition?: string | undefined;
    /** 透前收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 上机时间 */
    timeOn?: dayjs.Dayjs | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 穿刺方法 `DIC.DIALYSIS.PUNCTURE.METHOD` */
    punctureMethod?: string | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 穿刺护士ID */
    punctureNurseId?: string | undefined;
    /** 穿刺护士名称 */
    punctureNurseName?: string | undefined;
    /** 下机体温 */
    offTemp?: number | undefined;
    /** 下机呼吸 */
    offBreathe?: number | undefined;
    /** 制定方案医生标识 */
    enactDoctorId?: string | undefined;
    /** 制定方案医生姓名 */
    enactDoctorName?: string | undefined;
    /** 确认方案护士标识 */
    checkNurseId?: string | undefined;
    /** 确认方案护士姓名 */
    checkNurseName?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 交叉核对护士标识 */
    verifyNurseId?: string | undefined;
    /** 交叉核对护士姓名 */
    verifyNurseName?: string | undefined;
    /** 下机护士标识 */
    offNurseId?: string | undefined;
    /** 下机护士姓名 */
    offNurseName?: string | undefined;
    /** 医生制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 交叉核对时间 */
    timeVerify?: dayjs.Dayjs | undefined;
    /** 透后小结护士标识 */
    summaryAfterNurseId?: string | undefined;
    /** 透后小结护士姓名 */
    summaryAfterNurseName?: string | undefined;
    /** 管床护士标识 */
    bedNurseId?: string | undefined;
    /** 管床护士姓名 */
    bedNurseName?: string | undefined;
    /** 下次透析建议 */
    suggestionNext?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 来源 */
    source?: string | undefined;
    /** 床号名称 */
    bedName?: string | undefined;
    /** 透析区间 */
    bedId?: string | undefined;
    /** 床位id */
    dialysisAreaId?: string | undefined;
    /** 透析区间 */
    dialysisAreaName?: string | undefined;
    /** 置管护士标识 */
    placementNurseId?: string | undefined;
    /** 置管护士姓名 */
    placementNurseName?: string | undefined;
    /** 质控护士标识 */
    qualityNurseId?: string | undefined;
    /** 质控护士姓名 */
    qualityNurseName?: string | undefined;
    /** 透析液名称 */
    dialysateName?: string | undefined;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    antiTmplType?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1?: string | undefined;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *普通肝素/阿加曲班* */
    first?: number | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它 */
    anticoagulantOther?: string | undefined;
    /** 无肝素原因 */
    nonReason?: string | undefined;
    /** 费用组套 */
    cureCostGroups?: RoomRecordItem[] | undefined;
    /** 抗凝剂药品 */
    cureRecordAnticoagulantDrugs?: CureRecordAnticoagulantDrugEditModel[] | undefined;
    content?: string | undefined;
    cureCourseContent?: string | undefined;
    /** 开始时间 */
    beginDate?: dayjs.Dayjs | undefined;
    /** 停止时间 */
    endDate?: dayjs.Dayjs | undefined;
    /** 消毒时长 *分钟* */
    disinfectTime?: number | undefined;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** [机内消毒人](用户信息) */
    internalOperatorId?: string | undefined;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** [机外消毒人](用户信息) */
    externalOperatorId?: string | undefined;
    /** 床单元清洁 */
    bedUnitCleaning?: string | undefined;
    /** 过滤网更换 */
    filterScreenChanging?: string | undefined;
    /** 消毒温度 *℃* */
    disinfectTemp?: string | undefined;
    /** 消毒说明 */
    disinfectInstructions?: string | undefined;
    /** 是否单超0,1 */
    iuf?: number;
    /** 单超方式 */
    iufMode?: string | undefined;
    /** 单超时间 */
    iufHour?: number | undefined;
    /** 单超量 */
    iufValue?: number | undefined;
    /** 单超开始时间 */
    iufStartTime?: dayjs.Dayjs | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 自定义字段 */
    cureRecordFieldItems?: CureRecordFieldItemEditModel[] | undefined;
}

/** 透析记录自定义字段 */
export class CureRecordFieldItemBase implements ICureRecordFieldItemBase {
    /** [透析记录标识](#透析记录) */
    cureRecordId!: string;
    /** 模块 */
    module!: string;
    /** 自定义字段名 */
    fieldKey!: string;
    /** 自定义字段值 */
    fieldValue?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 明细关联id */
    relevanceId?: string | undefined;

    constructor(data?: ICureRecordFieldItemBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.module = _data["module"];
            this.fieldKey = _data["fieldKey"];
            this.fieldValue = _data["fieldValue"];
            this.remark = _data["remark"];
            this.relevanceId = _data["relevanceId"];
        }
    }

    static fromJS(data: any): CureRecordFieldItemBase {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordFieldItemBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["module"] = this.module;
        data["fieldKey"] = this.fieldKey;
        data["fieldValue"] = this.fieldValue;
        data["remark"] = this.remark;
        data["relevanceId"] = this.relevanceId;
        return data;
    }
}

/** 透析记录自定义字段 */
export interface ICureRecordFieldItemBase {
    /** [透析记录标识](#透析记录) */
    cureRecordId: string;
    /** 模块 */
    module: string;
    /** 自定义字段名 */
    fieldKey: string;
    /** 自定义字段值 */
    fieldValue?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 明细关联id */
    relevanceId?: string | undefined;
}

/** 透析记录自定义字段 */
export class CureRecordFieldItemEditModel implements ICureRecordFieldItemEditModel {
    /** [透析记录标识](#透析记录) */
    cureRecordId!: string;
    /** 模块 */
    module!: string;
    /** 自定义字段名 */
    fieldKey!: string;
    /** 自定义字段值 */
    fieldValue?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 明细关联id */
    relevanceId?: string | undefined;

    constructor(data?: ICureRecordFieldItemEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.module = _data["module"];
            this.fieldKey = _data["fieldKey"];
            this.fieldValue = _data["fieldValue"];
            this.remark = _data["remark"];
            this.relevanceId = _data["relevanceId"];
        }
    }

    static fromJS(data: any): CureRecordFieldItemEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordFieldItemEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["module"] = this.module;
        data["fieldKey"] = this.fieldKey;
        data["fieldValue"] = this.fieldValue;
        data["remark"] = this.remark;
        data["relevanceId"] = this.relevanceId;
        return data;
    }
}

/** 透析记录自定义字段 */
export interface ICureRecordFieldItemEditModel {
    /** [透析记录标识](#透析记录) */
    cureRecordId: string;
    /** 模块 */
    module: string;
    /** 自定义字段名 */
    fieldKey: string;
    /** 自定义字段值 */
    fieldValue?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 明细关联id */
    relevanceId?: string | undefined;
}

/** 抗凝剂 */
export class CureRecordItemAnticoagulant implements ICureRecordItemAnticoagulant {
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** 抗凝剂简称 */
    anticoagulantShortName?: string | undefined;
    /** 抗凝剂模版类型 */
    antiTmplType?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1?: string | undefined;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *枸橼酸钠>浓度* */
    first?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它 */
    anticoagulantOther?: string | undefined;
    /** 大类名称 */
    classify1Label?: string | undefined;
    /** 小类名称 */
    classify2Label?: string | undefined;
    /** 首剂-单位名称 */
    firstUnitLabel?: string | undefined;
    /** 无抗凝剂原因 */
    nonReason?: string | undefined;

    constructor(data?: ICureRecordItemAnticoagulant) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.anticoagulantName = _data["anticoagulantName"];
            this.anticoagulantShortName = _data["anticoagulantShortName"];
            this.antiTmplType = _data["antiTmplType"];
            this.classify1 = _data["classify1"];
            this.classify2 = _data["classify2"];
            this.first = _data["first"];
            this.firstUnit = _data["firstUnit"];
            this.appendRate = _data["appendRate"];
            this.appendRateUnit = _data["appendRateUnit"];
            this.appendTime = _data["appendTime"];
            this.append = _data["append"];
            this.appendUnit = _data["appendUnit"];
            this.concentration = _data["concentration"];
            this.total = _data["total"];
            this.totalUnit = _data["totalUnit"];
            this.anticoagulantOther = _data["anticoagulantOther"];
            this.classify1Label = _data["classify1Label"];
            this.classify2Label = _data["classify2Label"];
            this.firstUnitLabel = _data["firstUnitLabel"];
            this.nonReason = _data["nonReason"];
        }
    }

    static fromJS(data: any): CureRecordItemAnticoagulant {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemAnticoagulant();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["anticoagulantName"] = this.anticoagulantName;
        data["anticoagulantShortName"] = this.anticoagulantShortName;
        data["antiTmplType"] = this.antiTmplType;
        data["classify1"] = this.classify1;
        data["classify2"] = this.classify2;
        data["first"] = this.first;
        data["firstUnit"] = this.firstUnit;
        data["appendRate"] = this.appendRate;
        data["appendRateUnit"] = this.appendRateUnit;
        data["appendTime"] = this.appendTime;
        data["append"] = this.append;
        data["appendUnit"] = this.appendUnit;
        data["concentration"] = this.concentration;
        data["total"] = this.total;
        data["totalUnit"] = this.totalUnit;
        data["anticoagulantOther"] = this.anticoagulantOther;
        data["classify1Label"] = this.classify1Label;
        data["classify2Label"] = this.classify2Label;
        data["firstUnitLabel"] = this.firstUnitLabel;
        data["nonReason"] = this.nonReason;
        return data;
    }
}

/** 抗凝剂 */
export interface ICureRecordItemAnticoagulant {
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** 抗凝剂简称 */
    anticoagulantShortName?: string | undefined;
    /** 抗凝剂模版类型 */
    antiTmplType?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1?: string | undefined;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *枸橼酸钠>浓度* */
    first?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它 */
    anticoagulantOther?: string | undefined;
    /** 大类名称 */
    classify1Label?: string | undefined;
    /** 小类名称 */
    classify2Label?: string | undefined;
    /** 首剂-单位名称 */
    firstUnitLabel?: string | undefined;
    /** 无抗凝剂原因 */
    nonReason?: string | undefined;
}

/** 透前评估 */
export class CureRecordItemAssement implements ICureRecordItemAssement {
    /** 表单结构 */
    data?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** 受支持的表单自定义数据 */
    values?: SysFormValueView[] | undefined;

    constructor(data?: ICureRecordItemAssement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"];
            this.dataValue = _data["dataValue"];
            if (Array.isArray(_data["values"])) {
                this.values = [] as any;
                for (let item of _data["values"])
                    this.values!.push(SysFormValueView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordItemAssement {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemAssement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data;
        data["dataValue"] = this.dataValue;
        if (Array.isArray(this.values)) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item.toJSON());
        }
        return data;
    }
}

/** 透前评估 */
export interface ICureRecordItemAssement {
    /** 表单结构 */
    data?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** 受支持的表单自定义数据 */
    values?: SysFormValueView[] | undefined;
}

/** 透中事件 */
export class CureRecordItemComplication implements ICureRecordItemComplication {
    /** 标识 */
    id?: string | undefined;
    /** 操作者标识 */
    operatorId?: string | undefined;
    /** 操作者姓名 */
    operatorName?: string | undefined;
    /** 发生时间 */
    occurredTime?: dayjs.Dayjs;
    /** 并发症名称 */
    name?: string | undefined;
    /** 处理 */
    dispose?: string | undefined;
    /** 原因 */
    cause?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 文件列表 */
    complicationFiles?: CureRecordItemComplicationFile[] | undefined;

    constructor(data?: ICureRecordItemComplication) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.operatorId = _data["operatorId"];
            this.operatorName = _data["operatorName"];
            this.occurredTime = _data["occurredTime"] ? dayjs(_data["occurredTime"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.dispose = _data["dispose"];
            this.cause = _data["cause"];
            this.remark = _data["remark"];
            if (Array.isArray(_data["complicationFiles"])) {
                this.complicationFiles = [] as any;
                for (let item of _data["complicationFiles"])
                    this.complicationFiles!.push(CureRecordItemComplicationFile.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordItemComplication {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemComplication();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["operatorId"] = this.operatorId;
        data["operatorName"] = this.operatorName;
        data["occurredTime"] = this.occurredTime ? this.occurredTime.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["dispose"] = this.dispose;
        data["cause"] = this.cause;
        data["remark"] = this.remark;
        if (Array.isArray(this.complicationFiles)) {
            data["complicationFiles"] = [];
            for (let item of this.complicationFiles)
                data["complicationFiles"].push(item.toJSON());
        }
        return data;
    }
}

/** 透中事件 */
export interface ICureRecordItemComplication {
    /** 标识 */
    id?: string | undefined;
    /** 操作者标识 */
    operatorId?: string | undefined;
    /** 操作者姓名 */
    operatorName?: string | undefined;
    /** 发生时间 */
    occurredTime?: dayjs.Dayjs;
    /** 并发症名称 */
    name?: string | undefined;
    /** 处理 */
    dispose?: string | undefined;
    /** 原因 */
    cause?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 文件列表 */
    complicationFiles?: CureRecordItemComplicationFile[] | undefined;
}

export class CureRecordItemComplicationFile implements ICureRecordItemComplicationFile {
    /** 文件标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 文件路径 */
    url?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;

    constructor(data?: ICureRecordItemComplicationFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.url = _data["url"];
            this.extension = _data["extension"];
            this.length = _data["length"];
        }
    }

    static fromJS(data: any): CureRecordItemComplicationFile {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemComplicationFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["url"] = this.url;
        data["extension"] = this.extension;
        data["length"] = this.length;
        return data;
    }
}

export interface ICureRecordItemComplicationFile {
    /** 文件标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 文件路径 */
    url?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
}

/** 耗材 */
export class CureRecordItemConsumable implements ICureRecordItemConsumable {
    /** 耗材标识-透析器 */
    roomItemListTXQId?: string | undefined;
    /** 耗材-透析器名称 */
    roomItemListTXQLabel?: string | undefined;
    /** 耗材-所有透析器名称 */
    roomItemListTXQLabels?: string | undefined;
    /** 耗材-透析器数量 */
    roomItemListTXQCount?: number | undefined;
    /** 透析器耗材条码 */
    roomItemListTXQDevBarCode?: string | undefined;
    /** 透析器耗材批号 */
    roomItemListTXQBatchNo?: string | undefined;
    /** 耗材标识-灌流器 */
    roomItemListGLQId?: string | undefined;
    /** 耗材-灌流器名称 */
    roomItemListGLQLabel?: string | undefined;
    /** 耗材-灌流器名称 */
    roomItemListGLQLabels?: string | undefined;
    /** 灌流器耗材条码 */
    roomItemListGLQDevBarCode?: string | undefined;
    /** 灌流器耗材批号 */
    roomItemListGLQBatchNo?: string | undefined;
    /** 耗材-灌流器数量 */
    roomItemListGLQCount?: number | undefined;
    /** 耗材标识-血滤器 */
    roomItemListXLQId?: string | undefined;
    /** 耗材-血滤器名称 */
    roomItemListXLQLabel?: string | undefined;
    /** 耗材-血滤器名称 */
    roomItemListXLQLabels?: string | undefined;
    /** 耗材-血滤器数量 */
    roomItemListXLQCount?: number | undefined;
    /** 血滤器耗材条码 */
    roomItemListXLQDevBarCode?: string | undefined;
    /** 血滤器耗材批号 */
    roomItemListXLQBatchNo?: string | undefined;
    /** 耗材标识-血路管 */
    roomItemListXLGId?: string | undefined;
    /** 耗材-血路管名称 */
    roomItemListXLGLabel?: string | undefined;
    /** 耗材-血路管名称 */
    roomItemListXLGLabels?: string | undefined;
    /** 耗材-血路管数量 */
    roomItemListXLGCount?: number | undefined;
    /** 血路管耗材条码 */
    roomItemListXLGDevBarCode?: string | undefined;
    /** 血路管耗材批号 */
    roomItemListXLGBatchNo?: string | undefined;
    /** 耗材标识-内瘘针 */
    roomItemListNLZId?: string | undefined;
    /** 耗材-内瘘针名称 */
    roomItemListNLZLabel?: string | undefined;
    /** 耗材-内瘘针名称 */
    roomItemListNLZLabels?: string | undefined;
    /** 耗材-内瘘针数量 */
    roomItemListNLZCount?: number | undefined;
    /** 内瘘针耗材条码 */
    roomItemListNLZDevBarCode?: string | undefined;
    /** 耗材标识-置换液管路 */
    roomItemListZHYGLId?: string | undefined;
    /** 耗材-置换液管路名称 */
    roomItemListZHYGLLabel?: string | undefined;
    /** 耗材-置换液管路名称 */
    roomItemListZHYGLLabels?: string | undefined;
    /** 耗材-置换液管路数量 */
    roomItemListZHYGLCount?: number | undefined;
    /** 置换液管路耗材条码 */
    roomItemListZHYGLDevBarCode?: string | undefined;
    /** 灌流连接管 */
    perfusionCatheter?: string | undefined;
    /** 灌流连接管 */
    perfusionCatheters?: string | undefined;
    /** 灌流连接管条码 */
    perfusionCatheterDevBarCode?: string | undefined;
    /** 血浆分离器 */
    plasmaSeparator?: string | undefined;
    /** 血浆分离器 */
    plasmaSeparators?: string | undefined;
    /** 血浆分离器条码 */
    plasmaSeparatorDevBarCode?: string | undefined;

    constructor(data?: ICureRecordItemConsumable) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListTXQId = _data["roomItemListTXQId"];
            this.roomItemListTXQLabel = _data["roomItemListTXQLabel"];
            this.roomItemListTXQLabels = _data["roomItemListTXQLabels"];
            this.roomItemListTXQCount = _data["roomItemListTXQCount"];
            this.roomItemListTXQDevBarCode = _data["roomItemListTXQDevBarCode"];
            this.roomItemListTXQBatchNo = _data["roomItemListTXQBatchNo"];
            this.roomItemListGLQId = _data["roomItemListGLQId"];
            this.roomItemListGLQLabel = _data["roomItemListGLQLabel"];
            this.roomItemListGLQLabels = _data["roomItemListGLQLabels"];
            this.roomItemListGLQDevBarCode = _data["roomItemListGLQDevBarCode"];
            this.roomItemListGLQBatchNo = _data["roomItemListGLQBatchNo"];
            this.roomItemListGLQCount = _data["roomItemListGLQCount"];
            this.roomItemListXLQId = _data["roomItemListXLQId"];
            this.roomItemListXLQLabel = _data["roomItemListXLQLabel"];
            this.roomItemListXLQLabels = _data["roomItemListXLQLabels"];
            this.roomItemListXLQCount = _data["roomItemListXLQCount"];
            this.roomItemListXLQDevBarCode = _data["roomItemListXLQDevBarCode"];
            this.roomItemListXLQBatchNo = _data["roomItemListXLQBatchNo"];
            this.roomItemListXLGId = _data["roomItemListXLGId"];
            this.roomItemListXLGLabel = _data["roomItemListXLGLabel"];
            this.roomItemListXLGLabels = _data["roomItemListXLGLabels"];
            this.roomItemListXLGCount = _data["roomItemListXLGCount"];
            this.roomItemListXLGDevBarCode = _data["roomItemListXLGDevBarCode"];
            this.roomItemListXLGBatchNo = _data["roomItemListXLGBatchNo"];
            this.roomItemListNLZId = _data["roomItemListNLZId"];
            this.roomItemListNLZLabel = _data["roomItemListNLZLabel"];
            this.roomItemListNLZLabels = _data["roomItemListNLZLabels"];
            this.roomItemListNLZCount = _data["roomItemListNLZCount"];
            this.roomItemListNLZDevBarCode = _data["roomItemListNLZDevBarCode"];
            this.roomItemListZHYGLId = _data["roomItemListZHYGLId"];
            this.roomItemListZHYGLLabel = _data["roomItemListZHYGLLabel"];
            this.roomItemListZHYGLLabels = _data["roomItemListZHYGLLabels"];
            this.roomItemListZHYGLCount = _data["roomItemListZHYGLCount"];
            this.roomItemListZHYGLDevBarCode = _data["roomItemListZHYGLDevBarCode"];
            this.perfusionCatheter = _data["perfusionCatheter"];
            this.perfusionCatheters = _data["perfusionCatheters"];
            this.perfusionCatheterDevBarCode = _data["perfusionCatheterDevBarCode"];
            this.plasmaSeparator = _data["plasmaSeparator"];
            this.plasmaSeparators = _data["plasmaSeparators"];
            this.plasmaSeparatorDevBarCode = _data["plasmaSeparatorDevBarCode"];
        }
    }

    static fromJS(data: any): CureRecordItemConsumable {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemConsumable();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListTXQId"] = this.roomItemListTXQId;
        data["roomItemListTXQLabel"] = this.roomItemListTXQLabel;
        data["roomItemListTXQLabels"] = this.roomItemListTXQLabels;
        data["roomItemListTXQCount"] = this.roomItemListTXQCount;
        data["roomItemListTXQDevBarCode"] = this.roomItemListTXQDevBarCode;
        data["roomItemListTXQBatchNo"] = this.roomItemListTXQBatchNo;
        data["roomItemListGLQId"] = this.roomItemListGLQId;
        data["roomItemListGLQLabel"] = this.roomItemListGLQLabel;
        data["roomItemListGLQLabels"] = this.roomItemListGLQLabels;
        data["roomItemListGLQDevBarCode"] = this.roomItemListGLQDevBarCode;
        data["roomItemListGLQBatchNo"] = this.roomItemListGLQBatchNo;
        data["roomItemListGLQCount"] = this.roomItemListGLQCount;
        data["roomItemListXLQId"] = this.roomItemListXLQId;
        data["roomItemListXLQLabel"] = this.roomItemListXLQLabel;
        data["roomItemListXLQLabels"] = this.roomItemListXLQLabels;
        data["roomItemListXLQCount"] = this.roomItemListXLQCount;
        data["roomItemListXLQDevBarCode"] = this.roomItemListXLQDevBarCode;
        data["roomItemListXLQBatchNo"] = this.roomItemListXLQBatchNo;
        data["roomItemListXLGId"] = this.roomItemListXLGId;
        data["roomItemListXLGLabel"] = this.roomItemListXLGLabel;
        data["roomItemListXLGLabels"] = this.roomItemListXLGLabels;
        data["roomItemListXLGCount"] = this.roomItemListXLGCount;
        data["roomItemListXLGDevBarCode"] = this.roomItemListXLGDevBarCode;
        data["roomItemListXLGBatchNo"] = this.roomItemListXLGBatchNo;
        data["roomItemListNLZId"] = this.roomItemListNLZId;
        data["roomItemListNLZLabel"] = this.roomItemListNLZLabel;
        data["roomItemListNLZLabels"] = this.roomItemListNLZLabels;
        data["roomItemListNLZCount"] = this.roomItemListNLZCount;
        data["roomItemListNLZDevBarCode"] = this.roomItemListNLZDevBarCode;
        data["roomItemListZHYGLId"] = this.roomItemListZHYGLId;
        data["roomItemListZHYGLLabel"] = this.roomItemListZHYGLLabel;
        data["roomItemListZHYGLLabels"] = this.roomItemListZHYGLLabels;
        data["roomItemListZHYGLCount"] = this.roomItemListZHYGLCount;
        data["roomItemListZHYGLDevBarCode"] = this.roomItemListZHYGLDevBarCode;
        data["perfusionCatheter"] = this.perfusionCatheter;
        data["perfusionCatheters"] = this.perfusionCatheters;
        data["perfusionCatheterDevBarCode"] = this.perfusionCatheterDevBarCode;
        data["plasmaSeparator"] = this.plasmaSeparator;
        data["plasmaSeparators"] = this.plasmaSeparators;
        data["plasmaSeparatorDevBarCode"] = this.plasmaSeparatorDevBarCode;
        return data;
    }
}

/** 耗材 */
export interface ICureRecordItemConsumable {
    /** 耗材标识-透析器 */
    roomItemListTXQId?: string | undefined;
    /** 耗材-透析器名称 */
    roomItemListTXQLabel?: string | undefined;
    /** 耗材-所有透析器名称 */
    roomItemListTXQLabels?: string | undefined;
    /** 耗材-透析器数量 */
    roomItemListTXQCount?: number | undefined;
    /** 透析器耗材条码 */
    roomItemListTXQDevBarCode?: string | undefined;
    /** 透析器耗材批号 */
    roomItemListTXQBatchNo?: string | undefined;
    /** 耗材标识-灌流器 */
    roomItemListGLQId?: string | undefined;
    /** 耗材-灌流器名称 */
    roomItemListGLQLabel?: string | undefined;
    /** 耗材-灌流器名称 */
    roomItemListGLQLabels?: string | undefined;
    /** 灌流器耗材条码 */
    roomItemListGLQDevBarCode?: string | undefined;
    /** 灌流器耗材批号 */
    roomItemListGLQBatchNo?: string | undefined;
    /** 耗材-灌流器数量 */
    roomItemListGLQCount?: number | undefined;
    /** 耗材标识-血滤器 */
    roomItemListXLQId?: string | undefined;
    /** 耗材-血滤器名称 */
    roomItemListXLQLabel?: string | undefined;
    /** 耗材-血滤器名称 */
    roomItemListXLQLabels?: string | undefined;
    /** 耗材-血滤器数量 */
    roomItemListXLQCount?: number | undefined;
    /** 血滤器耗材条码 */
    roomItemListXLQDevBarCode?: string | undefined;
    /** 血滤器耗材批号 */
    roomItemListXLQBatchNo?: string | undefined;
    /** 耗材标识-血路管 */
    roomItemListXLGId?: string | undefined;
    /** 耗材-血路管名称 */
    roomItemListXLGLabel?: string | undefined;
    /** 耗材-血路管名称 */
    roomItemListXLGLabels?: string | undefined;
    /** 耗材-血路管数量 */
    roomItemListXLGCount?: number | undefined;
    /** 血路管耗材条码 */
    roomItemListXLGDevBarCode?: string | undefined;
    /** 血路管耗材批号 */
    roomItemListXLGBatchNo?: string | undefined;
    /** 耗材标识-内瘘针 */
    roomItemListNLZId?: string | undefined;
    /** 耗材-内瘘针名称 */
    roomItemListNLZLabel?: string | undefined;
    /** 耗材-内瘘针名称 */
    roomItemListNLZLabels?: string | undefined;
    /** 耗材-内瘘针数量 */
    roomItemListNLZCount?: number | undefined;
    /** 内瘘针耗材条码 */
    roomItemListNLZDevBarCode?: string | undefined;
    /** 耗材标识-置换液管路 */
    roomItemListZHYGLId?: string | undefined;
    /** 耗材-置换液管路名称 */
    roomItemListZHYGLLabel?: string | undefined;
    /** 耗材-置换液管路名称 */
    roomItemListZHYGLLabels?: string | undefined;
    /** 耗材-置换液管路数量 */
    roomItemListZHYGLCount?: number | undefined;
    /** 置换液管路耗材条码 */
    roomItemListZHYGLDevBarCode?: string | undefined;
    /** 灌流连接管 */
    perfusionCatheter?: string | undefined;
    /** 灌流连接管 */
    perfusionCatheters?: string | undefined;
    /** 灌流连接管条码 */
    perfusionCatheterDevBarCode?: string | undefined;
    /** 血浆分离器 */
    plasmaSeparator?: string | undefined;
    /** 血浆分离器 */
    plasmaSeparators?: string | undefined;
    /** 血浆分离器条码 */
    plasmaSeparatorDevBarCode?: string | undefined;
}

/** 透析医嘱 */
export class CureRecordItemDa implements ICureRecordItemDa {
    /** 标识 */
    id?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 分组 */
    group?: string | undefined;
    /** 开立医生标识 */
    doctorId?: string | undefined;
    /** 开立医生姓名 */
    doctorName?: string | undefined;
    /** 核对护士标识 */
    checkNurseId?: string | undefined;
    /** 核对护士姓名 */
    checkNurseName?: string | undefined;
    /** 执行护士标识 */
    nurseId?: string | undefined;
    /** 执行护士姓名 */
    nurseName?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 核对时间 */
    checkTime?: dayjs.Dayjs | undefined;
    /** 执行时间 */
    execTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** [项目标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 用量 */
    dosage?: number;
    /** 单位 `DIC.SYS.UNIT` */
    unit?: string | undefined;
    /** 单次数量 */
    singleDosage?: number | undefined;
    /** 单次数量单位 */
    singleUnit?: string | undefined;
    /** 单次数量单位显示值 */
    singleUnitLabel?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 执行状态 `DIC.DIALYSIS.DA.STATUS` *待核对,已核对(待执行),已撤销,待调整,已执行* */
    status?: string | undefined;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 单位显示值 */
    unitLabel?: string | undefined;
    /** 用法显示值 */
    usageLabel?: string | undefined;
    /** 执行状态显示值 */
    statusLabel?: string | undefined;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureRecordItemDa) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.groupId = _data["groupId"];
            this.group = _data["group"];
            this.doctorId = _data["doctorId"];
            this.doctorName = _data["doctorName"];
            this.checkNurseId = _data["checkNurseId"];
            this.checkNurseName = _data["checkNurseName"];
            this.nurseId = _data["nurseId"];
            this.nurseName = _data["nurseName"];
            this.doctorCreateTime = _data["doctorCreateTime"] ? dayjs(_data["doctorCreateTime"].toString()) : <any>undefined;
            this.checkTime = _data["checkTime"] ? dayjs(_data["checkTime"].toString()) : <any>undefined;
            this.execTime = _data["execTime"] ? dayjs(_data["execTime"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.nameGoods = _data["nameGoods"];
            this.roomItemListId = _data["roomItemListId"];
            this.usage = _data["usage"];
            this.dosage = _data["dosage"];
            this.unit = _data["unit"];
            this.singleDosage = _data["singleDosage"];
            this.singleUnit = _data["singleUnit"];
            this.singleUnitLabel = _data["singleUnitLabel"];
            this.orally = _data["orally"];
            this.status = _data["status"];
            this.cureDaContent = _data["cureDaContent"];
            this.unitLabel = _data["unitLabel"];
            this.usageLabel = _data["usageLabel"];
            this.statusLabel = _data["statusLabel"];
            this.type = _data["type"];
            this.typeName = _data["typeName"];
            this.content = _data["content"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureRecordItemDa {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemDa();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["groupId"] = this.groupId;
        data["group"] = this.group;
        data["doctorId"] = this.doctorId;
        data["doctorName"] = this.doctorName;
        data["checkNurseId"] = this.checkNurseId;
        data["checkNurseName"] = this.checkNurseName;
        data["nurseId"] = this.nurseId;
        data["nurseName"] = this.nurseName;
        data["doctorCreateTime"] = this.doctorCreateTime ? this.doctorCreateTime.toISOString() : <any>undefined;
        data["checkTime"] = this.checkTime ? this.checkTime.toISOString() : <any>undefined;
        data["execTime"] = this.execTime ? this.execTime.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["nameGoods"] = this.nameGoods;
        data["roomItemListId"] = this.roomItemListId;
        data["usage"] = this.usage;
        data["dosage"] = this.dosage;
        data["unit"] = this.unit;
        data["singleDosage"] = this.singleDosage;
        data["singleUnit"] = this.singleUnit;
        data["singleUnitLabel"] = this.singleUnitLabel;
        data["orally"] = this.orally;
        data["status"] = this.status;
        data["cureDaContent"] = this.cureDaContent;
        data["unitLabel"] = this.unitLabel;
        data["usageLabel"] = this.usageLabel;
        data["statusLabel"] = this.statusLabel;
        data["type"] = this.type;
        data["typeName"] = this.typeName;
        data["content"] = this.content;
        data["remark"] = this.remark;
        return data;
    }
}

/** 透析医嘱 */
export interface ICureRecordItemDa {
    /** 标识 */
    id?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 分组 */
    group?: string | undefined;
    /** 开立医生标识 */
    doctorId?: string | undefined;
    /** 开立医生姓名 */
    doctorName?: string | undefined;
    /** 核对护士标识 */
    checkNurseId?: string | undefined;
    /** 核对护士姓名 */
    checkNurseName?: string | undefined;
    /** 执行护士标识 */
    nurseId?: string | undefined;
    /** 执行护士姓名 */
    nurseName?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 核对时间 */
    checkTime?: dayjs.Dayjs | undefined;
    /** 执行时间 */
    execTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** [项目标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 用量 */
    dosage?: number;
    /** 单位 `DIC.SYS.UNIT` */
    unit?: string | undefined;
    /** 单次数量 */
    singleDosage?: number | undefined;
    /** 单次数量单位 */
    singleUnit?: string | undefined;
    /** 单次数量单位显示值 */
    singleUnitLabel?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 执行状态 `DIC.DIALYSIS.DA.STATUS` *待核对,已核对(待执行),已撤销,待调整,已执行* */
    status?: string | undefined;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 单位显示值 */
    unitLabel?: string | undefined;
    /** 用法显示值 */
    usageLabel?: string | undefined;
    /** 执行状态显示值 */
    statusLabel?: string | undefined;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 透析液 */
export class CureRecordItemDialysate implements ICureRecordItemDialysate {
    /** 透析液名称 */
    dialysateName?: string | undefined;
    /** 透析液简称 */
    dialysateShortName?: string | undefined;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;

    constructor(data?: ICureRecordItemDialysate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysateName = _data["dialysateName"];
            this.dialysateShortName = _data["dialysateShortName"];
            this.flowRate = _data["flowRate"];
            this.temp = _data["temp"];
            this.cond = _data["cond"];
            this.k = _data["k"];
            this.ca = _data["ca"];
            this.na = _data["na"];
            this.hco = _data["hco"];
            this.glucose = _data["glucose"];
        }
    }

    static fromJS(data: any): CureRecordItemDialysate {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemDialysate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysateName"] = this.dialysateName;
        data["dialysateShortName"] = this.dialysateShortName;
        data["flowRate"] = this.flowRate;
        data["temp"] = this.temp;
        data["cond"] = this.cond;
        data["k"] = this.k;
        data["ca"] = this.ca;
        data["na"] = this.na;
        data["hco"] = this.hco;
        data["glucose"] = this.glucose;
        return data;
    }
}

/** 透析液 */
export interface ICureRecordItemDialysate {
    /** 透析液名称 */
    dialysateName?: string | undefined;
    /** 透析液简称 */
    dialysateShortName?: string | undefined;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
}

/** 消毒信息 */
export class CureRecordItemDisinfect implements ICureRecordItemDisinfect {
    /** 开始时间 */
    beginDate?: dayjs.Dayjs;
    /** 停止时间 */
    endDate?: dayjs.Dayjs;
    /** 消毒时长(分钟) */
    disinfectTime?: number;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** 机内消毒方式显示值 */
    programInternalLabel?: string | undefined;
    /** 机内消毒人标识 */
    internalOperatorId?: string | undefined;
    /** 机内消毒人名称 */
    internalOperatorName?: string | undefined;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** 机外消毒方式显示值 */
    programExteriorLabel?: string | undefined;
    /** 机外消毒人标识 */
    externalOperatorId?: string | undefined;
    /** 机外消毒人名称 */
    externalOperatorName?: string | undefined;
    /** 床单元清洁 */
    bedUnitCleaning?: string | undefined;
    /** 过滤网更换 */
    filterScreenChanging?: string | undefined;
    /** 消毒温度 */
    disinfectTemp?: string | undefined;

    constructor(data?: ICureRecordItemDisinfect) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.beginDate = _data["beginDate"] ? dayjs(_data["beginDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? dayjs(_data["endDate"].toString()) : <any>undefined;
            this.disinfectTime = _data["disinfectTime"];
            this.programInternal = _data["programInternal"];
            this.programInternalLabel = _data["programInternalLabel"];
            this.internalOperatorId = _data["internalOperatorId"];
            this.internalOperatorName = _data["internalOperatorName"];
            this.programExterior = _data["programExterior"];
            this.programExteriorLabel = _data["programExteriorLabel"];
            this.externalOperatorId = _data["externalOperatorId"];
            this.externalOperatorName = _data["externalOperatorName"];
            this.bedUnitCleaning = _data["bedUnitCleaning"];
            this.filterScreenChanging = _data["filterScreenChanging"];
            this.disinfectTemp = _data["disinfectTemp"];
        }
    }

    static fromJS(data: any): CureRecordItemDisinfect {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemDisinfect();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["beginDate"] = this.beginDate ? this.beginDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["disinfectTime"] = this.disinfectTime;
        data["programInternal"] = this.programInternal;
        data["programInternalLabel"] = this.programInternalLabel;
        data["internalOperatorId"] = this.internalOperatorId;
        data["internalOperatorName"] = this.internalOperatorName;
        data["programExterior"] = this.programExterior;
        data["programExteriorLabel"] = this.programExteriorLabel;
        data["externalOperatorId"] = this.externalOperatorId;
        data["externalOperatorName"] = this.externalOperatorName;
        data["bedUnitCleaning"] = this.bedUnitCleaning;
        data["filterScreenChanging"] = this.filterScreenChanging;
        data["disinfectTemp"] = this.disinfectTemp;
        return data;
    }
}

/** 消毒信息 */
export interface ICureRecordItemDisinfect {
    /** 开始时间 */
    beginDate?: dayjs.Dayjs;
    /** 停止时间 */
    endDate?: dayjs.Dayjs;
    /** 消毒时长(分钟) */
    disinfectTime?: number;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** 机内消毒方式显示值 */
    programInternalLabel?: string | undefined;
    /** 机内消毒人标识 */
    internalOperatorId?: string | undefined;
    /** 机内消毒人名称 */
    internalOperatorName?: string | undefined;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** 机外消毒方式显示值 */
    programExteriorLabel?: string | undefined;
    /** 机外消毒人标识 */
    externalOperatorId?: string | undefined;
    /** 机外消毒人名称 */
    externalOperatorName?: string | undefined;
    /** 床单元清洁 */
    bedUnitCleaning?: string | undefined;
    /** 过滤网更换 */
    filterScreenChanging?: string | undefined;
    /** 消毒温度 */
    disinfectTemp?: string | undefined;
}

/** 透中监测 */
export class CureRecordItemMonitor implements ICureRecordItemMonitor {
    /** 标识 */
    id?: string | undefined;
    /** 监测时间 */
    monitorTime?: dayjs.Dayjs | undefined;
    /** 记录护士标识 */
    nurseId?: string | undefined;
    /** 记录护士姓名 */
    nurseName?: string | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** 血流量单位 */
    bloodFlowRateUnit?: string | undefined;
    /** 静脉压 *mmHg* */
    venousPressure?: number | undefined;
    /** 静脉压单位 */
    venousPressureUnit?: string | undefined;
    /** 动脉压 *mmHg* */
    arterialPressure?: number | undefined;
    /** 动脉压单位 */
    arterialPressureUnit?: string | undefined;
    /** 跨膜压 *mmHg Transmembrane Pressure* */
    tmp?: number | undefined;
    /** 跨膜压单位 */
    tmpUnit?: string | undefined;
    /** 测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    position?: string | undefined;
    /** 测量位置显示值 */
    positionLabel?: string | undefined;
    /** 收缩压 *mmHg* */
    sbp?: number | undefined;
    /** 收缩压单位 */
    sbpUnit?: string | undefined;
    /** 舒张压 *mmHg* */
    dbp?: number | undefined;
    /** 舒张压单位 */
    dbpUnit?: string | undefined;
    /** 脉搏 *次/分* */
    pulse?: number | undefined;
    /** 脉搏单位 */
    pulseUnit?: string | undefined;
    /** 呼吸 *次/分* */
    breathe?: number | undefined;
    /** 呼吸单位 */
    breatheUnit?: string | undefined;
    /** 体温 */
    temp?: number | undefined;
    /** 体温单位 */
    tempUnit?: string | undefined;
    /** 超滤率 *ml/h Ultrafiltration Rate* */
    ufr?: number | undefined;
    /** 超滤率单位 */
    ufrUnit?: string | undefined;
    /** 超滤量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 超滤量单位 */
    ufvUnit?: string | undefined;
    /** 透析液流量 *ml/min* */
    dialysateFlowRate?: number | undefined;
    /** 透析液流量单位 */
    dialysateFlowRateUnit?: string | undefined;
    /** 透析液温度 *℃* */
    dialysateTemp?: number | undefined;
    /** 透析液温度单位 */
    dialysateTempUnit?: string | undefined;
    /** 透析液电导度 *mS/cm dialysate conductivity* */
    dialysateCond?: number | undefined;
    /** 透析液电导度单位 */
    dialysateCondUnit?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液流量单位 */
    rfrUnit?: string | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 累计肝素量 */
    cumulativeHeparinVolume?: number | undefined;
    /** 置换液量单位 */
    rfvUnit?: string | undefined;
    /** 肝素量 *mg* */
    heparin?: number | undefined;
    /** 肝素量单位 */
    heparinUnit?: string | undefined;
    /** 管路情况 `DIC.DIALYSIS.MONITOR.TUBE` *多选* */
    remarkTube?: string | undefined;
    /** 渗血情况 `DIC.DIALYSIS.MONITOR.ERRHYSIS` *多选* */
    remarkErrhysis?: string | undefined;
    /** 抗凝情况 `DIC.DIALYSIS.MONITOR.ANT` *多选* */
    remarkAnticoagulation?: string | undefined;
    /** 管路情况显示值 */
    remarkTubeLabel?: string | undefined;
    /** 渗血情况显示值 */
    remarkErrhysisLabel?: string | undefined;
    /** 抗凝情况显示值 */
    remarkAnticoagulationLabel?: string | undefined;
    /** 病情与处理 *病情与处理模板* `DIC.DIALYSIS.MONITOR.REMARK` *选择后往编辑域中追加* */
    remark?: string | undefined;
    /** 血压 */
    bp?: string | undefined;
    /** 血压单位 */
    bpUnit?: string | undefined;
    /** 字段1 *预留字段用于使用* */
    ext1?: string | undefined;
    /** 字段2 *预留字段用于使用* */
    ext2?: string | undefined;
    /** 字段3 *预留字段用于使用* */
    ext3?: string | undefined;
    /** 字段4 *预留字段用于使用* */
    ext4?: string | undefined;
    /** 字段5 *预留字段用于使用* */
    ext5?: string | undefined;
    /** 字段6 *预留字段用于使用* */
    ext6?: string | undefined;
    /** 字段7 *预留字段用于使用* */
    ext7?: string | undefined;
    /** 字段8 *预留字段用于使用* */
    ext8?: string | undefined;
    /** 字段9 *预留字段用于使用* */
    ext9?: string | undefined;
    /** 字段10 *预留字段用于使用* */
    ext10?: string | undefined;

    constructor(data?: ICureRecordItemMonitor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.monitorTime = _data["monitorTime"] ? dayjs(_data["monitorTime"].toString()) : <any>undefined;
            this.nurseId = _data["nurseId"];
            this.nurseName = _data["nurseName"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.bloodFlowRateUnit = _data["bloodFlowRateUnit"];
            this.venousPressure = _data["venousPressure"];
            this.venousPressureUnit = _data["venousPressureUnit"];
            this.arterialPressure = _data["arterialPressure"];
            this.arterialPressureUnit = _data["arterialPressureUnit"];
            this.tmp = _data["tmp"];
            this.tmpUnit = _data["tmpUnit"];
            this.position = _data["position"];
            this.positionLabel = _data["positionLabel"];
            this.sbp = _data["sbp"];
            this.sbpUnit = _data["sbpUnit"];
            this.dbp = _data["dbp"];
            this.dbpUnit = _data["dbpUnit"];
            this.pulse = _data["pulse"];
            this.pulseUnit = _data["pulseUnit"];
            this.breathe = _data["breathe"];
            this.breatheUnit = _data["breatheUnit"];
            this.temp = _data["temp"];
            this.tempUnit = _data["tempUnit"];
            this.ufr = _data["ufr"];
            this.ufrUnit = _data["ufrUnit"];
            this.ufv = _data["ufv"];
            this.ufvUnit = _data["ufvUnit"];
            this.dialysateFlowRate = _data["dialysateFlowRate"];
            this.dialysateFlowRateUnit = _data["dialysateFlowRateUnit"];
            this.dialysateTemp = _data["dialysateTemp"];
            this.dialysateTempUnit = _data["dialysateTempUnit"];
            this.dialysateCond = _data["dialysateCond"];
            this.dialysateCondUnit = _data["dialysateCondUnit"];
            this.rfr = _data["rfr"];
            this.rfrUnit = _data["rfrUnit"];
            this.rfv = _data["rfv"];
            this.cumulativeHeparinVolume = _data["cumulativeHeparinVolume"];
            this.rfvUnit = _data["rfvUnit"];
            this.heparin = _data["heparin"];
            this.heparinUnit = _data["heparinUnit"];
            this.remarkTube = _data["remarkTube"];
            this.remarkErrhysis = _data["remarkErrhysis"];
            this.remarkAnticoagulation = _data["remarkAnticoagulation"];
            this.remarkTubeLabel = _data["remarkTubeLabel"];
            this.remarkErrhysisLabel = _data["remarkErrhysisLabel"];
            this.remarkAnticoagulationLabel = _data["remarkAnticoagulationLabel"];
            this.remark = _data["remark"];
            this.bp = _data["bp"];
            this.bpUnit = _data["bpUnit"];
            this.ext1 = _data["ext1"];
            this.ext2 = _data["ext2"];
            this.ext3 = _data["ext3"];
            this.ext4 = _data["ext4"];
            this.ext5 = _data["ext5"];
            this.ext6 = _data["ext6"];
            this.ext7 = _data["ext7"];
            this.ext8 = _data["ext8"];
            this.ext9 = _data["ext9"];
            this.ext10 = _data["ext10"];
        }
    }

    static fromJS(data: any): CureRecordItemMonitor {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemMonitor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["monitorTime"] = this.monitorTime ? this.monitorTime.toISOString() : <any>undefined;
        data["nurseId"] = this.nurseId;
        data["nurseName"] = this.nurseName;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["bloodFlowRateUnit"] = this.bloodFlowRateUnit;
        data["venousPressure"] = this.venousPressure;
        data["venousPressureUnit"] = this.venousPressureUnit;
        data["arterialPressure"] = this.arterialPressure;
        data["arterialPressureUnit"] = this.arterialPressureUnit;
        data["tmp"] = this.tmp;
        data["tmpUnit"] = this.tmpUnit;
        data["position"] = this.position;
        data["positionLabel"] = this.positionLabel;
        data["sbp"] = this.sbp;
        data["sbpUnit"] = this.sbpUnit;
        data["dbp"] = this.dbp;
        data["dbpUnit"] = this.dbpUnit;
        data["pulse"] = this.pulse;
        data["pulseUnit"] = this.pulseUnit;
        data["breathe"] = this.breathe;
        data["breatheUnit"] = this.breatheUnit;
        data["temp"] = this.temp;
        data["tempUnit"] = this.tempUnit;
        data["ufr"] = this.ufr;
        data["ufrUnit"] = this.ufrUnit;
        data["ufv"] = this.ufv;
        data["ufvUnit"] = this.ufvUnit;
        data["dialysateFlowRate"] = this.dialysateFlowRate;
        data["dialysateFlowRateUnit"] = this.dialysateFlowRateUnit;
        data["dialysateTemp"] = this.dialysateTemp;
        data["dialysateTempUnit"] = this.dialysateTempUnit;
        data["dialysateCond"] = this.dialysateCond;
        data["dialysateCondUnit"] = this.dialysateCondUnit;
        data["rfr"] = this.rfr;
        data["rfrUnit"] = this.rfrUnit;
        data["rfv"] = this.rfv;
        data["cumulativeHeparinVolume"] = this.cumulativeHeparinVolume;
        data["rfvUnit"] = this.rfvUnit;
        data["heparin"] = this.heparin;
        data["heparinUnit"] = this.heparinUnit;
        data["remarkTube"] = this.remarkTube;
        data["remarkErrhysis"] = this.remarkErrhysis;
        data["remarkAnticoagulation"] = this.remarkAnticoagulation;
        data["remarkTubeLabel"] = this.remarkTubeLabel;
        data["remarkErrhysisLabel"] = this.remarkErrhysisLabel;
        data["remarkAnticoagulationLabel"] = this.remarkAnticoagulationLabel;
        data["remark"] = this.remark;
        data["bp"] = this.bp;
        data["bpUnit"] = this.bpUnit;
        data["ext1"] = this.ext1;
        data["ext2"] = this.ext2;
        data["ext3"] = this.ext3;
        data["ext4"] = this.ext4;
        data["ext5"] = this.ext5;
        data["ext6"] = this.ext6;
        data["ext7"] = this.ext7;
        data["ext8"] = this.ext8;
        data["ext9"] = this.ext9;
        data["ext10"] = this.ext10;
        return data;
    }
}

/** 透中监测 */
export interface ICureRecordItemMonitor {
    /** 标识 */
    id?: string | undefined;
    /** 监测时间 */
    monitorTime?: dayjs.Dayjs | undefined;
    /** 记录护士标识 */
    nurseId?: string | undefined;
    /** 记录护士姓名 */
    nurseName?: string | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** 血流量单位 */
    bloodFlowRateUnit?: string | undefined;
    /** 静脉压 *mmHg* */
    venousPressure?: number | undefined;
    /** 静脉压单位 */
    venousPressureUnit?: string | undefined;
    /** 动脉压 *mmHg* */
    arterialPressure?: number | undefined;
    /** 动脉压单位 */
    arterialPressureUnit?: string | undefined;
    /** 跨膜压 *mmHg Transmembrane Pressure* */
    tmp?: number | undefined;
    /** 跨膜压单位 */
    tmpUnit?: string | undefined;
    /** 测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    position?: string | undefined;
    /** 测量位置显示值 */
    positionLabel?: string | undefined;
    /** 收缩压 *mmHg* */
    sbp?: number | undefined;
    /** 收缩压单位 */
    sbpUnit?: string | undefined;
    /** 舒张压 *mmHg* */
    dbp?: number | undefined;
    /** 舒张压单位 */
    dbpUnit?: string | undefined;
    /** 脉搏 *次/分* */
    pulse?: number | undefined;
    /** 脉搏单位 */
    pulseUnit?: string | undefined;
    /** 呼吸 *次/分* */
    breathe?: number | undefined;
    /** 呼吸单位 */
    breatheUnit?: string | undefined;
    /** 体温 */
    temp?: number | undefined;
    /** 体温单位 */
    tempUnit?: string | undefined;
    /** 超滤率 *ml/h Ultrafiltration Rate* */
    ufr?: number | undefined;
    /** 超滤率单位 */
    ufrUnit?: string | undefined;
    /** 超滤量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 超滤量单位 */
    ufvUnit?: string | undefined;
    /** 透析液流量 *ml/min* */
    dialysateFlowRate?: number | undefined;
    /** 透析液流量单位 */
    dialysateFlowRateUnit?: string | undefined;
    /** 透析液温度 *℃* */
    dialysateTemp?: number | undefined;
    /** 透析液温度单位 */
    dialysateTempUnit?: string | undefined;
    /** 透析液电导度 *mS/cm dialysate conductivity* */
    dialysateCond?: number | undefined;
    /** 透析液电导度单位 */
    dialysateCondUnit?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液流量单位 */
    rfrUnit?: string | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 累计肝素量 */
    cumulativeHeparinVolume?: number | undefined;
    /** 置换液量单位 */
    rfvUnit?: string | undefined;
    /** 肝素量 *mg* */
    heparin?: number | undefined;
    /** 肝素量单位 */
    heparinUnit?: string | undefined;
    /** 管路情况 `DIC.DIALYSIS.MONITOR.TUBE` *多选* */
    remarkTube?: string | undefined;
    /** 渗血情况 `DIC.DIALYSIS.MONITOR.ERRHYSIS` *多选* */
    remarkErrhysis?: string | undefined;
    /** 抗凝情况 `DIC.DIALYSIS.MONITOR.ANT` *多选* */
    remarkAnticoagulation?: string | undefined;
    /** 管路情况显示值 */
    remarkTubeLabel?: string | undefined;
    /** 渗血情况显示值 */
    remarkErrhysisLabel?: string | undefined;
    /** 抗凝情况显示值 */
    remarkAnticoagulationLabel?: string | undefined;
    /** 病情与处理 *病情与处理模板* `DIC.DIALYSIS.MONITOR.REMARK` *选择后往编辑域中追加* */
    remark?: string | undefined;
    /** 血压 */
    bp?: string | undefined;
    /** 血压单位 */
    bpUnit?: string | undefined;
    /** 字段1 *预留字段用于使用* */
    ext1?: string | undefined;
    /** 字段2 *预留字段用于使用* */
    ext2?: string | undefined;
    /** 字段3 *预留字段用于使用* */
    ext3?: string | undefined;
    /** 字段4 *预留字段用于使用* */
    ext4?: string | undefined;
    /** 字段5 *预留字段用于使用* */
    ext5?: string | undefined;
    /** 字段6 *预留字段用于使用* */
    ext6?: string | undefined;
    /** 字段7 *预留字段用于使用* */
    ext7?: string | undefined;
    /** 字段8 *预留字段用于使用* */
    ext8?: string | undefined;
    /** 字段9 *预留字段用于使用* */
    ext9?: string | undefined;
    /** 字段10 *预留字段用于使用* */
    ext10?: string | undefined;
}

/** 透后小结 */
export class CureRecordItemSummary implements ICureRecordItemSummary {
    /** 小结内容 */
    content?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureRecordItemSummary) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.content = _data["content"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureRecordItemSummary {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemSummary();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["content"] = this.content;
        data["remark"] = this.remark;
        return data;
    }
}

/** 透后小结 */
export interface ICureRecordItemSummary {
    /** 小结内容 */
    content?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 透析use修改记录 */
export class CureRecordLogView implements ICureRecordLogView {
    /** [透析记录标识](#透析记录) */
    cureRecordId!: string;
    /** 拒绝原因 *多个以;分隔* */
    cause?: string | undefined;
    /** 透析方式 */
    causeMode?: string | undefined;
    /** 生命体征 */
    causeVitlsigns?: string | undefined;
    /** 抗凝剂 */
    causeAnticoagulant?: string | undefined;
    /** 透析液 */
    causeDialysate?: string | undefined;
    /** 耗材 */
    causeConsumable?: string | undefined;
    /** 医嘱 */
    causeDa?: string | undefined;
    /** 其它 */
    causeOther?: string | undefined;
    /** 修改内容 */
    content?: string | undefined;
    /** 处理状态0,1 */
    status!: number;
    /** 来源 *方案确认,交叉核对* */
    source!: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureRecordLogView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.cause = _data["cause"];
            this.causeMode = _data["causeMode"];
            this.causeVitlsigns = _data["causeVitlsigns"];
            this.causeAnticoagulant = _data["causeAnticoagulant"];
            this.causeDialysate = _data["causeDialysate"];
            this.causeConsumable = _data["causeConsumable"];
            this.causeDa = _data["causeDa"];
            this.causeOther = _data["causeOther"];
            this.content = _data["content"];
            this.status = _data["status"];
            this.source = _data["source"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordLogView {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordLogView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["cause"] = this.cause;
        data["causeMode"] = this.causeMode;
        data["causeVitlsigns"] = this.causeVitlsigns;
        data["causeAnticoagulant"] = this.causeAnticoagulant;
        data["causeDialysate"] = this.causeDialysate;
        data["causeConsumable"] = this.causeConsumable;
        data["causeDa"] = this.causeDa;
        data["causeOther"] = this.causeOther;
        data["content"] = this.content;
        data["status"] = this.status;
        data["source"] = this.source;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析use修改记录 */
export interface ICureRecordLogView {
    /** [透析记录标识](#透析记录) */
    cureRecordId: string;
    /** 拒绝原因 *多个以;分隔* */
    cause?: string | undefined;
    /** 透析方式 */
    causeMode?: string | undefined;
    /** 生命体征 */
    causeVitlsigns?: string | undefined;
    /** 抗凝剂 */
    causeAnticoagulant?: string | undefined;
    /** 透析液 */
    causeDialysate?: string | undefined;
    /** 耗材 */
    causeConsumable?: string | undefined;
    /** 医嘱 */
    causeDa?: string | undefined;
    /** 其它 */
    causeOther?: string | undefined;
    /** 修改内容 */
    content?: string | undefined;
    /** 处理状态0,1 */
    status: number;
    /** 来源 *方案确认,交叉核对* */
    source: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

export class CureRecordVerifyEditModel implements ICureRecordVerifyEditModel {
    /** 拒绝状态0,1 */
    status?: number;
    /** 拒绝原因 */
    cause?: string | undefined;
    /** 来源 （来源为门诊时显示门诊号，来源为住院时显示住院号） */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 核对护士ID */
    verifyNurseId?: string | undefined;
    /** 核对护士Name */
    verifyNurseName?: string | undefined;
    /** 交叉核对时间 */
    timeVerify?: dayjs.Dayjs | undefined;
    /** 费用组套 */
    cureCostGroups?: RoomRecordItem[] | undefined;
    /** 库存不足继续执行 */
    force?: boolean;
    /** 自定义字段 */
    cureRecordFieldItems?: CureRecordFieldItemEditModel[] | undefined;

    constructor(data?: ICureRecordVerifyEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"];
            this.cause = _data["cause"];
            this.source = _data["source"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.verifyNurseId = _data["verifyNurseId"];
            this.verifyNurseName = _data["verifyNurseName"];
            this.timeVerify = _data["timeVerify"] ? dayjs(_data["timeVerify"].toString()) : <any>undefined;
            if (Array.isArray(_data["cureCostGroups"])) {
                this.cureCostGroups = [] as any;
                for (let item of _data["cureCostGroups"])
                    this.cureCostGroups!.push(RoomRecordItem.fromJS(item));
            }
            this.force = _data["force"];
            if (Array.isArray(_data["cureRecordFieldItems"])) {
                this.cureRecordFieldItems = [] as any;
                for (let item of _data["cureRecordFieldItems"])
                    this.cureRecordFieldItems!.push(CureRecordFieldItemEditModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordVerifyEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordVerifyEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["cause"] = this.cause;
        data["source"] = this.source;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["verifyNurseId"] = this.verifyNurseId;
        data["verifyNurseName"] = this.verifyNurseName;
        data["timeVerify"] = this.timeVerify ? this.timeVerify.toISOString() : <any>undefined;
        if (Array.isArray(this.cureCostGroups)) {
            data["cureCostGroups"] = [];
            for (let item of this.cureCostGroups)
                data["cureCostGroups"].push(item.toJSON());
        }
        data["force"] = this.force;
        if (Array.isArray(this.cureRecordFieldItems)) {
            data["cureRecordFieldItems"] = [];
            for (let item of this.cureRecordFieldItems)
                data["cureRecordFieldItems"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICureRecordVerifyEditModel {
    /** 拒绝状态0,1 */
    status?: number;
    /** 拒绝原因 */
    cause?: string | undefined;
    /** 来源 （来源为门诊时显示门诊号，来源为住院时显示住院号） */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 核对护士ID */
    verifyNurseId?: string | undefined;
    /** 核对护士Name */
    verifyNurseName?: string | undefined;
    /** 交叉核对时间 */
    timeVerify?: dayjs.Dayjs | undefined;
    /** 费用组套 */
    cureCostGroups?: RoomRecordItem[] | undefined;
    /** 库存不足继续执行 */
    force?: boolean;
    /** 自定义字段 */
    cureRecordFieldItems?: CureRecordFieldItemEditModel[] | undefined;
}

/** 透析记录单 */
export class CureRecordView implements ICureRecordView {
    /** 标识 */
    id?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析机标识 */
    dialysisMachineId?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineType?: string | undefined;
    /** 透析机类型显示值 */
    dialysisMachineTypeLabel?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 设备号 */
    dialysisMachineSn?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式显示值 */
    dialysisModeLabel?: string | undefined;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet?: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight1?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路) */
    patientVascularAccessId?: string | undefined;
    /** 血管通路类型 */
    patientVascularAccessType?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** [血管通路](患者血管通路) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路类型 */
    patientOtherVascularAccessType?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessName?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换方式显示值 */
    rfmLabel?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 治疗流程状态 `DIC.DIALYSIS.STATUS` *已签到,上机准备,治疗中,已下机,已结束* */
    status?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重 *kg* */
    beforeWeight1?: number | undefined;
    /** 透前净体重 */
    readonly beforeNetWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前体重方式显示值 */
    beforeWeightModeLabel?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    readonly ufg1?: number | undefined;
    /** 净脱水量 *ml Ultrafiltration Complete* */
    ufc?: number | undefined;
    /** 偏移后透前体重 */
    deductionBeforeWeight?: number | undefined;
    /** 偏移后透后体重 */
    deductionAfterWeight?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight1?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后体重方式显示值 */
    afterWeightModeLabel?: string | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 称重脱水量 *ml* */
    ufvWeight?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    beforeBpPosition?: string | undefined;
    /** 透前血压测量位置显示值 */
    beforeBpPositionLabel?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前血压 *mmHg* */
    beforeBp?: string | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透后血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    afterBpPosition?: string | undefined;
    /** 透后血压测量位置显示值 */
    afterBpPositionLabel?: string | undefined;
    /** 透后收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 透后舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 透后血压 *mmHg* */
    afterBp?: string | undefined;
    /** 透后脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 透前体重时间 */
    timeBeforeWeight?: dayjs.Dayjs | undefined;
    /** 上次透后体重 */
    preAfterWeight?: number | undefined;
    /** 上次透后体重 */
    preAfterWeight1?: number | undefined;
    /** 较干体重增加量 */
    addBestWeight?: number | undefined;
    /** 本次透析体重下降量 */
    reduceWeight?: number | undefined;
    appendWeight?: number | undefined;
    /** 透前血压时间 */
    timeBeforeBp?: dayjs.Dayjs | undefined;
    /** 医生制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 方案是否制定0,1 */
    enact?: number | undefined;
    /** 护士确认方案时间 */
    timeCheckNurse?: dayjs.Dayjs | undefined;
    /** 方案是否通过0,1 */
    check?: number | undefined;
    /** 透前评估时间 */
    timeAssementBefore?: dayjs.Dayjs | undefined;
    /** 穿刺时间 */
    timeOn?: dayjs.Dayjs | undefined;
    /** 穿刺方法 */
    punctureMethod?: string | undefined;
    /** 穿刺方法显示值 */
    punctureMethodLabel?: string | undefined;
    /** 穿刺护士 */
    punctureNurseId?: string | undefined;
    /** 穿刺护士 */
    punctureNurseName?: string | undefined;
    /** 交叉核对时间 */
    timeVerify?: dayjs.Dayjs | undefined;
    /** 首次监测时间 */
    timeFirstMonitor?: dayjs.Dayjs | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 消毒时间 */
    timeDisinfect?: dayjs.Dayjs | undefined;
    /** 透后评估时间 */
    timeAssementAfter?: dayjs.Dayjs | undefined;
    /** 透后体重时间 */
    timeAfterWeight?: dayjs.Dayjs | undefined;
    /** 透后血压时间 */
    timeAfterBp?: dayjs.Dayjs | undefined;
    /** 透后小结时间 */
    timeAfterSummary?: dayjs.Dayjs | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 制定方案医生标识 */
    enactDoctorId?: string | undefined;
    /** 制定方案医生姓名 */
    enactDoctorName?: string | undefined;
    /** 确认方案护士标识 */
    checkNurseId?: string | undefined;
    /** 确认方案护士姓名 */
    checkNurseName?: string | undefined;
    /** 透前评估护士标识 */
    assementBeforeNurseId?: string | undefined;
    /** 透前评估护士姓名 */
    assementBeforeNurseName?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 透前体温 */
    onTemp?: number | undefined;
    /** 核对护士标识 */
    verifyNurseId?: string | undefined;
    /** 核对护士姓名 */
    verifyNurseName?: string | undefined;
    /** 核对是否通过0,1 */
    verify?: number | undefined;
    /** 下机护士标识 */
    offNurseId?: string | undefined;
    /** 下机护士姓名 */
    offNurseName?: string | undefined;
    /** 下机体温 */
    offTemp?: number | undefined;
    /** 下机呼吸 */
    offBreathe?: number | undefined;
    /** 透后评估护士标识 */
    assementAfterNurseId?: string | undefined;
    vascularLocation?: string | undefined;
    /** 血管通路部位 */
    vascularPosition?: string | undefined;
    monitorBP?: string | undefined;
    /** 透后评估护士姓名 */
    assementAfterNurseName?: string | undefined;
    /** 透后小结护士标识 */
    summaryAfterNurseId?: string | undefined;
    /** 透后小结护士姓名 */
    summaryAfterNurseName?: string | undefined;
    /** 是否提前下机0,1 *判断标准：提前半个小时以上下机* */
    offEarly?: number | undefined;
    /** 提前下机原因 */
    offEarlyCause?: string | undefined;
    /** 取消透析原因 *在交叉核对之前都可以取消透析* */
    cancelReason?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    source?: string | undefined;
    /** 来源显示值 */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 诊断显示值 */
    diagnosisLabel?: string | undefined;
    /** 病区 *住院的* */
    ward?: string | undefined;
    /** 床位 *住院的* */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 病历夹号 *病历夹号* */
    dossierNumber?: string | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 透析次数 */
    dialysisCount?: number | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 管床护士标识 */
    bedNurseId?: string | undefined;
    /** 管床护士姓名 */
    bedNurseName?: string | undefined;
    /** 置管护士标识 */
    placementNurseId?: string | undefined;
    /** 置管护士姓名 */
    placementNurseName?: string | undefined;
    /** 质控护士标识 */
    qualityNurseId?: string | undefined;
    /** 质控护士姓名 */
    qualityNurseName?: string | undefined;
    /** 是否单超0,1 */
    iuf?: number;
    /** 点位穿刺节点 */
    punctureNodes?: string | undefined;
    /** 点位穿刺节点备注 */
    punctureNodesRemark?: string | undefined;
    /** 穿刺记录备注 */
    punctureRemark?: string | undefined;
    /** 是否单超0,1 */
    iufLabel?: string | undefined;
    /** 单超方式 */
    iufMode?: string | undefined;
    /** 单超时间 */
    iufHour?: number | undefined;
    /** 单超量 */
    iufValue?: number | undefined;
    /** 单超开始时间 */
    iufStartTime?: dayjs.Dayjs | undefined;
    /** 是否归档 */
    isArchive?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 上一次透析标识 */
    lastId?: string | undefined;
    /** 下一次透析标识 */
    nextId?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 指纹图片 */
    finger?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者姓名拼音码 */
    patientPinyinCode?: string | undefined;
    /** 患者姓名五笔码 */
    patientWubiCode?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 性别显示值 */
    genderLabel?: string | undefined;
    /** 病情 `DIC.PEOPLE.CONDITION` */
    medicareCondition?: string | undefined;
    /** 病情显示值 */
    medicareConditionName?: string | undefined;
    /** 治疗状态名称 */
    statusLabel?: string | undefined;
    /** 透析龄 */
    dialysisAge?: string | undefined;
    /** 透析龄 */
    dialysisAgeMonth?: string | undefined;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    cureDialysate?: CureRecordItemDialysate;
    cureAnticoagulant?: CureRecordItemAnticoagulant;
    cureConsumable?: CureRecordItemConsumable;
    cureMonitorFirst?: CureRecordItemMonitor;
    cureMonitorLast?: CureRecordItemMonitor;
    /** 透中监测 */
    cureMonitor?: CureRecordItemMonitor[] | undefined;
    cureComplicationFirst?: CureRecordItemComplication;
    /** 透中事件 */
    cureComplication?: CureRecordItemComplication[] | undefined;
    /** 透析医嘱 */
    cureDa?: CureRecordItemDa[] | undefined;
    cureSummary?: CureRecordItemSummary;
    disinfect?: CureRecordItemDisinfect;
    assementBefore?: CureRecordItemAssement;
    assementAfter?: CureRecordItemAssement;
    assementDialysis?: CureRecordItemAssement;
    /** 受支持的表单自定义数据 */
    assementValues?: SysFormValueView[] | undefined;
    /** 透前评估用 */
    assementValuesBefore?: SysFormValueView[] | undefined;
    /** 透后评估用 */
    assementValuesAfter?: SysFormValueView[] | undefined;
    /** 透析评估用 */
    assementValuesDialysis?: SysFormValueView[] | undefined;
    /** 影像文件 *data:image/jpeg;base64,...* */
    signature?: string | undefined;
    /** 自定义字段 */
    cureFieldValues?: CureFieldValueView[] | undefined;

    constructor(data?: ICureRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sn = _data["sn"];
            this.patientId = _data["patientId"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisMachineId = _data["dialysisMachineId"];
            this.dialysisMachineType = _data["dialysisMachineType"];
            this.dialysisMachineTypeLabel = _data["dialysisMachineTypeLabel"];
            this.dialysisMachineModel = _data["dialysisMachineModel"];
            this.dialysisMachineNo = _data["dialysisMachineNo"];
            this.dialysisMachineSn = _data["dialysisMachineSn"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.dialysisDurationSet = _data["dialysisDurationSet"];
            this.bestWeight = _data["bestWeight"];
            this.bestWeight1 = _data["bestWeight1"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.patientVascularAccessType = _data["patientVascularAccessType"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.patientOtherVascularAccessId = _data["patientOtherVascularAccessId"];
            this.patientOtherVascularAccessType = _data["patientOtherVascularAccessType"];
            this.patientOtherVascularAccessName = _data["patientOtherVascularAccessName"];
            this.rfm = _data["rfm"];
            this.rfmLabel = _data["rfmLabel"];
            this.rfr = _data["rfr"];
            this.rfv = _data["rfv"];
            this.status = _data["status"];
            this.beforeWeight = _data["beforeWeight"];
            this.beforeWeight1 = _data["beforeWeight1"];
            (<any>this).beforeNetWeight = _data["beforeNetWeight"];
            this.beforeWeightMode = _data["beforeWeightMode"];
            this.beforeWeightModeLabel = _data["beforeWeightModeLabel"];
            this.deductionWeight = _data["deductionWeight"];
            this.ufg = _data["ufg"];
            (<any>this).ufg1 = _data["ufg1"];
            this.ufc = _data["ufc"];
            this.deductionBeforeWeight = _data["deductionBeforeWeight"];
            this.deductionAfterWeight = _data["deductionAfterWeight"];
            this.afterWeight = _data["afterWeight"];
            this.afterWeight1 = _data["afterWeight1"];
            this.afterWeightMode = _data["afterWeightMode"];
            this.afterWeightModeLabel = _data["afterWeightModeLabel"];
            this.ufv = _data["ufv"];
            this.ufvWeight = _data["ufvWeight"];
            this.beforeBpPosition = _data["beforeBpPosition"];
            this.beforeBpPositionLabel = _data["beforeBpPositionLabel"];
            this.beforeSbp = _data["beforeSbp"];
            this.beforeDbp = _data["beforeDbp"];
            this.beforeBp = _data["beforeBp"];
            this.beforePulse = _data["beforePulse"];
            this.afterBpPosition = _data["afterBpPosition"];
            this.afterBpPositionLabel = _data["afterBpPositionLabel"];
            this.afterSbp = _data["afterSbp"];
            this.afterDbp = _data["afterDbp"];
            this.afterBp = _data["afterBp"];
            this.afterPulse = _data["afterPulse"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeBeforeWeight = _data["timeBeforeWeight"] ? dayjs(_data["timeBeforeWeight"].toString()) : <any>undefined;
            this.preAfterWeight = _data["preAfterWeight"];
            this.preAfterWeight1 = _data["preAfterWeight1"];
            this.addBestWeight = _data["addBestWeight"];
            this.reduceWeight = _data["reduceWeight"];
            this.appendWeight = _data["appendWeight"];
            this.timeBeforeBp = _data["timeBeforeBp"] ? dayjs(_data["timeBeforeBp"].toString()) : <any>undefined;
            this.timeEnactDoctor = _data["timeEnactDoctor"] ? dayjs(_data["timeEnactDoctor"].toString()) : <any>undefined;
            this.enact = _data["enact"];
            this.timeCheckNurse = _data["timeCheckNurse"] ? dayjs(_data["timeCheckNurse"].toString()) : <any>undefined;
            this.check = _data["check"];
            this.timeAssementBefore = _data["timeAssementBefore"] ? dayjs(_data["timeAssementBefore"].toString()) : <any>undefined;
            this.timeOn = _data["timeOn"] ? dayjs(_data["timeOn"].toString()) : <any>undefined;
            this.punctureMethod = _data["punctureMethod"];
            this.punctureMethodLabel = _data["punctureMethodLabel"];
            this.punctureNurseId = _data["punctureNurseId"];
            this.punctureNurseName = _data["punctureNurseName"];
            this.timeVerify = _data["timeVerify"] ? dayjs(_data["timeVerify"].toString()) : <any>undefined;
            this.timeFirstMonitor = _data["timeFirstMonitor"] ? dayjs(_data["timeFirstMonitor"].toString()) : <any>undefined;
            this.timeOff = _data["timeOff"] ? dayjs(_data["timeOff"].toString()) : <any>undefined;
            this.timeDisinfect = _data["timeDisinfect"] ? dayjs(_data["timeDisinfect"].toString()) : <any>undefined;
            this.timeAssementAfter = _data["timeAssementAfter"] ? dayjs(_data["timeAssementAfter"].toString()) : <any>undefined;
            this.timeAfterWeight = _data["timeAfterWeight"] ? dayjs(_data["timeAfterWeight"].toString()) : <any>undefined;
            this.timeAfterBp = _data["timeAfterBp"] ? dayjs(_data["timeAfterBp"].toString()) : <any>undefined;
            this.timeAfterSummary = _data["timeAfterSummary"] ? dayjs(_data["timeAfterSummary"].toString()) : <any>undefined;
            this.dialysisDurationFact = _data["dialysisDurationFact"];
            this.enactDoctorId = _data["enactDoctorId"];
            this.enactDoctorName = _data["enactDoctorName"];
            this.checkNurseId = _data["checkNurseId"];
            this.checkNurseName = _data["checkNurseName"];
            this.assementBeforeNurseId = _data["assementBeforeNurseId"];
            this.assementBeforeNurseName = _data["assementBeforeNurseName"];
            this.onNurseId = _data["onNurseId"];
            this.onNurseName = _data["onNurseName"];
            this.onTemp = _data["onTemp"];
            this.verifyNurseId = _data["verifyNurseId"];
            this.verifyNurseName = _data["verifyNurseName"];
            this.verify = _data["verify"];
            this.offNurseId = _data["offNurseId"];
            this.offNurseName = _data["offNurseName"];
            this.offTemp = _data["offTemp"];
            this.offBreathe = _data["offBreathe"];
            this.assementAfterNurseId = _data["assementAfterNurseId"];
            this.vascularLocation = _data["vascularLocation"];
            this.vascularPosition = _data["vascularPosition"];
            this.monitorBP = _data["monitorBP"];
            this.assementAfterNurseName = _data["assementAfterNurseName"];
            this.summaryAfterNurseId = _data["summaryAfterNurseId"];
            this.summaryAfterNurseName = _data["summaryAfterNurseName"];
            this.offEarly = _data["offEarly"];
            this.offEarlyCause = _data["offEarlyCause"];
            this.cancelReason = _data["cancelReason"];
            this.age = _data["age"];
            this.source = _data["source"];
            this.sourceLabel = _data["sourceLabel"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.diagnosis = _data["diagnosis"];
            this.diagnosisLabel = _data["diagnosisLabel"];
            this.ward = _data["ward"];
            this.bed = _data["bed"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dossierNumber = _data["dossierNumber"];
            this.dialysisCountInit = _data["dialysisCountInit"];
            this.dialysisCount = _data["dialysisCount"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            this.suggestion = _data["suggestion"];
            this.bedNurseId = _data["bedNurseId"];
            this.bedNurseName = _data["bedNurseName"];
            this.placementNurseId = _data["placementNurseId"];
            this.placementNurseName = _data["placementNurseName"];
            this.qualityNurseId = _data["qualityNurseId"];
            this.qualityNurseName = _data["qualityNurseName"];
            this.iuf = _data["iuf"];
            this.punctureNodes = _data["punctureNodes"];
            this.punctureNodesRemark = _data["punctureNodesRemark"];
            this.punctureRemark = _data["punctureRemark"];
            this.iufLabel = _data["iufLabel"];
            this.iufMode = _data["iufMode"];
            this.iufHour = _data["iufHour"];
            this.iufValue = _data["iufValue"];
            this.iufStartTime = _data["iufStartTime"] ? dayjs(_data["iufStartTime"].toString()) : <any>undefined;
            this.isArchive = _data["isArchive"];
            this.remark = _data["remark"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.lastId = _data["lastId"];
            this.nextId = _data["nextId"];
            this.patientName = _data["patientName"];
            this.finger = _data["finger"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.patientPinyinCode = _data["patientPinyinCode"];
            this.patientWubiCode = _data["patientWubiCode"];
            this.gender = _data["gender"];
            this.genderLabel = _data["genderLabel"];
            this.medicareCondition = _data["medicareCondition"];
            this.medicareConditionName = _data["medicareConditionName"];
            this.statusLabel = _data["statusLabel"];
            this.dialysisAge = _data["dialysisAge"];
            this.dialysisAgeMonth = _data["dialysisAgeMonth"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.cureDialysate = _data["cureDialysate"] ? CureRecordItemDialysate.fromJS(_data["cureDialysate"]) : <any>undefined;
            this.cureAnticoagulant = _data["cureAnticoagulant"] ? CureRecordItemAnticoagulant.fromJS(_data["cureAnticoagulant"]) : <any>undefined;
            this.cureConsumable = _data["cureConsumable"] ? CureRecordItemConsumable.fromJS(_data["cureConsumable"]) : <any>undefined;
            this.cureMonitorFirst = _data["cureMonitorFirst"] ? CureRecordItemMonitor.fromJS(_data["cureMonitorFirst"]) : <any>undefined;
            this.cureMonitorLast = _data["cureMonitorLast"] ? CureRecordItemMonitor.fromJS(_data["cureMonitorLast"]) : <any>undefined;
            if (Array.isArray(_data["cureMonitor"])) {
                this.cureMonitor = [] as any;
                for (let item of _data["cureMonitor"])
                    this.cureMonitor!.push(CureRecordItemMonitor.fromJS(item));
            }
            this.cureComplicationFirst = _data["cureComplicationFirst"] ? CureRecordItemComplication.fromJS(_data["cureComplicationFirst"]) : <any>undefined;
            if (Array.isArray(_data["cureComplication"])) {
                this.cureComplication = [] as any;
                for (let item of _data["cureComplication"])
                    this.cureComplication!.push(CureRecordItemComplication.fromJS(item));
            }
            if (Array.isArray(_data["cureDa"])) {
                this.cureDa = [] as any;
                for (let item of _data["cureDa"])
                    this.cureDa!.push(CureRecordItemDa.fromJS(item));
            }
            this.cureSummary = _data["cureSummary"] ? CureRecordItemSummary.fromJS(_data["cureSummary"]) : <any>undefined;
            this.disinfect = _data["disinfect"] ? CureRecordItemDisinfect.fromJS(_data["disinfect"]) : <any>undefined;
            this.assementBefore = _data["assementBefore"] ? CureRecordItemAssement.fromJS(_data["assementBefore"]) : <any>undefined;
            this.assementAfter = _data["assementAfter"] ? CureRecordItemAssement.fromJS(_data["assementAfter"]) : <any>undefined;
            this.assementDialysis = _data["assementDialysis"] ? CureRecordItemAssement.fromJS(_data["assementDialysis"]) : <any>undefined;
            if (Array.isArray(_data["assementValues"])) {
                this.assementValues = [] as any;
                for (let item of _data["assementValues"])
                    this.assementValues!.push(SysFormValueView.fromJS(item));
            }
            if (Array.isArray(_data["assementValuesBefore"])) {
                this.assementValuesBefore = [] as any;
                for (let item of _data["assementValuesBefore"])
                    this.assementValuesBefore!.push(SysFormValueView.fromJS(item));
            }
            if (Array.isArray(_data["assementValuesAfter"])) {
                this.assementValuesAfter = [] as any;
                for (let item of _data["assementValuesAfter"])
                    this.assementValuesAfter!.push(SysFormValueView.fromJS(item));
            }
            if (Array.isArray(_data["assementValuesDialysis"])) {
                this.assementValuesDialysis = [] as any;
                for (let item of _data["assementValuesDialysis"])
                    this.assementValuesDialysis!.push(SysFormValueView.fromJS(item));
            }
            this.signature = _data["signature"];
            if (Array.isArray(_data["cureFieldValues"])) {
                this.cureFieldValues = [] as any;
                for (let item of _data["cureFieldValues"])
                    this.cureFieldValues!.push(CureFieldValueView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sn"] = this.sn;
        data["patientId"] = this.patientId;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisMachineId"] = this.dialysisMachineId;
        data["dialysisMachineType"] = this.dialysisMachineType;
        data["dialysisMachineTypeLabel"] = this.dialysisMachineTypeLabel;
        data["dialysisMachineModel"] = this.dialysisMachineModel;
        data["dialysisMachineNo"] = this.dialysisMachineNo;
        data["dialysisMachineSn"] = this.dialysisMachineSn;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["dialysisDurationSet"] = this.dialysisDurationSet;
        data["bestWeight"] = this.bestWeight;
        data["bestWeight1"] = this.bestWeight1;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["patientVascularAccessType"] = this.patientVascularAccessType;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["patientOtherVascularAccessId"] = this.patientOtherVascularAccessId;
        data["patientOtherVascularAccessType"] = this.patientOtherVascularAccessType;
        data["patientOtherVascularAccessName"] = this.patientOtherVascularAccessName;
        data["rfm"] = this.rfm;
        data["rfmLabel"] = this.rfmLabel;
        data["rfr"] = this.rfr;
        data["rfv"] = this.rfv;
        data["status"] = this.status;
        data["beforeWeight"] = this.beforeWeight;
        data["beforeWeight1"] = this.beforeWeight1;
        data["beforeNetWeight"] = this.beforeNetWeight;
        data["beforeWeightMode"] = this.beforeWeightMode;
        data["beforeWeightModeLabel"] = this.beforeWeightModeLabel;
        data["deductionWeight"] = this.deductionWeight;
        data["ufg"] = this.ufg;
        data["ufg1"] = this.ufg1;
        data["ufc"] = this.ufc;
        data["deductionBeforeWeight"] = this.deductionBeforeWeight;
        data["deductionAfterWeight"] = this.deductionAfterWeight;
        data["afterWeight"] = this.afterWeight;
        data["afterWeight1"] = this.afterWeight1;
        data["afterWeightMode"] = this.afterWeightMode;
        data["afterWeightModeLabel"] = this.afterWeightModeLabel;
        data["ufv"] = this.ufv;
        data["ufvWeight"] = this.ufvWeight;
        data["beforeBpPosition"] = this.beforeBpPosition;
        data["beforeBpPositionLabel"] = this.beforeBpPositionLabel;
        data["beforeSbp"] = this.beforeSbp;
        data["beforeDbp"] = this.beforeDbp;
        data["beforeBp"] = this.beforeBp;
        data["beforePulse"] = this.beforePulse;
        data["afterBpPosition"] = this.afterBpPosition;
        data["afterBpPositionLabel"] = this.afterBpPositionLabel;
        data["afterSbp"] = this.afterSbp;
        data["afterDbp"] = this.afterDbp;
        data["afterBp"] = this.afterBp;
        data["afterPulse"] = this.afterPulse;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toISOString() : <any>undefined;
        data["timeBeforeWeight"] = this.timeBeforeWeight ? this.timeBeforeWeight.toISOString() : <any>undefined;
        data["preAfterWeight"] = this.preAfterWeight;
        data["preAfterWeight1"] = this.preAfterWeight1;
        data["addBestWeight"] = this.addBestWeight;
        data["reduceWeight"] = this.reduceWeight;
        data["appendWeight"] = this.appendWeight;
        data["timeBeforeBp"] = this.timeBeforeBp ? this.timeBeforeBp.toISOString() : <any>undefined;
        data["timeEnactDoctor"] = this.timeEnactDoctor ? this.timeEnactDoctor.toISOString() : <any>undefined;
        data["enact"] = this.enact;
        data["timeCheckNurse"] = this.timeCheckNurse ? this.timeCheckNurse.toISOString() : <any>undefined;
        data["check"] = this.check;
        data["timeAssementBefore"] = this.timeAssementBefore ? this.timeAssementBefore.toISOString() : <any>undefined;
        data["timeOn"] = this.timeOn ? this.timeOn.toISOString() : <any>undefined;
        data["punctureMethod"] = this.punctureMethod;
        data["punctureMethodLabel"] = this.punctureMethodLabel;
        data["punctureNurseId"] = this.punctureNurseId;
        data["punctureNurseName"] = this.punctureNurseName;
        data["timeVerify"] = this.timeVerify ? this.timeVerify.toISOString() : <any>undefined;
        data["timeFirstMonitor"] = this.timeFirstMonitor ? this.timeFirstMonitor.toISOString() : <any>undefined;
        data["timeOff"] = this.timeOff ? this.timeOff.toISOString() : <any>undefined;
        data["timeDisinfect"] = this.timeDisinfect ? this.timeDisinfect.toISOString() : <any>undefined;
        data["timeAssementAfter"] = this.timeAssementAfter ? this.timeAssementAfter.toISOString() : <any>undefined;
        data["timeAfterWeight"] = this.timeAfterWeight ? this.timeAfterWeight.toISOString() : <any>undefined;
        data["timeAfterBp"] = this.timeAfterBp ? this.timeAfterBp.toISOString() : <any>undefined;
        data["timeAfterSummary"] = this.timeAfterSummary ? this.timeAfterSummary.toISOString() : <any>undefined;
        data["dialysisDurationFact"] = this.dialysisDurationFact;
        data["enactDoctorId"] = this.enactDoctorId;
        data["enactDoctorName"] = this.enactDoctorName;
        data["checkNurseId"] = this.checkNurseId;
        data["checkNurseName"] = this.checkNurseName;
        data["assementBeforeNurseId"] = this.assementBeforeNurseId;
        data["assementBeforeNurseName"] = this.assementBeforeNurseName;
        data["onNurseId"] = this.onNurseId;
        data["onNurseName"] = this.onNurseName;
        data["onTemp"] = this.onTemp;
        data["verifyNurseId"] = this.verifyNurseId;
        data["verifyNurseName"] = this.verifyNurseName;
        data["verify"] = this.verify;
        data["offNurseId"] = this.offNurseId;
        data["offNurseName"] = this.offNurseName;
        data["offTemp"] = this.offTemp;
        data["offBreathe"] = this.offBreathe;
        data["assementAfterNurseId"] = this.assementAfterNurseId;
        data["vascularLocation"] = this.vascularLocation;
        data["vascularPosition"] = this.vascularPosition;
        data["monitorBP"] = this.monitorBP;
        data["assementAfterNurseName"] = this.assementAfterNurseName;
        data["summaryAfterNurseId"] = this.summaryAfterNurseId;
        data["summaryAfterNurseName"] = this.summaryAfterNurseName;
        data["offEarly"] = this.offEarly;
        data["offEarlyCause"] = this.offEarlyCause;
        data["cancelReason"] = this.cancelReason;
        data["age"] = this.age;
        data["source"] = this.source;
        data["sourceLabel"] = this.sourceLabel;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["diagnosis"] = this.diagnosis;
        data["diagnosisLabel"] = this.diagnosisLabel;
        data["ward"] = this.ward;
        data["bed"] = this.bed;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dossierNumber"] = this.dossierNumber;
        data["dialysisCountInit"] = this.dialysisCountInit;
        data["dialysisCount"] = this.dialysisCount;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        data["suggestion"] = this.suggestion;
        data["bedNurseId"] = this.bedNurseId;
        data["bedNurseName"] = this.bedNurseName;
        data["placementNurseId"] = this.placementNurseId;
        data["placementNurseName"] = this.placementNurseName;
        data["qualityNurseId"] = this.qualityNurseId;
        data["qualityNurseName"] = this.qualityNurseName;
        data["iuf"] = this.iuf;
        data["punctureNodes"] = this.punctureNodes;
        data["punctureNodesRemark"] = this.punctureNodesRemark;
        data["punctureRemark"] = this.punctureRemark;
        data["iufLabel"] = this.iufLabel;
        data["iufMode"] = this.iufMode;
        data["iufHour"] = this.iufHour;
        data["iufValue"] = this.iufValue;
        data["iufStartTime"] = this.iufStartTime ? this.iufStartTime.toISOString() : <any>undefined;
        data["isArchive"] = this.isArchive;
        data["remark"] = this.remark;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["lastId"] = this.lastId;
        data["nextId"] = this.nextId;
        data["patientName"] = this.patientName;
        data["finger"] = this.finger;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["patientPinyinCode"] = this.patientPinyinCode;
        data["patientWubiCode"] = this.patientWubiCode;
        data["gender"] = this.gender;
        data["genderLabel"] = this.genderLabel;
        data["medicareCondition"] = this.medicareCondition;
        data["medicareConditionName"] = this.medicareConditionName;
        data["statusLabel"] = this.statusLabel;
        data["dialysisAge"] = this.dialysisAge;
        data["dialysisAgeMonth"] = this.dialysisAgeMonth;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["cureDialysate"] = this.cureDialysate ? this.cureDialysate.toJSON() : <any>undefined;
        data["cureAnticoagulant"] = this.cureAnticoagulant ? this.cureAnticoagulant.toJSON() : <any>undefined;
        data["cureConsumable"] = this.cureConsumable ? this.cureConsumable.toJSON() : <any>undefined;
        data["cureMonitorFirst"] = this.cureMonitorFirst ? this.cureMonitorFirst.toJSON() : <any>undefined;
        data["cureMonitorLast"] = this.cureMonitorLast ? this.cureMonitorLast.toJSON() : <any>undefined;
        if (Array.isArray(this.cureMonitor)) {
            data["cureMonitor"] = [];
            for (let item of this.cureMonitor)
                data["cureMonitor"].push(item.toJSON());
        }
        data["cureComplicationFirst"] = this.cureComplicationFirst ? this.cureComplicationFirst.toJSON() : <any>undefined;
        if (Array.isArray(this.cureComplication)) {
            data["cureComplication"] = [];
            for (let item of this.cureComplication)
                data["cureComplication"].push(item.toJSON());
        }
        if (Array.isArray(this.cureDa)) {
            data["cureDa"] = [];
            for (let item of this.cureDa)
                data["cureDa"].push(item.toJSON());
        }
        data["cureSummary"] = this.cureSummary ? this.cureSummary.toJSON() : <any>undefined;
        data["disinfect"] = this.disinfect ? this.disinfect.toJSON() : <any>undefined;
        data["assementBefore"] = this.assementBefore ? this.assementBefore.toJSON() : <any>undefined;
        data["assementAfter"] = this.assementAfter ? this.assementAfter.toJSON() : <any>undefined;
        data["assementDialysis"] = this.assementDialysis ? this.assementDialysis.toJSON() : <any>undefined;
        if (Array.isArray(this.assementValues)) {
            data["assementValues"] = [];
            for (let item of this.assementValues)
                data["assementValues"].push(item.toJSON());
        }
        if (Array.isArray(this.assementValuesBefore)) {
            data["assementValuesBefore"] = [];
            for (let item of this.assementValuesBefore)
                data["assementValuesBefore"].push(item.toJSON());
        }
        if (Array.isArray(this.assementValuesAfter)) {
            data["assementValuesAfter"] = [];
            for (let item of this.assementValuesAfter)
                data["assementValuesAfter"].push(item.toJSON());
        }
        if (Array.isArray(this.assementValuesDialysis)) {
            data["assementValuesDialysis"] = [];
            for (let item of this.assementValuesDialysis)
                data["assementValuesDialysis"].push(item.toJSON());
        }
        data["signature"] = this.signature;
        if (Array.isArray(this.cureFieldValues)) {
            data["cureFieldValues"] = [];
            for (let item of this.cureFieldValues)
                data["cureFieldValues"].push(item.toJSON());
        }
        return data;
    }
}

/** 透析记录单 */
export interface ICureRecordView {
    /** 标识 */
    id?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析机标识 */
    dialysisMachineId?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineType?: string | undefined;
    /** 透析机类型显示值 */
    dialysisMachineTypeLabel?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 设备号 */
    dialysisMachineSn?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式显示值 */
    dialysisModeLabel?: string | undefined;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet?: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight1?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路) */
    patientVascularAccessId?: string | undefined;
    /** 血管通路类型 */
    patientVascularAccessType?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** [血管通路](患者血管通路) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路类型 */
    patientOtherVascularAccessType?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessName?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换方式显示值 */
    rfmLabel?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 治疗流程状态 `DIC.DIALYSIS.STATUS` *已签到,上机准备,治疗中,已下机,已结束* */
    status?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重 *kg* */
    beforeWeight1?: number | undefined;
    /** 透前净体重 */
    beforeNetWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前体重方式显示值 */
    beforeWeightModeLabel?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg1?: number | undefined;
    /** 净脱水量 *ml Ultrafiltration Complete* */
    ufc?: number | undefined;
    /** 偏移后透前体重 */
    deductionBeforeWeight?: number | undefined;
    /** 偏移后透后体重 */
    deductionAfterWeight?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight1?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后体重方式显示值 */
    afterWeightModeLabel?: string | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 称重脱水量 *ml* */
    ufvWeight?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    beforeBpPosition?: string | undefined;
    /** 透前血压测量位置显示值 */
    beforeBpPositionLabel?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前血压 *mmHg* */
    beforeBp?: string | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透后血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    afterBpPosition?: string | undefined;
    /** 透后血压测量位置显示值 */
    afterBpPositionLabel?: string | undefined;
    /** 透后收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 透后舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 透后血压 *mmHg* */
    afterBp?: string | undefined;
    /** 透后脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 透前体重时间 */
    timeBeforeWeight?: dayjs.Dayjs | undefined;
    /** 上次透后体重 */
    preAfterWeight?: number | undefined;
    /** 上次透后体重 */
    preAfterWeight1?: number | undefined;
    /** 较干体重增加量 */
    addBestWeight?: number | undefined;
    /** 本次透析体重下降量 */
    reduceWeight?: number | undefined;
    appendWeight?: number | undefined;
    /** 透前血压时间 */
    timeBeforeBp?: dayjs.Dayjs | undefined;
    /** 医生制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 方案是否制定0,1 */
    enact?: number | undefined;
    /** 护士确认方案时间 */
    timeCheckNurse?: dayjs.Dayjs | undefined;
    /** 方案是否通过0,1 */
    check?: number | undefined;
    /** 透前评估时间 */
    timeAssementBefore?: dayjs.Dayjs | undefined;
    /** 穿刺时间 */
    timeOn?: dayjs.Dayjs | undefined;
    /** 穿刺方法 */
    punctureMethod?: string | undefined;
    /** 穿刺方法显示值 */
    punctureMethodLabel?: string | undefined;
    /** 穿刺护士 */
    punctureNurseId?: string | undefined;
    /** 穿刺护士 */
    punctureNurseName?: string | undefined;
    /** 交叉核对时间 */
    timeVerify?: dayjs.Dayjs | undefined;
    /** 首次监测时间 */
    timeFirstMonitor?: dayjs.Dayjs | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 消毒时间 */
    timeDisinfect?: dayjs.Dayjs | undefined;
    /** 透后评估时间 */
    timeAssementAfter?: dayjs.Dayjs | undefined;
    /** 透后体重时间 */
    timeAfterWeight?: dayjs.Dayjs | undefined;
    /** 透后血压时间 */
    timeAfterBp?: dayjs.Dayjs | undefined;
    /** 透后小结时间 */
    timeAfterSummary?: dayjs.Dayjs | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 制定方案医生标识 */
    enactDoctorId?: string | undefined;
    /** 制定方案医生姓名 */
    enactDoctorName?: string | undefined;
    /** 确认方案护士标识 */
    checkNurseId?: string | undefined;
    /** 确认方案护士姓名 */
    checkNurseName?: string | undefined;
    /** 透前评估护士标识 */
    assementBeforeNurseId?: string | undefined;
    /** 透前评估护士姓名 */
    assementBeforeNurseName?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 透前体温 */
    onTemp?: number | undefined;
    /** 核对护士标识 */
    verifyNurseId?: string | undefined;
    /** 核对护士姓名 */
    verifyNurseName?: string | undefined;
    /** 核对是否通过0,1 */
    verify?: number | undefined;
    /** 下机护士标识 */
    offNurseId?: string | undefined;
    /** 下机护士姓名 */
    offNurseName?: string | undefined;
    /** 下机体温 */
    offTemp?: number | undefined;
    /** 下机呼吸 */
    offBreathe?: number | undefined;
    /** 透后评估护士标识 */
    assementAfterNurseId?: string | undefined;
    vascularLocation?: string | undefined;
    /** 血管通路部位 */
    vascularPosition?: string | undefined;
    monitorBP?: string | undefined;
    /** 透后评估护士姓名 */
    assementAfterNurseName?: string | undefined;
    /** 透后小结护士标识 */
    summaryAfterNurseId?: string | undefined;
    /** 透后小结护士姓名 */
    summaryAfterNurseName?: string | undefined;
    /** 是否提前下机0,1 *判断标准：提前半个小时以上下机* */
    offEarly?: number | undefined;
    /** 提前下机原因 */
    offEarlyCause?: string | undefined;
    /** 取消透析原因 *在交叉核对之前都可以取消透析* */
    cancelReason?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    source?: string | undefined;
    /** 来源显示值 */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 诊断显示值 */
    diagnosisLabel?: string | undefined;
    /** 病区 *住院的* */
    ward?: string | undefined;
    /** 床位 *住院的* */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 病历夹号 *病历夹号* */
    dossierNumber?: string | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 透析次数 */
    dialysisCount?: number | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 管床护士标识 */
    bedNurseId?: string | undefined;
    /** 管床护士姓名 */
    bedNurseName?: string | undefined;
    /** 置管护士标识 */
    placementNurseId?: string | undefined;
    /** 置管护士姓名 */
    placementNurseName?: string | undefined;
    /** 质控护士标识 */
    qualityNurseId?: string | undefined;
    /** 质控护士姓名 */
    qualityNurseName?: string | undefined;
    /** 是否单超0,1 */
    iuf?: number;
    /** 点位穿刺节点 */
    punctureNodes?: string | undefined;
    /** 点位穿刺节点备注 */
    punctureNodesRemark?: string | undefined;
    /** 穿刺记录备注 */
    punctureRemark?: string | undefined;
    /** 是否单超0,1 */
    iufLabel?: string | undefined;
    /** 单超方式 */
    iufMode?: string | undefined;
    /** 单超时间 */
    iufHour?: number | undefined;
    /** 单超量 */
    iufValue?: number | undefined;
    /** 单超开始时间 */
    iufStartTime?: dayjs.Dayjs | undefined;
    /** 是否归档 */
    isArchive?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 上一次透析标识 */
    lastId?: string | undefined;
    /** 下一次透析标识 */
    nextId?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 指纹图片 */
    finger?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者姓名拼音码 */
    patientPinyinCode?: string | undefined;
    /** 患者姓名五笔码 */
    patientWubiCode?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 性别显示值 */
    genderLabel?: string | undefined;
    /** 病情 `DIC.PEOPLE.CONDITION` */
    medicareCondition?: string | undefined;
    /** 病情显示值 */
    medicareConditionName?: string | undefined;
    /** 治疗状态名称 */
    statusLabel?: string | undefined;
    /** 透析龄 */
    dialysisAge?: string | undefined;
    /** 透析龄 */
    dialysisAgeMonth?: string | undefined;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    cureDialysate?: CureRecordItemDialysate;
    cureAnticoagulant?: CureRecordItemAnticoagulant;
    cureConsumable?: CureRecordItemConsumable;
    cureMonitorFirst?: CureRecordItemMonitor;
    cureMonitorLast?: CureRecordItemMonitor;
    /** 透中监测 */
    cureMonitor?: CureRecordItemMonitor[] | undefined;
    cureComplicationFirst?: CureRecordItemComplication;
    /** 透中事件 */
    cureComplication?: CureRecordItemComplication[] | undefined;
    /** 透析医嘱 */
    cureDa?: CureRecordItemDa[] | undefined;
    cureSummary?: CureRecordItemSummary;
    disinfect?: CureRecordItemDisinfect;
    assementBefore?: CureRecordItemAssement;
    assementAfter?: CureRecordItemAssement;
    assementDialysis?: CureRecordItemAssement;
    /** 受支持的表单自定义数据 */
    assementValues?: SysFormValueView[] | undefined;
    /** 透前评估用 */
    assementValuesBefore?: SysFormValueView[] | undefined;
    /** 透后评估用 */
    assementValuesAfter?: SysFormValueView[] | undefined;
    /** 透析评估用 */
    assementValuesDialysis?: SysFormValueView[] | undefined;
    /** 影像文件 *data:image/jpeg;base64,...* */
    signature?: string | undefined;
    /** 自定义字段 */
    cureFieldValues?: CureFieldValueView[] | undefined;
}

/** Reponse */
export class CureRecordViewResult implements ICureRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordView[] | undefined;

    constructor(data?: ICureRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordView[] | undefined;
}

/** 透析记录单补录 */
export class CureReplenish implements ICureReplenish {
    /** 透析日期（年月日）时间（签到时间） */
    dialysisDate!: dayjs.Dayjs;
    /** 班次 */
    cureShiftId!: string;
    /** 床位 */
    deptDialysisBedId!: string;
    /** 院区 */
    sysHospitalAreaId!: string;

    constructor(data?: ICureReplenish) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.cureShiftId = _data["cureShiftId"];
            this.deptDialysisBedId = _data["deptDialysisBedId"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
        }
    }

    static fromJS(data: any): CureReplenish {
        data = typeof data === 'object' ? data : {};
        let result = new CureReplenish();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["cureShiftId"] = this.cureShiftId;
        data["deptDialysisBedId"] = this.deptDialysisBedId;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        return data;
    }
}

/** 透析记录单补录 */
export interface ICureReplenish {
    /** 透析日期（年月日）时间（签到时间） */
    dialysisDate: dayjs.Dayjs;
    /** 班次 */
    cureShiftId: string;
    /** 床位 */
    deptDialysisBedId: string;
    /** 院区 */
    sysHospitalAreaId: string;
}

export class CureScheduleQuickEditModel implements ICureScheduleQuickEditModel {
    /** 患者标识就诊卡号 */
    medicalNumber!: string;
    /** 透析日期 */
    dialysisDate!: dayjs.Dayjs;
    /** `DIC.DIALYSIS.MODE` 透析方式 *字典值* */
    dialysisMode?: string | undefined;
    /** [透析班次标识](透析班次Id) */
    cureShiftId!: string;
    /** [透析床位标识](透析床位Id) */
    deptDialysisBedId!: string;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 图标 `DIC.DIALYSIS.ICON` */
    icon?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureScheduleQuickEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.medicalNumber = _data["medicalNumber"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.dialysisMode = _data["dialysisMode"];
            this.cureShiftId = _data["cureShiftId"];
            this.deptDialysisBedId = _data["deptDialysisBedId"];
            this.color = _data["color"];
            this.icon = _data["icon"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureScheduleQuickEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleQuickEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["medicalNumber"] = this.medicalNumber;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["dialysisMode"] = this.dialysisMode;
        data["cureShiftId"] = this.cureShiftId;
        data["deptDialysisBedId"] = this.deptDialysisBedId;
        data["color"] = this.color;
        data["icon"] = this.icon;
        data["remark"] = this.remark;
        return data;
    }
}

export interface ICureScheduleQuickEditModel {
    /** 患者标识就诊卡号 */
    medicalNumber: string;
    /** 透析日期 */
    dialysisDate: dayjs.Dayjs;
    /** `DIC.DIALYSIS.MODE` 透析方式 *字典值* */
    dialysisMode?: string | undefined;
    /** [透析班次标识](透析班次Id) */
    cureShiftId: string;
    /** [透析床位标识](透析床位Id) */
    deptDialysisBedId: string;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 图标 `DIC.DIALYSIS.ICON` */
    icon?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

export class CureStatusView implements ICureStatusView {
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 状态 */
    status?: string | undefined;
    /** 床号 */
    bedName?: string | undefined;
    /** 床位标识 */
    bedId?: string | undefined;
    /** 区间 */
    dialysisAreaName?: string | undefined;
    /** 状态 - 显示值 */
    statusLabel?: string | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 实际脱水量（未下机前填最后一次透中监测记录） */
    ufv?: number | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式显示值 */
    dialysisModeLabel?: string | undefined;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** 种类 - 抗凝剂类型 */
    anticoagulantType?: string | undefined;
    /** 种类 - 抗凝剂类型显示值 */
    anticoagulantTypeLabel?: string | undefined;
    /** 抗凝剂简称 */
    anticoagulantShortName?: string | undefined;
    /** 首剂量 */
    first?: number | undefined;
    /** 首剂-单位 */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加量 */
    additionalAmount?: number | undefined;
    /** 追加单位 */
    appendRateUnit?: string | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 抗凝剂总量 */
    total?: number | undefined;
    /** 总量单位 */
    totalUnit?: string | undefined;
    /** 收缩压 - 血压（返回最后一次测量） */
    lastSBP?: number | undefined;
    /** 舒张压 - 血压（返回最后一次测量） */
    lastDBP?: number | undefined;
    /** 脉搏/心率（返回最后一次测量） */
    lastPulse?: number | undefined;
    /** 上机时间 */
    timeOn?: dayjs.Dayjs | undefined;
    /** 透析时长 *分钟* */
    dialysisDuration?: number | undefined;
    /** 透中监测数量 */
    monitorCount?: number;
    /** 透中事件数量 */
    eventCount?: number;
    /** 医嘱数量 - 未执行的 */
    medicalAdviceCountUnexecuted?: number;
    /** 是否已经关注(关注 1 未关注 2) */
    focus?: number;
    /** 是否已经签到 */
    hasSignedBefore?: boolean;
    /** 是否已经透前测量 */
    hasMeasureBefore?: boolean;
    /** 是否已经制定处方 */
    hasEnactBefore?: boolean;
    /** 是否已经确认处方 */
    hasCheckBefore?: boolean;
    /** 是否已经透前评估 */
    hasAssementBefore?: boolean;
    /** 是否已经穿刺/上机 */
    hasOnMiddle?: boolean;
    /** 是否已经交叉核对 */
    hasVerifyMiddle?: boolean;
    /** 是否已经透中监测 */
    hasMonitorMiddle?: boolean;
    /** 是否已经透析评估 */
    hasAssementDialysis?: boolean;
    /** 是否已经下机 */
    hasOffAfter?: boolean;
    /** 是否已经消毒 */
    hasDisinfectAfter?: boolean;
    /** 是否已经透后评估 */
    hasAssementAfter?: boolean;
    /** 是否已经透后小结 */
    hasSummaryAfter?: boolean;
    /** 是否允许签到 */
    allowSignedBefore?: boolean;
    /** 是否允许透前测量 */
    allowMeasureBefore?: boolean;
    /** 是否允许制定处方 */
    allowEnactBefore?: boolean;
    /** 是否允许确认处方 */
    allowCheckBefore?: boolean;
    /** 是否允许透前评估 */
    allowAssementBefore?: boolean;
    /** 是否允许穿刺/上机 */
    allowOnMiddle?: boolean;
    /** 是否允许交叉核对 */
    allowVerifyMiddle?: boolean;
    /** 是否允许透中监测 */
    allowMonitorMiddle?: boolean;
    /** 是否允许透析评估 */
    allowAssementDialysis?: boolean;
    /** 是否允许下机 */
    allowOffAfter?: boolean;
    /** 是否允许消毒 */
    allowDisinfectAfter?: boolean;
    /** 是否允许透后评估 */
    allowAssementAfter?: boolean;
    /** 是否允许透后小结 */
    allowSummaryAfter?: boolean;
    /** 是否有拒绝处方信息 */
    hasRefusePrescription?: boolean;
    /** 是否有异常交叉核对信息 */
    hasAbnormalVerify?: boolean;
    /** 下机时间 */
    timeOff?: string | undefined;
    /** 透析进度 */
    percent?: number | undefined;
    /** 透析剩余时间 */
    timeLeft?: string | undefined;
    /** 透析时长单位 */
    timeUnit?: string | undefined;
    /** 卡片按钮 */
    buttons?: Button[] | undefined;
    /** 当前必须完成的流程 */
    message?: string | undefined;
    abnormaAllTips?: PatientAbnormaAllTips;
    /** 自定义字段 */
    customs?: CureTodayViewCustom[] | undefined;

    constructor(data?: ICureStatusView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.status = _data["status"];
            this.bedName = _data["bedName"];
            this.bedId = _data["bedId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.statusLabel = _data["statusLabel"];
            this.ufg = _data["ufg"];
            this.ufv = _data["ufv"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.anticoagulantName = _data["anticoagulantName"];
            this.anticoagulantType = _data["anticoagulantType"];
            this.anticoagulantTypeLabel = _data["anticoagulantTypeLabel"];
            this.anticoagulantShortName = _data["anticoagulantShortName"];
            this.first = _data["first"];
            this.firstUnit = _data["firstUnit"];
            this.appendRate = _data["appendRate"];
            this.additionalAmount = _data["additionalAmount"];
            this.appendRateUnit = _data["appendRateUnit"];
            this.append = _data["append"];
            this.appendUnit = _data["appendUnit"];
            this.total = _data["total"];
            this.totalUnit = _data["totalUnit"];
            this.lastSBP = _data["lastSBP"];
            this.lastDBP = _data["lastDBP"];
            this.lastPulse = _data["lastPulse"];
            this.timeOn = _data["timeOn"] ? dayjs(_data["timeOn"].toString()) : <any>undefined;
            this.dialysisDuration = _data["dialysisDuration"];
            this.monitorCount = _data["monitorCount"];
            this.eventCount = _data["eventCount"];
            this.medicalAdviceCountUnexecuted = _data["medicalAdviceCountUnexecuted"];
            this.focus = _data["focus"];
            this.hasSignedBefore = _data["hasSignedBefore"];
            this.hasMeasureBefore = _data["hasMeasureBefore"];
            this.hasEnactBefore = _data["hasEnactBefore"];
            this.hasCheckBefore = _data["hasCheckBefore"];
            this.hasAssementBefore = _data["hasAssementBefore"];
            this.hasOnMiddle = _data["hasOnMiddle"];
            this.hasVerifyMiddle = _data["hasVerifyMiddle"];
            this.hasMonitorMiddle = _data["hasMonitorMiddle"];
            this.hasAssementDialysis = _data["hasAssementDialysis"];
            this.hasOffAfter = _data["hasOffAfter"];
            this.hasDisinfectAfter = _data["hasDisinfectAfter"];
            this.hasAssementAfter = _data["hasAssementAfter"];
            this.hasSummaryAfter = _data["hasSummaryAfter"];
            this.allowSignedBefore = _data["allowSignedBefore"];
            this.allowMeasureBefore = _data["allowMeasureBefore"];
            this.allowEnactBefore = _data["allowEnactBefore"];
            this.allowCheckBefore = _data["allowCheckBefore"];
            this.allowAssementBefore = _data["allowAssementBefore"];
            this.allowOnMiddle = _data["allowOnMiddle"];
            this.allowVerifyMiddle = _data["allowVerifyMiddle"];
            this.allowMonitorMiddle = _data["allowMonitorMiddle"];
            this.allowAssementDialysis = _data["allowAssementDialysis"];
            this.allowOffAfter = _data["allowOffAfter"];
            this.allowDisinfectAfter = _data["allowDisinfectAfter"];
            this.allowAssementAfter = _data["allowAssementAfter"];
            this.allowSummaryAfter = _data["allowSummaryAfter"];
            this.hasRefusePrescription = _data["hasRefusePrescription"];
            this.hasAbnormalVerify = _data["hasAbnormalVerify"];
            this.timeOff = _data["timeOff"];
            this.percent = _data["percent"];
            this.timeLeft = _data["timeLeft"];
            this.timeUnit = _data["timeUnit"];
            if (Array.isArray(_data["buttons"])) {
                this.buttons = [] as any;
                for (let item of _data["buttons"])
                    this.buttons!.push(Button.fromJS(item));
            }
            this.message = _data["message"];
            this.abnormaAllTips = _data["abnormaAllTips"] ? PatientAbnormaAllTips.fromJS(_data["abnormaAllTips"]) : <any>undefined;
            if (Array.isArray(_data["customs"])) {
                this.customs = [] as any;
                for (let item of _data["customs"])
                    this.customs!.push(CureTodayViewCustom.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureStatusView {
        data = typeof data === 'object' ? data : {};
        let result = new CureStatusView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["status"] = this.status;
        data["bedName"] = this.bedName;
        data["bedId"] = this.bedId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["statusLabel"] = this.statusLabel;
        data["ufg"] = this.ufg;
        data["ufv"] = this.ufv;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["anticoagulantName"] = this.anticoagulantName;
        data["anticoagulantType"] = this.anticoagulantType;
        data["anticoagulantTypeLabel"] = this.anticoagulantTypeLabel;
        data["anticoagulantShortName"] = this.anticoagulantShortName;
        data["first"] = this.first;
        data["firstUnit"] = this.firstUnit;
        data["appendRate"] = this.appendRate;
        data["additionalAmount"] = this.additionalAmount;
        data["appendRateUnit"] = this.appendRateUnit;
        data["append"] = this.append;
        data["appendUnit"] = this.appendUnit;
        data["total"] = this.total;
        data["totalUnit"] = this.totalUnit;
        data["lastSBP"] = this.lastSBP;
        data["lastDBP"] = this.lastDBP;
        data["lastPulse"] = this.lastPulse;
        data["timeOn"] = this.timeOn ? this.timeOn.toISOString() : <any>undefined;
        data["dialysisDuration"] = this.dialysisDuration;
        data["monitorCount"] = this.monitorCount;
        data["eventCount"] = this.eventCount;
        data["medicalAdviceCountUnexecuted"] = this.medicalAdviceCountUnexecuted;
        data["focus"] = this.focus;
        data["hasSignedBefore"] = this.hasSignedBefore;
        data["hasMeasureBefore"] = this.hasMeasureBefore;
        data["hasEnactBefore"] = this.hasEnactBefore;
        data["hasCheckBefore"] = this.hasCheckBefore;
        data["hasAssementBefore"] = this.hasAssementBefore;
        data["hasOnMiddle"] = this.hasOnMiddle;
        data["hasVerifyMiddle"] = this.hasVerifyMiddle;
        data["hasMonitorMiddle"] = this.hasMonitorMiddle;
        data["hasAssementDialysis"] = this.hasAssementDialysis;
        data["hasOffAfter"] = this.hasOffAfter;
        data["hasDisinfectAfter"] = this.hasDisinfectAfter;
        data["hasAssementAfter"] = this.hasAssementAfter;
        data["hasSummaryAfter"] = this.hasSummaryAfter;
        data["allowSignedBefore"] = this.allowSignedBefore;
        data["allowMeasureBefore"] = this.allowMeasureBefore;
        data["allowEnactBefore"] = this.allowEnactBefore;
        data["allowCheckBefore"] = this.allowCheckBefore;
        data["allowAssementBefore"] = this.allowAssementBefore;
        data["allowOnMiddle"] = this.allowOnMiddle;
        data["allowVerifyMiddle"] = this.allowVerifyMiddle;
        data["allowMonitorMiddle"] = this.allowMonitorMiddle;
        data["allowAssementDialysis"] = this.allowAssementDialysis;
        data["allowOffAfter"] = this.allowOffAfter;
        data["allowDisinfectAfter"] = this.allowDisinfectAfter;
        data["allowAssementAfter"] = this.allowAssementAfter;
        data["allowSummaryAfter"] = this.allowSummaryAfter;
        data["hasRefusePrescription"] = this.hasRefusePrescription;
        data["hasAbnormalVerify"] = this.hasAbnormalVerify;
        data["timeOff"] = this.timeOff;
        data["percent"] = this.percent;
        data["timeLeft"] = this.timeLeft;
        data["timeUnit"] = this.timeUnit;
        if (Array.isArray(this.buttons)) {
            data["buttons"] = [];
            for (let item of this.buttons)
                data["buttons"].push(item.toJSON());
        }
        data["message"] = this.message;
        data["abnormaAllTips"] = this.abnormaAllTips ? this.abnormaAllTips.toJSON() : <any>undefined;
        if (Array.isArray(this.customs)) {
            data["customs"] = [];
            for (let item of this.customs)
                data["customs"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICureStatusView {
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 状态 */
    status?: string | undefined;
    /** 床号 */
    bedName?: string | undefined;
    /** 床位标识 */
    bedId?: string | undefined;
    /** 区间 */
    dialysisAreaName?: string | undefined;
    /** 状态 - 显示值 */
    statusLabel?: string | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 实际脱水量（未下机前填最后一次透中监测记录） */
    ufv?: number | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式显示值 */
    dialysisModeLabel?: string | undefined;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** 种类 - 抗凝剂类型 */
    anticoagulantType?: string | undefined;
    /** 种类 - 抗凝剂类型显示值 */
    anticoagulantTypeLabel?: string | undefined;
    /** 抗凝剂简称 */
    anticoagulantShortName?: string | undefined;
    /** 首剂量 */
    first?: number | undefined;
    /** 首剂-单位 */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加量 */
    additionalAmount?: number | undefined;
    /** 追加单位 */
    appendRateUnit?: string | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 抗凝剂总量 */
    total?: number | undefined;
    /** 总量单位 */
    totalUnit?: string | undefined;
    /** 收缩压 - 血压（返回最后一次测量） */
    lastSBP?: number | undefined;
    /** 舒张压 - 血压（返回最后一次测量） */
    lastDBP?: number | undefined;
    /** 脉搏/心率（返回最后一次测量） */
    lastPulse?: number | undefined;
    /** 上机时间 */
    timeOn?: dayjs.Dayjs | undefined;
    /** 透析时长 *分钟* */
    dialysisDuration?: number | undefined;
    /** 透中监测数量 */
    monitorCount?: number;
    /** 透中事件数量 */
    eventCount?: number;
    /** 医嘱数量 - 未执行的 */
    medicalAdviceCountUnexecuted?: number;
    /** 是否已经关注(关注 1 未关注 2) */
    focus?: number;
    /** 是否已经签到 */
    hasSignedBefore?: boolean;
    /** 是否已经透前测量 */
    hasMeasureBefore?: boolean;
    /** 是否已经制定处方 */
    hasEnactBefore?: boolean;
    /** 是否已经确认处方 */
    hasCheckBefore?: boolean;
    /** 是否已经透前评估 */
    hasAssementBefore?: boolean;
    /** 是否已经穿刺/上机 */
    hasOnMiddle?: boolean;
    /** 是否已经交叉核对 */
    hasVerifyMiddle?: boolean;
    /** 是否已经透中监测 */
    hasMonitorMiddle?: boolean;
    /** 是否已经透析评估 */
    hasAssementDialysis?: boolean;
    /** 是否已经下机 */
    hasOffAfter?: boolean;
    /** 是否已经消毒 */
    hasDisinfectAfter?: boolean;
    /** 是否已经透后评估 */
    hasAssementAfter?: boolean;
    /** 是否已经透后小结 */
    hasSummaryAfter?: boolean;
    /** 是否允许签到 */
    allowSignedBefore?: boolean;
    /** 是否允许透前测量 */
    allowMeasureBefore?: boolean;
    /** 是否允许制定处方 */
    allowEnactBefore?: boolean;
    /** 是否允许确认处方 */
    allowCheckBefore?: boolean;
    /** 是否允许透前评估 */
    allowAssementBefore?: boolean;
    /** 是否允许穿刺/上机 */
    allowOnMiddle?: boolean;
    /** 是否允许交叉核对 */
    allowVerifyMiddle?: boolean;
    /** 是否允许透中监测 */
    allowMonitorMiddle?: boolean;
    /** 是否允许透析评估 */
    allowAssementDialysis?: boolean;
    /** 是否允许下机 */
    allowOffAfter?: boolean;
    /** 是否允许消毒 */
    allowDisinfectAfter?: boolean;
    /** 是否允许透后评估 */
    allowAssementAfter?: boolean;
    /** 是否允许透后小结 */
    allowSummaryAfter?: boolean;
    /** 是否有拒绝处方信息 */
    hasRefusePrescription?: boolean;
    /** 是否有异常交叉核对信息 */
    hasAbnormalVerify?: boolean;
    /** 下机时间 */
    timeOff?: string | undefined;
    /** 透析进度 */
    percent?: number | undefined;
    /** 透析剩余时间 */
    timeLeft?: string | undefined;
    /** 透析时长单位 */
    timeUnit?: string | undefined;
    /** 卡片按钮 */
    buttons?: Button[] | undefined;
    /** 当前必须完成的流程 */
    message?: string | undefined;
    abnormaAllTips?: PatientAbnormaAllTips;
    /** 自定义字段 */
    customs?: CureTodayViewCustom[] | undefined;
}

/** Reponse */
export class CureStatusViewResultEntry implements ICureStatusViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureStatusView;

    constructor(data?: ICureStatusViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureStatusView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureStatusViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureStatusViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureStatusViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureStatusView;
}

/** 编辑 - 上机时间 */
export class CureTimeOnEditModel implements ICureTimeOnEditModel {
    /** 上机时间 */
    timeOn?: dayjs.Dayjs | undefined;

    constructor(data?: ICureTimeOnEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.timeOn = _data["timeOn"] ? dayjs(_data["timeOn"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureTimeOnEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureTimeOnEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timeOn"] = this.timeOn ? this.timeOn.toISOString() : <any>undefined;
        return data;
    }
}

/** 编辑 - 上机时间 */
export interface ICureTimeOnEditModel {
    /** 上机时间 */
    timeOn?: dayjs.Dayjs | undefined;
}

/** 今日就诊显示患者标签视图 */
export class CureTodayPatientTagsView implements ICureTodayPatientTagsView {
    /** ID */
    id?: string | undefined;
    /** 级别 `DIC.PATIENT.TAG.LEVEL` */
    level?: string | undefined;
    /** 级别 `DIC.PATIENT.TAG.LEVEL` - 显示值 */
    levelLabel?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;

    constructor(data?: ICureTodayPatientTagsView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.level = _data["level"];
            this.levelLabel = _data["levelLabel"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.color = _data["color"];
        }
    }

    static fromJS(data: any): CureTodayPatientTagsView {
        data = typeof data === 'object' ? data : {};
        let result = new CureTodayPatientTagsView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["level"] = this.level;
        data["levelLabel"] = this.levelLabel;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["color"] = this.color;
        return data;
    }
}

/** 今日就诊显示患者标签视图 */
export interface ICureTodayPatientTagsView {
    /** ID */
    id?: string | undefined;
    /** 级别 `DIC.PATIENT.TAG.LEVEL` */
    level?: string | undefined;
    /** 级别 `DIC.PATIENT.TAG.LEVEL` - 显示值 */
    levelLabel?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
}

/** 今日就诊自定义视图 */
export class CureTodayView implements ICureTodayView {
    /** 透析室 */
    hospitalAreaId?: string | undefined;
    /** 透析室名称 */
    hospitalAreaName?: string | undefined;
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间 - 是否阳性0,1 */
    dialysisAreaPositive?: number | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 透析床位 */
    bedId?: string | undefined;
    /** 透析床位 */
    bedName?: string | undefined;
    /** 制定处方医生 */
    enactDoctorName?: string | undefined;
    /** 制定处方医生id */
    enactDoctorId?: string | undefined;
    /** 绑定的透析机ID */
    bindDialysisMachineId?: string | undefined;
    /** 绑定的透析机型号 */
    bindDialysisMachineModel?: string | undefined;
    /** 绑定的透析机状态 */
    bindDialysisMachineStatus?: string | undefined;
    /** 绑定的透析机状态 - 显示值 */
    bindDialysisMachineStatusLabel?: string | undefined;
    /** 是否确认处方(0:拒绝/1:已确认/null:未确认) */
    check?: number | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs | undefined;
    /** 透析班次 */
    shiftId?: string | undefined;
    /** 透析班次名称 */
    shiftName?: string | undefined;
    /** 透析班次简称 */
    shiftShortName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    shiftBeginTime?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    shiftEndTime?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    shiftColor?: string | undefined;
    /** 透析患者ID */
    patientId?: string | undefined;
    /** 透析患者姓名 */
    patientName?: string | undefined;
    /** 透析患者姓名 */
    patientNameFull?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 患者 - 是否阳性0,1 *编辑诊断-传染病时管理这个状态* */
    positive?: number | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 性别名称 */
    genderLabel?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 来源 门诊/住院/急症 */
    source?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 来源 门诊/住院/急症 */
    sourceLabel?: string | undefined;
    /** 透析患者标签 */
    patientTags?: CureTodayPatientTagsView[] | undefined;
    /** 患者传染病 */
    infectiousDiseases?: string[] | undefined;
    /** 患者传染病显示值 */
    infectiousDiseasesLabel?: string[] | undefined;
    /** 我关注的（1：已关注 2：未关注） */
    focus?: number;
    /** 排床记录ID */
    cureScheduleId?: string | undefined;
    /** 透析记录ID */
    cureRecordId?: string | undefined;
    /** 透析方式 */
    dialysisMode?: string | undefined;
    /** 透析方式 - 显示值 */
    dialysisModeLabel?: string | undefined;
    /** 设定透析时长（单位：分钟） */
    dialysisDurationSet?: number | undefined;
    /** 实际透析时长（单位：分钟） */
    dialysisDurationFact?: number | undefined;
    /** 耗材 */
    cureConsumable?: string | undefined;
    /** 血管通路ID */
    vascularAccessId?: string | undefined;
    /** 血管通路名称 */
    vascularAccessName?: string | undefined;
    /** 血管通路ID */
    otherVascularAccessId?: string | undefined;
    /** 血管通路名称 */
    otherVascularAccessName?: string | undefined;
    /** 穿刺/上机时间 */
    timeOn?: string | undefined;
    /** 下机时间 */
    timeOff?: string | undefined;
    /** 目标脱水量 */
    ufg?: number | undefined;
    /** 实际脱水量（未下机前填最后一次透中监测记录） */
    ufv?: number | undefined;
    /** 收缩压 - 血压（返回最后一次测量） */
    lastSBP?: number | undefined;
    /** 舒张压 - 血压（返回最后一次测量） */
    lastDBP?: number | undefined;
    /** 脉搏/心率（返回最后一次测量） */
    lastPulse?: number | undefined;
    /** 种类 - 抗凝剂类型 */
    anticoagulantType?: string | undefined;
    /** 种类 - 抗凝剂类型显示值 */
    anticoagulantTypeLabel?: string | undefined;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** 抗凝剂简称 */
    anticoagulantShortName?: string | undefined;
    /** 首剂量 */
    first?: number | undefined;
    /** 首剂-单位 */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加量 */
    additionalAmount?: number | undefined;
    /** 追加单位 */
    appendRateUnit?: string | undefined;
    /** 抗凝剂总量 */
    total?: number | undefined;
    /** 总量单位 */
    totalUnit?: string | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加单位 */
    appendUnit?: string | undefined;
    /** 抗凝剂模版类型 */
    antiTmplType?: string | undefined;
    /** 状态 */
    status?: string | undefined;
    /** 状态 - 显示值 */
    statusLabel?: string | undefined;
    /** 医嘱数量 - 总的 */
    medicalAdviceCount?: number;
    /** 医嘱数量 - 未执行的 */
    medicalAdviceCountUnexecuted?: number;
    /** 透中事件数量（即并发症等异常事件） */
    eventCount?: number;
    /** 透中监测数量 */
    monitorCount?: number;
    /** 是否历史透析记录 */
    isHistory?: boolean;
    /** 是否已经签到 */
    hasSignedBefore?: boolean;
    /** 是否已经透前测量 */
    hasMeasureBefore?: boolean;
    /** 是否已经制定处方 */
    hasEnactBefore?: boolean;
    /** 是否已经确认处方 */
    hasCheckBefore?: boolean;
    /** 是否已经透前评估 */
    hasAssementBefore?: boolean;
    /** 是否已经穿刺/上机 */
    hasOnMiddle?: boolean;
    /** 是否已经交叉核对 */
    hasVerifyMiddle?: boolean;
    /** 是否已经透中监测 */
    hasMonitorMiddle?: boolean;
    /** 是否已经下机 */
    hasOffAfter?: boolean;
    /** 是否已经消毒 */
    hasDisinfectAfter?: boolean;
    /** 是否已经透后评估 */
    hasAssementAfter?: boolean;
    /** 是否已经透后小结 */
    hasSummaryAfter?: boolean;
    /** 是否允许签到 */
    allowSignedBefore?: boolean;
    /** 是否允许透前测量 */
    allowMeasureBefore?: boolean;
    /** 是否允许制定处方 */
    allowEnactBefore?: boolean;
    /** 是否允许确认处方 */
    allowCheckBefore?: boolean;
    /** 是否允许透前评估 */
    allowAssementBefore?: boolean;
    /** 是否允许穿刺/上机 */
    allowOnMiddle?: boolean;
    /** 是否允许交叉核对 */
    allowVerifyMiddle?: boolean;
    /** 是否允许透中监测 */
    allowMonitorMiddle?: boolean;
    /** 是否允许下机 */
    allowOffAfter?: boolean;
    /** 是否允许消毒 */
    allowDisinfectAfter?: boolean;
    /** 是否允许透后评估 */
    allowAssementAfter?: boolean;
    /** 是否允许透后小结 */
    allowSummaryAfter?: boolean;
    /** 排序字段 */
    sequence?: number;
    /** 是否欠费 */
    arrears?: boolean;
    /** 透析进度 */
    percent?: number | undefined;
    /** 透析剩余时间 */
    timeLeft?: string | undefined;
    /** 透析时长单位 */
    timeUnit?: string | undefined;
    /** 签到时间（当患者制定处方或者已上机时，签到时间不再显示） */
    timeSigninLable?: string | undefined;
    /** 透析次数 */
    dialysisCountTotal?: number;
    /** 卡片按钮 */
    buttons?: Button[] | undefined;
    /** 自定义字段 */
    customs?: CureTodayViewCustom[] | undefined;
    /** 穿刺节点 */
    nodes?: PatientPunctureRecordNode[] | undefined;

    constructor(data?: ICureTodayView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hospitalAreaId = _data["hospitalAreaId"];
            this.hospitalAreaName = _data["hospitalAreaName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaPositive = _data["dialysisAreaPositive"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.enactDoctorName = _data["enactDoctorName"];
            this.enactDoctorId = _data["enactDoctorId"];
            this.bindDialysisMachineId = _data["bindDialysisMachineId"];
            this.bindDialysisMachineModel = _data["bindDialysisMachineModel"];
            this.bindDialysisMachineStatus = _data["bindDialysisMachineStatus"];
            this.bindDialysisMachineStatusLabel = _data["bindDialysisMachineStatusLabel"];
            this.check = _data["check"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.shiftShortName = _data["shiftShortName"];
            this.shiftBeginTime = _data["shiftBeginTime"];
            this.shiftEndTime = _data["shiftEndTime"];
            this.shiftColor = _data["shiftColor"];
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.patientNameFull = _data["patientNameFull"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.positive = _data["positive"];
            this.gender = _data["gender"];
            this.genderLabel = _data["genderLabel"];
            this.surnameCode = _data["surnameCode"];
            this.source = _data["source"];
            this.age = _data["age"];
            this.sourceLabel = _data["sourceLabel"];
            if (Array.isArray(_data["patientTags"])) {
                this.patientTags = [] as any;
                for (let item of _data["patientTags"])
                    this.patientTags!.push(CureTodayPatientTagsView.fromJS(item));
            }
            if (Array.isArray(_data["infectiousDiseases"])) {
                this.infectiousDiseases = [] as any;
                for (let item of _data["infectiousDiseases"])
                    this.infectiousDiseases!.push(item);
            }
            if (Array.isArray(_data["infectiousDiseasesLabel"])) {
                this.infectiousDiseasesLabel = [] as any;
                for (let item of _data["infectiousDiseasesLabel"])
                    this.infectiousDiseasesLabel!.push(item);
            }
            this.focus = _data["focus"];
            this.cureScheduleId = _data["cureScheduleId"];
            this.cureRecordId = _data["cureRecordId"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.dialysisDurationSet = _data["dialysisDurationSet"];
            this.dialysisDurationFact = _data["dialysisDurationFact"];
            this.cureConsumable = _data["cureConsumable"];
            this.vascularAccessId = _data["vascularAccessId"];
            this.vascularAccessName = _data["vascularAccessName"];
            this.otherVascularAccessId = _data["otherVascularAccessId"];
            this.otherVascularAccessName = _data["otherVascularAccessName"];
            this.timeOn = _data["timeOn"];
            this.timeOff = _data["timeOff"];
            this.ufg = _data["ufg"];
            this.ufv = _data["ufv"];
            this.lastSBP = _data["lastSBP"];
            this.lastDBP = _data["lastDBP"];
            this.lastPulse = _data["lastPulse"];
            this.anticoagulantType = _data["anticoagulantType"];
            this.anticoagulantTypeLabel = _data["anticoagulantTypeLabel"];
            this.anticoagulantName = _data["anticoagulantName"];
            this.anticoagulantShortName = _data["anticoagulantShortName"];
            this.first = _data["first"];
            this.firstUnit = _data["firstUnit"];
            this.appendRate = _data["appendRate"];
            this.additionalAmount = _data["additionalAmount"];
            this.appendRateUnit = _data["appendRateUnit"];
            this.total = _data["total"];
            this.totalUnit = _data["totalUnit"];
            this.append = _data["append"];
            this.appendUnit = _data["appendUnit"];
            this.antiTmplType = _data["antiTmplType"];
            this.status = _data["status"];
            this.statusLabel = _data["statusLabel"];
            this.medicalAdviceCount = _data["medicalAdviceCount"];
            this.medicalAdviceCountUnexecuted = _data["medicalAdviceCountUnexecuted"];
            this.eventCount = _data["eventCount"];
            this.monitorCount = _data["monitorCount"];
            this.isHistory = _data["isHistory"];
            this.hasSignedBefore = _data["hasSignedBefore"];
            this.hasMeasureBefore = _data["hasMeasureBefore"];
            this.hasEnactBefore = _data["hasEnactBefore"];
            this.hasCheckBefore = _data["hasCheckBefore"];
            this.hasAssementBefore = _data["hasAssementBefore"];
            this.hasOnMiddle = _data["hasOnMiddle"];
            this.hasVerifyMiddle = _data["hasVerifyMiddle"];
            this.hasMonitorMiddle = _data["hasMonitorMiddle"];
            this.hasOffAfter = _data["hasOffAfter"];
            this.hasDisinfectAfter = _data["hasDisinfectAfter"];
            this.hasAssementAfter = _data["hasAssementAfter"];
            this.hasSummaryAfter = _data["hasSummaryAfter"];
            this.allowSignedBefore = _data["allowSignedBefore"];
            this.allowMeasureBefore = _data["allowMeasureBefore"];
            this.allowEnactBefore = _data["allowEnactBefore"];
            this.allowCheckBefore = _data["allowCheckBefore"];
            this.allowAssementBefore = _data["allowAssementBefore"];
            this.allowOnMiddle = _data["allowOnMiddle"];
            this.allowVerifyMiddle = _data["allowVerifyMiddle"];
            this.allowMonitorMiddle = _data["allowMonitorMiddle"];
            this.allowOffAfter = _data["allowOffAfter"];
            this.allowDisinfectAfter = _data["allowDisinfectAfter"];
            this.allowAssementAfter = _data["allowAssementAfter"];
            this.allowSummaryAfter = _data["allowSummaryAfter"];
            this.sequence = _data["sequence"];
            this.arrears = _data["arrears"];
            this.percent = _data["percent"];
            this.timeLeft = _data["timeLeft"];
            this.timeUnit = _data["timeUnit"];
            this.timeSigninLable = _data["timeSigninLable"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            if (Array.isArray(_data["buttons"])) {
                this.buttons = [] as any;
                for (let item of _data["buttons"])
                    this.buttons!.push(Button.fromJS(item));
            }
            if (Array.isArray(_data["customs"])) {
                this.customs = [] as any;
                for (let item of _data["customs"])
                    this.customs!.push(CureTodayViewCustom.fromJS(item));
            }
            if (Array.isArray(_data["nodes"])) {
                this.nodes = [] as any;
                for (let item of _data["nodes"])
                    this.nodes!.push(PatientPunctureRecordNode.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureTodayView {
        data = typeof data === 'object' ? data : {};
        let result = new CureTodayView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hospitalAreaId"] = this.hospitalAreaId;
        data["hospitalAreaName"] = this.hospitalAreaName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaPositive"] = this.dialysisAreaPositive;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["enactDoctorName"] = this.enactDoctorName;
        data["enactDoctorId"] = this.enactDoctorId;
        data["bindDialysisMachineId"] = this.bindDialysisMachineId;
        data["bindDialysisMachineModel"] = this.bindDialysisMachineModel;
        data["bindDialysisMachineStatus"] = this.bindDialysisMachineStatus;
        data["bindDialysisMachineStatusLabel"] = this.bindDialysisMachineStatusLabel;
        data["check"] = this.check;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["shiftShortName"] = this.shiftShortName;
        data["shiftBeginTime"] = this.shiftBeginTime;
        data["shiftEndTime"] = this.shiftEndTime;
        data["shiftColor"] = this.shiftColor;
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["patientNameFull"] = this.patientNameFull;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["positive"] = this.positive;
        data["gender"] = this.gender;
        data["genderLabel"] = this.genderLabel;
        data["surnameCode"] = this.surnameCode;
        data["source"] = this.source;
        data["age"] = this.age;
        data["sourceLabel"] = this.sourceLabel;
        if (Array.isArray(this.patientTags)) {
            data["patientTags"] = [];
            for (let item of this.patientTags)
                data["patientTags"].push(item.toJSON());
        }
        if (Array.isArray(this.infectiousDiseases)) {
            data["infectiousDiseases"] = [];
            for (let item of this.infectiousDiseases)
                data["infectiousDiseases"].push(item);
        }
        if (Array.isArray(this.infectiousDiseasesLabel)) {
            data["infectiousDiseasesLabel"] = [];
            for (let item of this.infectiousDiseasesLabel)
                data["infectiousDiseasesLabel"].push(item);
        }
        data["focus"] = this.focus;
        data["cureScheduleId"] = this.cureScheduleId;
        data["cureRecordId"] = this.cureRecordId;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["dialysisDurationSet"] = this.dialysisDurationSet;
        data["dialysisDurationFact"] = this.dialysisDurationFact;
        data["cureConsumable"] = this.cureConsumable;
        data["vascularAccessId"] = this.vascularAccessId;
        data["vascularAccessName"] = this.vascularAccessName;
        data["otherVascularAccessId"] = this.otherVascularAccessId;
        data["otherVascularAccessName"] = this.otherVascularAccessName;
        data["timeOn"] = this.timeOn;
        data["timeOff"] = this.timeOff;
        data["ufg"] = this.ufg;
        data["ufv"] = this.ufv;
        data["lastSBP"] = this.lastSBP;
        data["lastDBP"] = this.lastDBP;
        data["lastPulse"] = this.lastPulse;
        data["anticoagulantType"] = this.anticoagulantType;
        data["anticoagulantTypeLabel"] = this.anticoagulantTypeLabel;
        data["anticoagulantName"] = this.anticoagulantName;
        data["anticoagulantShortName"] = this.anticoagulantShortName;
        data["first"] = this.first;
        data["firstUnit"] = this.firstUnit;
        data["appendRate"] = this.appendRate;
        data["additionalAmount"] = this.additionalAmount;
        data["appendRateUnit"] = this.appendRateUnit;
        data["total"] = this.total;
        data["totalUnit"] = this.totalUnit;
        data["append"] = this.append;
        data["appendUnit"] = this.appendUnit;
        data["antiTmplType"] = this.antiTmplType;
        data["status"] = this.status;
        data["statusLabel"] = this.statusLabel;
        data["medicalAdviceCount"] = this.medicalAdviceCount;
        data["medicalAdviceCountUnexecuted"] = this.medicalAdviceCountUnexecuted;
        data["eventCount"] = this.eventCount;
        data["monitorCount"] = this.monitorCount;
        data["isHistory"] = this.isHistory;
        data["hasSignedBefore"] = this.hasSignedBefore;
        data["hasMeasureBefore"] = this.hasMeasureBefore;
        data["hasEnactBefore"] = this.hasEnactBefore;
        data["hasCheckBefore"] = this.hasCheckBefore;
        data["hasAssementBefore"] = this.hasAssementBefore;
        data["hasOnMiddle"] = this.hasOnMiddle;
        data["hasVerifyMiddle"] = this.hasVerifyMiddle;
        data["hasMonitorMiddle"] = this.hasMonitorMiddle;
        data["hasOffAfter"] = this.hasOffAfter;
        data["hasDisinfectAfter"] = this.hasDisinfectAfter;
        data["hasAssementAfter"] = this.hasAssementAfter;
        data["hasSummaryAfter"] = this.hasSummaryAfter;
        data["allowSignedBefore"] = this.allowSignedBefore;
        data["allowMeasureBefore"] = this.allowMeasureBefore;
        data["allowEnactBefore"] = this.allowEnactBefore;
        data["allowCheckBefore"] = this.allowCheckBefore;
        data["allowAssementBefore"] = this.allowAssementBefore;
        data["allowOnMiddle"] = this.allowOnMiddle;
        data["allowVerifyMiddle"] = this.allowVerifyMiddle;
        data["allowMonitorMiddle"] = this.allowMonitorMiddle;
        data["allowOffAfter"] = this.allowOffAfter;
        data["allowDisinfectAfter"] = this.allowDisinfectAfter;
        data["allowAssementAfter"] = this.allowAssementAfter;
        data["allowSummaryAfter"] = this.allowSummaryAfter;
        data["sequence"] = this.sequence;
        data["arrears"] = this.arrears;
        data["percent"] = this.percent;
        data["timeLeft"] = this.timeLeft;
        data["timeUnit"] = this.timeUnit;
        data["timeSigninLable"] = this.timeSigninLable;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        if (Array.isArray(this.buttons)) {
            data["buttons"] = [];
            for (let item of this.buttons)
                data["buttons"].push(item.toJSON());
        }
        if (Array.isArray(this.customs)) {
            data["customs"] = [];
            for (let item of this.customs)
                data["customs"].push(item.toJSON());
        }
        if (Array.isArray(this.nodes)) {
            data["nodes"] = [];
            for (let item of this.nodes)
                data["nodes"].push(item.toJSON());
        }
        return data;
    }
}

/** 今日就诊自定义视图 */
export interface ICureTodayView {
    /** 透析室 */
    hospitalAreaId?: string | undefined;
    /** 透析室名称 */
    hospitalAreaName?: string | undefined;
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间 - 是否阳性0,1 */
    dialysisAreaPositive?: number | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 透析床位 */
    bedId?: string | undefined;
    /** 透析床位 */
    bedName?: string | undefined;
    /** 制定处方医生 */
    enactDoctorName?: string | undefined;
    /** 制定处方医生id */
    enactDoctorId?: string | undefined;
    /** 绑定的透析机ID */
    bindDialysisMachineId?: string | undefined;
    /** 绑定的透析机型号 */
    bindDialysisMachineModel?: string | undefined;
    /** 绑定的透析机状态 */
    bindDialysisMachineStatus?: string | undefined;
    /** 绑定的透析机状态 - 显示值 */
    bindDialysisMachineStatusLabel?: string | undefined;
    /** 是否确认处方(0:拒绝/1:已确认/null:未确认) */
    check?: number | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs | undefined;
    /** 透析班次 */
    shiftId?: string | undefined;
    /** 透析班次名称 */
    shiftName?: string | undefined;
    /** 透析班次简称 */
    shiftShortName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    shiftBeginTime?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    shiftEndTime?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    shiftColor?: string | undefined;
    /** 透析患者ID */
    patientId?: string | undefined;
    /** 透析患者姓名 */
    patientName?: string | undefined;
    /** 透析患者姓名 */
    patientNameFull?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 患者 - 是否阳性0,1 *编辑诊断-传染病时管理这个状态* */
    positive?: number | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 性别名称 */
    genderLabel?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 来源 门诊/住院/急症 */
    source?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 来源 门诊/住院/急症 */
    sourceLabel?: string | undefined;
    /** 透析患者标签 */
    patientTags?: CureTodayPatientTagsView[] | undefined;
    /** 患者传染病 */
    infectiousDiseases?: string[] | undefined;
    /** 患者传染病显示值 */
    infectiousDiseasesLabel?: string[] | undefined;
    /** 我关注的（1：已关注 2：未关注） */
    focus?: number;
    /** 排床记录ID */
    cureScheduleId?: string | undefined;
    /** 透析记录ID */
    cureRecordId?: string | undefined;
    /** 透析方式 */
    dialysisMode?: string | undefined;
    /** 透析方式 - 显示值 */
    dialysisModeLabel?: string | undefined;
    /** 设定透析时长（单位：分钟） */
    dialysisDurationSet?: number | undefined;
    /** 实际透析时长（单位：分钟） */
    dialysisDurationFact?: number | undefined;
    /** 耗材 */
    cureConsumable?: string | undefined;
    /** 血管通路ID */
    vascularAccessId?: string | undefined;
    /** 血管通路名称 */
    vascularAccessName?: string | undefined;
    /** 血管通路ID */
    otherVascularAccessId?: string | undefined;
    /** 血管通路名称 */
    otherVascularAccessName?: string | undefined;
    /** 穿刺/上机时间 */
    timeOn?: string | undefined;
    /** 下机时间 */
    timeOff?: string | undefined;
    /** 目标脱水量 */
    ufg?: number | undefined;
    /** 实际脱水量（未下机前填最后一次透中监测记录） */
    ufv?: number | undefined;
    /** 收缩压 - 血压（返回最后一次测量） */
    lastSBP?: number | undefined;
    /** 舒张压 - 血压（返回最后一次测量） */
    lastDBP?: number | undefined;
    /** 脉搏/心率（返回最后一次测量） */
    lastPulse?: number | undefined;
    /** 种类 - 抗凝剂类型 */
    anticoagulantType?: string | undefined;
    /** 种类 - 抗凝剂类型显示值 */
    anticoagulantTypeLabel?: string | undefined;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** 抗凝剂简称 */
    anticoagulantShortName?: string | undefined;
    /** 首剂量 */
    first?: number | undefined;
    /** 首剂-单位 */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加量 */
    additionalAmount?: number | undefined;
    /** 追加单位 */
    appendRateUnit?: string | undefined;
    /** 抗凝剂总量 */
    total?: number | undefined;
    /** 总量单位 */
    totalUnit?: string | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加单位 */
    appendUnit?: string | undefined;
    /** 抗凝剂模版类型 */
    antiTmplType?: string | undefined;
    /** 状态 */
    status?: string | undefined;
    /** 状态 - 显示值 */
    statusLabel?: string | undefined;
    /** 医嘱数量 - 总的 */
    medicalAdviceCount?: number;
    /** 医嘱数量 - 未执行的 */
    medicalAdviceCountUnexecuted?: number;
    /** 透中事件数量（即并发症等异常事件） */
    eventCount?: number;
    /** 透中监测数量 */
    monitorCount?: number;
    /** 是否历史透析记录 */
    isHistory?: boolean;
    /** 是否已经签到 */
    hasSignedBefore?: boolean;
    /** 是否已经透前测量 */
    hasMeasureBefore?: boolean;
    /** 是否已经制定处方 */
    hasEnactBefore?: boolean;
    /** 是否已经确认处方 */
    hasCheckBefore?: boolean;
    /** 是否已经透前评估 */
    hasAssementBefore?: boolean;
    /** 是否已经穿刺/上机 */
    hasOnMiddle?: boolean;
    /** 是否已经交叉核对 */
    hasVerifyMiddle?: boolean;
    /** 是否已经透中监测 */
    hasMonitorMiddle?: boolean;
    /** 是否已经下机 */
    hasOffAfter?: boolean;
    /** 是否已经消毒 */
    hasDisinfectAfter?: boolean;
    /** 是否已经透后评估 */
    hasAssementAfter?: boolean;
    /** 是否已经透后小结 */
    hasSummaryAfter?: boolean;
    /** 是否允许签到 */
    allowSignedBefore?: boolean;
    /** 是否允许透前测量 */
    allowMeasureBefore?: boolean;
    /** 是否允许制定处方 */
    allowEnactBefore?: boolean;
    /** 是否允许确认处方 */
    allowCheckBefore?: boolean;
    /** 是否允许透前评估 */
    allowAssementBefore?: boolean;
    /** 是否允许穿刺/上机 */
    allowOnMiddle?: boolean;
    /** 是否允许交叉核对 */
    allowVerifyMiddle?: boolean;
    /** 是否允许透中监测 */
    allowMonitorMiddle?: boolean;
    /** 是否允许下机 */
    allowOffAfter?: boolean;
    /** 是否允许消毒 */
    allowDisinfectAfter?: boolean;
    /** 是否允许透后评估 */
    allowAssementAfter?: boolean;
    /** 是否允许透后小结 */
    allowSummaryAfter?: boolean;
    /** 排序字段 */
    sequence?: number;
    /** 是否欠费 */
    arrears?: boolean;
    /** 透析进度 */
    percent?: number | undefined;
    /** 透析剩余时间 */
    timeLeft?: string | undefined;
    /** 透析时长单位 */
    timeUnit?: string | undefined;
    /** 签到时间（当患者制定处方或者已上机时，签到时间不再显示） */
    timeSigninLable?: string | undefined;
    /** 透析次数 */
    dialysisCountTotal?: number;
    /** 卡片按钮 */
    buttons?: Button[] | undefined;
    /** 自定义字段 */
    customs?: CureTodayViewCustom[] | undefined;
    /** 穿刺节点 */
    nodes?: PatientPunctureRecordNode[] | undefined;
}

/** 今日就诊自定义视图 -- 自定义字段 */
export class CureTodayViewCustom implements ICureTodayViewCustom {
    /** 字段位置 */
    code?: string | undefined;
    /** 字段名称 */
    name?: string | undefined;
    /** 字段值 */
    value?: string | undefined;

    constructor(data?: ICureTodayViewCustom) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.name = _data["name"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): CureTodayViewCustom {
        data = typeof data === 'object' ? data : {};
        let result = new CureTodayViewCustom();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["name"] = this.name;
        data["value"] = this.value;
        return data;
    }
}

/** 今日就诊自定义视图 -- 自定义字段 */
export interface ICureTodayViewCustom {
    /** 字段位置 */
    code?: string | undefined;
    /** 字段名称 */
    name?: string | undefined;
    /** 字段值 */
    value?: string | undefined;
}

/** Reponse */
export class CureTodayViewResult implements ICureTodayViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureTodayView[] | undefined;

    constructor(data?: ICureTodayViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureTodayView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureTodayViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureTodayViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureTodayViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureTodayView[] | undefined;
}

/** 透析区间 */
export class DeptDialysisArea implements IDeptDialysisArea {
    /** 标识 */
    id?: string | undefined;
    /** [归属透析室标识](透析室) */
    sysHospitalAreaId?: string | undefined;
    /** 名称 *○同一个`sys_hospital_area_id`下不允许重复* */
    name?: string | undefined;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    type?: string | undefined;
    /** 阳性分区0,1 */
    positive?: number;
    /** 最大床位数量 */
    bedMax?: number | undefined;
    /** 已有床位数量 */
    bedCount?: number | undefined;
    /** 所在建筑 */
    build?: string | undefined;
    /** 所在楼层 */
    floor?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 图标 `DIC.DIALYSIS.AREA.ICON` */
    icon?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    sysHospitalAreas?: SysHospitalArea;

    constructor(data?: IDeptDialysisArea) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.positive = _data["positive"];
            this.bedMax = _data["bedMax"];
            this.bedCount = _data["bedCount"];
            this.build = _data["build"];
            this.floor = _data["floor"];
            this.color = _data["color"];
            this.icon = _data["icon"];
            this.remark = _data["remark"];
            this.sequence = _data["sequence"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.sysHospitalAreas = _data["sysHospitalAreas"] ? SysHospitalArea.fromJS(_data["sysHospitalAreas"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptDialysisArea {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisArea();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["name"] = this.name;
        data["type"] = this.type;
        data["positive"] = this.positive;
        data["bedMax"] = this.bedMax;
        data["bedCount"] = this.bedCount;
        data["build"] = this.build;
        data["floor"] = this.floor;
        data["color"] = this.color;
        data["icon"] = this.icon;
        data["remark"] = this.remark;
        data["sequence"] = this.sequence;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["sysHospitalAreas"] = this.sysHospitalAreas ? this.sysHospitalAreas.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析区间 */
export interface IDeptDialysisArea {
    /** 标识 */
    id?: string | undefined;
    /** [归属透析室标识](透析室) */
    sysHospitalAreaId?: string | undefined;
    /** 名称 *○同一个`sys_hospital_area_id`下不允许重复* */
    name?: string | undefined;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    type?: string | undefined;
    /** 阳性分区0,1 */
    positive?: number;
    /** 最大床位数量 */
    bedMax?: number | undefined;
    /** 已有床位数量 */
    bedCount?: number | undefined;
    /** 所在建筑 */
    build?: string | undefined;
    /** 所在楼层 */
    floor?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 图标 `DIC.DIALYSIS.AREA.ICON` */
    icon?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    sysHospitalAreas?: SysHospitalArea;
}

/** 透析床位 */
export class DeptDialysisBed implements IDeptDialysisBed {
    /** 标识 */
    id?: string | undefined;
    /** [透析区间](透析区间) */
    deptDialysisAreaId?: string | undefined;
    /** 名称 *○同一个`dept_dialysis_area_id`下不允许重复* */
    name?: string | undefined;
    /** 血压计编号 */
    serialNo?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    deptDialysisAreas?: DeptDialysisArea;

    constructor(data?: IDeptDialysisBed) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.deptDialysisAreaId = _data["deptDialysisAreaId"];
            this.name = _data["name"];
            this.serialNo = _data["serialNo"];
            this.remark = _data["remark"];
            this.sequence = _data["sequence"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.deptDialysisAreas = _data["deptDialysisAreas"] ? DeptDialysisArea.fromJS(_data["deptDialysisAreas"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptDialysisBed {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisBed();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["deptDialysisAreaId"] = this.deptDialysisAreaId;
        data["name"] = this.name;
        data["serialNo"] = this.serialNo;
        data["remark"] = this.remark;
        data["sequence"] = this.sequence;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["deptDialysisAreas"] = this.deptDialysisAreas ? this.deptDialysisAreas.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析床位 */
export interface IDeptDialysisBed {
    /** 标识 */
    id?: string | undefined;
    /** [透析区间](透析区间) */
    deptDialysisAreaId?: string | undefined;
    /** 名称 *○同一个`dept_dialysis_area_id`下不允许重复* */
    name?: string | undefined;
    /** 血压计编号 */
    serialNo?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    deptDialysisAreas?: DeptDialysisArea;
}

/** Reponse */
export class DeptDialysisBedResult implements IDeptDialysisBedResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptDialysisBed[] | undefined;

    constructor(data?: IDeptDialysisBedResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptDialysisBed.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptDialysisBedResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisBedResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptDialysisBedResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptDialysisBed[] | undefined;
}

export class DeptShrCureAfterEditModel implements IDeptShrCureAfterEditModel {
    /** [透析区间](透析区间) */
    deptDialysisAreaId!: string;
    /** [透析班次](透析班次) */
    cureShiftId!: string;
    /** 类型 `DIC.DEPT.SHTYPE` *并发症* */
    type?: string | undefined;
    /** 交班时间 */
    time!: dayjs.Dayjs;
    /** [提及到的患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 提及到的用户 *@张医生 @李护士*(存sysuserid,sysuserid) */
    mentionUser?: string | undefined;
    /** 级别 *一般,重要* */
    level!: string;
    /** 交班内容 */
    content?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDeptShrCureAfterEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deptDialysisAreaId = _data["deptDialysisAreaId"];
            this.cureShiftId = _data["cureShiftId"];
            this.type = _data["type"];
            this.time = _data["time"] ? dayjs(_data["time"].toString()) : <any>undefined;
            this.patientId = _data["patientId"];
            this.mentionUser = _data["mentionUser"];
            this.level = _data["level"];
            this.content = _data["content"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DeptShrCureAfterEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShrCureAfterEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deptDialysisAreaId"] = this.deptDialysisAreaId;
        data["cureShiftId"] = this.cureShiftId;
        data["type"] = this.type;
        data["time"] = this.time ? this.time.toISOString() : <any>undefined;
        data["patientId"] = this.patientId;
        data["mentionUser"] = this.mentionUser;
        data["level"] = this.level;
        data["content"] = this.content;
        data["remark"] = this.remark;
        return data;
    }
}

export interface IDeptShrCureAfterEditModel {
    /** [透析区间](透析区间) */
    deptDialysisAreaId: string;
    /** [透析班次](透析班次) */
    cureShiftId: string;
    /** 类型 `DIC.DEPT.SHTYPE` *并发症* */
    type?: string | undefined;
    /** 交班时间 */
    time: dayjs.Dayjs;
    /** [提及到的患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 提及到的用户 *@张医生 @李护士*(存sysuserid,sysuserid) */
    mentionUser?: string | undefined;
    /** 级别 *一般,重要* */
    level: string;
    /** 交班内容 */
    content?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

export class DeptShrCureAfterView implements IDeptShrCureAfterView {
    /** [透析区间](透析区间) */
    deptDialysisAreaId!: string;
    /** [透析班次](透析班次) */
    cureShiftId!: string;
    /** 类型 `DIC.DEPT.SHTYPE` *并发症* */
    type?: string | undefined;
    /** 交班时间 */
    time!: dayjs.Dayjs;
    /** [提及到的患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 提及到的用户 *@张医生 @李护士*(存sysuserid,sysuserid) */
    mentionUser?: string | undefined;
    /** 级别 *一般,重要* */
    level!: string;
    /** 交班内容 */
    content?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 类型显示值 */
    typeLabel?: string | undefined;
    /** 提及到的用户 *@张医生 @李护士* */
    mentionUserLabel?: string | undefined;
    /** 透析区间名称 */
    deptDialysisAreaName?: string | undefined;
    /** 透析班次名称 */
    cureShiftName?: string | undefined;
    /** [交班用户标识](用户信息Id) */
    handoverUserId?: string | undefined;
    /** 交班人姓名 */
    handoverName?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 交班看板标识 */
    cureDeptShrID?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDeptShrCureAfterView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deptDialysisAreaId = _data["deptDialysisAreaId"];
            this.cureShiftId = _data["cureShiftId"];
            this.type = _data["type"];
            this.time = _data["time"] ? dayjs(_data["time"].toString()) : <any>undefined;
            this.patientId = _data["patientId"];
            this.mentionUser = _data["mentionUser"];
            this.level = _data["level"];
            this.content = _data["content"];
            this.remark = _data["remark"];
            this.typeLabel = _data["typeLabel"];
            this.mentionUserLabel = _data["mentionUserLabel"];
            this.deptDialysisAreaName = _data["deptDialysisAreaName"];
            this.cureShiftName = _data["cureShiftName"];
            this.handoverUserId = _data["handoverUserId"];
            this.handoverName = _data["handoverName"];
            this.surnameCode = _data["surnameCode"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.cureDeptShrID = _data["cureDeptShrID"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptShrCureAfterView {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShrCureAfterView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deptDialysisAreaId"] = this.deptDialysisAreaId;
        data["cureShiftId"] = this.cureShiftId;
        data["type"] = this.type;
        data["time"] = this.time ? this.time.toISOString() : <any>undefined;
        data["patientId"] = this.patientId;
        data["mentionUser"] = this.mentionUser;
        data["level"] = this.level;
        data["content"] = this.content;
        data["remark"] = this.remark;
        data["typeLabel"] = this.typeLabel;
        data["mentionUserLabel"] = this.mentionUserLabel;
        data["deptDialysisAreaName"] = this.deptDialysisAreaName;
        data["cureShiftName"] = this.cureShiftName;
        data["handoverUserId"] = this.handoverUserId;
        data["handoverName"] = this.handoverName;
        data["surnameCode"] = this.surnameCode;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["cureDeptShrID"] = this.cureDeptShrID;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IDeptShrCureAfterView {
    /** [透析区间](透析区间) */
    deptDialysisAreaId: string;
    /** [透析班次](透析班次) */
    cureShiftId: string;
    /** 类型 `DIC.DEPT.SHTYPE` *并发症* */
    type?: string | undefined;
    /** 交班时间 */
    time: dayjs.Dayjs;
    /** [提及到的患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 提及到的用户 *@张医生 @李护士*(存sysuserid,sysuserid) */
    mentionUser?: string | undefined;
    /** 级别 *一般,重要* */
    level: string;
    /** 交班内容 */
    content?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 类型显示值 */
    typeLabel?: string | undefined;
    /** 提及到的用户 *@张医生 @李护士* */
    mentionUserLabel?: string | undefined;
    /** 透析区间名称 */
    deptDialysisAreaName?: string | undefined;
    /** 透析班次名称 */
    cureShiftName?: string | undefined;
    /** [交班用户标识](用户信息Id) */
    handoverUserId?: string | undefined;
    /** 交班人姓名 */
    handoverName?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 交班看板标识 */
    cureDeptShrID?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class DeptShrCureAfterViewResult implements IDeptShrCureAfterViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptShrCureAfterView[] | undefined;

    constructor(data?: IDeptShrCureAfterViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptShrCureAfterView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptShrCureAfterViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShrCureAfterViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptShrCureAfterViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptShrCureAfterView[] | undefined;
}

/** Reponse */
export class DeptShrCureAfterViewResultEntry implements IDeptShrCureAfterViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptShrCureAfterView;

    constructor(data?: IDeptShrCureAfterViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DeptShrCureAfterView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptShrCureAfterViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShrCureAfterViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDeptShrCureAfterViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptShrCureAfterView;
}

/** 设备保修记录 */
export class DevRepairsLogEditModel implements IDevRepairsLogEditModel {
    /** [设备标识](#科室设备) */
    devInfoId!: string;
    /** 故障描述 */
    faultDescription!: string;

    constructor(data?: IDevRepairsLogEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.devInfoId = _data["devInfoId"];
            this.faultDescription = _data["faultDescription"];
        }
    }

    static fromJS(data: any): DevRepairsLogEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DevRepairsLogEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["devInfoId"] = this.devInfoId;
        data["faultDescription"] = this.faultDescription;
        return data;
    }
}

/** 设备保修记录 */
export interface IDevRepairsLogEditModel {
    /** [设备标识](#科室设备) */
    devInfoId: string;
    /** 故障描述 */
    faultDescription: string;
}

export class DisinfectCureAfterEditModel implements IDisinfectCureAfterEditModel {
    /** 开始时间 */
    beginDate!: dayjs.Dayjs;
    /** 停止时间 */
    endDate!: dayjs.Dayjs;
    /** 消毒时长 *分钟* */
    disinfectTime!: number;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** [机外消毒人](用户信息) */
    externalOperatorId?: string | undefined;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** [机内消毒人](用户信息) */
    internalOperatorId?: string | undefined;
    /** 血压计袖带消毒方式 `DIC.DEV.DIS.PROGRAM.SPHYGMOMANOMETERCUFF` */
    programSphygmomanometerCuff?: string | undefined;
    /** [血压计袖带消毒人](#用户信息) */
    sphygmomanometerCuffOperatorId?: string | undefined;
    /** 床单元清洁 */
    bedUnitCleaning?: string | undefined;
    /** 过滤网更换 */
    filterScreenChanging?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 设备使用状态 */
    equipmentStatus?: string | undefined;
    /** 使用记录id */
    devUsageLogId?: string | undefined;
    /** 消毒温度 *℃* */
    disinfectTemp?: string | undefined;
    /** 消毒说明 */
    disinfectInstructions?: string | undefined;
    /** 自定义字段 */
    cureRecordFieldItems?: CureRecordFieldItemEditModel[] | undefined;

    constructor(data?: IDisinfectCureAfterEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.beginDate = _data["beginDate"] ? dayjs(_data["beginDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? dayjs(_data["endDate"].toString()) : <any>undefined;
            this.disinfectTime = _data["disinfectTime"];
            this.programExterior = _data["programExterior"];
            this.externalOperatorId = _data["externalOperatorId"];
            this.programInternal = _data["programInternal"];
            this.internalOperatorId = _data["internalOperatorId"];
            this.programSphygmomanometerCuff = _data["programSphygmomanometerCuff"];
            this.sphygmomanometerCuffOperatorId = _data["sphygmomanometerCuffOperatorId"];
            this.bedUnitCleaning = _data["bedUnitCleaning"];
            this.filterScreenChanging = _data["filterScreenChanging"];
            this.remark = _data["remark"];
            this.equipmentStatus = _data["equipmentStatus"];
            this.devUsageLogId = _data["devUsageLogId"];
            this.disinfectTemp = _data["disinfectTemp"];
            this.disinfectInstructions = _data["disinfectInstructions"];
            if (Array.isArray(_data["cureRecordFieldItems"])) {
                this.cureRecordFieldItems = [] as any;
                for (let item of _data["cureRecordFieldItems"])
                    this.cureRecordFieldItems!.push(CureRecordFieldItemEditModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DisinfectCureAfterEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DisinfectCureAfterEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["beginDate"] = this.beginDate ? this.beginDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["disinfectTime"] = this.disinfectTime;
        data["programExterior"] = this.programExterior;
        data["externalOperatorId"] = this.externalOperatorId;
        data["programInternal"] = this.programInternal;
        data["internalOperatorId"] = this.internalOperatorId;
        data["programSphygmomanometerCuff"] = this.programSphygmomanometerCuff;
        data["sphygmomanometerCuffOperatorId"] = this.sphygmomanometerCuffOperatorId;
        data["bedUnitCleaning"] = this.bedUnitCleaning;
        data["filterScreenChanging"] = this.filterScreenChanging;
        data["remark"] = this.remark;
        data["equipmentStatus"] = this.equipmentStatus;
        data["devUsageLogId"] = this.devUsageLogId;
        data["disinfectTemp"] = this.disinfectTemp;
        data["disinfectInstructions"] = this.disinfectInstructions;
        if (Array.isArray(this.cureRecordFieldItems)) {
            data["cureRecordFieldItems"] = [];
            for (let item of this.cureRecordFieldItems)
                data["cureRecordFieldItems"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDisinfectCureAfterEditModel {
    /** 开始时间 */
    beginDate: dayjs.Dayjs;
    /** 停止时间 */
    endDate: dayjs.Dayjs;
    /** 消毒时长 *分钟* */
    disinfectTime: number;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** [机外消毒人](用户信息) */
    externalOperatorId?: string | undefined;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** [机内消毒人](用户信息) */
    internalOperatorId?: string | undefined;
    /** 血压计袖带消毒方式 `DIC.DEV.DIS.PROGRAM.SPHYGMOMANOMETERCUFF` */
    programSphygmomanometerCuff?: string | undefined;
    /** [血压计袖带消毒人](#用户信息) */
    sphygmomanometerCuffOperatorId?: string | undefined;
    /** 床单元清洁 */
    bedUnitCleaning?: string | undefined;
    /** 过滤网更换 */
    filterScreenChanging?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 设备使用状态 */
    equipmentStatus?: string | undefined;
    /** 使用记录id */
    devUsageLogId?: string | undefined;
    /** 消毒温度 *℃* */
    disinfectTemp?: string | undefined;
    /** 消毒说明 */
    disinfectInstructions?: string | undefined;
    /** 自定义字段 */
    cureRecordFieldItems?: CureRecordFieldItemEditModel[] | undefined;
}

export class DisinfectCureAfterView implements IDisinfectCureAfterView {
    /** 开始时间 */
    beginDate!: dayjs.Dayjs;
    /** 停止时间 */
    endDate!: dayjs.Dayjs;
    /** 消毒时长 *分钟* */
    disinfectTime!: number;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** [机外消毒人](用户信息) */
    externalOperatorId?: string | undefined;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** [机内消毒人](用户信息) */
    internalOperatorId?: string | undefined;
    /** 血压计袖带消毒方式 `DIC.DEV.DIS.PROGRAM.SPHYGMOMANOMETERCUFF` */
    programSphygmomanometerCuff?: string | undefined;
    /** [血压计袖带消毒人](#用户信息) */
    sphygmomanometerCuffOperatorId?: string | undefined;
    /** 床单元清洁 */
    bedUnitCleaning?: string | undefined;
    /** 过滤网更换 */
    filterScreenChanging?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 设备使用状态 */
    equipmentStatus?: string | undefined;
    /** 使用记录id */
    devUsageLogId?: string | undefined;
    /** 消毒温度 *℃* */
    disinfectTemp?: string | undefined;
    /** 消毒说明 */
    disinfectInstructions?: string | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 消毒日期 */
    date?: dayjs.Dayjs | undefined;
    /** 是否已经消毒 */
    hasDisinfect?: boolean;
    /** 机内消毒方式显示值 */
    programInternalLabel?: string | undefined;
    /** 机内消毒人名称 */
    internalOperatorName?: string | undefined;
    /** 是否有血压计袖带0,1 */
    sphygmomanometerCuff?: number | undefined;
    /** 机外消毒方式显示值 */
    programExteriorLabel?: string | undefined;
    /** 机外消毒人名称 */
    externalOperatorName?: string | undefined;
    /** 血压计袖带消毒方式 `DIC.DEV.DIS.PROGRAM.SPHYGMOMANOMETERCUFF` - 显示值 */
    programSphygmomanometerCuffLabel?: string | undefined;
    /** [血压计袖带消毒人](#用户信息) - 名称 */
    sphygmomanometerCuffOperatorName?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 设定透析时长 *分钟* */
    dialysisDurationSet?: number;
    /** 透析记录标识 */
    cureRecordId?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 透析方式 */
    dialysisModeLabel?: string | undefined;
    /** 置换方式显示值 */
    rfmLabel?: string | undefined;
    status?: string | undefined;
    /** 治疗状态显示值 */
    statusLabel?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineType?: string | undefined;
    /** 自定义字段 */
    cureRecordFieldItems?: CureRecordFieldItemBase[] | undefined;

    constructor(data?: IDisinfectCureAfterView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.beginDate = _data["beginDate"] ? dayjs(_data["beginDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? dayjs(_data["endDate"].toString()) : <any>undefined;
            this.disinfectTime = _data["disinfectTime"];
            this.programExterior = _data["programExterior"];
            this.externalOperatorId = _data["externalOperatorId"];
            this.programInternal = _data["programInternal"];
            this.internalOperatorId = _data["internalOperatorId"];
            this.programSphygmomanometerCuff = _data["programSphygmomanometerCuff"];
            this.sphygmomanometerCuffOperatorId = _data["sphygmomanometerCuffOperatorId"];
            this.bedUnitCleaning = _data["bedUnitCleaning"];
            this.filterScreenChanging = _data["filterScreenChanging"];
            this.remark = _data["remark"];
            this.equipmentStatus = _data["equipmentStatus"];
            this.devUsageLogId = _data["devUsageLogId"];
            this.disinfectTemp = _data["disinfectTemp"];
            this.disinfectInstructions = _data["disinfectInstructions"];
            this.timeOff = _data["timeOff"] ? dayjs(_data["timeOff"].toString()) : <any>undefined;
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.hasDisinfect = _data["hasDisinfect"];
            this.programInternalLabel = _data["programInternalLabel"];
            this.internalOperatorName = _data["internalOperatorName"];
            this.sphygmomanometerCuff = _data["sphygmomanometerCuff"];
            this.programExteriorLabel = _data["programExteriorLabel"];
            this.externalOperatorName = _data["externalOperatorName"];
            this.programSphygmomanometerCuffLabel = _data["programSphygmomanometerCuffLabel"];
            this.sphygmomanometerCuffOperatorName = _data["sphygmomanometerCuffOperatorName"];
            this.sn = _data["sn"];
            this.patientId = _data["patientId"];
            this.surnameCode = _data["surnameCode"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisMachineModel = _data["dialysisMachineModel"];
            this.dialysisMachineNo = _data["dialysisMachineNo"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisDurationSet = _data["dialysisDurationSet"];
            this.cureRecordId = _data["cureRecordId"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.rfmLabel = _data["rfmLabel"];
            this.status = _data["status"];
            this.statusLabel = _data["statusLabel"];
            this.age = _data["age"];
            this.source = _data["source"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.ward = _data["ward"];
            this.bed = _data["bed"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            this.suggestion = _data["suggestion"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.dialysisMachineType = _data["dialysisMachineType"];
            if (Array.isArray(_data["cureRecordFieldItems"])) {
                this.cureRecordFieldItems = [] as any;
                for (let item of _data["cureRecordFieldItems"])
                    this.cureRecordFieldItems!.push(CureRecordFieldItemBase.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DisinfectCureAfterView {
        data = typeof data === 'object' ? data : {};
        let result = new DisinfectCureAfterView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["beginDate"] = this.beginDate ? this.beginDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["disinfectTime"] = this.disinfectTime;
        data["programExterior"] = this.programExterior;
        data["externalOperatorId"] = this.externalOperatorId;
        data["programInternal"] = this.programInternal;
        data["internalOperatorId"] = this.internalOperatorId;
        data["programSphygmomanometerCuff"] = this.programSphygmomanometerCuff;
        data["sphygmomanometerCuffOperatorId"] = this.sphygmomanometerCuffOperatorId;
        data["bedUnitCleaning"] = this.bedUnitCleaning;
        data["filterScreenChanging"] = this.filterScreenChanging;
        data["remark"] = this.remark;
        data["equipmentStatus"] = this.equipmentStatus;
        data["devUsageLogId"] = this.devUsageLogId;
        data["disinfectTemp"] = this.disinfectTemp;
        data["disinfectInstructions"] = this.disinfectInstructions;
        data["timeOff"] = this.timeOff ? this.timeOff.toISOString() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["hasDisinfect"] = this.hasDisinfect;
        data["programInternalLabel"] = this.programInternalLabel;
        data["internalOperatorName"] = this.internalOperatorName;
        data["sphygmomanometerCuff"] = this.sphygmomanometerCuff;
        data["programExteriorLabel"] = this.programExteriorLabel;
        data["externalOperatorName"] = this.externalOperatorName;
        data["programSphygmomanometerCuffLabel"] = this.programSphygmomanometerCuffLabel;
        data["sphygmomanometerCuffOperatorName"] = this.sphygmomanometerCuffOperatorName;
        data["sn"] = this.sn;
        data["patientId"] = this.patientId;
        data["surnameCode"] = this.surnameCode;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisMachineModel"] = this.dialysisMachineModel;
        data["dialysisMachineNo"] = this.dialysisMachineNo;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisDurationSet"] = this.dialysisDurationSet;
        data["cureRecordId"] = this.cureRecordId;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["rfmLabel"] = this.rfmLabel;
        data["status"] = this.status;
        data["statusLabel"] = this.statusLabel;
        data["age"] = this.age;
        data["source"] = this.source;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["ward"] = this.ward;
        data["bed"] = this.bed;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        data["suggestion"] = this.suggestion;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["dialysisMachineType"] = this.dialysisMachineType;
        if (Array.isArray(this.cureRecordFieldItems)) {
            data["cureRecordFieldItems"] = [];
            for (let item of this.cureRecordFieldItems)
                data["cureRecordFieldItems"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDisinfectCureAfterView {
    /** 开始时间 */
    beginDate: dayjs.Dayjs;
    /** 停止时间 */
    endDate: dayjs.Dayjs;
    /** 消毒时长 *分钟* */
    disinfectTime: number;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** [机外消毒人](用户信息) */
    externalOperatorId?: string | undefined;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** [机内消毒人](用户信息) */
    internalOperatorId?: string | undefined;
    /** 血压计袖带消毒方式 `DIC.DEV.DIS.PROGRAM.SPHYGMOMANOMETERCUFF` */
    programSphygmomanometerCuff?: string | undefined;
    /** [血压计袖带消毒人](#用户信息) */
    sphygmomanometerCuffOperatorId?: string | undefined;
    /** 床单元清洁 */
    bedUnitCleaning?: string | undefined;
    /** 过滤网更换 */
    filterScreenChanging?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 设备使用状态 */
    equipmentStatus?: string | undefined;
    /** 使用记录id */
    devUsageLogId?: string | undefined;
    /** 消毒温度 *℃* */
    disinfectTemp?: string | undefined;
    /** 消毒说明 */
    disinfectInstructions?: string | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 消毒日期 */
    date?: dayjs.Dayjs | undefined;
    /** 是否已经消毒 */
    hasDisinfect?: boolean;
    /** 机内消毒方式显示值 */
    programInternalLabel?: string | undefined;
    /** 机内消毒人名称 */
    internalOperatorName?: string | undefined;
    /** 是否有血压计袖带0,1 */
    sphygmomanometerCuff?: number | undefined;
    /** 机外消毒方式显示值 */
    programExteriorLabel?: string | undefined;
    /** 机外消毒人名称 */
    externalOperatorName?: string | undefined;
    /** 血压计袖带消毒方式 `DIC.DEV.DIS.PROGRAM.SPHYGMOMANOMETERCUFF` - 显示值 */
    programSphygmomanometerCuffLabel?: string | undefined;
    /** [血压计袖带消毒人](#用户信息) - 名称 */
    sphygmomanometerCuffOperatorName?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 设定透析时长 *分钟* */
    dialysisDurationSet?: number;
    /** 透析记录标识 */
    cureRecordId?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 透析方式 */
    dialysisModeLabel?: string | undefined;
    /** 置换方式显示值 */
    rfmLabel?: string | undefined;
    status?: string | undefined;
    /** 治疗状态显示值 */
    statusLabel?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineType?: string | undefined;
    /** 自定义字段 */
    cureRecordFieldItems?: CureRecordFieldItemBase[] | undefined;
}

/** Reponse */
export class DisinfectCureAfterViewResult implements IDisinfectCureAfterViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DisinfectCureAfterView[] | undefined;

    constructor(data?: IDisinfectCureAfterViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DisinfectCureAfterView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DisinfectCureAfterViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DisinfectCureAfterViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDisinfectCureAfterViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DisinfectCureAfterView[] | undefined;
}

/** Reponse */
export class DisinfectCureAfterViewResultEntry implements IDisinfectCureAfterViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DisinfectCureAfterView;

    constructor(data?: IDisinfectCureAfterViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DisinfectCureAfterView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DisinfectCureAfterViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DisinfectCureAfterViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDisinfectCureAfterViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DisinfectCureAfterView;
}

export class DrugListCureBeforeView implements IDrugListCureBeforeView {
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 床位标识 */
    bedId?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 药品类型 */
    drugType?: string | undefined;
    /** 药品名称 */
    drugName?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 数量 */
    count?: number;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 库存数量 */
    inventoryCount?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 来源 */
    source?: string | undefined;

    constructor(data?: IDrugListCureBeforeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.patientNameFull = _data["patientNameFull"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.drugType = _data["drugType"];
            this.drugName = _data["drugName"];
            this.spec = _data["spec"];
            this.count = _data["count"];
            this.roomItemListId = _data["roomItemListId"];
            this.inventoryCount = _data["inventoryCount"];
            this.unit = _data["unit"];
            this.source = _data["source"];
        }
    }

    static fromJS(data: any): DrugListCureBeforeView {
        data = typeof data === 'object' ? data : {};
        let result = new DrugListCureBeforeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["patientNameFull"] = this.patientNameFull;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["drugType"] = this.drugType;
        data["drugName"] = this.drugName;
        data["spec"] = this.spec;
        data["count"] = this.count;
        data["roomItemListId"] = this.roomItemListId;
        data["inventoryCount"] = this.inventoryCount;
        data["unit"] = this.unit;
        data["source"] = this.source;
        return data;
    }
}

export interface IDrugListCureBeforeView {
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 床位标识 */
    bedId?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 药品类型 */
    drugType?: string | undefined;
    /** 药品名称 */
    drugName?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 数量 */
    count?: number;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 库存数量 */
    inventoryCount?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 来源 */
    source?: string | undefined;
}

/** Reponse */
export class DrugListCureBeforeViewResult implements IDrugListCureBeforeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugListCureBeforeView[] | undefined;

    constructor(data?: IDrugListCureBeforeViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DrugListCureBeforeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DrugListCureBeforeViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DrugListCureBeforeViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDrugListCureBeforeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugListCureBeforeView[] | undefined;
}

export class DrugSummaryCureBeforeView implements IDrugSummaryCureBeforeView {
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 药品类型 */
    drugType?: string | undefined;
    /** 药品名称 */
    drugName?: string | undefined;

    constructor(data?: IDrugSummaryCureBeforeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.drugType = _data["drugType"];
            this.drugName = _data["drugName"];
        }
    }

    static fromJS(data: any): DrugSummaryCureBeforeView {
        data = typeof data === 'object' ? data : {};
        let result = new DrugSummaryCureBeforeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["drugType"] = this.drugType;
        data["drugName"] = this.drugName;
        return data;
    }
}

export interface IDrugSummaryCureBeforeView {
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 药品类型 */
    drugType?: string | undefined;
    /** 药品名称 */
    drugName?: string | undefined;
}

/** Reponse */
export class DrugSummaryCureBeforeViewResult implements IDrugSummaryCureBeforeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugSummaryCureBeforeView[] | undefined;

    constructor(data?: IDrugSummaryCureBeforeViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DrugSummaryCureBeforeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DrugSummaryCureBeforeViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DrugSummaryCureBeforeViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDrugSummaryCureBeforeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugSummaryCureBeforeView[] | undefined;
}

export class LabelModel implements ILabelModel {
    /** 显示值 */
    label?: string | undefined;
    /** 值 */
    value?: string | undefined;

    constructor(data?: ILabelModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.label = _data["label"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): LabelModel {
        data = typeof data === 'object' ? data : {};
        let result = new LabelModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["label"] = this.label;
        data["value"] = this.value;
        return data;
    }
}

export interface ILabelModel {
    /** 显示值 */
    label?: string | undefined;
    /** 值 */
    value?: string | undefined;
}

export class MeasureCureBeforeEditModel implements IMeasureCureBeforeEditModel {
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床,未测* */
    beforeWeightMode?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,未测,拒测* */
    beforeBpPosition?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透前体温 *摄氏度* */
    onTemp?: number | undefined;
    /** 签到时间 */
    timeSignin!: dayjs.Dayjs;
    /** 自定义字段 */
    cureRecordFieldItems?: CureRecordFieldItemEditModel[] | undefined;

    constructor(data?: IMeasureCureBeforeEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.bestWeight = _data["bestWeight"];
            this.beforeWeight = _data["beforeWeight"];
            this.beforeWeightMode = _data["beforeWeightMode"];
            this.deductionWeight = _data["deductionWeight"];
            this.ufg = _data["ufg"];
            this.beforeBpPosition = _data["beforeBpPosition"];
            this.beforeSbp = _data["beforeSbp"];
            this.beforeDbp = _data["beforeDbp"];
            this.beforePulse = _data["beforePulse"];
            this.onTemp = _data["onTemp"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            if (Array.isArray(_data["cureRecordFieldItems"])) {
                this.cureRecordFieldItems = [] as any;
                for (let item of _data["cureRecordFieldItems"])
                    this.cureRecordFieldItems!.push(CureRecordFieldItemEditModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MeasureCureBeforeEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new MeasureCureBeforeEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bestWeight"] = this.bestWeight;
        data["beforeWeight"] = this.beforeWeight;
        data["beforeWeightMode"] = this.beforeWeightMode;
        data["deductionWeight"] = this.deductionWeight;
        data["ufg"] = this.ufg;
        data["beforeBpPosition"] = this.beforeBpPosition;
        data["beforeSbp"] = this.beforeSbp;
        data["beforeDbp"] = this.beforeDbp;
        data["beforePulse"] = this.beforePulse;
        data["onTemp"] = this.onTemp;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toISOString() : <any>undefined;
        if (Array.isArray(this.cureRecordFieldItems)) {
            data["cureRecordFieldItems"] = [];
            for (let item of this.cureRecordFieldItems)
                data["cureRecordFieldItems"].push(item.toJSON());
        }
        return data;
    }
}

export interface IMeasureCureBeforeEditModel {
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床,未测* */
    beforeWeightMode?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,未测,拒测* */
    beforeBpPosition?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透前体温 *摄氏度* */
    onTemp?: number | undefined;
    /** 签到时间 */
    timeSignin: dayjs.Dayjs;
    /** 自定义字段 */
    cureRecordFieldItems?: CureRecordFieldItemEditModel[] | undefined;
}

export class MeasureCureBeforeView implements IMeasureCureBeforeView {
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床,未测* */
    beforeWeightMode?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,未测,拒测* */
    beforeBpPosition?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透前体温 *摄氏度* */
    onTemp?: number | undefined;
    /** 签到时间 */
    timeSignin!: dayjs.Dayjs;
    /** 是否签到 */
    signin?: boolean;
    /** 透析排床标识 */
    cureScheduleId?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 设定透析时长 *分钟* */
    dialysisDurationSet?: number;
    /** 透析记录标识 */
    cureRecordId?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 透析方式 */
    dialysisModeLabel?: string | undefined;
    /** 置换方式显示值 */
    rfmLabel?: string | undefined;
    /** 治疗状态显示值 */
    statusLabel?: string | undefined;
    /** 透前体重方式显示值 */
    beforeWeightModeLabel?: string | undefined;
    /** 透前血压测量位置显示值 */
    beforeBpPositionLable?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 透析区间排序 */
    sequenceDialysis?: number;
    /** 床位排序 */
    sequenceBed?: number;
    /** 班次排序 */
    sequenceShift?: number;
    lastAfterWeight?: string | undefined;
    /** 自定义字段 */
    cureRecordFieldItems?: CureRecordFieldItemBase[] | undefined;

    constructor(data?: IMeasureCureBeforeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.bestWeight = _data["bestWeight"];
            this.beforeWeight = _data["beforeWeight"];
            this.beforeWeightMode = _data["beforeWeightMode"];
            this.deductionWeight = _data["deductionWeight"];
            this.ufg = _data["ufg"];
            this.beforeBpPosition = _data["beforeBpPosition"];
            this.beforeSbp = _data["beforeSbp"];
            this.beforeDbp = _data["beforeDbp"];
            this.beforePulse = _data["beforePulse"];
            this.onTemp = _data["onTemp"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.signin = _data["signin"];
            this.cureScheduleId = _data["cureScheduleId"];
            this.sn = _data["sn"];
            this.patientId = _data["patientId"];
            this.surnameCode = _data["surnameCode"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisMachineModel = _data["dialysisMachineModel"];
            this.dialysisMachineNo = _data["dialysisMachineNo"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisDurationSet = _data["dialysisDurationSet"];
            this.cureRecordId = _data["cureRecordId"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.rfmLabel = _data["rfmLabel"];
            this.statusLabel = _data["statusLabel"];
            this.beforeWeightModeLabel = _data["beforeWeightModeLabel"];
            this.beforeBpPositionLable = _data["beforeBpPositionLable"];
            this.age = _data["age"];
            this.source = _data["source"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.ward = _data["ward"];
            this.bed = _data["bed"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            this.suggestion = _data["suggestion"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.sequenceDialysis = _data["sequenceDialysis"];
            this.sequenceBed = _data["sequenceBed"];
            this.sequenceShift = _data["sequenceShift"];
            this.lastAfterWeight = _data["lastAfterWeight"];
            if (Array.isArray(_data["cureRecordFieldItems"])) {
                this.cureRecordFieldItems = [] as any;
                for (let item of _data["cureRecordFieldItems"])
                    this.cureRecordFieldItems!.push(CureRecordFieldItemBase.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MeasureCureBeforeView {
        data = typeof data === 'object' ? data : {};
        let result = new MeasureCureBeforeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bestWeight"] = this.bestWeight;
        data["beforeWeight"] = this.beforeWeight;
        data["beforeWeightMode"] = this.beforeWeightMode;
        data["deductionWeight"] = this.deductionWeight;
        data["ufg"] = this.ufg;
        data["beforeBpPosition"] = this.beforeBpPosition;
        data["beforeSbp"] = this.beforeSbp;
        data["beforeDbp"] = this.beforeDbp;
        data["beforePulse"] = this.beforePulse;
        data["onTemp"] = this.onTemp;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toISOString() : <any>undefined;
        data["signin"] = this.signin;
        data["cureScheduleId"] = this.cureScheduleId;
        data["sn"] = this.sn;
        data["patientId"] = this.patientId;
        data["surnameCode"] = this.surnameCode;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisMachineModel"] = this.dialysisMachineModel;
        data["dialysisMachineNo"] = this.dialysisMachineNo;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisDurationSet"] = this.dialysisDurationSet;
        data["cureRecordId"] = this.cureRecordId;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["rfmLabel"] = this.rfmLabel;
        data["statusLabel"] = this.statusLabel;
        data["beforeWeightModeLabel"] = this.beforeWeightModeLabel;
        data["beforeBpPositionLable"] = this.beforeBpPositionLable;
        data["age"] = this.age;
        data["source"] = this.source;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["ward"] = this.ward;
        data["bed"] = this.bed;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        data["suggestion"] = this.suggestion;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["sequenceDialysis"] = this.sequenceDialysis;
        data["sequenceBed"] = this.sequenceBed;
        data["sequenceShift"] = this.sequenceShift;
        data["lastAfterWeight"] = this.lastAfterWeight;
        if (Array.isArray(this.cureRecordFieldItems)) {
            data["cureRecordFieldItems"] = [];
            for (let item of this.cureRecordFieldItems)
                data["cureRecordFieldItems"].push(item.toJSON());
        }
        return data;
    }
}

export interface IMeasureCureBeforeView {
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床,未测* */
    beforeWeightMode?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,未测,拒测* */
    beforeBpPosition?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透前体温 *摄氏度* */
    onTemp?: number | undefined;
    /** 签到时间 */
    timeSignin: dayjs.Dayjs;
    /** 是否签到 */
    signin?: boolean;
    /** 透析排床标识 */
    cureScheduleId?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 设定透析时长 *分钟* */
    dialysisDurationSet?: number;
    /** 透析记录标识 */
    cureRecordId?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 透析方式 */
    dialysisModeLabel?: string | undefined;
    /** 置换方式显示值 */
    rfmLabel?: string | undefined;
    /** 治疗状态显示值 */
    statusLabel?: string | undefined;
    /** 透前体重方式显示值 */
    beforeWeightModeLabel?: string | undefined;
    /** 透前血压测量位置显示值 */
    beforeBpPositionLable?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 透析区间排序 */
    sequenceDialysis?: number;
    /** 床位排序 */
    sequenceBed?: number;
    /** 班次排序 */
    sequenceShift?: number;
    lastAfterWeight?: string | undefined;
    /** 自定义字段 */
    cureRecordFieldItems?: CureRecordFieldItemBase[] | undefined;
}

/** Reponse */
export class MeasureCureBeforeViewResult implements IMeasureCureBeforeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MeasureCureBeforeView[] | undefined;

    constructor(data?: IMeasureCureBeforeViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(MeasureCureBeforeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MeasureCureBeforeViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new MeasureCureBeforeViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IMeasureCureBeforeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MeasureCureBeforeView[] | undefined;
}

/** Reponse */
export class MeasureCureBeforeViewResultEntry implements IMeasureCureBeforeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: MeasureCureBeforeView;

    constructor(data?: IMeasureCureBeforeViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? MeasureCureBeforeView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MeasureCureBeforeViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new MeasureCureBeforeViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IMeasureCureBeforeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: MeasureCureBeforeView;
}

export class MonitorCureMiddleEditModel implements IMonitorCureMiddleEditModel {
    /** [透析记录标识](透析记录) */
    cureRecordId!: string;
    /** 检测时间 */
    monitorTime!: dayjs.Dayjs;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** 静脉压 *mmHg* */
    venousPressure?: number | undefined;
    /** 动脉压 *mmHg* */
    arterialPressure?: number | undefined;
    /** 跨膜压 *mmHg Transmembrane Pressure* */
    tmp?: number | undefined;
    /** 测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    position?: string | undefined;
    /** 收缩压 *mmHg* */
    sbp?: number | undefined;
    /** 舒张压 *mmHg* */
    dbp?: number | undefined;
    /** 脉搏 *次/分* */
    pulse?: number | undefined;
    /** 呼吸 *次/分* */
    breathe?: number | undefined;
    /** 体温 */
    temp?: number | undefined;
    /** 超滤率 *ml/h Ultrafiltration Rate* */
    ufr?: number | undefined;
    /** 超滤量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 透析液流量 *ml/min* */
    dialysateFlowRate?: number | undefined;
    /** 透析液温度 *℃* */
    dialysateTemp?: number | undefined;
    /** 透析液电导度 *mS/cm dialysate conductivity* */
    dialysateCond?: number | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 肝素量 *mg* */
    heparin?: number | undefined;
    /** 管路情况 `DIC.DIALYSIS.MONITOR.TUBE` *多选* */
    remarkTube?: string | undefined;
    /** 渗血情况 `DIC.DIALYSIS.MONITOR.ERRHYSIS` *多选* */
    remarkErrhysis?: string | undefined;
    /** 抗凝情况 `DIC.DIALYSIS.MONITOR.ANT` *多选* */
    remarkAnticoagulation?: string | undefined;
    /** 病情与处理 *病情与处理模板* `DIC.DIALYSIS.MONITOR.REMARK` *选择后往编辑域中追加* */
    remark?: string | undefined;
    /** 字段1 *预留字段用于使用* */
    ext1?: string | undefined;
    /** 字段2 *预留字段用于使用* */
    ext2?: string | undefined;
    /** 字段3 *预留字段用于使用* */
    ext3?: string | undefined;
    /** 字段4 *预留字段用于使用* */
    ext4?: string | undefined;
    /** 字段5 *预留字段用于使用* */
    ext5?: string | undefined;
    /** 字段6 *预留字段用于使用* */
    ext6?: string | undefined;
    /** 字段7 *预留字段用于使用* */
    ext7?: string | undefined;
    /** 字段8 *预留字段用于使用* */
    ext8?: string | undefined;
    /** 字段9 *预留字段用于使用* */
    ext9?: string | undefined;
    /** 字段10 *预留字段用于使用* */
    ext10?: string | undefined;
    /** 累计肝素量 */
    cumulativeHeparinVolume?: number | undefined;
    /** 自定义字段 */
    cureRecordFieldItems?: CureRecordFieldItemEditModel[] | undefined;

    constructor(data?: IMonitorCureMiddleEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.monitorTime = _data["monitorTime"] ? dayjs(_data["monitorTime"].toString()) : <any>undefined;
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.venousPressure = _data["venousPressure"];
            this.arterialPressure = _data["arterialPressure"];
            this.tmp = _data["tmp"];
            this.position = _data["position"];
            this.sbp = _data["sbp"];
            this.dbp = _data["dbp"];
            this.pulse = _data["pulse"];
            this.breathe = _data["breathe"];
            this.temp = _data["temp"];
            this.ufr = _data["ufr"];
            this.ufv = _data["ufv"];
            this.dialysateFlowRate = _data["dialysateFlowRate"];
            this.dialysateTemp = _data["dialysateTemp"];
            this.dialysateCond = _data["dialysateCond"];
            this.rfr = _data["rfr"];
            this.rfv = _data["rfv"];
            this.heparin = _data["heparin"];
            this.remarkTube = _data["remarkTube"];
            this.remarkErrhysis = _data["remarkErrhysis"];
            this.remarkAnticoagulation = _data["remarkAnticoagulation"];
            this.remark = _data["remark"];
            this.ext1 = _data["ext1"];
            this.ext2 = _data["ext2"];
            this.ext3 = _data["ext3"];
            this.ext4 = _data["ext4"];
            this.ext5 = _data["ext5"];
            this.ext6 = _data["ext6"];
            this.ext7 = _data["ext7"];
            this.ext8 = _data["ext8"];
            this.ext9 = _data["ext9"];
            this.ext10 = _data["ext10"];
            this.cumulativeHeparinVolume = _data["cumulativeHeparinVolume"];
            if (Array.isArray(_data["cureRecordFieldItems"])) {
                this.cureRecordFieldItems = [] as any;
                for (let item of _data["cureRecordFieldItems"])
                    this.cureRecordFieldItems!.push(CureRecordFieldItemEditModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MonitorCureMiddleEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new MonitorCureMiddleEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["monitorTime"] = this.monitorTime ? this.monitorTime.toISOString() : <any>undefined;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["venousPressure"] = this.venousPressure;
        data["arterialPressure"] = this.arterialPressure;
        data["tmp"] = this.tmp;
        data["position"] = this.position;
        data["sbp"] = this.sbp;
        data["dbp"] = this.dbp;
        data["pulse"] = this.pulse;
        data["breathe"] = this.breathe;
        data["temp"] = this.temp;
        data["ufr"] = this.ufr;
        data["ufv"] = this.ufv;
        data["dialysateFlowRate"] = this.dialysateFlowRate;
        data["dialysateTemp"] = this.dialysateTemp;
        data["dialysateCond"] = this.dialysateCond;
        data["rfr"] = this.rfr;
        data["rfv"] = this.rfv;
        data["heparin"] = this.heparin;
        data["remarkTube"] = this.remarkTube;
        data["remarkErrhysis"] = this.remarkErrhysis;
        data["remarkAnticoagulation"] = this.remarkAnticoagulation;
        data["remark"] = this.remark;
        data["ext1"] = this.ext1;
        data["ext2"] = this.ext2;
        data["ext3"] = this.ext3;
        data["ext4"] = this.ext4;
        data["ext5"] = this.ext5;
        data["ext6"] = this.ext6;
        data["ext7"] = this.ext7;
        data["ext8"] = this.ext8;
        data["ext9"] = this.ext9;
        data["ext10"] = this.ext10;
        data["cumulativeHeparinVolume"] = this.cumulativeHeparinVolume;
        if (Array.isArray(this.cureRecordFieldItems)) {
            data["cureRecordFieldItems"] = [];
            for (let item of this.cureRecordFieldItems)
                data["cureRecordFieldItems"].push(item.toJSON());
        }
        return data;
    }
}

export interface IMonitorCureMiddleEditModel {
    /** [透析记录标识](透析记录) */
    cureRecordId: string;
    /** 检测时间 */
    monitorTime: dayjs.Dayjs;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** 静脉压 *mmHg* */
    venousPressure?: number | undefined;
    /** 动脉压 *mmHg* */
    arterialPressure?: number | undefined;
    /** 跨膜压 *mmHg Transmembrane Pressure* */
    tmp?: number | undefined;
    /** 测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    position?: string | undefined;
    /** 收缩压 *mmHg* */
    sbp?: number | undefined;
    /** 舒张压 *mmHg* */
    dbp?: number | undefined;
    /** 脉搏 *次/分* */
    pulse?: number | undefined;
    /** 呼吸 *次/分* */
    breathe?: number | undefined;
    /** 体温 */
    temp?: number | undefined;
    /** 超滤率 *ml/h Ultrafiltration Rate* */
    ufr?: number | undefined;
    /** 超滤量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 透析液流量 *ml/min* */
    dialysateFlowRate?: number | undefined;
    /** 透析液温度 *℃* */
    dialysateTemp?: number | undefined;
    /** 透析液电导度 *mS/cm dialysate conductivity* */
    dialysateCond?: number | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 肝素量 *mg* */
    heparin?: number | undefined;
    /** 管路情况 `DIC.DIALYSIS.MONITOR.TUBE` *多选* */
    remarkTube?: string | undefined;
    /** 渗血情况 `DIC.DIALYSIS.MONITOR.ERRHYSIS` *多选* */
    remarkErrhysis?: string | undefined;
    /** 抗凝情况 `DIC.DIALYSIS.MONITOR.ANT` *多选* */
    remarkAnticoagulation?: string | undefined;
    /** 病情与处理 *病情与处理模板* `DIC.DIALYSIS.MONITOR.REMARK` *选择后往编辑域中追加* */
    remark?: string | undefined;
    /** 字段1 *预留字段用于使用* */
    ext1?: string | undefined;
    /** 字段2 *预留字段用于使用* */
    ext2?: string | undefined;
    /** 字段3 *预留字段用于使用* */
    ext3?: string | undefined;
    /** 字段4 *预留字段用于使用* */
    ext4?: string | undefined;
    /** 字段5 *预留字段用于使用* */
    ext5?: string | undefined;
    /** 字段6 *预留字段用于使用* */
    ext6?: string | undefined;
    /** 字段7 *预留字段用于使用* */
    ext7?: string | undefined;
    /** 字段8 *预留字段用于使用* */
    ext8?: string | undefined;
    /** 字段9 *预留字段用于使用* */
    ext9?: string | undefined;
    /** 字段10 *预留字段用于使用* */
    ext10?: string | undefined;
    /** 累计肝素量 */
    cumulativeHeparinVolume?: number | undefined;
    /** 自定义字段 */
    cureRecordFieldItems?: CureRecordFieldItemEditModel[] | undefined;
}

export class MonitorCureMiddleView implements IMonitorCureMiddleView {
    /** [透析记录标识](透析记录) */
    cureRecordId!: string;
    /** 检测时间 */
    monitorTime!: dayjs.Dayjs;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** 静脉压 *mmHg* */
    venousPressure?: number | undefined;
    /** 动脉压 *mmHg* */
    arterialPressure?: number | undefined;
    /** 跨膜压 *mmHg Transmembrane Pressure* */
    tmp?: number | undefined;
    /** 测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    position?: string | undefined;
    /** 收缩压 *mmHg* */
    sbp?: number | undefined;
    /** 舒张压 *mmHg* */
    dbp?: number | undefined;
    /** 脉搏 *次/分* */
    pulse?: number | undefined;
    /** 呼吸 *次/分* */
    breathe?: number | undefined;
    /** 体温 */
    temp?: number | undefined;
    /** 超滤率 *ml/h Ultrafiltration Rate* */
    ufr?: number | undefined;
    /** 超滤量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 透析液流量 *ml/min* */
    dialysateFlowRate?: number | undefined;
    /** 透析液温度 *℃* */
    dialysateTemp?: number | undefined;
    /** 透析液电导度 *mS/cm dialysate conductivity* */
    dialysateCond?: number | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 肝素量 *mg* */
    heparin?: number | undefined;
    /** 管路情况 `DIC.DIALYSIS.MONITOR.TUBE` *多选* */
    remarkTube?: string | undefined;
    /** 渗血情况 `DIC.DIALYSIS.MONITOR.ERRHYSIS` *多选* */
    remarkErrhysis?: string | undefined;
    /** 抗凝情况 `DIC.DIALYSIS.MONITOR.ANT` *多选* */
    remarkAnticoagulation?: string | undefined;
    /** 病情与处理 *病情与处理模板* `DIC.DIALYSIS.MONITOR.REMARK` *选择后往编辑域中追加* */
    remark?: string | undefined;
    /** 字段1 *预留字段用于使用* */
    ext1?: string | undefined;
    /** 字段2 *预留字段用于使用* */
    ext2?: string | undefined;
    /** 字段3 *预留字段用于使用* */
    ext3?: string | undefined;
    /** 字段4 *预留字段用于使用* */
    ext4?: string | undefined;
    /** 字段5 *预留字段用于使用* */
    ext5?: string | undefined;
    /** 字段6 *预留字段用于使用* */
    ext6?: string | undefined;
    /** 字段7 *预留字段用于使用* */
    ext7?: string | undefined;
    /** 字段8 *预留字段用于使用* */
    ext8?: string | undefined;
    /** 字段9 *预留字段用于使用* */
    ext9?: string | undefined;
    /** 字段10 *预留字段用于使用* */
    ext10?: string | undefined;
    /** 累计肝素量 */
    cumulativeHeparinVolume?: number | undefined;
    /** 管路情况显示值 */
    remarkTubeLabel?: string | undefined;
    /** 渗血情况显示值 */
    remarkErrhysisLabel?: string | undefined;
    /** 测量位置显示值 */
    positionLabel?: string | undefined;
    /** 抗凝情况显示值 */
    remarkAnticoagulationLabel?: string | undefined;
    /** 记录护士标识 */
    nurseId?: string | undefined;
    /** 记录护士姓名 */
    nurseName?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 透中监测记录标识 */
    cureMonitorId?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 自定义字段 */
    cureRecordFieldItems?: CureRecordFieldItemBase[] | undefined;

    constructor(data?: IMonitorCureMiddleView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.monitorTime = _data["monitorTime"] ? dayjs(_data["monitorTime"].toString()) : <any>undefined;
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.venousPressure = _data["venousPressure"];
            this.arterialPressure = _data["arterialPressure"];
            this.tmp = _data["tmp"];
            this.position = _data["position"];
            this.sbp = _data["sbp"];
            this.dbp = _data["dbp"];
            this.pulse = _data["pulse"];
            this.breathe = _data["breathe"];
            this.temp = _data["temp"];
            this.ufr = _data["ufr"];
            this.ufv = _data["ufv"];
            this.dialysateFlowRate = _data["dialysateFlowRate"];
            this.dialysateTemp = _data["dialysateTemp"];
            this.dialysateCond = _data["dialysateCond"];
            this.rfr = _data["rfr"];
            this.rfv = _data["rfv"];
            this.heparin = _data["heparin"];
            this.remarkTube = _data["remarkTube"];
            this.remarkErrhysis = _data["remarkErrhysis"];
            this.remarkAnticoagulation = _data["remarkAnticoagulation"];
            this.remark = _data["remark"];
            this.ext1 = _data["ext1"];
            this.ext2 = _data["ext2"];
            this.ext3 = _data["ext3"];
            this.ext4 = _data["ext4"];
            this.ext5 = _data["ext5"];
            this.ext6 = _data["ext6"];
            this.ext7 = _data["ext7"];
            this.ext8 = _data["ext8"];
            this.ext9 = _data["ext9"];
            this.ext10 = _data["ext10"];
            this.cumulativeHeparinVolume = _data["cumulativeHeparinVolume"];
            this.remarkTubeLabel = _data["remarkTubeLabel"];
            this.remarkErrhysisLabel = _data["remarkErrhysisLabel"];
            this.positionLabel = _data["positionLabel"];
            this.remarkAnticoagulationLabel = _data["remarkAnticoagulationLabel"];
            this.nurseId = _data["nurseId"];
            this.nurseName = _data["nurseName"];
            this.sn = _data["sn"];
            this.patientId = _data["patientId"];
            this.surnameCode = _data["surnameCode"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.cureMonitorId = _data["cureMonitorId"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["cureRecordFieldItems"])) {
                this.cureRecordFieldItems = [] as any;
                for (let item of _data["cureRecordFieldItems"])
                    this.cureRecordFieldItems!.push(CureRecordFieldItemBase.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MonitorCureMiddleView {
        data = typeof data === 'object' ? data : {};
        let result = new MonitorCureMiddleView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["monitorTime"] = this.monitorTime ? this.monitorTime.toISOString() : <any>undefined;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["venousPressure"] = this.venousPressure;
        data["arterialPressure"] = this.arterialPressure;
        data["tmp"] = this.tmp;
        data["position"] = this.position;
        data["sbp"] = this.sbp;
        data["dbp"] = this.dbp;
        data["pulse"] = this.pulse;
        data["breathe"] = this.breathe;
        data["temp"] = this.temp;
        data["ufr"] = this.ufr;
        data["ufv"] = this.ufv;
        data["dialysateFlowRate"] = this.dialysateFlowRate;
        data["dialysateTemp"] = this.dialysateTemp;
        data["dialysateCond"] = this.dialysateCond;
        data["rfr"] = this.rfr;
        data["rfv"] = this.rfv;
        data["heparin"] = this.heparin;
        data["remarkTube"] = this.remarkTube;
        data["remarkErrhysis"] = this.remarkErrhysis;
        data["remarkAnticoagulation"] = this.remarkAnticoagulation;
        data["remark"] = this.remark;
        data["ext1"] = this.ext1;
        data["ext2"] = this.ext2;
        data["ext3"] = this.ext3;
        data["ext4"] = this.ext4;
        data["ext5"] = this.ext5;
        data["ext6"] = this.ext6;
        data["ext7"] = this.ext7;
        data["ext8"] = this.ext8;
        data["ext9"] = this.ext9;
        data["ext10"] = this.ext10;
        data["cumulativeHeparinVolume"] = this.cumulativeHeparinVolume;
        data["remarkTubeLabel"] = this.remarkTubeLabel;
        data["remarkErrhysisLabel"] = this.remarkErrhysisLabel;
        data["positionLabel"] = this.positionLabel;
        data["remarkAnticoagulationLabel"] = this.remarkAnticoagulationLabel;
        data["nurseId"] = this.nurseId;
        data["nurseName"] = this.nurseName;
        data["sn"] = this.sn;
        data["patientId"] = this.patientId;
        data["surnameCode"] = this.surnameCode;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["cureMonitorId"] = this.cureMonitorId;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        if (Array.isArray(this.cureRecordFieldItems)) {
            data["cureRecordFieldItems"] = [];
            for (let item of this.cureRecordFieldItems)
                data["cureRecordFieldItems"].push(item.toJSON());
        }
        return data;
    }
}

export interface IMonitorCureMiddleView {
    /** [透析记录标识](透析记录) */
    cureRecordId: string;
    /** 检测时间 */
    monitorTime: dayjs.Dayjs;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** 静脉压 *mmHg* */
    venousPressure?: number | undefined;
    /** 动脉压 *mmHg* */
    arterialPressure?: number | undefined;
    /** 跨膜压 *mmHg Transmembrane Pressure* */
    tmp?: number | undefined;
    /** 测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    position?: string | undefined;
    /** 收缩压 *mmHg* */
    sbp?: number | undefined;
    /** 舒张压 *mmHg* */
    dbp?: number | undefined;
    /** 脉搏 *次/分* */
    pulse?: number | undefined;
    /** 呼吸 *次/分* */
    breathe?: number | undefined;
    /** 体温 */
    temp?: number | undefined;
    /** 超滤率 *ml/h Ultrafiltration Rate* */
    ufr?: number | undefined;
    /** 超滤量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 透析液流量 *ml/min* */
    dialysateFlowRate?: number | undefined;
    /** 透析液温度 *℃* */
    dialysateTemp?: number | undefined;
    /** 透析液电导度 *mS/cm dialysate conductivity* */
    dialysateCond?: number | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 肝素量 *mg* */
    heparin?: number | undefined;
    /** 管路情况 `DIC.DIALYSIS.MONITOR.TUBE` *多选* */
    remarkTube?: string | undefined;
    /** 渗血情况 `DIC.DIALYSIS.MONITOR.ERRHYSIS` *多选* */
    remarkErrhysis?: string | undefined;
    /** 抗凝情况 `DIC.DIALYSIS.MONITOR.ANT` *多选* */
    remarkAnticoagulation?: string | undefined;
    /** 病情与处理 *病情与处理模板* `DIC.DIALYSIS.MONITOR.REMARK` *选择后往编辑域中追加* */
    remark?: string | undefined;
    /** 字段1 *预留字段用于使用* */
    ext1?: string | undefined;
    /** 字段2 *预留字段用于使用* */
    ext2?: string | undefined;
    /** 字段3 *预留字段用于使用* */
    ext3?: string | undefined;
    /** 字段4 *预留字段用于使用* */
    ext4?: string | undefined;
    /** 字段5 *预留字段用于使用* */
    ext5?: string | undefined;
    /** 字段6 *预留字段用于使用* */
    ext6?: string | undefined;
    /** 字段7 *预留字段用于使用* */
    ext7?: string | undefined;
    /** 字段8 *预留字段用于使用* */
    ext8?: string | undefined;
    /** 字段9 *预留字段用于使用* */
    ext9?: string | undefined;
    /** 字段10 *预留字段用于使用* */
    ext10?: string | undefined;
    /** 累计肝素量 */
    cumulativeHeparinVolume?: number | undefined;
    /** 管路情况显示值 */
    remarkTubeLabel?: string | undefined;
    /** 渗血情况显示值 */
    remarkErrhysisLabel?: string | undefined;
    /** 测量位置显示值 */
    positionLabel?: string | undefined;
    /** 抗凝情况显示值 */
    remarkAnticoagulationLabel?: string | undefined;
    /** 记录护士标识 */
    nurseId?: string | undefined;
    /** 记录护士姓名 */
    nurseName?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 透中监测记录标识 */
    cureMonitorId?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 自定义字段 */
    cureRecordFieldItems?: CureRecordFieldItemBase[] | undefined;
}

/** Reponse */
export class MonitorCureMiddleViewResult implements IMonitorCureMiddleViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MonitorCureMiddleView[] | undefined;

    constructor(data?: IMonitorCureMiddleViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(MonitorCureMiddleView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MonitorCureMiddleViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new MonitorCureMiddleViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IMonitorCureMiddleViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MonitorCureMiddleView[] | undefined;
}

/** Reponse */
export class MonitorCureMiddleViewResultEntry implements IMonitorCureMiddleViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: MonitorCureMiddleView;

    constructor(data?: IMonitorCureMiddleViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? MonitorCureMiddleView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MonitorCureMiddleViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new MonitorCureMiddleViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IMonitorCureMiddleViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: MonitorCureMiddleView;
}

export class OffCureAfterEditModel implements IOffCureAfterEditModel {
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 净脱水量 *ml Ultrafiltration Complete* */
    ufc?: number | undefined;
    /** 是否提前下机0,1 *判断标准：提前半个小时以上下机* */
    offEarly?: number | undefined;
    /** 提前下机原因 */
    offEarlyCause?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 透后舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 透后脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    afterBpPosition?: string | undefined;
    /** 下机体温 */
    offTemp?: number | undefined;
    /** 下机呼吸 */
    offBreathe?: number | undefined;
    /** 自定义字段 */
    cureRecordFieldItems?: CureRecordFieldItemEditModel[] | undefined;

    constructor(data?: IOffCureAfterEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.timeOff = _data["timeOff"] ? dayjs(_data["timeOff"].toString()) : <any>undefined;
            this.dialysisDurationFact = _data["dialysisDurationFact"];
            this.ufv = _data["ufv"];
            this.ufc = _data["ufc"];
            this.offEarly = _data["offEarly"];
            this.offEarlyCause = _data["offEarlyCause"];
            this.beforeWeight = _data["beforeWeight"];
            this.afterWeight = _data["afterWeight"];
            this.afterSbp = _data["afterSbp"];
            this.afterDbp = _data["afterDbp"];
            this.afterPulse = _data["afterPulse"];
            this.afterWeightMode = _data["afterWeightMode"];
            this.afterBpPosition = _data["afterBpPosition"];
            this.offTemp = _data["offTemp"];
            this.offBreathe = _data["offBreathe"];
            if (Array.isArray(_data["cureRecordFieldItems"])) {
                this.cureRecordFieldItems = [] as any;
                for (let item of _data["cureRecordFieldItems"])
                    this.cureRecordFieldItems!.push(CureRecordFieldItemEditModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OffCureAfterEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new OffCureAfterEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timeOff"] = this.timeOff ? this.timeOff.toISOString() : <any>undefined;
        data["dialysisDurationFact"] = this.dialysisDurationFact;
        data["ufv"] = this.ufv;
        data["ufc"] = this.ufc;
        data["offEarly"] = this.offEarly;
        data["offEarlyCause"] = this.offEarlyCause;
        data["beforeWeight"] = this.beforeWeight;
        data["afterWeight"] = this.afterWeight;
        data["afterSbp"] = this.afterSbp;
        data["afterDbp"] = this.afterDbp;
        data["afterPulse"] = this.afterPulse;
        data["afterWeightMode"] = this.afterWeightMode;
        data["afterBpPosition"] = this.afterBpPosition;
        data["offTemp"] = this.offTemp;
        data["offBreathe"] = this.offBreathe;
        if (Array.isArray(this.cureRecordFieldItems)) {
            data["cureRecordFieldItems"] = [];
            for (let item of this.cureRecordFieldItems)
                data["cureRecordFieldItems"].push(item.toJSON());
        }
        return data;
    }
}

export interface IOffCureAfterEditModel {
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 净脱水量 *ml Ultrafiltration Complete* */
    ufc?: number | undefined;
    /** 是否提前下机0,1 *判断标准：提前半个小时以上下机* */
    offEarly?: number | undefined;
    /** 提前下机原因 */
    offEarlyCause?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 透后舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 透后脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    afterBpPosition?: string | undefined;
    /** 下机体温 */
    offTemp?: number | undefined;
    /** 下机呼吸 */
    offBreathe?: number | undefined;
    /** 自定义字段 */
    cureRecordFieldItems?: CureRecordFieldItemEditModel[] | undefined;
}

export class OffCureAfterView implements IOffCureAfterView {
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 净脱水量 *ml Ultrafiltration Complete* */
    ufc?: number | undefined;
    /** 是否提前下机0,1 *判断标准：提前半个小时以上下机* */
    offEarly?: number | undefined;
    /** 提前下机原因 */
    offEarlyCause?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 透后舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 透后脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    afterBpPosition?: string | undefined;
    /** 下机体温 */
    offTemp?: number | undefined;
    /** 下机呼吸 */
    offBreathe?: number | undefined;
    /** 是否已经下机 */
    hasDown?: boolean;
    /** 下机护士标识 */
    offNurseId?: string | undefined;
    /** 下机护士姓名 */
    offNurseName?: string | undefined;
    /** 透前体重方式显示值 */
    afterWeightModeLabel?: string | undefined;
    /** 透前血压测量位置显示值 */
    afterBpPositionLabel?: string | undefined;
    /** 透后体重时间 */
    timeAfterWeight?: dayjs.Dayjs | undefined;
    /** 透后血压时间 */
    timeAfterBp?: dayjs.Dayjs | undefined;
    /** 穿刺护士标识 */
    onNurseId?: string | undefined;
    /** 穿刺护士姓名 */
    onNurseName?: string | undefined;
    /** 上机时间 */
    timeOn?: dayjs.Dayjs | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** 透析记录单标识 */
    cureRecordId?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 设定透析时长 *分钟* */
    dialysisDurationSet?: number;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 透析方式 */
    dialysisModeLabel?: string | undefined;
    /** 置换方式显示值 */
    rfmLabel?: string | undefined;
    /** 治疗状态显示值 */
    statusLabel?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 偏移量调整 */
    deductionWeight?: number | undefined;
    /** 预脱 */
    ufg?: number | undefined;
    /** 自定义字段 */
    cureRecordFieldItems?: CureRecordFieldItemBase[] | undefined;

    constructor(data?: IOffCureAfterView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.timeOff = _data["timeOff"] ? dayjs(_data["timeOff"].toString()) : <any>undefined;
            this.dialysisDurationFact = _data["dialysisDurationFact"];
            this.ufv = _data["ufv"];
            this.ufc = _data["ufc"];
            this.offEarly = _data["offEarly"];
            this.offEarlyCause = _data["offEarlyCause"];
            this.beforeWeight = _data["beforeWeight"];
            this.afterWeight = _data["afterWeight"];
            this.afterSbp = _data["afterSbp"];
            this.afterDbp = _data["afterDbp"];
            this.afterPulse = _data["afterPulse"];
            this.afterWeightMode = _data["afterWeightMode"];
            this.afterBpPosition = _data["afterBpPosition"];
            this.offTemp = _data["offTemp"];
            this.offBreathe = _data["offBreathe"];
            this.hasDown = _data["hasDown"];
            this.offNurseId = _data["offNurseId"];
            this.offNurseName = _data["offNurseName"];
            this.afterWeightModeLabel = _data["afterWeightModeLabel"];
            this.afterBpPositionLabel = _data["afterBpPositionLabel"];
            this.timeAfterWeight = _data["timeAfterWeight"] ? dayjs(_data["timeAfterWeight"].toString()) : <any>undefined;
            this.timeAfterBp = _data["timeAfterBp"] ? dayjs(_data["timeAfterBp"].toString()) : <any>undefined;
            this.onNurseId = _data["onNurseId"];
            this.onNurseName = _data["onNurseName"];
            this.timeOn = _data["timeOn"] ? dayjs(_data["timeOn"].toString()) : <any>undefined;
            this.sn = _data["sn"];
            this.cureRecordId = _data["cureRecordId"];
            this.patientId = _data["patientId"];
            this.surnameCode = _data["surnameCode"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisMachineModel = _data["dialysisMachineModel"];
            this.dialysisMachineNo = _data["dialysisMachineNo"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisDurationSet = _data["dialysisDurationSet"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.rfmLabel = _data["rfmLabel"];
            this.statusLabel = _data["statusLabel"];
            this.age = _data["age"];
            this.source = _data["source"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.ward = _data["ward"];
            this.bed = _data["bed"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            this.suggestion = _data["suggestion"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.deductionWeight = _data["deductionWeight"];
            this.ufg = _data["ufg"];
            if (Array.isArray(_data["cureRecordFieldItems"])) {
                this.cureRecordFieldItems = [] as any;
                for (let item of _data["cureRecordFieldItems"])
                    this.cureRecordFieldItems!.push(CureRecordFieldItemBase.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OffCureAfterView {
        data = typeof data === 'object' ? data : {};
        let result = new OffCureAfterView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timeOff"] = this.timeOff ? this.timeOff.toISOString() : <any>undefined;
        data["dialysisDurationFact"] = this.dialysisDurationFact;
        data["ufv"] = this.ufv;
        data["ufc"] = this.ufc;
        data["offEarly"] = this.offEarly;
        data["offEarlyCause"] = this.offEarlyCause;
        data["beforeWeight"] = this.beforeWeight;
        data["afterWeight"] = this.afterWeight;
        data["afterSbp"] = this.afterSbp;
        data["afterDbp"] = this.afterDbp;
        data["afterPulse"] = this.afterPulse;
        data["afterWeightMode"] = this.afterWeightMode;
        data["afterBpPosition"] = this.afterBpPosition;
        data["offTemp"] = this.offTemp;
        data["offBreathe"] = this.offBreathe;
        data["hasDown"] = this.hasDown;
        data["offNurseId"] = this.offNurseId;
        data["offNurseName"] = this.offNurseName;
        data["afterWeightModeLabel"] = this.afterWeightModeLabel;
        data["afterBpPositionLabel"] = this.afterBpPositionLabel;
        data["timeAfterWeight"] = this.timeAfterWeight ? this.timeAfterWeight.toISOString() : <any>undefined;
        data["timeAfterBp"] = this.timeAfterBp ? this.timeAfterBp.toISOString() : <any>undefined;
        data["onNurseId"] = this.onNurseId;
        data["onNurseName"] = this.onNurseName;
        data["timeOn"] = this.timeOn ? this.timeOn.toISOString() : <any>undefined;
        data["sn"] = this.sn;
        data["cureRecordId"] = this.cureRecordId;
        data["patientId"] = this.patientId;
        data["surnameCode"] = this.surnameCode;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisMachineModel"] = this.dialysisMachineModel;
        data["dialysisMachineNo"] = this.dialysisMachineNo;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisDurationSet"] = this.dialysisDurationSet;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["rfmLabel"] = this.rfmLabel;
        data["statusLabel"] = this.statusLabel;
        data["age"] = this.age;
        data["source"] = this.source;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["ward"] = this.ward;
        data["bed"] = this.bed;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        data["suggestion"] = this.suggestion;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["deductionWeight"] = this.deductionWeight;
        data["ufg"] = this.ufg;
        if (Array.isArray(this.cureRecordFieldItems)) {
            data["cureRecordFieldItems"] = [];
            for (let item of this.cureRecordFieldItems)
                data["cureRecordFieldItems"].push(item.toJSON());
        }
        return data;
    }
}

export interface IOffCureAfterView {
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 净脱水量 *ml Ultrafiltration Complete* */
    ufc?: number | undefined;
    /** 是否提前下机0,1 *判断标准：提前半个小时以上下机* */
    offEarly?: number | undefined;
    /** 提前下机原因 */
    offEarlyCause?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 透后舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 透后脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    afterBpPosition?: string | undefined;
    /** 下机体温 */
    offTemp?: number | undefined;
    /** 下机呼吸 */
    offBreathe?: number | undefined;
    /** 是否已经下机 */
    hasDown?: boolean;
    /** 下机护士标识 */
    offNurseId?: string | undefined;
    /** 下机护士姓名 */
    offNurseName?: string | undefined;
    /** 透前体重方式显示值 */
    afterWeightModeLabel?: string | undefined;
    /** 透前血压测量位置显示值 */
    afterBpPositionLabel?: string | undefined;
    /** 透后体重时间 */
    timeAfterWeight?: dayjs.Dayjs | undefined;
    /** 透后血压时间 */
    timeAfterBp?: dayjs.Dayjs | undefined;
    /** 穿刺护士标识 */
    onNurseId?: string | undefined;
    /** 穿刺护士姓名 */
    onNurseName?: string | undefined;
    /** 上机时间 */
    timeOn?: dayjs.Dayjs | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** 透析记录单标识 */
    cureRecordId?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 设定透析时长 *分钟* */
    dialysisDurationSet?: number;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 透析方式 */
    dialysisModeLabel?: string | undefined;
    /** 置换方式显示值 */
    rfmLabel?: string | undefined;
    /** 治疗状态显示值 */
    statusLabel?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 偏移量调整 */
    deductionWeight?: number | undefined;
    /** 预脱 */
    ufg?: number | undefined;
    /** 自定义字段 */
    cureRecordFieldItems?: CureRecordFieldItemBase[] | undefined;
}

/** Reponse */
export class OffCureAfterViewResult implements IOffCureAfterViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: OffCureAfterView[] | undefined;

    constructor(data?: IOffCureAfterViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(OffCureAfterView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OffCureAfterViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new OffCureAfterViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IOffCureAfterViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: OffCureAfterView[] | undefined;
}

/** Reponse */
export class OffCureAfterViewResultEntry implements IOffCureAfterViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: OffCureAfterView;

    constructor(data?: IOffCureAfterViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? OffCureAfterView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OffCureAfterViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new OffCureAfterViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IOffCureAfterViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: OffCureAfterView;
}

export class OnCureMiddleEditModel implements IOnCureMiddleEditModel {
    /** 来源 （来源为门诊时显示门诊号，来源为住院时显示住院号） */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    beforeBpPosition?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透前体温 *℃* */
    onTemp?: number | undefined;
    /** 目标脱水量 *kg Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet?: number;
    timeOn!: dayjs.Dayjs;
    /** 穿刺方法 `DIC.DIALYSIS.PUNCTURE.METHOD` */
    punctureMethod?: string | undefined;
    /** [血管通路](患者血管通路Id) */
    patientVascularAccessId!: string;
    /** 血管通路 */
    patientVascularAccessName!: string;
    patientVascularAccessType?: string | undefined;
    /** [血管通路](患者血管通路Id) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessName?: string | undefined;
    patientOtherVascularAccessType?: string | undefined;
    /** 血流量 */
    bloodFlowRate?: number | undefined;
    /** 穿刺护士ID */
    punctureNurseId?: string | undefined;
    /** 穿刺护士名称 */
    punctureNurseName?: string | undefined;
    /** 管床护士标识 */
    bedNurseId?: string | undefined;
    /** 管床护士姓名 */
    bedNurseName?: string | undefined;
    /** 置管护士标识 */
    placementNurseId?: string | undefined;
    /** 置管护士姓名 */
    placementNurseName?: string | undefined;
    /** 质控护士标识 */
    qualityNurseId?: string | undefined;
    /** 质控护士姓名 */
    qualityNurseName?: string | undefined;
    /** 床位标识 */
    bedId?: string | undefined;
    /** 费用组套 */
    cureCostGroups?: RoomRecordItem[] | undefined;
    temp?: number | undefined;
    flowRate?: number | undefined;
    cond?: number | undefined;
    rfr?: number | undefined;
    rfv?: number | undefined;
    /** 自定义字段 */
    cureRecordFieldItems?: CureRecordFieldItemEditModel[] | undefined;

    constructor(data?: IOnCureMiddleEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.source = _data["source"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.beforeWeight = _data["beforeWeight"];
            this.beforeWeightMode = _data["beforeWeightMode"];
            this.beforeBpPosition = _data["beforeBpPosition"];
            this.beforeSbp = _data["beforeSbp"];
            this.beforeDbp = _data["beforeDbp"];
            this.beforePulse = _data["beforePulse"];
            this.onTemp = _data["onTemp"];
            this.ufg = _data["ufg"];
            this.dialysisDurationSet = _data["dialysisDurationSet"];
            this.timeOn = _data["timeOn"] ? dayjs(_data["timeOn"].toString()) : <any>undefined;
            this.punctureMethod = _data["punctureMethod"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.patientVascularAccessType = _data["patientVascularAccessType"];
            this.patientOtherVascularAccessId = _data["patientOtherVascularAccessId"];
            this.patientOtherVascularAccessName = _data["patientOtherVascularAccessName"];
            this.patientOtherVascularAccessType = _data["patientOtherVascularAccessType"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.punctureNurseId = _data["punctureNurseId"];
            this.punctureNurseName = _data["punctureNurseName"];
            this.bedNurseId = _data["bedNurseId"];
            this.bedNurseName = _data["bedNurseName"];
            this.placementNurseId = _data["placementNurseId"];
            this.placementNurseName = _data["placementNurseName"];
            this.qualityNurseId = _data["qualityNurseId"];
            this.qualityNurseName = _data["qualityNurseName"];
            this.bedId = _data["bedId"];
            if (Array.isArray(_data["cureCostGroups"])) {
                this.cureCostGroups = [] as any;
                for (let item of _data["cureCostGroups"])
                    this.cureCostGroups!.push(RoomRecordItem.fromJS(item));
            }
            this.temp = _data["temp"];
            this.flowRate = _data["flowRate"];
            this.cond = _data["cond"];
            this.rfr = _data["rfr"];
            this.rfv = _data["rfv"];
            if (Array.isArray(_data["cureRecordFieldItems"])) {
                this.cureRecordFieldItems = [] as any;
                for (let item of _data["cureRecordFieldItems"])
                    this.cureRecordFieldItems!.push(CureRecordFieldItemEditModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OnCureMiddleEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new OnCureMiddleEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["source"] = this.source;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["beforeWeight"] = this.beforeWeight;
        data["beforeWeightMode"] = this.beforeWeightMode;
        data["beforeBpPosition"] = this.beforeBpPosition;
        data["beforeSbp"] = this.beforeSbp;
        data["beforeDbp"] = this.beforeDbp;
        data["beforePulse"] = this.beforePulse;
        data["onTemp"] = this.onTemp;
        data["ufg"] = this.ufg;
        data["dialysisDurationSet"] = this.dialysisDurationSet;
        data["timeOn"] = this.timeOn ? this.timeOn.toISOString() : <any>undefined;
        data["punctureMethod"] = this.punctureMethod;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["patientVascularAccessType"] = this.patientVascularAccessType;
        data["patientOtherVascularAccessId"] = this.patientOtherVascularAccessId;
        data["patientOtherVascularAccessName"] = this.patientOtherVascularAccessName;
        data["patientOtherVascularAccessType"] = this.patientOtherVascularAccessType;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["punctureNurseId"] = this.punctureNurseId;
        data["punctureNurseName"] = this.punctureNurseName;
        data["bedNurseId"] = this.bedNurseId;
        data["bedNurseName"] = this.bedNurseName;
        data["placementNurseId"] = this.placementNurseId;
        data["placementNurseName"] = this.placementNurseName;
        data["qualityNurseId"] = this.qualityNurseId;
        data["qualityNurseName"] = this.qualityNurseName;
        data["bedId"] = this.bedId;
        if (Array.isArray(this.cureCostGroups)) {
            data["cureCostGroups"] = [];
            for (let item of this.cureCostGroups)
                data["cureCostGroups"].push(item.toJSON());
        }
        data["temp"] = this.temp;
        data["flowRate"] = this.flowRate;
        data["cond"] = this.cond;
        data["rfr"] = this.rfr;
        data["rfv"] = this.rfv;
        if (Array.isArray(this.cureRecordFieldItems)) {
            data["cureRecordFieldItems"] = [];
            for (let item of this.cureRecordFieldItems)
                data["cureRecordFieldItems"].push(item.toJSON());
        }
        return data;
    }
}

export interface IOnCureMiddleEditModel {
    /** 来源 （来源为门诊时显示门诊号，来源为住院时显示住院号） */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    beforeBpPosition?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透前体温 *℃* */
    onTemp?: number | undefined;
    /** 目标脱水量 *kg Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet?: number;
    timeOn: dayjs.Dayjs;
    /** 穿刺方法 `DIC.DIALYSIS.PUNCTURE.METHOD` */
    punctureMethod?: string | undefined;
    /** [血管通路](患者血管通路Id) */
    patientVascularAccessId: string;
    /** 血管通路 */
    patientVascularAccessName: string;
    patientVascularAccessType?: string | undefined;
    /** [血管通路](患者血管通路Id) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessName?: string | undefined;
    patientOtherVascularAccessType?: string | undefined;
    /** 血流量 */
    bloodFlowRate?: number | undefined;
    /** 穿刺护士ID */
    punctureNurseId?: string | undefined;
    /** 穿刺护士名称 */
    punctureNurseName?: string | undefined;
    /** 管床护士标识 */
    bedNurseId?: string | undefined;
    /** 管床护士姓名 */
    bedNurseName?: string | undefined;
    /** 置管护士标识 */
    placementNurseId?: string | undefined;
    /** 置管护士姓名 */
    placementNurseName?: string | undefined;
    /** 质控护士标识 */
    qualityNurseId?: string | undefined;
    /** 质控护士姓名 */
    qualityNurseName?: string | undefined;
    /** 床位标识 */
    bedId?: string | undefined;
    /** 费用组套 */
    cureCostGroups?: RoomRecordItem[] | undefined;
    temp?: number | undefined;
    flowRate?: number | undefined;
    cond?: number | undefined;
    rfr?: number | undefined;
    rfv?: number | undefined;
    /** 自定义字段 */
    cureRecordFieldItems?: CureRecordFieldItemEditModel[] | undefined;
}

/** 上机view */
export class OnCureMiddleView implements IOnCureMiddleView {
    /** 来源 （来源为门诊时显示门诊号，来源为住院时显示住院号） */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    beforeBpPosition?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透前体温 *℃* */
    onTemp?: number | undefined;
    /** 目标脱水量 *kg Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet?: number;
    timeOn!: dayjs.Dayjs;
    /** 穿刺方法 `DIC.DIALYSIS.PUNCTURE.METHOD` */
    punctureMethod?: string | undefined;
    /** [血管通路](患者血管通路Id) */
    patientVascularAccessId!: string;
    /** 血管通路 */
    patientVascularAccessName!: string;
    /** [血管通路](患者血管通路Id) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessName?: string | undefined;
    patientOtherVascularAccessType?: string | undefined;
    /** 血流量 */
    bloodFlowRate?: number | undefined;
    /** 穿刺护士ID */
    punctureNurseId?: string | undefined;
    /** 穿刺护士名称 */
    punctureNurseName?: string | undefined;
    /** 管床护士标识 */
    bedNurseId?: string | undefined;
    /** 管床护士姓名 */
    bedNurseName?: string | undefined;
    /** 置管护士标识 */
    placementNurseId?: string | undefined;
    /** 置管护士姓名 */
    placementNurseName?: string | undefined;
    /** 质控护士标识 */
    qualityNurseId?: string | undefined;
    /** 质控护士姓名 */
    qualityNurseName?: string | undefined;
    /** 来源显示值 */
    sourceLabel?: string | undefined;
    /** 透析液名称 */
    dialysateName?: string | undefined;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** 抗凝剂模版类型 */
    antiTmplType?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1?: string | undefined;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *枸橼酸钠>浓度* */
    first?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它 */
    anticoagulantOther?: string | undefined;
    /** 无肝素原因 */
    nonReason?: string | undefined;
    /** 血管通路字典值 */
    patientVascularAccessType?: string | undefined;
    /** 穿刺方法显示值 */
    punctureMethodLabel?: string | undefined;
    /** 是否已经穿刺/上机 */
    hasOn?: boolean;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换液速度 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *ml Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 治疗状态 `DIC.DIALYSIS.STATUS` *已签到,上机准备,治疗中,已下机,已结束* */
    status?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 医生制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 方案是否通过0,1 */
    check?: number | undefined;
    /** 护士确认方案时间 */
    timeCheckNurse?: dayjs.Dayjs | undefined;
    /** 制定方案医生标识 */
    enactDoctorId?: string | undefined;
    /** 制定方案医生姓名 */
    enactDoctorName?: string | undefined;
    /** 确认方案护士标识 */
    checkNurseId?: string | undefined;
    /** 确认方案护士姓名 */
    checkNurseName?: string | undefined;
    /** 穿刺上机护士标识 */
    onNurseId?: string | undefined;
    /** 穿刺上机护士姓名 */
    onNurseName?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 透析记录标识 */
    cureRecordId?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 透析方式 */
    dialysisModeLabel?: string | undefined;
    /** 置换方式显示值 */
    rfmLabel?: string | undefined;
    /** 治疗状态显示值 */
    statusLabel?: string | undefined;
    /** 透前体重方式显示值 */
    beforeWeightModeLabel?: string | undefined;
    /** 透前血压测量位置显示值 */
    beforeBpPositionLabel?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 大类名称 */
    classify1Label?: string | undefined;
    /** 小类名称 */
    classify2Label?: string | undefined;
    /** 首剂-单位名称 */
    firstUnitLabel?: string | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 上次预脱 */
    lastUfg?: string | undefined;
    /** 上次实脱 */
    lastUfv?: string | undefined;
    /** 上次透前 */
    lastBeforeWeight?: string | undefined;
    /** 上次透后 */
    lastAfterWeight?: string | undefined;
    /** 上次偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    lastDeductionWeight?: string | undefined;
    /** 费用组套 */
    cureCostGroups?: CureCostGroupView[] | undefined;
    /** 是否已经交叉核对(true 已核对,false 未核对) */
    isChecked?: boolean;
    iuf?: number;
    /** 单超方式 */
    iufMode?: string | undefined;
    /** 单超时间 */
    iufHour?: number | undefined;
    /** 单超量 */
    iufValue?: number | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 自定义字段 */
    cureRecordFieldItems?: CureRecordFieldItemBase[] | undefined;

    constructor(data?: IOnCureMiddleView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.source = _data["source"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.beforeWeight = _data["beforeWeight"];
            this.beforeWeightMode = _data["beforeWeightMode"];
            this.beforeBpPosition = _data["beforeBpPosition"];
            this.beforeSbp = _data["beforeSbp"];
            this.beforeDbp = _data["beforeDbp"];
            this.beforePulse = _data["beforePulse"];
            this.onTemp = _data["onTemp"];
            this.ufg = _data["ufg"];
            this.dialysisDurationSet = _data["dialysisDurationSet"];
            this.timeOn = _data["timeOn"] ? dayjs(_data["timeOn"].toString()) : <any>undefined;
            this.punctureMethod = _data["punctureMethod"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.patientOtherVascularAccessId = _data["patientOtherVascularAccessId"];
            this.patientOtherVascularAccessName = _data["patientOtherVascularAccessName"];
            this.patientOtherVascularAccessType = _data["patientOtherVascularAccessType"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.punctureNurseId = _data["punctureNurseId"];
            this.punctureNurseName = _data["punctureNurseName"];
            this.bedNurseId = _data["bedNurseId"];
            this.bedNurseName = _data["bedNurseName"];
            this.placementNurseId = _data["placementNurseId"];
            this.placementNurseName = _data["placementNurseName"];
            this.qualityNurseId = _data["qualityNurseId"];
            this.qualityNurseName = _data["qualityNurseName"];
            this.sourceLabel = _data["sourceLabel"];
            this.dialysateName = _data["dialysateName"];
            this.flowRate = _data["flowRate"];
            this.temp = _data["temp"];
            this.cond = _data["cond"];
            this.k = _data["k"];
            this.ca = _data["ca"];
            this.na = _data["na"];
            this.hco = _data["hco"];
            this.glucose = _data["glucose"];
            this.anticoagulantName = _data["anticoagulantName"];
            this.antiTmplType = _data["antiTmplType"];
            this.classify1 = _data["classify1"];
            this.classify2 = _data["classify2"];
            this.first = _data["first"];
            this.firstUnit = _data["firstUnit"];
            this.appendRate = _data["appendRate"];
            this.appendRateUnit = _data["appendRateUnit"];
            this.appendTime = _data["appendTime"];
            this.append = _data["append"];
            this.appendUnit = _data["appendUnit"];
            this.total = _data["total"];
            this.totalUnit = _data["totalUnit"];
            this.anticoagulantOther = _data["anticoagulantOther"];
            this.nonReason = _data["nonReason"];
            this.patientVascularAccessType = _data["patientVascularAccessType"];
            this.punctureMethodLabel = _data["punctureMethodLabel"];
            this.hasOn = _data["hasOn"];
            this.dialysisMode = _data["dialysisMode"];
            this.bestWeight = _data["bestWeight"];
            this.rfm = _data["rfm"];
            this.rfr = _data["rfr"];
            this.rfv = _data["rfv"];
            this.status = _data["status"];
            this.deductionWeight = _data["deductionWeight"];
            this.timeEnactDoctor = _data["timeEnactDoctor"] ? dayjs(_data["timeEnactDoctor"].toString()) : <any>undefined;
            this.check = _data["check"];
            this.timeCheckNurse = _data["timeCheckNurse"] ? dayjs(_data["timeCheckNurse"].toString()) : <any>undefined;
            this.enactDoctorId = _data["enactDoctorId"];
            this.enactDoctorName = _data["enactDoctorName"];
            this.checkNurseId = _data["checkNurseId"];
            this.checkNurseName = _data["checkNurseName"];
            this.onNurseId = _data["onNurseId"];
            this.onNurseName = _data["onNurseName"];
            this.sn = _data["sn"];
            this.patientId = _data["patientId"];
            this.surnameCode = _data["surnameCode"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisMachineModel = _data["dialysisMachineModel"];
            this.dialysisMachineNo = _data["dialysisMachineNo"];
            this.cureRecordId = _data["cureRecordId"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.rfmLabel = _data["rfmLabel"];
            this.statusLabel = _data["statusLabel"];
            this.beforeWeightModeLabel = _data["beforeWeightModeLabel"];
            this.beforeBpPositionLabel = _data["beforeBpPositionLabel"];
            this.age = _data["age"];
            this.ward = _data["ward"];
            this.bed = _data["bed"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            this.suggestion = _data["suggestion"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.classify1Label = _data["classify1Label"];
            this.classify2Label = _data["classify2Label"];
            this.firstUnitLabel = _data["firstUnitLabel"];
            this.concentration = _data["concentration"];
            this.lastUfg = _data["lastUfg"];
            this.lastUfv = _data["lastUfv"];
            this.lastBeforeWeight = _data["lastBeforeWeight"];
            this.lastAfterWeight = _data["lastAfterWeight"];
            this.lastDeductionWeight = _data["lastDeductionWeight"];
            if (Array.isArray(_data["cureCostGroups"])) {
                this.cureCostGroups = [] as any;
                for (let item of _data["cureCostGroups"])
                    this.cureCostGroups!.push(CureCostGroupView.fromJS(item));
            }
            this.isChecked = _data["isChecked"];
            this.iuf = _data["iuf"];
            this.iufMode = _data["iufMode"];
            this.iufHour = _data["iufHour"];
            this.iufValue = _data["iufValue"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            if (Array.isArray(_data["cureRecordFieldItems"])) {
                this.cureRecordFieldItems = [] as any;
                for (let item of _data["cureRecordFieldItems"])
                    this.cureRecordFieldItems!.push(CureRecordFieldItemBase.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OnCureMiddleView {
        data = typeof data === 'object' ? data : {};
        let result = new OnCureMiddleView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["source"] = this.source;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["beforeWeight"] = this.beforeWeight;
        data["beforeWeightMode"] = this.beforeWeightMode;
        data["beforeBpPosition"] = this.beforeBpPosition;
        data["beforeSbp"] = this.beforeSbp;
        data["beforeDbp"] = this.beforeDbp;
        data["beforePulse"] = this.beforePulse;
        data["onTemp"] = this.onTemp;
        data["ufg"] = this.ufg;
        data["dialysisDurationSet"] = this.dialysisDurationSet;
        data["timeOn"] = this.timeOn ? this.timeOn.toISOString() : <any>undefined;
        data["punctureMethod"] = this.punctureMethod;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["patientOtherVascularAccessId"] = this.patientOtherVascularAccessId;
        data["patientOtherVascularAccessName"] = this.patientOtherVascularAccessName;
        data["patientOtherVascularAccessType"] = this.patientOtherVascularAccessType;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["punctureNurseId"] = this.punctureNurseId;
        data["punctureNurseName"] = this.punctureNurseName;
        data["bedNurseId"] = this.bedNurseId;
        data["bedNurseName"] = this.bedNurseName;
        data["placementNurseId"] = this.placementNurseId;
        data["placementNurseName"] = this.placementNurseName;
        data["qualityNurseId"] = this.qualityNurseId;
        data["qualityNurseName"] = this.qualityNurseName;
        data["sourceLabel"] = this.sourceLabel;
        data["dialysateName"] = this.dialysateName;
        data["flowRate"] = this.flowRate;
        data["temp"] = this.temp;
        data["cond"] = this.cond;
        data["k"] = this.k;
        data["ca"] = this.ca;
        data["na"] = this.na;
        data["hco"] = this.hco;
        data["glucose"] = this.glucose;
        data["anticoagulantName"] = this.anticoagulantName;
        data["antiTmplType"] = this.antiTmplType;
        data["classify1"] = this.classify1;
        data["classify2"] = this.classify2;
        data["first"] = this.first;
        data["firstUnit"] = this.firstUnit;
        data["appendRate"] = this.appendRate;
        data["appendRateUnit"] = this.appendRateUnit;
        data["appendTime"] = this.appendTime;
        data["append"] = this.append;
        data["appendUnit"] = this.appendUnit;
        data["total"] = this.total;
        data["totalUnit"] = this.totalUnit;
        data["anticoagulantOther"] = this.anticoagulantOther;
        data["nonReason"] = this.nonReason;
        data["patientVascularAccessType"] = this.patientVascularAccessType;
        data["punctureMethodLabel"] = this.punctureMethodLabel;
        data["hasOn"] = this.hasOn;
        data["dialysisMode"] = this.dialysisMode;
        data["bestWeight"] = this.bestWeight;
        data["rfm"] = this.rfm;
        data["rfr"] = this.rfr;
        data["rfv"] = this.rfv;
        data["status"] = this.status;
        data["deductionWeight"] = this.deductionWeight;
        data["timeEnactDoctor"] = this.timeEnactDoctor ? this.timeEnactDoctor.toISOString() : <any>undefined;
        data["check"] = this.check;
        data["timeCheckNurse"] = this.timeCheckNurse ? this.timeCheckNurse.toISOString() : <any>undefined;
        data["enactDoctorId"] = this.enactDoctorId;
        data["enactDoctorName"] = this.enactDoctorName;
        data["checkNurseId"] = this.checkNurseId;
        data["checkNurseName"] = this.checkNurseName;
        data["onNurseId"] = this.onNurseId;
        data["onNurseName"] = this.onNurseName;
        data["sn"] = this.sn;
        data["patientId"] = this.patientId;
        data["surnameCode"] = this.surnameCode;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisMachineModel"] = this.dialysisMachineModel;
        data["dialysisMachineNo"] = this.dialysisMachineNo;
        data["cureRecordId"] = this.cureRecordId;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["rfmLabel"] = this.rfmLabel;
        data["statusLabel"] = this.statusLabel;
        data["beforeWeightModeLabel"] = this.beforeWeightModeLabel;
        data["beforeBpPositionLabel"] = this.beforeBpPositionLabel;
        data["age"] = this.age;
        data["ward"] = this.ward;
        data["bed"] = this.bed;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        data["suggestion"] = this.suggestion;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["classify1Label"] = this.classify1Label;
        data["classify2Label"] = this.classify2Label;
        data["firstUnitLabel"] = this.firstUnitLabel;
        data["concentration"] = this.concentration;
        data["lastUfg"] = this.lastUfg;
        data["lastUfv"] = this.lastUfv;
        data["lastBeforeWeight"] = this.lastBeforeWeight;
        data["lastAfterWeight"] = this.lastAfterWeight;
        data["lastDeductionWeight"] = this.lastDeductionWeight;
        if (Array.isArray(this.cureCostGroups)) {
            data["cureCostGroups"] = [];
            for (let item of this.cureCostGroups)
                data["cureCostGroups"].push(item.toJSON());
        }
        data["isChecked"] = this.isChecked;
        data["iuf"] = this.iuf;
        data["iufMode"] = this.iufMode;
        data["iufHour"] = this.iufHour;
        data["iufValue"] = this.iufValue;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toISOString() : <any>undefined;
        if (Array.isArray(this.cureRecordFieldItems)) {
            data["cureRecordFieldItems"] = [];
            for (let item of this.cureRecordFieldItems)
                data["cureRecordFieldItems"].push(item.toJSON());
        }
        return data;
    }
}

/** 上机view */
export interface IOnCureMiddleView {
    /** 来源 （来源为门诊时显示门诊号，来源为住院时显示住院号） */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    beforeBpPosition?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透前体温 *℃* */
    onTemp?: number | undefined;
    /** 目标脱水量 *kg Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet?: number;
    timeOn: dayjs.Dayjs;
    /** 穿刺方法 `DIC.DIALYSIS.PUNCTURE.METHOD` */
    punctureMethod?: string | undefined;
    /** [血管通路](患者血管通路Id) */
    patientVascularAccessId: string;
    /** 血管通路 */
    patientVascularAccessName: string;
    /** [血管通路](患者血管通路Id) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessName?: string | undefined;
    patientOtherVascularAccessType?: string | undefined;
    /** 血流量 */
    bloodFlowRate?: number | undefined;
    /** 穿刺护士ID */
    punctureNurseId?: string | undefined;
    /** 穿刺护士名称 */
    punctureNurseName?: string | undefined;
    /** 管床护士标识 */
    bedNurseId?: string | undefined;
    /** 管床护士姓名 */
    bedNurseName?: string | undefined;
    /** 置管护士标识 */
    placementNurseId?: string | undefined;
    /** 置管护士姓名 */
    placementNurseName?: string | undefined;
    /** 质控护士标识 */
    qualityNurseId?: string | undefined;
    /** 质控护士姓名 */
    qualityNurseName?: string | undefined;
    /** 来源显示值 */
    sourceLabel?: string | undefined;
    /** 透析液名称 */
    dialysateName?: string | undefined;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** 抗凝剂模版类型 */
    antiTmplType?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1?: string | undefined;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *枸橼酸钠>浓度* */
    first?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它 */
    anticoagulantOther?: string | undefined;
    /** 无肝素原因 */
    nonReason?: string | undefined;
    /** 血管通路字典值 */
    patientVascularAccessType?: string | undefined;
    /** 穿刺方法显示值 */
    punctureMethodLabel?: string | undefined;
    /** 是否已经穿刺/上机 */
    hasOn?: boolean;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换液速度 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *ml Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 治疗状态 `DIC.DIALYSIS.STATUS` *已签到,上机准备,治疗中,已下机,已结束* */
    status?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 医生制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 方案是否通过0,1 */
    check?: number | undefined;
    /** 护士确认方案时间 */
    timeCheckNurse?: dayjs.Dayjs | undefined;
    /** 制定方案医生标识 */
    enactDoctorId?: string | undefined;
    /** 制定方案医生姓名 */
    enactDoctorName?: string | undefined;
    /** 确认方案护士标识 */
    checkNurseId?: string | undefined;
    /** 确认方案护士姓名 */
    checkNurseName?: string | undefined;
    /** 穿刺上机护士标识 */
    onNurseId?: string | undefined;
    /** 穿刺上机护士姓名 */
    onNurseName?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 透析记录标识 */
    cureRecordId?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 透析方式 */
    dialysisModeLabel?: string | undefined;
    /** 置换方式显示值 */
    rfmLabel?: string | undefined;
    /** 治疗状态显示值 */
    statusLabel?: string | undefined;
    /** 透前体重方式显示值 */
    beforeWeightModeLabel?: string | undefined;
    /** 透前血压测量位置显示值 */
    beforeBpPositionLabel?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 大类名称 */
    classify1Label?: string | undefined;
    /** 小类名称 */
    classify2Label?: string | undefined;
    /** 首剂-单位名称 */
    firstUnitLabel?: string | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 上次预脱 */
    lastUfg?: string | undefined;
    /** 上次实脱 */
    lastUfv?: string | undefined;
    /** 上次透前 */
    lastBeforeWeight?: string | undefined;
    /** 上次透后 */
    lastAfterWeight?: string | undefined;
    /** 上次偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    lastDeductionWeight?: string | undefined;
    /** 费用组套 */
    cureCostGroups?: CureCostGroupView[] | undefined;
    /** 是否已经交叉核对(true 已核对,false 未核对) */
    isChecked?: boolean;
    iuf?: number;
    /** 单超方式 */
    iufMode?: string | undefined;
    /** 单超时间 */
    iufHour?: number | undefined;
    /** 单超量 */
    iufValue?: number | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 自定义字段 */
    cureRecordFieldItems?: CureRecordFieldItemBase[] | undefined;
}

/** Reponse */
export class OnCureMiddleViewResultEntry implements IOnCureMiddleViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: OnCureMiddleView;

    constructor(data?: IOnCureMiddleViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? OnCureMiddleView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OnCureMiddleViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new OnCureMiddleViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IOnCureMiddleViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: OnCureMiddleView;
}

/** 患者信息 */
export class Patient implements IPatient {
    /** 标识 */
    id?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 姓首字母 */
    surnameCode?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 *用于患者重名,默认填姓名,系统内默认显示别名,打印单据使用姓名* */
    name2?: string | undefined;
    /** 照片路径 */
    photo?: string | undefined;
    /** 人脸识别图像 */
    face?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 档案号 *XT{Year}{Month}{Sequence}* */
    archiveNumber?: string | undefined;
    /** 医保类型 `DIC.PEOPLE.MEDICARETYPE` *城镇职工,城镇居民* */
    medicareType?: string | undefined;
    /** 医保号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 血型 `DIC.PEOPLE.BLOODTYPE` *字典:A,B,O,未知* */
    bloodType?: string | undefined;
    /** RH `DIC.PEOPLE.RH` */
    rh?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 本人电话 */
    telephone?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 职业 `DIC.PEOPLE.PROFESSION` *个体,工人,农民,学生* */
    profession?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 家庭住址 */
    address?: string | undefined;
    /** 工作单位 */
    workUnit?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: dayjs.Dayjs | undefined;
    /** 透析状态 `DIC.PATIENT.DIALYSIS.STATE` *长期,临时* */
    dialysisState?: string | undefined;
    /** 透析状态是否转换 `DIC.PATIENT.DIALYSIS.STATE.TRANSITION` *0:未转换,1:已转换 编辑诊断-状态自动转换时管理这个状态* */
    dialysisStateTransition?: number;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 转归状态 `DIC.PROGNOSIS.TYPE` *患者编辑界面不做维护,自动管理* */
    prognosisState?: string | undefined;
    /** 传染病 `DIC.PATIENT.POSITIVE` *0:阴性,1:阳性 编辑诊断-传染病时管理这个状态* */
    positive?: number;
    /** 并发症 `DIC.PATIENT.COMPLICATION` *多选* */
    complication?: string | undefined;
    /** 主治医生 */
    doctor?: string | undefined;
    /** 主管护士 */
    nurse?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 病理诊断 *0:无,1:有* */
    diagnosisPathological?: number | undefined;
    /** 并发症诊断 *0:无,1:有* */
    diagnosisComplication?: number | undefined;
    /** 传染病诊断 *0:无,1:有* */
    diagnosisInfectiousDiseases?: number | undefined;
    /** 肿瘤诊断 *0:无,1:有* */
    diagnosisTumor?: number | undefined;
    /** 过敏诊断 *0:无,1:有* */
    diagnosisAllergy?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 患者数据初始化来源 *ihdis,his* */
    initialSource?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 指纹 */
    finger?: string | undefined;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 病历夹号 `DIC.PATIENT.CONDITION` *一般,病重,病危* */
    medicareCondition?: string | undefined;
    /** 下次感筛检验日期 */
    nextDate?: dayjs.Dayjs | undefined;
    /** 首次透析时采用的通路类型 */
    firstDialysisVascularAccess?: string | undefined;
    /** 首次透析时采取的方式 */
    firstDialysisMode?: string | undefined;
    /** 首次肾脏代替治疗时肾功能 */
    firstGfr?: string | undefined;
    /** 首次肾脏代替治疗时血肌酐水平 */
    firstScr?: string | undefined;

    constructor(data?: IPatient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.surnameCode = _data["surnameCode"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.photo = _data["photo"];
            this.face = _data["face"];
            this.gender = _data["gender"];
            this.source = _data["source"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.department = _data["department"];
            this.ward = _data["ward"];
            this.bed = _data["bed"];
            this.archiveNumber = _data["archiveNumber"];
            this.medicareType = _data["medicareType"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.nationality = _data["nationality"];
            this.idType = _data["idType"];
            this.idNumber = _data["idNumber"];
            this.birthdate = _data["birthdate"] ? dayjs(_data["birthdate"].toString()) : <any>undefined;
            this.bloodType = _data["bloodType"];
            this.rh = _data["rh"];
            this.height = _data["height"];
            this.telephone = _data["telephone"];
            this.marital = _data["marital"];
            this.educationalLevel = _data["educationalLevel"];
            this.profession = _data["profession"];
            this.province = _data["province"];
            this.city = _data["city"];
            this.area = _data["area"];
            this.address = _data["address"];
            this.workUnit = _data["workUnit"];
            this.receiptDate = _data["receiptDate"] ? dayjs(_data["receiptDate"].toString()) : <any>undefined;
            this.dialysisState = _data["dialysisState"];
            this.dialysisStateTransition = _data["dialysisStateTransition"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.dialysisCountInit = _data["dialysisCountInit"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            this.prognosisState = _data["prognosisState"];
            this.positive = _data["positive"];
            this.complication = _data["complication"];
            this.doctor = _data["doctor"];
            this.nurse = _data["nurse"];
            this.diagnosis = _data["diagnosis"];
            this.diagnosisPathological = _data["diagnosisPathological"];
            this.diagnosisComplication = _data["diagnosisComplication"];
            this.diagnosisInfectiousDiseases = _data["diagnosisInfectiousDiseases"];
            this.diagnosisTumor = _data["diagnosisTumor"];
            this.diagnosisAllergy = _data["diagnosisAllergy"];
            this.remark = _data["remark"];
            this.initialSource = _data["initialSource"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.finger = _data["finger"];
            this.dossierNumber = _data["dossierNumber"];
            this.medicareCondition = _data["medicareCondition"];
            this.nextDate = _data["nextDate"] ? dayjs(_data["nextDate"].toString()) : <any>undefined;
            this.firstDialysisVascularAccess = _data["firstDialysisVascularAccess"];
            this.firstDialysisMode = _data["firstDialysisMode"];
            this.firstGfr = _data["firstGfr"];
            this.firstScr = _data["firstScr"];
        }
    }

    static fromJS(data: any): Patient {
        data = typeof data === 'object' ? data : {};
        let result = new Patient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["surnameCode"] = this.surnameCode;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["photo"] = this.photo;
        data["face"] = this.face;
        data["gender"] = this.gender;
        data["source"] = this.source;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["department"] = this.department;
        data["ward"] = this.ward;
        data["bed"] = this.bed;
        data["archiveNumber"] = this.archiveNumber;
        data["medicareType"] = this.medicareType;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["dialysisNumber"] = this.dialysisNumber;
        data["nationality"] = this.nationality;
        data["idType"] = this.idType;
        data["idNumber"] = this.idNumber;
        data["birthdate"] = this.birthdate ? this.birthdate.toISOString() : <any>undefined;
        data["bloodType"] = this.bloodType;
        data["rh"] = this.rh;
        data["height"] = this.height;
        data["telephone"] = this.telephone;
        data["marital"] = this.marital;
        data["educationalLevel"] = this.educationalLevel;
        data["profession"] = this.profession;
        data["province"] = this.province;
        data["city"] = this.city;
        data["area"] = this.area;
        data["address"] = this.address;
        data["workUnit"] = this.workUnit;
        data["receiptDate"] = this.receiptDate ? this.receiptDate.toISOString() : <any>undefined;
        data["dialysisState"] = this.dialysisState;
        data["dialysisStateTransition"] = this.dialysisStateTransition;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["dialysisCountInit"] = this.dialysisCountInit;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        data["prognosisState"] = this.prognosisState;
        data["positive"] = this.positive;
        data["complication"] = this.complication;
        data["doctor"] = this.doctor;
        data["nurse"] = this.nurse;
        data["diagnosis"] = this.diagnosis;
        data["diagnosisPathological"] = this.diagnosisPathological;
        data["diagnosisComplication"] = this.diagnosisComplication;
        data["diagnosisInfectiousDiseases"] = this.diagnosisInfectiousDiseases;
        data["diagnosisTumor"] = this.diagnosisTumor;
        data["diagnosisAllergy"] = this.diagnosisAllergy;
        data["remark"] = this.remark;
        data["initialSource"] = this.initialSource;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["finger"] = this.finger;
        data["dossierNumber"] = this.dossierNumber;
        data["medicareCondition"] = this.medicareCondition;
        data["nextDate"] = this.nextDate ? this.nextDate.toISOString() : <any>undefined;
        data["firstDialysisVascularAccess"] = this.firstDialysisVascularAccess;
        data["firstDialysisMode"] = this.firstDialysisMode;
        data["firstGfr"] = this.firstGfr;
        data["firstScr"] = this.firstScr;
        return data;
    }
}

/** 患者信息 */
export interface IPatient {
    /** 标识 */
    id?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 姓首字母 */
    surnameCode?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 *用于患者重名,默认填姓名,系统内默认显示别名,打印单据使用姓名* */
    name2?: string | undefined;
    /** 照片路径 */
    photo?: string | undefined;
    /** 人脸识别图像 */
    face?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 档案号 *XT{Year}{Month}{Sequence}* */
    archiveNumber?: string | undefined;
    /** 医保类型 `DIC.PEOPLE.MEDICARETYPE` *城镇职工,城镇居民* */
    medicareType?: string | undefined;
    /** 医保号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 血型 `DIC.PEOPLE.BLOODTYPE` *字典:A,B,O,未知* */
    bloodType?: string | undefined;
    /** RH `DIC.PEOPLE.RH` */
    rh?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 本人电话 */
    telephone?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 职业 `DIC.PEOPLE.PROFESSION` *个体,工人,农民,学生* */
    profession?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 家庭住址 */
    address?: string | undefined;
    /** 工作单位 */
    workUnit?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: dayjs.Dayjs | undefined;
    /** 透析状态 `DIC.PATIENT.DIALYSIS.STATE` *长期,临时* */
    dialysisState?: string | undefined;
    /** 透析状态是否转换 `DIC.PATIENT.DIALYSIS.STATE.TRANSITION` *0:未转换,1:已转换 编辑诊断-状态自动转换时管理这个状态* */
    dialysisStateTransition?: number;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 转归状态 `DIC.PROGNOSIS.TYPE` *患者编辑界面不做维护,自动管理* */
    prognosisState?: string | undefined;
    /** 传染病 `DIC.PATIENT.POSITIVE` *0:阴性,1:阳性 编辑诊断-传染病时管理这个状态* */
    positive?: number;
    /** 并发症 `DIC.PATIENT.COMPLICATION` *多选* */
    complication?: string | undefined;
    /** 主治医生 */
    doctor?: string | undefined;
    /** 主管护士 */
    nurse?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 病理诊断 *0:无,1:有* */
    diagnosisPathological?: number | undefined;
    /** 并发症诊断 *0:无,1:有* */
    diagnosisComplication?: number | undefined;
    /** 传染病诊断 *0:无,1:有* */
    diagnosisInfectiousDiseases?: number | undefined;
    /** 肿瘤诊断 *0:无,1:有* */
    diagnosisTumor?: number | undefined;
    /** 过敏诊断 *0:无,1:有* */
    diagnosisAllergy?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 患者数据初始化来源 *ihdis,his* */
    initialSource?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 指纹 */
    finger?: string | undefined;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 病历夹号 `DIC.PATIENT.CONDITION` *一般,病重,病危* */
    medicareCondition?: string | undefined;
    /** 下次感筛检验日期 */
    nextDate?: dayjs.Dayjs | undefined;
    /** 首次透析时采用的通路类型 */
    firstDialysisVascularAccess?: string | undefined;
    /** 首次透析时采取的方式 */
    firstDialysisMode?: string | undefined;
    /** 首次肾脏代替治疗时肾功能 */
    firstGfr?: string | undefined;
    /** 首次肾脏代替治疗时血肌酐水平 */
    firstScr?: string | undefined;
}

/** 患者透析记录修改记录  检验检查异常项  检验项 */
export class PatientAbnormaAllTips implements IPatientAbnormaAllTips {
    /** 检验检查异常项 */
    lisAbnormas?: PatientLisAbnormaView[] | undefined;
    /** 患者透析记录修改记录 */
    recordLogViews?: CureRecordLogView[] | undefined;

    constructor(data?: IPatientAbnormaAllTips) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["lisAbnormas"])) {
                this.lisAbnormas = [] as any;
                for (let item of _data["lisAbnormas"])
                    this.lisAbnormas!.push(PatientLisAbnormaView.fromJS(item));
            }
            if (Array.isArray(_data["recordLogViews"])) {
                this.recordLogViews = [] as any;
                for (let item of _data["recordLogViews"])
                    this.recordLogViews!.push(CureRecordLogView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientAbnormaAllTips {
        data = typeof data === 'object' ? data : {};
        let result = new PatientAbnormaAllTips();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.lisAbnormas)) {
            data["lisAbnormas"] = [];
            for (let item of this.lisAbnormas)
                data["lisAbnormas"].push(item.toJSON());
        }
        if (Array.isArray(this.recordLogViews)) {
            data["recordLogViews"] = [];
            for (let item of this.recordLogViews)
                data["recordLogViews"].push(item.toJSON());
        }
        return data;
    }
}

/** 患者透析记录修改记录  检验检查异常项  检验项 */
export interface IPatientAbnormaAllTips {
    /** 检验检查异常项 */
    lisAbnormas?: PatientLisAbnormaView[] | undefined;
    /** 患者透析记录修改记录 */
    recordLogViews?: CureRecordLogView[] | undefined;
}

export class PatientCureMiddleView implements IPatientCureMiddleView {
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 透析记录标识 */
    cureRecordId?: string | undefined;
    /** 透析区间 */
    dialysisName?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 性别 */
    genderLabel?: string | undefined;
    /** 证件类型 */
    idTypeLabel?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 透析方式 */
    dialysisModeLabel?: string | undefined;

    constructor(data?: IPatientCureMiddleView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisMachineModel = _data["dialysisMachineModel"];
            this.dialysisMachineNo = _data["dialysisMachineNo"];
            this.cureRecordId = _data["cureRecordId"];
            this.dialysisName = _data["dialysisName"];
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.surnameCode = _data["surnameCode"];
            this.genderLabel = _data["genderLabel"];
            this.idTypeLabel = _data["idTypeLabel"];
            this.idNumber = _data["idNumber"];
            this.birthdate = _data["birthdate"] ? dayjs(_data["birthdate"].toString()) : <any>undefined;
            this.age = _data["age"];
            this.patientNameFull = _data["patientNameFull"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
        }
    }

    static fromJS(data: any): PatientCureMiddleView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientCureMiddleView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisMachineModel"] = this.dialysisMachineModel;
        data["dialysisMachineNo"] = this.dialysisMachineNo;
        data["cureRecordId"] = this.cureRecordId;
        data["dialysisName"] = this.dialysisName;
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["surnameCode"] = this.surnameCode;
        data["genderLabel"] = this.genderLabel;
        data["idTypeLabel"] = this.idTypeLabel;
        data["idNumber"] = this.idNumber;
        data["birthdate"] = this.birthdate ? this.birthdate.toISOString() : <any>undefined;
        data["age"] = this.age;
        data["patientNameFull"] = this.patientNameFull;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        return data;
    }
}

export interface IPatientCureMiddleView {
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 透析记录标识 */
    cureRecordId?: string | undefined;
    /** 透析区间 */
    dialysisName?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 性别 */
    genderLabel?: string | undefined;
    /** 证件类型 */
    idTypeLabel?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 透析方式 */
    dialysisModeLabel?: string | undefined;
}

/** Reponse */
export class PatientCureMiddleViewResult implements IPatientCureMiddleViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientCureMiddleView[] | undefined;

    constructor(data?: IPatientCureMiddleViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientCureMiddleView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientCureMiddleViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientCureMiddleViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientCureMiddleViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientCureMiddleView[] | undefined;
}

export class PatientCureView implements IPatientCureView {
    /** 患者标识 */
    id?: string | undefined;
    /** 患者姓名 */
    name?: string | undefined;
    /** 患者别名 */
    name2?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 五笔 */
    pinyinCode?: string | undefined;
    /** 拼音 */
    wubiCode?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 性别显示值 */
    genderName?: string | undefined;
    /** 证件类型 */
    idType?: string | undefined;
    /** 证件类型显示值 */
    idTypeName?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 透析卡号 */
    cardNumber?: string | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;

    constructor(data?: IPatientCureView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.surnameCode = _data["surnameCode"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.gender = _data["gender"];
            this.genderName = _data["genderName"];
            this.idType = _data["idType"];
            this.idTypeName = _data["idTypeName"];
            this.idNumber = _data["idNumber"];
            this.birthdate = _data["birthdate"] ? dayjs(_data["birthdate"].toString()) : <any>undefined;
            this.age = _data["age"];
            this.patientNameFull = _data["patientNameFull"];
            this.cardNumber = _data["cardNumber"];
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
        }
    }

    static fromJS(data: any): PatientCureView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientCureView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["surnameCode"] = this.surnameCode;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["gender"] = this.gender;
        data["genderName"] = this.genderName;
        data["idType"] = this.idType;
        data["idTypeName"] = this.idTypeName;
        data["idNumber"] = this.idNumber;
        data["birthdate"] = this.birthdate ? this.birthdate.toISOString() : <any>undefined;
        data["age"] = this.age;
        data["patientNameFull"] = this.patientNameFull;
        data["cardNumber"] = this.cardNumber;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        return data;
    }
}

export interface IPatientCureView {
    /** 患者标识 */
    id?: string | undefined;
    /** 患者姓名 */
    name?: string | undefined;
    /** 患者别名 */
    name2?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 五笔 */
    pinyinCode?: string | undefined;
    /** 拼音 */
    wubiCode?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 性别显示值 */
    genderName?: string | undefined;
    /** 证件类型 */
    idType?: string | undefined;
    /** 证件类型显示值 */
    idTypeName?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 透析卡号 */
    cardNumber?: string | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
}

/** Reponse */
export class PatientCureViewResult implements IPatientCureViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientCureView[] | undefined;

    constructor(data?: IPatientCureViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientCureView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientCureViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientCureViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientCureViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientCureView[] | undefined;
}

/** 长期医嘱View */
export class PatientDaLongtermView implements IPatientDaLongtermView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` *默认带出项目基本单位* */
    unit?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 停止日期 */
    endDate?: dayjs.Dayjs | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 频次 `DIC.DA.INTERVAL` */
    interval?: string | undefined;
    /** 自备药0,1 */
    owned!: number;
    /** 透中医嘱0,1 */
    dialysis!: number;
    /** 周执行 `DIC.DA.WEEKDAY` *多个用`;`分隔* */
    weekday?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 停止人 */
    stoper?: string | undefined;
    /** 停止人id */
    stoperId?: string | undefined;
    /** 停止时间 */
    stopTime?: string | undefined;
    /** 开立时间 */
    openTime?: string | undefined;
    /** 口服药 */
    orallyLabel?: string | undefined;
    /** 透中医嘱 */
    dialysisLabel?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 是否勾选 */
    checked?: boolean;
    /** 患者姓名 */
    patientName?: string | undefined;
    patientAge?: string | undefined;
    patientGender?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    patientDept?: string | undefined;
    patientBed?: string | undefined;
    patientInNo?: string | undefined;
    hospName?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usageName?: string | undefined;
    /** 数量单位 `DIC.SYS.UNIT` *默认带出项目基本单位* */
    unitName?: string | undefined;
    /** 单次用量单位显示值 */
    singleUnitName?: string | undefined;
    /** 分组标识 */
    group?: string | undefined;
    startExecNurseName?: string | undefined;
    stopExecNurseName?: string | undefined;
    /** 种类名称全称 */
    roomItemTypeNameFull?: string | undefined;
    /** 频次 `DIC.DA.INTERVAL` */
    intervalName?: string | undefined;
    /** 周执行 `DIC.DA.WEEKDAY` *多个用`;`分隔* */
    weekdayName?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 项目启用状态 */
    listEnabled?: number;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 患者来源 */
    source?: string | undefined;
    /** 药品库存 */
    inventoryCount?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 医嘱模板标识 */
    tmplGroupDaId?: string | undefined;
    /** 开立医生标识 */
    doctorId!: string;
    /** 开立医生姓名 */
    doctorName!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientDaLongtermView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.type = _data["type"];
            this.content = _data["content"];
            this.groupId = _data["groupId"];
            this.doctorCreateTime = _data["doctorCreateTime"] ? dayjs(_data["doctorCreateTime"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.roomItemListId = _data["roomItemListId"];
            this.usage = _data["usage"];
            this.dosage = _data["dosage"];
            this.unit = _data["unit"];
            this.singleDosage = _data["singleDosage"];
            this.endDate = _data["endDate"] ? dayjs(_data["endDate"].toString()) : <any>undefined;
            this.singleUnit = _data["singleUnit"];
            this.orally = _data["orally"];
            this.interval = _data["interval"];
            this.owned = _data["owned"];
            this.dialysis = _data["dialysis"];
            this.weekday = _data["weekday"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
            this.stoper = _data["stoper"];
            this.stoperId = _data["stoperId"];
            this.stopTime = _data["stopTime"];
            this.openTime = _data["openTime"];
            this.orallyLabel = _data["orallyLabel"];
            this.dialysisLabel = _data["dialysisLabel"];
            this.nameGoods = _data["nameGoods"];
            this.checked = _data["checked"];
            this.patientName = _data["patientName"];
            this.patientAge = _data["patientAge"];
            this.patientGender = _data["patientGender"];
            this.patientName2 = _data["patientName2"];
            this.patientDept = _data["patientDept"];
            this.patientBed = _data["patientBed"];
            this.patientInNo = _data["patientInNo"];
            this.hospName = _data["hospName"];
            this.patientNameFull = _data["patientNameFull"];
            this.usageName = _data["usageName"];
            this.unitName = _data["unitName"];
            this.singleUnitName = _data["singleUnitName"];
            this.group = _data["group"];
            this.startExecNurseName = _data["startExecNurseName"];
            this.stopExecNurseName = _data["stopExecNurseName"];
            this.roomItemTypeNameFull = _data["roomItemTypeNameFull"];
            this.intervalName = _data["intervalName"];
            this.weekdayName = _data["weekdayName"];
            this.specLabel = _data["specLabel"];
            this.listEnabled = _data["listEnabled"];
            this.cureDaContent = _data["cureDaContent"];
            this.typeName = _data["typeName"];
            this.source = _data["source"];
            this.inventoryCount = _data["inventoryCount"];
            this.id = _data["id"];
            this.tmplGroupDaId = _data["tmplGroupDaId"];
            this.doctorId = _data["doctorId"];
            this.doctorName = _data["doctorName"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDaLongtermView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDaLongtermView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["type"] = this.type;
        data["content"] = this.content;
        data["groupId"] = this.groupId;
        data["doctorCreateTime"] = this.doctorCreateTime ? this.doctorCreateTime.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["roomItemListId"] = this.roomItemListId;
        data["usage"] = this.usage;
        data["dosage"] = this.dosage;
        data["unit"] = this.unit;
        data["singleDosage"] = this.singleDosage;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["singleUnit"] = this.singleUnit;
        data["orally"] = this.orally;
        data["interval"] = this.interval;
        data["owned"] = this.owned;
        data["dialysis"] = this.dialysis;
        data["weekday"] = this.weekday;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        data["stoper"] = this.stoper;
        data["stoperId"] = this.stoperId;
        data["stopTime"] = this.stopTime;
        data["openTime"] = this.openTime;
        data["orallyLabel"] = this.orallyLabel;
        data["dialysisLabel"] = this.dialysisLabel;
        data["nameGoods"] = this.nameGoods;
        data["checked"] = this.checked;
        data["patientName"] = this.patientName;
        data["patientAge"] = this.patientAge;
        data["patientGender"] = this.patientGender;
        data["patientName2"] = this.patientName2;
        data["patientDept"] = this.patientDept;
        data["patientBed"] = this.patientBed;
        data["patientInNo"] = this.patientInNo;
        data["hospName"] = this.hospName;
        data["patientNameFull"] = this.patientNameFull;
        data["usageName"] = this.usageName;
        data["unitName"] = this.unitName;
        data["singleUnitName"] = this.singleUnitName;
        data["group"] = this.group;
        data["startExecNurseName"] = this.startExecNurseName;
        data["stopExecNurseName"] = this.stopExecNurseName;
        data["roomItemTypeNameFull"] = this.roomItemTypeNameFull;
        data["intervalName"] = this.intervalName;
        data["weekdayName"] = this.weekdayName;
        data["specLabel"] = this.specLabel;
        data["listEnabled"] = this.listEnabled;
        data["cureDaContent"] = this.cureDaContent;
        data["typeName"] = this.typeName;
        data["source"] = this.source;
        data["inventoryCount"] = this.inventoryCount;
        data["id"] = this.id;
        data["tmplGroupDaId"] = this.tmplGroupDaId;
        data["doctorId"] = this.doctorId;
        data["doctorName"] = this.doctorName;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 长期医嘱View */
export interface IPatientDaLongtermView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` *默认带出项目基本单位* */
    unit?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 停止日期 */
    endDate?: dayjs.Dayjs | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 频次 `DIC.DA.INTERVAL` */
    interval?: string | undefined;
    /** 自备药0,1 */
    owned: number;
    /** 透中医嘱0,1 */
    dialysis: number;
    /** 周执行 `DIC.DA.WEEKDAY` *多个用`;`分隔* */
    weekday?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
    /** 备注 */
    remark?: string | undefined;
    /** 停止人 */
    stoper?: string | undefined;
    /** 停止人id */
    stoperId?: string | undefined;
    /** 停止时间 */
    stopTime?: string | undefined;
    /** 开立时间 */
    openTime?: string | undefined;
    /** 口服药 */
    orallyLabel?: string | undefined;
    /** 透中医嘱 */
    dialysisLabel?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 是否勾选 */
    checked?: boolean;
    /** 患者姓名 */
    patientName?: string | undefined;
    patientAge?: string | undefined;
    patientGender?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    patientDept?: string | undefined;
    patientBed?: string | undefined;
    patientInNo?: string | undefined;
    hospName?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usageName?: string | undefined;
    /** 数量单位 `DIC.SYS.UNIT` *默认带出项目基本单位* */
    unitName?: string | undefined;
    /** 单次用量单位显示值 */
    singleUnitName?: string | undefined;
    /** 分组标识 */
    group?: string | undefined;
    startExecNurseName?: string | undefined;
    stopExecNurseName?: string | undefined;
    /** 种类名称全称 */
    roomItemTypeNameFull?: string | undefined;
    /** 频次 `DIC.DA.INTERVAL` */
    intervalName?: string | undefined;
    /** 周执行 `DIC.DA.WEEKDAY` *多个用`;`分隔* */
    weekdayName?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 项目启用状态 */
    listEnabled?: number;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 患者来源 */
    source?: string | undefined;
    /** 药品库存 */
    inventoryCount?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 医嘱模板标识 */
    tmplGroupDaId?: string | undefined;
    /** 开立医生标识 */
    doctorId: string;
    /** 开立医生姓名 */
    doctorName: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 临时医嘱View */
export class PatientDaTemporaryView implements IPatientDaTemporaryView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` *默认带出项目基本单位* */
    unit?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 自备药0,1 */
    owned!: number;
    /** 透中医嘱0,1 */
    dialysis!: number;
    /** 执行日期 */
    execDate!: dayjs.Dayjs;
    /** 口服药 */
    orallyLabel?: string | undefined;
    /** 透中医嘱 */
    dialysisLabel?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 状态 `DIC.DA.TEMP.STATUS` *新医嘱,已使用,已撤销* */
    status?: string | undefined;
    /** 是否勾选(制定处方与确认处方时使用) */
    checked?: boolean;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usageName?: string | undefined;
    /** 数量单位 `DIC.SYS.UNIT` */
    unitName?: string | undefined;
    /** 单次用量单位名称 */
    singleUnitName?: string | undefined;
    /** 状态显示值 */
    statusLabel?: string | undefined;
    /** 分组标识 */
    group?: string | undefined;
    /** 种类名称全称 */
    roomItemTypeNameFull?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 项目启用状态 */
    listEnabled?: number;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 患者来源 */
    source?: string | undefined;
    /** 药品库存 */
    inventoryCount?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 医嘱模板标识 */
    tmplGroupDaId?: string | undefined;
    /** 开立医生标识 */
    doctorId!: string;
    /** 开立医生姓名 */
    doctorName!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientDaTemporaryView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.type = _data["type"];
            this.content = _data["content"];
            this.groupId = _data["groupId"];
            this.doctorCreateTime = _data["doctorCreateTime"] ? dayjs(_data["doctorCreateTime"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.roomItemListId = _data["roomItemListId"];
            this.usage = _data["usage"];
            this.dosage = _data["dosage"];
            this.unit = _data["unit"];
            this.singleDosage = _data["singleDosage"];
            this.singleUnit = _data["singleUnit"];
            this.orally = _data["orally"];
            this.owned = _data["owned"];
            this.dialysis = _data["dialysis"];
            this.execDate = _data["execDate"] ? dayjs(_data["execDate"].toString()) : <any>undefined;
            this.orallyLabel = _data["orallyLabel"];
            this.dialysisLabel = _data["dialysisLabel"];
            this.nameGoods = _data["nameGoods"];
            this.status = _data["status"];
            this.checked = _data["checked"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.usageName = _data["usageName"];
            this.unitName = _data["unitName"];
            this.singleUnitName = _data["singleUnitName"];
            this.statusLabel = _data["statusLabel"];
            this.group = _data["group"];
            this.roomItemTypeNameFull = _data["roomItemTypeNameFull"];
            this.specLabel = _data["specLabel"];
            this.cureDaContent = _data["cureDaContent"];
            this.listEnabled = _data["listEnabled"];
            this.typeName = _data["typeName"];
            this.source = _data["source"];
            this.inventoryCount = _data["inventoryCount"];
            this.id = _data["id"];
            this.tmplGroupDaId = _data["tmplGroupDaId"];
            this.doctorId = _data["doctorId"];
            this.doctorName = _data["doctorName"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDaTemporaryView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDaTemporaryView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["type"] = this.type;
        data["content"] = this.content;
        data["groupId"] = this.groupId;
        data["doctorCreateTime"] = this.doctorCreateTime ? this.doctorCreateTime.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["roomItemListId"] = this.roomItemListId;
        data["usage"] = this.usage;
        data["dosage"] = this.dosage;
        data["unit"] = this.unit;
        data["singleDosage"] = this.singleDosage;
        data["singleUnit"] = this.singleUnit;
        data["orally"] = this.orally;
        data["owned"] = this.owned;
        data["dialysis"] = this.dialysis;
        data["execDate"] = this.execDate ? this.execDate.toISOString() : <any>undefined;
        data["orallyLabel"] = this.orallyLabel;
        data["dialysisLabel"] = this.dialysisLabel;
        data["nameGoods"] = this.nameGoods;
        data["status"] = this.status;
        data["checked"] = this.checked;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["usageName"] = this.usageName;
        data["unitName"] = this.unitName;
        data["singleUnitName"] = this.singleUnitName;
        data["statusLabel"] = this.statusLabel;
        data["group"] = this.group;
        data["roomItemTypeNameFull"] = this.roomItemTypeNameFull;
        data["specLabel"] = this.specLabel;
        data["cureDaContent"] = this.cureDaContent;
        data["listEnabled"] = this.listEnabled;
        data["typeName"] = this.typeName;
        data["source"] = this.source;
        data["inventoryCount"] = this.inventoryCount;
        data["id"] = this.id;
        data["tmplGroupDaId"] = this.tmplGroupDaId;
        data["doctorId"] = this.doctorId;
        data["doctorName"] = this.doctorName;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 临时医嘱View */
export interface IPatientDaTemporaryView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` *默认带出项目基本单位* */
    unit?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 自备药0,1 */
    owned: number;
    /** 透中医嘱0,1 */
    dialysis: number;
    /** 执行日期 */
    execDate: dayjs.Dayjs;
    /** 口服药 */
    orallyLabel?: string | undefined;
    /** 透中医嘱 */
    dialysisLabel?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 状态 `DIC.DA.TEMP.STATUS` *新医嘱,已使用,已撤销* */
    status?: string | undefined;
    /** 是否勾选(制定处方与确认处方时使用) */
    checked?: boolean;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usageName?: string | undefined;
    /** 数量单位 `DIC.SYS.UNIT` */
    unitName?: string | undefined;
    /** 单次用量单位名称 */
    singleUnitName?: string | undefined;
    /** 状态显示值 */
    statusLabel?: string | undefined;
    /** 分组标识 */
    group?: string | undefined;
    /** 种类名称全称 */
    roomItemTypeNameFull?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 项目启用状态 */
    listEnabled?: number;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 患者来源 */
    source?: string | undefined;
    /** 药品库存 */
    inventoryCount?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 医嘱模板标识 */
    tmplGroupDaId?: string | undefined;
    /** 开立医生标识 */
    doctorId: string;
    /** 开立医生姓名 */
    doctorName: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 检验检查项异常 */
export class PatientLisAbnormaView implements IPatientLisAbnormaView {
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 检验大类 */
    testCategory?: string | undefined;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 编码 */
    itemCode?: string | undefined;
    /** 名称 */
    itemName?: string | undefined;
    /** 检验结果 */
    itemValue?: string | undefined;
    /** 单位 */
    itemValueUnit?: string | undefined;
    /** 数值标识 *1|↑|高；-1|↓|低；0|-|正常* */
    itemValueMark1?: string | undefined;
    /** 危险标识 */
    itemValueMark2?: string | undefined;
    /** 参考范围 */
    itemValueReference?: string | undefined;
    /** 报告时间 */
    reportTime?: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 主治医生 */
    doctor?: string | undefined;

    constructor(data?: IPatientLisAbnormaView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientName = _data["patientName"];
            this.testCategory = _data["testCategory"];
            this.reportNo = _data["reportNo"];
            this.itemCode = _data["itemCode"];
            this.itemName = _data["itemName"];
            this.itemValue = _data["itemValue"];
            this.itemValueUnit = _data["itemValueUnit"];
            this.itemValueMark1 = _data["itemValueMark1"];
            this.itemValueMark2 = _data["itemValueMark2"];
            this.itemValueReference = _data["itemValueReference"];
            this.reportTime = _data["reportTime"] ? dayjs(_data["reportTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.doctor = _data["doctor"];
        }
    }

    static fromJS(data: any): PatientLisAbnormaView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLisAbnormaView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientName"] = this.patientName;
        data["testCategory"] = this.testCategory;
        data["reportNo"] = this.reportNo;
        data["itemCode"] = this.itemCode;
        data["itemName"] = this.itemName;
        data["itemValue"] = this.itemValue;
        data["itemValueUnit"] = this.itemValueUnit;
        data["itemValueMark1"] = this.itemValueMark1;
        data["itemValueMark2"] = this.itemValueMark2;
        data["itemValueReference"] = this.itemValueReference;
        data["reportTime"] = this.reportTime ? this.reportTime.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        data["doctor"] = this.doctor;
        return data;
    }
}

/** 检验检查项异常 */
export interface IPatientLisAbnormaView {
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 检验大类 */
    testCategory?: string | undefined;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 编码 */
    itemCode?: string | undefined;
    /** 名称 */
    itemName?: string | undefined;
    /** 检验结果 */
    itemValue?: string | undefined;
    /** 单位 */
    itemValueUnit?: string | undefined;
    /** 数值标识 *1|↑|高；-1|↓|低；0|-|正常* */
    itemValueMark1?: string | undefined;
    /** 危险标识 */
    itemValueMark2?: string | undefined;
    /** 参考范围 */
    itemValueReference?: string | undefined;
    /** 报告时间 */
    reportTime?: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 主治医生 */
    doctor?: string | undefined;
}

/** 患者检验项提醒 */
export class PatientLisRemindView implements IPatientLisRemindView {
    /** 检验提醒标识 */
    id?: string | undefined;
    /** 检验项名称 */
    name?: string | undefined;
    /** 上次检查时间 */
    lastReportTime?: dayjs.Dayjs | undefined;
    /** 下次检查时间 */
    nextReportTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientLisRemindView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.lastReportTime = _data["lastReportTime"] ? dayjs(_data["lastReportTime"].toString()) : <any>undefined;
            this.nextReportTime = _data["nextReportTime"] ? dayjs(_data["nextReportTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientLisRemindView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLisRemindView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["lastReportTime"] = this.lastReportTime ? this.lastReportTime.toISOString() : <any>undefined;
        data["nextReportTime"] = this.nextReportTime ? this.nextReportTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 患者检验项提醒 */
export interface IPatientLisRemindView {
    /** 检验提醒标识 */
    id?: string | undefined;
    /** 检验项名称 */
    name?: string | undefined;
    /** 上次检查时间 */
    lastReportTime?: dayjs.Dayjs | undefined;
    /** 下次检查时间 */
    nextReportTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientLisRemindViewResult implements IPatientLisRemindViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientLisRemindView[] | undefined;

    constructor(data?: IPatientLisRemindViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientLisRemindView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientLisRemindViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLisRemindViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientLisRemindViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientLisRemindView[] | undefined;
}

/** 患者透析穿刺记录 */
export class PatientPunctureRecord implements IPatientPunctureRecord {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 文件id */
    hfsFilesId?: string | undefined;
    /** 文件url */
    hfsFilesUrl?: string | undefined;
    /** 穿刺位置 */
    position?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
    cureRecords?: CureRecord;

    constructor(data?: IPatientPunctureRecord) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.cureRecordId = _data["cureRecordId"];
            this.hfsFilesId = _data["hfsFilesId"];
            this.hfsFilesUrl = _data["hfsFilesUrl"];
            this.position = _data["position"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
            this.cureRecords = _data["cureRecords"] ? CureRecord.fromJS(_data["cureRecords"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientPunctureRecord {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPunctureRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["cureRecordId"] = this.cureRecordId;
        data["hfsFilesId"] = this.hfsFilesId;
        data["hfsFilesUrl"] = this.hfsFilesUrl;
        data["position"] = this.position;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        data["cureRecords"] = this.cureRecords ? this.cureRecords.toJSON() : <any>undefined;
        return data;
    }
}

/** 患者透析穿刺记录 */
export interface IPatientPunctureRecord {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 文件id */
    hfsFilesId?: string | undefined;
    /** 文件url */
    hfsFilesUrl?: string | undefined;
    /** 穿刺位置 */
    position?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
    cureRecords?: CureRecord;
}

/** 患者透析穿刺记录节点 */
export class PatientPunctureRecordNode implements IPatientPunctureRecordNode {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** [患者透析穿刺记录标识](患者透析穿刺记录) */
    patientPunctureRecordId?: string | undefined;
    /** 节点 */
    title?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 方向 */
    direction?: string | undefined;
    /** 动脉静脉 */
    vessel?: string | undefined;
    /** 穿刺日期 */
    punctureDate?: dayjs.Dayjs | undefined;
    /** 穿刺护士 */
    puncturer?: string | undefined;
    /** 穿刺护士标识 */
    puncturerId?: string | undefined;
    patients?: Patient;
    patientPunctureRecords?: PatientPunctureRecord;

    constructor(data?: IPatientPunctureRecordNode) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.patientPunctureRecordId = _data["patientPunctureRecordId"];
            this.title = _data["title"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.direction = _data["direction"];
            this.vessel = _data["vessel"];
            this.punctureDate = _data["punctureDate"] ? dayjs(_data["punctureDate"].toString()) : <any>undefined;
            this.puncturer = _data["puncturer"];
            this.puncturerId = _data["puncturerId"];
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
            this.patientPunctureRecords = _data["patientPunctureRecords"] ? PatientPunctureRecord.fromJS(_data["patientPunctureRecords"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientPunctureRecordNode {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPunctureRecordNode();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["patientPunctureRecordId"] = this.patientPunctureRecordId;
        data["title"] = this.title;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["direction"] = this.direction;
        data["vessel"] = this.vessel;
        data["punctureDate"] = this.punctureDate ? this.punctureDate.toISOString() : <any>undefined;
        data["puncturer"] = this.puncturer;
        data["puncturerId"] = this.puncturerId;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        data["patientPunctureRecords"] = this.patientPunctureRecords ? this.patientPunctureRecords.toJSON() : <any>undefined;
        return data;
    }
}

/** 患者透析穿刺记录节点 */
export interface IPatientPunctureRecordNode {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** [患者透析穿刺记录标识](患者透析穿刺记录) */
    patientPunctureRecordId?: string | undefined;
    /** 节点 */
    title?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 方向 */
    direction?: string | undefined;
    /** 动脉静脉 */
    vessel?: string | undefined;
    /** 穿刺日期 */
    punctureDate?: dayjs.Dayjs | undefined;
    /** 穿刺护士 */
    puncturer?: string | undefined;
    /** 穿刺护士标识 */
    puncturerId?: string | undefined;
    patients?: Patient;
    patientPunctureRecords?: PatientPunctureRecord;
}

export class PatientRoutineView implements IPatientRoutineView {
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 上次透后体重 *kg* */
    lastAfterWeight?: string | undefined;
    /** 上次偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    lastDeductionWeight?: string | undefined;

    constructor(data?: IPatientRoutineView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.bestWeight = _data["bestWeight"];
            this.deductionWeight = _data["deductionWeight"];
            this.lastAfterWeight = _data["lastAfterWeight"];
            this.lastDeductionWeight = _data["lastDeductionWeight"];
        }
    }

    static fromJS(data: any): PatientRoutineView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientRoutineView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bestWeight"] = this.bestWeight;
        data["deductionWeight"] = this.deductionWeight;
        data["lastAfterWeight"] = this.lastAfterWeight;
        data["lastDeductionWeight"] = this.lastDeductionWeight;
        return data;
    }
}

export interface IPatientRoutineView {
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 上次透后体重 *kg* */
    lastAfterWeight?: string | undefined;
    /** 上次偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    lastDeductionWeight?: string | undefined;
}

/** Reponse */
export class PatientRoutineViewResultEntry implements IPatientRoutineViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientRoutineView;

    constructor(data?: IPatientRoutineViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientRoutineView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientRoutineViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientRoutineViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientRoutineViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientRoutineView;
}

export class PatientScheduleWeekdayView implements IPatientScheduleWeekdayView {
    /** 透析排床标识 */
    cureScheduleId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 星期 */
    dialysisWeekday?: number;
    /** 星期显示值 */
    dialysisWeekdayLabel?: string | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次显示值 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式显示值 */
    dialysisModeLabel?: string | undefined;
    /** 透析记录标识 */
    cureRecordId?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 治疗状态 */
    status?: string | undefined;
    /** 治疗状态显示值 */
    statusLabel?: string | undefined;

    constructor(data?: IPatientScheduleWeekdayView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureScheduleId = _data["cureScheduleId"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.dialysisWeekday = _data["dialysisWeekday"];
            this.dialysisWeekdayLabel = _data["dialysisWeekdayLabel"];
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisMachineModel = _data["dialysisMachineModel"];
            this.dialysisMachineNo = _data["dialysisMachineNo"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.cureRecordId = _data["cureRecordId"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.status = _data["status"];
            this.statusLabel = _data["statusLabel"];
        }
    }

    static fromJS(data: any): PatientScheduleWeekdayView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientScheduleWeekdayView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureScheduleId"] = this.cureScheduleId;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["dialysisWeekday"] = this.dialysisWeekday;
        data["dialysisWeekdayLabel"] = this.dialysisWeekdayLabel;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisMachineModel"] = this.dialysisMachineModel;
        data["dialysisMachineNo"] = this.dialysisMachineNo;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["cureRecordId"] = this.cureRecordId;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["status"] = this.status;
        data["statusLabel"] = this.statusLabel;
        return data;
    }
}

export interface IPatientScheduleWeekdayView {
    /** 透析排床标识 */
    cureScheduleId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 星期 */
    dialysisWeekday?: number;
    /** 星期显示值 */
    dialysisWeekdayLabel?: string | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次显示值 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式显示值 */
    dialysisModeLabel?: string | undefined;
    /** 透析记录标识 */
    cureRecordId?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 治疗状态 */
    status?: string | undefined;
    /** 治疗状态显示值 */
    statusLabel?: string | undefined;
}

/** Reponse */
export class PatientScheduleWeekdayViewResult implements IPatientScheduleWeekdayViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientScheduleWeekdayView[] | undefined;

    constructor(data?: IPatientScheduleWeekdayViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientScheduleWeekdayView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientScheduleWeekdayViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientScheduleWeekdayViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientScheduleWeekdayViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientScheduleWeekdayView[] | undefined;
}

/** 患者血管通路 */
export class PatientVascularAccess implements IPatientVascularAccess {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 是否改变通路0,1 */
    change?: number | undefined;
    /** 改变日期 */
    changeDate?: dayjs.Dayjs | undefined;
    /** 改变原因 `DIC.VASCULAR.ACCESS.CHANGECAUSE` *可以多选,使用`;`分隔* */
    changeCause?: string | undefined;
    /** 其它改变原因 */
    changeCauseOther?: string | undefined;
    /** 位置(左-右) `DIC.VASCULAR.ACCESS.LOCATION` *左侧,右侧* */
    location?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type?: string | undefined;
    /** 位置 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 中心静脉置管方法 `DIC.VASCULAR.ACCESS.WAY.CVC` */
    way?: string | undefined;
    /** 其他描述 */
    remarkOther?: string | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 默认在处方应用0,1 */
    default?: number | undefined;
    /** 停用时间 */
    disableDate?: dayjs.Dayjs | undefined;
    /** 停用原因 */
    disableReason?: string | undefined;
    /** 已用天数 */
    lifetime?: number | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;

    constructor(data?: IPatientVascularAccess) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.change = _data["change"];
            this.changeDate = _data["changeDate"] ? dayjs(_data["changeDate"].toString()) : <any>undefined;
            this.changeCause = _data["changeCause"];
            this.changeCauseOther = _data["changeCauseOther"];
            this.location = _data["location"];
            this.type = _data["type"];
            this.position = _data["position"];
            this.way = _data["way"];
            this.remarkOther = _data["remarkOther"];
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.default = _data["default"];
            this.disableDate = _data["disableDate"] ? dayjs(_data["disableDate"].toString()) : <any>undefined;
            this.disableReason = _data["disableReason"];
            this.lifetime = _data["lifetime"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientVascularAccess {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccess();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["change"] = this.change;
        data["changeDate"] = this.changeDate ? this.changeDate.toISOString() : <any>undefined;
        data["changeCause"] = this.changeCause;
        data["changeCauseOther"] = this.changeCauseOther;
        data["location"] = this.location;
        data["type"] = this.type;
        data["position"] = this.position;
        data["way"] = this.way;
        data["remarkOther"] = this.remarkOther;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["default"] = this.default;
        data["disableDate"] = this.disableDate ? this.disableDate.toISOString() : <any>undefined;
        data["disableReason"] = this.disableReason;
        data["lifetime"] = this.lifetime;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        return data;
    }
}

/** 患者血管通路 */
export interface IPatientVascularAccess {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 是否改变通路0,1 */
    change?: number | undefined;
    /** 改变日期 */
    changeDate?: dayjs.Dayjs | undefined;
    /** 改变原因 `DIC.VASCULAR.ACCESS.CHANGECAUSE` *可以多选,使用`;`分隔* */
    changeCause?: string | undefined;
    /** 其它改变原因 */
    changeCauseOther?: string | undefined;
    /** 位置(左-右) `DIC.VASCULAR.ACCESS.LOCATION` *左侧,右侧* */
    location?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type?: string | undefined;
    /** 位置 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 中心静脉置管方法 `DIC.VASCULAR.ACCESS.WAY.CVC` */
    way?: string | undefined;
    /** 其他描述 */
    remarkOther?: string | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 默认在处方应用0,1 */
    default?: number | undefined;
    /** 停用时间 */
    disableDate?: dayjs.Dayjs | undefined;
    /** 停用原因 */
    disableReason?: string | undefined;
    /** 已用天数 */
    lifetime?: number | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
}

export class PrescriptionCureBeforeEditModel implements IPrescriptionCureBeforeEditModel {
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 下次透析建议 */
    suggestionNext?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode!: string;
    /** 设定透析时长 *分钟* */
    dialysisDurationSet!: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路Id) */
    patientVascularAccessId!: string;
    /** 血管通路 */
    patientVascularAccessName!: string;
    patientVascularAccessType?: string | undefined;
    patientOtherVascularAccessName?: string | undefined;
    /** [血管通路](患者血管通路) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessType?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换液速度 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *ml Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 预脱 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    beforeBpPosition?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透前体温 *℃* */
    onTemp?: number | undefined;
    /** 医生制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 方案是否制定0,1 */
    enact?: number | undefined;
    /** 方案是否通过0,1 */
    check?: number | undefined;
    /** 是否交叉核对 */
    verify?: boolean;
    /** 护士确认方案时间 */
    timeCheckNurse?: dayjs.Dayjs | undefined;
    /** 制定方案医生标识 */
    enactDoctorId?: string | undefined;
    /** 制定方案医生姓名 */
    enactDoctorName?: string | undefined;
    /** 确认方案护士标识 */
    checkNurseId?: string | undefined;
    /** 确认方案护士姓名 */
    checkNurseName?: string | undefined;
    /** 来源 （来源为门诊时显示门诊号，来源为住院时显示住院号） */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 透析液名称 */
    dialysateName!: string;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
    /** 抗凝剂名称 */
    anticoagulantName!: string;
    antiTmplType?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1!: string;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *普通肝素/阿加曲班* */
    first?: number | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它 */
    anticoagulantOther?: string | undefined;
    /** 无肝素原因 */
    nonReason?: string | undefined;
    /** 床位标识 */
    bedId?: string | undefined;
    /** 修改内容 */
    content?: string | undefined;
    /** 选择的或者确认的医嘱标识（临时和长期公用） */
    daIds?: string[] | undefined;
    /** 费用组套 */
    cureCostGroups?: RoomRecordItem[] | undefined;
    /** 抗凝剂药品 */
    cureRecordAnticoagulantDrugs?: CureRecordAnticoagulantDrugEditModel[] | undefined;
    isAdvance?: boolean;
    /** 是否单超0,1 */
    iuf?: number;
    /** 单超方式 */
    iufMode?: string | undefined;
    /** 单超时间 */
    iufHour?: number | undefined;
    /** 单超量 */
    iufValue?: number | undefined;
    /** 单超开始时间 */
    iufStartTime?: dayjs.Dayjs | undefined;
    punctureMethod?: string | undefined;
    /** 透析治疗频次 *1次/周;2次/周;3次/周;4次/周;5次/周;6次/周;7次/周;3次/2周;5次/2周;7次/2周* */
    dialysisFrequency?: string | undefined;
    /** 置管护士标识 */
    placementNurseId?: string | undefined;
    /** 置管护士姓名 */
    placementNurseName?: string | undefined;
    /** 质控护士标识 */
    qualityNurseId?: string | undefined;
    /** 质控护士姓名 */
    qualityNurseName?: string | undefined;
    /** 穿刺护士标识 */
    punctureNurseId?: string | undefined;
    /** 穿刺护士姓名 */
    punctureNurseName?: string | undefined;
    /** 自定义字段 */
    cureRecordFieldItems?: CureRecordFieldItemEditModel[] | undefined;

    constructor(data?: IPrescriptionCureBeforeEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.suggestion = _data["suggestion"];
            this.suggestionNext = _data["suggestionNext"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisDurationSet = _data["dialysisDurationSet"];
            this.bestWeight = _data["bestWeight"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.patientVascularAccessType = _data["patientVascularAccessType"];
            this.patientOtherVascularAccessName = _data["patientOtherVascularAccessName"];
            this.patientOtherVascularAccessId = _data["patientOtherVascularAccessId"];
            this.patientOtherVascularAccessType = _data["patientOtherVascularAccessType"];
            this.rfm = _data["rfm"];
            this.rfr = _data["rfr"];
            this.rfv = _data["rfv"];
            this.beforeWeight = _data["beforeWeight"];
            this.beforeWeightMode = _data["beforeWeightMode"];
            this.deductionWeight = _data["deductionWeight"];
            this.ufg = _data["ufg"];
            this.beforeBpPosition = _data["beforeBpPosition"];
            this.beforeSbp = _data["beforeSbp"];
            this.beforeDbp = _data["beforeDbp"];
            this.beforePulse = _data["beforePulse"];
            this.onTemp = _data["onTemp"];
            this.timeEnactDoctor = _data["timeEnactDoctor"] ? dayjs(_data["timeEnactDoctor"].toString()) : <any>undefined;
            this.enact = _data["enact"];
            this.check = _data["check"];
            this.verify = _data["verify"];
            this.timeCheckNurse = _data["timeCheckNurse"] ? dayjs(_data["timeCheckNurse"].toString()) : <any>undefined;
            this.enactDoctorId = _data["enactDoctorId"];
            this.enactDoctorName = _data["enactDoctorName"];
            this.checkNurseId = _data["checkNurseId"];
            this.checkNurseName = _data["checkNurseName"];
            this.source = _data["source"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.dialysateName = _data["dialysateName"];
            this.flowRate = _data["flowRate"];
            this.temp = _data["temp"];
            this.cond = _data["cond"];
            this.k = _data["k"];
            this.ca = _data["ca"];
            this.na = _data["na"];
            this.hco = _data["hco"];
            this.glucose = _data["glucose"];
            this.anticoagulantName = _data["anticoagulantName"];
            this.antiTmplType = _data["antiTmplType"];
            this.classify1 = _data["classify1"];
            this.classify2 = _data["classify2"];
            this.first = _data["first"];
            this.concentration = _data["concentration"];
            this.firstUnit = _data["firstUnit"];
            this.appendRate = _data["appendRate"];
            this.appendRateUnit = _data["appendRateUnit"];
            this.appendTime = _data["appendTime"];
            this.append = _data["append"];
            this.appendUnit = _data["appendUnit"];
            this.total = _data["total"];
            this.totalUnit = _data["totalUnit"];
            this.anticoagulantOther = _data["anticoagulantOther"];
            this.nonReason = _data["nonReason"];
            this.bedId = _data["bedId"];
            this.content = _data["content"];
            if (Array.isArray(_data["daIds"])) {
                this.daIds = [] as any;
                for (let item of _data["daIds"])
                    this.daIds!.push(item);
            }
            if (Array.isArray(_data["cureCostGroups"])) {
                this.cureCostGroups = [] as any;
                for (let item of _data["cureCostGroups"])
                    this.cureCostGroups!.push(RoomRecordItem.fromJS(item));
            }
            if (Array.isArray(_data["cureRecordAnticoagulantDrugs"])) {
                this.cureRecordAnticoagulantDrugs = [] as any;
                for (let item of _data["cureRecordAnticoagulantDrugs"])
                    this.cureRecordAnticoagulantDrugs!.push(CureRecordAnticoagulantDrugEditModel.fromJS(item));
            }
            this.isAdvance = _data["isAdvance"];
            this.iuf = _data["iuf"];
            this.iufMode = _data["iufMode"];
            this.iufHour = _data["iufHour"];
            this.iufValue = _data["iufValue"];
            this.iufStartTime = _data["iufStartTime"] ? dayjs(_data["iufStartTime"].toString()) : <any>undefined;
            this.punctureMethod = _data["punctureMethod"];
            this.dialysisFrequency = _data["dialysisFrequency"];
            this.placementNurseId = _data["placementNurseId"];
            this.placementNurseName = _data["placementNurseName"];
            this.qualityNurseId = _data["qualityNurseId"];
            this.qualityNurseName = _data["qualityNurseName"];
            this.punctureNurseId = _data["punctureNurseId"];
            this.punctureNurseName = _data["punctureNurseName"];
            if (Array.isArray(_data["cureRecordFieldItems"])) {
                this.cureRecordFieldItems = [] as any;
                for (let item of _data["cureRecordFieldItems"])
                    this.cureRecordFieldItems!.push(CureRecordFieldItemEditModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PrescriptionCureBeforeEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PrescriptionCureBeforeEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["suggestion"] = this.suggestion;
        data["suggestionNext"] = this.suggestionNext;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisDurationSet"] = this.dialysisDurationSet;
        data["bestWeight"] = this.bestWeight;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["patientVascularAccessType"] = this.patientVascularAccessType;
        data["patientOtherVascularAccessName"] = this.patientOtherVascularAccessName;
        data["patientOtherVascularAccessId"] = this.patientOtherVascularAccessId;
        data["patientOtherVascularAccessType"] = this.patientOtherVascularAccessType;
        data["rfm"] = this.rfm;
        data["rfr"] = this.rfr;
        data["rfv"] = this.rfv;
        data["beforeWeight"] = this.beforeWeight;
        data["beforeWeightMode"] = this.beforeWeightMode;
        data["deductionWeight"] = this.deductionWeight;
        data["ufg"] = this.ufg;
        data["beforeBpPosition"] = this.beforeBpPosition;
        data["beforeSbp"] = this.beforeSbp;
        data["beforeDbp"] = this.beforeDbp;
        data["beforePulse"] = this.beforePulse;
        data["onTemp"] = this.onTemp;
        data["timeEnactDoctor"] = this.timeEnactDoctor ? this.timeEnactDoctor.toISOString() : <any>undefined;
        data["enact"] = this.enact;
        data["check"] = this.check;
        data["verify"] = this.verify;
        data["timeCheckNurse"] = this.timeCheckNurse ? this.timeCheckNurse.toISOString() : <any>undefined;
        data["enactDoctorId"] = this.enactDoctorId;
        data["enactDoctorName"] = this.enactDoctorName;
        data["checkNurseId"] = this.checkNurseId;
        data["checkNurseName"] = this.checkNurseName;
        data["source"] = this.source;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["dialysateName"] = this.dialysateName;
        data["flowRate"] = this.flowRate;
        data["temp"] = this.temp;
        data["cond"] = this.cond;
        data["k"] = this.k;
        data["ca"] = this.ca;
        data["na"] = this.na;
        data["hco"] = this.hco;
        data["glucose"] = this.glucose;
        data["anticoagulantName"] = this.anticoagulantName;
        data["antiTmplType"] = this.antiTmplType;
        data["classify1"] = this.classify1;
        data["classify2"] = this.classify2;
        data["first"] = this.first;
        data["concentration"] = this.concentration;
        data["firstUnit"] = this.firstUnit;
        data["appendRate"] = this.appendRate;
        data["appendRateUnit"] = this.appendRateUnit;
        data["appendTime"] = this.appendTime;
        data["append"] = this.append;
        data["appendUnit"] = this.appendUnit;
        data["total"] = this.total;
        data["totalUnit"] = this.totalUnit;
        data["anticoagulantOther"] = this.anticoagulantOther;
        data["nonReason"] = this.nonReason;
        data["bedId"] = this.bedId;
        data["content"] = this.content;
        if (Array.isArray(this.daIds)) {
            data["daIds"] = [];
            for (let item of this.daIds)
                data["daIds"].push(item);
        }
        if (Array.isArray(this.cureCostGroups)) {
            data["cureCostGroups"] = [];
            for (let item of this.cureCostGroups)
                data["cureCostGroups"].push(item.toJSON());
        }
        if (Array.isArray(this.cureRecordAnticoagulantDrugs)) {
            data["cureRecordAnticoagulantDrugs"] = [];
            for (let item of this.cureRecordAnticoagulantDrugs)
                data["cureRecordAnticoagulantDrugs"].push(item.toJSON());
        }
        data["isAdvance"] = this.isAdvance;
        data["iuf"] = this.iuf;
        data["iufMode"] = this.iufMode;
        data["iufHour"] = this.iufHour;
        data["iufValue"] = this.iufValue;
        data["iufStartTime"] = this.iufStartTime ? this.iufStartTime.toISOString() : <any>undefined;
        data["punctureMethod"] = this.punctureMethod;
        data["dialysisFrequency"] = this.dialysisFrequency;
        data["placementNurseId"] = this.placementNurseId;
        data["placementNurseName"] = this.placementNurseName;
        data["qualityNurseId"] = this.qualityNurseId;
        data["qualityNurseName"] = this.qualityNurseName;
        data["punctureNurseId"] = this.punctureNurseId;
        data["punctureNurseName"] = this.punctureNurseName;
        if (Array.isArray(this.cureRecordFieldItems)) {
            data["cureRecordFieldItems"] = [];
            for (let item of this.cureRecordFieldItems)
                data["cureRecordFieldItems"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPrescriptionCureBeforeEditModel {
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 下次透析建议 */
    suggestionNext?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode: string;
    /** 设定透析时长 *分钟* */
    dialysisDurationSet: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路Id) */
    patientVascularAccessId: string;
    /** 血管通路 */
    patientVascularAccessName: string;
    patientVascularAccessType?: string | undefined;
    patientOtherVascularAccessName?: string | undefined;
    /** [血管通路](患者血管通路) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessType?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换液速度 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *ml Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 预脱 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    beforeBpPosition?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透前体温 *℃* */
    onTemp?: number | undefined;
    /** 医生制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 方案是否制定0,1 */
    enact?: number | undefined;
    /** 方案是否通过0,1 */
    check?: number | undefined;
    /** 是否交叉核对 */
    verify?: boolean;
    /** 护士确认方案时间 */
    timeCheckNurse?: dayjs.Dayjs | undefined;
    /** 制定方案医生标识 */
    enactDoctorId?: string | undefined;
    /** 制定方案医生姓名 */
    enactDoctorName?: string | undefined;
    /** 确认方案护士标识 */
    checkNurseId?: string | undefined;
    /** 确认方案护士姓名 */
    checkNurseName?: string | undefined;
    /** 来源 （来源为门诊时显示门诊号，来源为住院时显示住院号） */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 透析液名称 */
    dialysateName: string;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
    /** 抗凝剂名称 */
    anticoagulantName: string;
    antiTmplType?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1: string;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *普通肝素/阿加曲班* */
    first?: number | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它 */
    anticoagulantOther?: string | undefined;
    /** 无肝素原因 */
    nonReason?: string | undefined;
    /** 床位标识 */
    bedId?: string | undefined;
    /** 修改内容 */
    content?: string | undefined;
    /** 选择的或者确认的医嘱标识（临时和长期公用） */
    daIds?: string[] | undefined;
    /** 费用组套 */
    cureCostGroups?: RoomRecordItem[] | undefined;
    /** 抗凝剂药品 */
    cureRecordAnticoagulantDrugs?: CureRecordAnticoagulantDrugEditModel[] | undefined;
    isAdvance?: boolean;
    /** 是否单超0,1 */
    iuf?: number;
    /** 单超方式 */
    iufMode?: string | undefined;
    /** 单超时间 */
    iufHour?: number | undefined;
    /** 单超量 */
    iufValue?: number | undefined;
    /** 单超开始时间 */
    iufStartTime?: dayjs.Dayjs | undefined;
    punctureMethod?: string | undefined;
    /** 透析治疗频次 *1次/周;2次/周;3次/周;4次/周;5次/周;6次/周;7次/周;3次/2周;5次/2周;7次/2周* */
    dialysisFrequency?: string | undefined;
    /** 置管护士标识 */
    placementNurseId?: string | undefined;
    /** 置管护士姓名 */
    placementNurseName?: string | undefined;
    /** 质控护士标识 */
    qualityNurseId?: string | undefined;
    /** 质控护士姓名 */
    qualityNurseName?: string | undefined;
    /** 穿刺护士标识 */
    punctureNurseId?: string | undefined;
    /** 穿刺护士姓名 */
    punctureNurseName?: string | undefined;
    /** 自定义字段 */
    cureRecordFieldItems?: CureRecordFieldItemEditModel[] | undefined;
}

export class PrescriptionCureBeforeView implements IPrescriptionCureBeforeView {
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 下次透析建议 */
    suggestionNext?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode!: string;
    /** 设定透析时长 *分钟* */
    dialysisDurationSet!: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路Id) */
    patientVascularAccessId!: string;
    /** 血管通路 */
    patientVascularAccessName!: string;
    patientOtherVascularAccessName?: string | undefined;
    /** [血管通路](患者血管通路) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessType?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换液速度 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *ml Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 预脱 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    beforeBpPosition?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透前体温 *℃* */
    onTemp?: number | undefined;
    /** 医生制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 方案是否制定0,1 */
    enact?: number | undefined;
    /** 方案是否通过0,1 */
    check?: number | undefined;
    /** 是否交叉核对 */
    verify?: boolean;
    /** 护士确认方案时间 */
    timeCheckNurse?: dayjs.Dayjs | undefined;
    /** 制定方案医生标识 */
    enactDoctorId?: string | undefined;
    /** 制定方案医生姓名 */
    enactDoctorName?: string | undefined;
    /** 确认方案护士标识 */
    checkNurseId?: string | undefined;
    /** 确认方案护士姓名 */
    checkNurseName?: string | undefined;
    /** 来源 （来源为门诊时显示门诊号，来源为住院时显示住院号） */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 透析液名称 */
    dialysateName!: string;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
    /** 抗凝剂名称 */
    anticoagulantName!: string;
    antiTmplType?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1!: string;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *普通肝素/阿加曲班* */
    first?: number | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它 */
    anticoagulantOther?: string | undefined;
    /** 无肝素原因 */
    nonReason?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 是否已经制定处方 */
    hasEnactBefore?: boolean;
    /** 是否已经确认处方 */
    hasCheckBefore?: boolean;
    /** 是否有处方 */
    hasPrescription?: boolean;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 透析记录标识 */
    cureRecordId?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 透析方式 */
    dialysisModeLabel?: string | undefined;
    /** 置换方式显示值 */
    rfmLabel?: string | undefined;
    /** 治疗状态显示值 */
    statusLabel?: string | undefined;
    /** 透前体重方式显示值 */
    beforeWeightModeLabel?: string | undefined;
    /** 透前血压测量位置显示值 */
    beforeBpPositionLabel?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 来源 （来源为门诊时显示门诊号，来源为住院时显示住院号） */
    sourceLabel?: string | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 大类名称 */
    classify1Label?: string | undefined;
    /** 小类名称 */
    classify2Label?: string | undefined;
    /** 首剂-单位名称 */
    firstUnitLabel?: string | undefined;
    /** 上次预脱 */
    lastUfg?: string | undefined;
    /** 上次实脱 */
    lastUfv?: string | undefined;
    /** 上次透前 */
    lastBeforeWeight?: string | undefined;
    /** 上次透后 */
    lastAfterWeight?: string | undefined;
    /** 上次偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    lastDeductionWeight?: string | undefined;
    /** 管床护士标识 */
    bedNurseId?: string | undefined;
    /** 管床护士姓名 */
    bedNurseName?: string | undefined;
    /** 通路类型 */
    patientVascularAccessType?: string | undefined;
    /** 长期医嘱 */
    daLongterm?: PatientDaLongtermView[] | undefined;
    /** 临时医嘱 */
    daTemporary?: PatientDaTemporaryView[] | undefined;
    /** 透析医嘱 */
    cureDa?: CureDaView[] | undefined;
    /** 费用组套 */
    cureCostGroups?: CureCostGroupView[] | undefined;
    /** 抗凝剂药品 */
    cureRecordAnticoagulantDrugs?: CureRecordAnticoagulantDrugView[] | undefined;
    /** 透析区间排序 */
    sequenceDialysis?: number;
    /** 床位排序 */
    sequenceBed?: number;
    /** 班次排序 */
    sequenceShift?: number;
    /** 是否单超0,1 */
    iuf?: number;
    /** 是否单超0,1 */
    iufLabel?: string | undefined;
    /** 单超方式 */
    iufMode?: string | undefined;
    /** 单超时间 */
    iufHour?: number | undefined;
    /** 单超量 */
    iufValue?: number | undefined;
    /** 单超开始时间 */
    iufStartTime?: dayjs.Dayjs | undefined;
    punctureMethod?: string | undefined;
    punctureMethodLabel?: string | undefined;
    /** 置管护士标识 */
    placementNurseId?: string | undefined;
    /** 置管护士姓名 */
    placementNurseName?: string | undefined;
    /** 质控护士标识 */
    qualityNurseId?: string | undefined;
    /** 质控护士姓名 */
    qualityNurseName?: string | undefined;
    /** 穿刺护士标识 */
    punctureNurseId?: string | undefined;
    /** 穿刺护士姓名 */
    punctureNurseName?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 透析治疗频次 *1次/周;2次/周;3次/周;4次/周;5次/周;6次/周;7次/周;3次/2周;5次/2周;7次/2周* */
    dialysisFrequency?: string | undefined;
    /** 自定义字段 */
    cureRecordFieldItems?: CureRecordFieldItemBase[] | undefined;

    constructor(data?: IPrescriptionCureBeforeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.suggestion = _data["suggestion"];
            this.suggestionNext = _data["suggestionNext"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisDurationSet = _data["dialysisDurationSet"];
            this.bestWeight = _data["bestWeight"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.patientOtherVascularAccessName = _data["patientOtherVascularAccessName"];
            this.patientOtherVascularAccessId = _data["patientOtherVascularAccessId"];
            this.patientOtherVascularAccessType = _data["patientOtherVascularAccessType"];
            this.rfm = _data["rfm"];
            this.rfr = _data["rfr"];
            this.rfv = _data["rfv"];
            this.beforeWeight = _data["beforeWeight"];
            this.beforeWeightMode = _data["beforeWeightMode"];
            this.deductionWeight = _data["deductionWeight"];
            this.ufg = _data["ufg"];
            this.beforeBpPosition = _data["beforeBpPosition"];
            this.beforeSbp = _data["beforeSbp"];
            this.beforeDbp = _data["beforeDbp"];
            this.beforePulse = _data["beforePulse"];
            this.onTemp = _data["onTemp"];
            this.timeEnactDoctor = _data["timeEnactDoctor"] ? dayjs(_data["timeEnactDoctor"].toString()) : <any>undefined;
            this.enact = _data["enact"];
            this.check = _data["check"];
            this.verify = _data["verify"];
            this.timeCheckNurse = _data["timeCheckNurse"] ? dayjs(_data["timeCheckNurse"].toString()) : <any>undefined;
            this.enactDoctorId = _data["enactDoctorId"];
            this.enactDoctorName = _data["enactDoctorName"];
            this.checkNurseId = _data["checkNurseId"];
            this.checkNurseName = _data["checkNurseName"];
            this.source = _data["source"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.dialysateName = _data["dialysateName"];
            this.flowRate = _data["flowRate"];
            this.temp = _data["temp"];
            this.cond = _data["cond"];
            this.k = _data["k"];
            this.ca = _data["ca"];
            this.na = _data["na"];
            this.hco = _data["hco"];
            this.glucose = _data["glucose"];
            this.anticoagulantName = _data["anticoagulantName"];
            this.antiTmplType = _data["antiTmplType"];
            this.classify1 = _data["classify1"];
            this.classify2 = _data["classify2"];
            this.first = _data["first"];
            this.concentration = _data["concentration"];
            this.firstUnit = _data["firstUnit"];
            this.appendRate = _data["appendRate"];
            this.appendRateUnit = _data["appendRateUnit"];
            this.appendTime = _data["appendTime"];
            this.append = _data["append"];
            this.appendUnit = _data["appendUnit"];
            this.total = _data["total"];
            this.totalUnit = _data["totalUnit"];
            this.anticoagulantOther = _data["anticoagulantOther"];
            this.nonReason = _data["nonReason"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.hasEnactBefore = _data["hasEnactBefore"];
            this.hasCheckBefore = _data["hasCheckBefore"];
            this.hasPrescription = _data["hasPrescription"];
            this.sn = _data["sn"];
            this.patientId = _data["patientId"];
            this.surnameCode = _data["surnameCode"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisMachineModel = _data["dialysisMachineModel"];
            this.dialysisMachineNo = _data["dialysisMachineNo"];
            this.cureRecordId = _data["cureRecordId"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.rfmLabel = _data["rfmLabel"];
            this.statusLabel = _data["statusLabel"];
            this.beforeWeightModeLabel = _data["beforeWeightModeLabel"];
            this.beforeBpPositionLabel = _data["beforeBpPositionLabel"];
            this.age = _data["age"];
            this.ward = _data["ward"];
            this.bed = _data["bed"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.sourceLabel = _data["sourceLabel"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.classify1Label = _data["classify1Label"];
            this.classify2Label = _data["classify2Label"];
            this.firstUnitLabel = _data["firstUnitLabel"];
            this.lastUfg = _data["lastUfg"];
            this.lastUfv = _data["lastUfv"];
            this.lastBeforeWeight = _data["lastBeforeWeight"];
            this.lastAfterWeight = _data["lastAfterWeight"];
            this.lastDeductionWeight = _data["lastDeductionWeight"];
            this.bedNurseId = _data["bedNurseId"];
            this.bedNurseName = _data["bedNurseName"];
            this.patientVascularAccessType = _data["patientVascularAccessType"];
            if (Array.isArray(_data["daLongterm"])) {
                this.daLongterm = [] as any;
                for (let item of _data["daLongterm"])
                    this.daLongterm!.push(PatientDaLongtermView.fromJS(item));
            }
            if (Array.isArray(_data["daTemporary"])) {
                this.daTemporary = [] as any;
                for (let item of _data["daTemporary"])
                    this.daTemporary!.push(PatientDaTemporaryView.fromJS(item));
            }
            if (Array.isArray(_data["cureDa"])) {
                this.cureDa = [] as any;
                for (let item of _data["cureDa"])
                    this.cureDa!.push(CureDaView.fromJS(item));
            }
            if (Array.isArray(_data["cureCostGroups"])) {
                this.cureCostGroups = [] as any;
                for (let item of _data["cureCostGroups"])
                    this.cureCostGroups!.push(CureCostGroupView.fromJS(item));
            }
            if (Array.isArray(_data["cureRecordAnticoagulantDrugs"])) {
                this.cureRecordAnticoagulantDrugs = [] as any;
                for (let item of _data["cureRecordAnticoagulantDrugs"])
                    this.cureRecordAnticoagulantDrugs!.push(CureRecordAnticoagulantDrugView.fromJS(item));
            }
            this.sequenceDialysis = _data["sequenceDialysis"];
            this.sequenceBed = _data["sequenceBed"];
            this.sequenceShift = _data["sequenceShift"];
            this.iuf = _data["iuf"];
            this.iufLabel = _data["iufLabel"];
            this.iufMode = _data["iufMode"];
            this.iufHour = _data["iufHour"];
            this.iufValue = _data["iufValue"];
            this.iufStartTime = _data["iufStartTime"] ? dayjs(_data["iufStartTime"].toString()) : <any>undefined;
            this.punctureMethod = _data["punctureMethod"];
            this.punctureMethodLabel = _data["punctureMethodLabel"];
            this.placementNurseId = _data["placementNurseId"];
            this.placementNurseName = _data["placementNurseName"];
            this.qualityNurseId = _data["qualityNurseId"];
            this.qualityNurseName = _data["qualityNurseName"];
            this.punctureNurseId = _data["punctureNurseId"];
            this.punctureNurseName = _data["punctureNurseName"];
            this.onNurseId = _data["onNurseId"];
            this.onNurseName = _data["onNurseName"];
            this.dialysisFrequency = _data["dialysisFrequency"];
            if (Array.isArray(_data["cureRecordFieldItems"])) {
                this.cureRecordFieldItems = [] as any;
                for (let item of _data["cureRecordFieldItems"])
                    this.cureRecordFieldItems!.push(CureRecordFieldItemBase.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PrescriptionCureBeforeView {
        data = typeof data === 'object' ? data : {};
        let result = new PrescriptionCureBeforeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["suggestion"] = this.suggestion;
        data["suggestionNext"] = this.suggestionNext;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisDurationSet"] = this.dialysisDurationSet;
        data["bestWeight"] = this.bestWeight;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["patientOtherVascularAccessName"] = this.patientOtherVascularAccessName;
        data["patientOtherVascularAccessId"] = this.patientOtherVascularAccessId;
        data["patientOtherVascularAccessType"] = this.patientOtherVascularAccessType;
        data["rfm"] = this.rfm;
        data["rfr"] = this.rfr;
        data["rfv"] = this.rfv;
        data["beforeWeight"] = this.beforeWeight;
        data["beforeWeightMode"] = this.beforeWeightMode;
        data["deductionWeight"] = this.deductionWeight;
        data["ufg"] = this.ufg;
        data["beforeBpPosition"] = this.beforeBpPosition;
        data["beforeSbp"] = this.beforeSbp;
        data["beforeDbp"] = this.beforeDbp;
        data["beforePulse"] = this.beforePulse;
        data["onTemp"] = this.onTemp;
        data["timeEnactDoctor"] = this.timeEnactDoctor ? this.timeEnactDoctor.toISOString() : <any>undefined;
        data["enact"] = this.enact;
        data["check"] = this.check;
        data["verify"] = this.verify;
        data["timeCheckNurse"] = this.timeCheckNurse ? this.timeCheckNurse.toISOString() : <any>undefined;
        data["enactDoctorId"] = this.enactDoctorId;
        data["enactDoctorName"] = this.enactDoctorName;
        data["checkNurseId"] = this.checkNurseId;
        data["checkNurseName"] = this.checkNurseName;
        data["source"] = this.source;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["dialysateName"] = this.dialysateName;
        data["flowRate"] = this.flowRate;
        data["temp"] = this.temp;
        data["cond"] = this.cond;
        data["k"] = this.k;
        data["ca"] = this.ca;
        data["na"] = this.na;
        data["hco"] = this.hco;
        data["glucose"] = this.glucose;
        data["anticoagulantName"] = this.anticoagulantName;
        data["antiTmplType"] = this.antiTmplType;
        data["classify1"] = this.classify1;
        data["classify2"] = this.classify2;
        data["first"] = this.first;
        data["concentration"] = this.concentration;
        data["firstUnit"] = this.firstUnit;
        data["appendRate"] = this.appendRate;
        data["appendRateUnit"] = this.appendRateUnit;
        data["appendTime"] = this.appendTime;
        data["append"] = this.append;
        data["appendUnit"] = this.appendUnit;
        data["total"] = this.total;
        data["totalUnit"] = this.totalUnit;
        data["anticoagulantOther"] = this.anticoagulantOther;
        data["nonReason"] = this.nonReason;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toISOString() : <any>undefined;
        data["hasEnactBefore"] = this.hasEnactBefore;
        data["hasCheckBefore"] = this.hasCheckBefore;
        data["hasPrescription"] = this.hasPrescription;
        data["sn"] = this.sn;
        data["patientId"] = this.patientId;
        data["surnameCode"] = this.surnameCode;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisMachineModel"] = this.dialysisMachineModel;
        data["dialysisMachineNo"] = this.dialysisMachineNo;
        data["cureRecordId"] = this.cureRecordId;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["rfmLabel"] = this.rfmLabel;
        data["statusLabel"] = this.statusLabel;
        data["beforeWeightModeLabel"] = this.beforeWeightModeLabel;
        data["beforeBpPositionLabel"] = this.beforeBpPositionLabel;
        data["age"] = this.age;
        data["ward"] = this.ward;
        data["bed"] = this.bed;
        data["dialysisNumber"] = this.dialysisNumber;
        data["sourceLabel"] = this.sourceLabel;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["classify1Label"] = this.classify1Label;
        data["classify2Label"] = this.classify2Label;
        data["firstUnitLabel"] = this.firstUnitLabel;
        data["lastUfg"] = this.lastUfg;
        data["lastUfv"] = this.lastUfv;
        data["lastBeforeWeight"] = this.lastBeforeWeight;
        data["lastAfterWeight"] = this.lastAfterWeight;
        data["lastDeductionWeight"] = this.lastDeductionWeight;
        data["bedNurseId"] = this.bedNurseId;
        data["bedNurseName"] = this.bedNurseName;
        data["patientVascularAccessType"] = this.patientVascularAccessType;
        if (Array.isArray(this.daLongterm)) {
            data["daLongterm"] = [];
            for (let item of this.daLongterm)
                data["daLongterm"].push(item.toJSON());
        }
        if (Array.isArray(this.daTemporary)) {
            data["daTemporary"] = [];
            for (let item of this.daTemporary)
                data["daTemporary"].push(item.toJSON());
        }
        if (Array.isArray(this.cureDa)) {
            data["cureDa"] = [];
            for (let item of this.cureDa)
                data["cureDa"].push(item.toJSON());
        }
        if (Array.isArray(this.cureCostGroups)) {
            data["cureCostGroups"] = [];
            for (let item of this.cureCostGroups)
                data["cureCostGroups"].push(item.toJSON());
        }
        if (Array.isArray(this.cureRecordAnticoagulantDrugs)) {
            data["cureRecordAnticoagulantDrugs"] = [];
            for (let item of this.cureRecordAnticoagulantDrugs)
                data["cureRecordAnticoagulantDrugs"].push(item.toJSON());
        }
        data["sequenceDialysis"] = this.sequenceDialysis;
        data["sequenceBed"] = this.sequenceBed;
        data["sequenceShift"] = this.sequenceShift;
        data["iuf"] = this.iuf;
        data["iufLabel"] = this.iufLabel;
        data["iufMode"] = this.iufMode;
        data["iufHour"] = this.iufHour;
        data["iufValue"] = this.iufValue;
        data["iufStartTime"] = this.iufStartTime ? this.iufStartTime.toISOString() : <any>undefined;
        data["punctureMethod"] = this.punctureMethod;
        data["punctureMethodLabel"] = this.punctureMethodLabel;
        data["placementNurseId"] = this.placementNurseId;
        data["placementNurseName"] = this.placementNurseName;
        data["qualityNurseId"] = this.qualityNurseId;
        data["qualityNurseName"] = this.qualityNurseName;
        data["punctureNurseId"] = this.punctureNurseId;
        data["punctureNurseName"] = this.punctureNurseName;
        data["onNurseId"] = this.onNurseId;
        data["onNurseName"] = this.onNurseName;
        data["dialysisFrequency"] = this.dialysisFrequency;
        if (Array.isArray(this.cureRecordFieldItems)) {
            data["cureRecordFieldItems"] = [];
            for (let item of this.cureRecordFieldItems)
                data["cureRecordFieldItems"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPrescriptionCureBeforeView {
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 下次透析建议 */
    suggestionNext?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode: string;
    /** 设定透析时长 *分钟* */
    dialysisDurationSet: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路Id) */
    patientVascularAccessId: string;
    /** 血管通路 */
    patientVascularAccessName: string;
    patientOtherVascularAccessName?: string | undefined;
    /** [血管通路](患者血管通路) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessType?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换液速度 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *ml Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 预脱 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    beforeBpPosition?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透前体温 *℃* */
    onTemp?: number | undefined;
    /** 医生制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 方案是否制定0,1 */
    enact?: number | undefined;
    /** 方案是否通过0,1 */
    check?: number | undefined;
    /** 是否交叉核对 */
    verify?: boolean;
    /** 护士确认方案时间 */
    timeCheckNurse?: dayjs.Dayjs | undefined;
    /** 制定方案医生标识 */
    enactDoctorId?: string | undefined;
    /** 制定方案医生姓名 */
    enactDoctorName?: string | undefined;
    /** 确认方案护士标识 */
    checkNurseId?: string | undefined;
    /** 确认方案护士姓名 */
    checkNurseName?: string | undefined;
    /** 来源 （来源为门诊时显示门诊号，来源为住院时显示住院号） */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 透析液名称 */
    dialysateName: string;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
    /** 抗凝剂名称 */
    anticoagulantName: string;
    antiTmplType?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1: string;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *普通肝素/阿加曲班* */
    first?: number | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它 */
    anticoagulantOther?: string | undefined;
    /** 无肝素原因 */
    nonReason?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 是否已经制定处方 */
    hasEnactBefore?: boolean;
    /** 是否已经确认处方 */
    hasCheckBefore?: boolean;
    /** 是否有处方 */
    hasPrescription?: boolean;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 透析记录标识 */
    cureRecordId?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 透析方式 */
    dialysisModeLabel?: string | undefined;
    /** 置换方式显示值 */
    rfmLabel?: string | undefined;
    /** 治疗状态显示值 */
    statusLabel?: string | undefined;
    /** 透前体重方式显示值 */
    beforeWeightModeLabel?: string | undefined;
    /** 透前血压测量位置显示值 */
    beforeBpPositionLabel?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 来源 （来源为门诊时显示门诊号，来源为住院时显示住院号） */
    sourceLabel?: string | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 大类名称 */
    classify1Label?: string | undefined;
    /** 小类名称 */
    classify2Label?: string | undefined;
    /** 首剂-单位名称 */
    firstUnitLabel?: string | undefined;
    /** 上次预脱 */
    lastUfg?: string | undefined;
    /** 上次实脱 */
    lastUfv?: string | undefined;
    /** 上次透前 */
    lastBeforeWeight?: string | undefined;
    /** 上次透后 */
    lastAfterWeight?: string | undefined;
    /** 上次偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    lastDeductionWeight?: string | undefined;
    /** 管床护士标识 */
    bedNurseId?: string | undefined;
    /** 管床护士姓名 */
    bedNurseName?: string | undefined;
    /** 通路类型 */
    patientVascularAccessType?: string | undefined;
    /** 长期医嘱 */
    daLongterm?: PatientDaLongtermView[] | undefined;
    /** 临时医嘱 */
    daTemporary?: PatientDaTemporaryView[] | undefined;
    /** 透析医嘱 */
    cureDa?: CureDaView[] | undefined;
    /** 费用组套 */
    cureCostGroups?: CureCostGroupView[] | undefined;
    /** 抗凝剂药品 */
    cureRecordAnticoagulantDrugs?: CureRecordAnticoagulantDrugView[] | undefined;
    /** 透析区间排序 */
    sequenceDialysis?: number;
    /** 床位排序 */
    sequenceBed?: number;
    /** 班次排序 */
    sequenceShift?: number;
    /** 是否单超0,1 */
    iuf?: number;
    /** 是否单超0,1 */
    iufLabel?: string | undefined;
    /** 单超方式 */
    iufMode?: string | undefined;
    /** 单超时间 */
    iufHour?: number | undefined;
    /** 单超量 */
    iufValue?: number | undefined;
    /** 单超开始时间 */
    iufStartTime?: dayjs.Dayjs | undefined;
    punctureMethod?: string | undefined;
    punctureMethodLabel?: string | undefined;
    /** 置管护士标识 */
    placementNurseId?: string | undefined;
    /** 置管护士姓名 */
    placementNurseName?: string | undefined;
    /** 质控护士标识 */
    qualityNurseId?: string | undefined;
    /** 质控护士姓名 */
    qualityNurseName?: string | undefined;
    /** 穿刺护士标识 */
    punctureNurseId?: string | undefined;
    /** 穿刺护士姓名 */
    punctureNurseName?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 透析治疗频次 *1次/周;2次/周;3次/周;4次/周;5次/周;6次/周;7次/周;3次/2周;5次/2周;7次/2周* */
    dialysisFrequency?: string | undefined;
    /** 自定义字段 */
    cureRecordFieldItems?: CureRecordFieldItemBase[] | undefined;
}

/** Reponse */
export class PrescriptionCureBeforeViewResult implements IPrescriptionCureBeforeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PrescriptionCureBeforeView[] | undefined;

    constructor(data?: IPrescriptionCureBeforeViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PrescriptionCureBeforeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PrescriptionCureBeforeViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PrescriptionCureBeforeViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPrescriptionCureBeforeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PrescriptionCureBeforeView[] | undefined;
}

/** Reponse */
export class PrescriptionCureBeforeViewResultEntry implements IPrescriptionCureBeforeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PrescriptionCureBeforeView;

    constructor(data?: IPrescriptionCureBeforeViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PrescriptionCureBeforeView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PrescriptionCureBeforeViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PrescriptionCureBeforeViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPrescriptionCureBeforeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PrescriptionCureBeforeView;
}

/** 打印内容 */
export class PrintRecordView implements IPrintRecordView {
    /** 透析记录标识 */
    id?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 透析区间 */
    dialysisAreaName?: string | undefined;
    /** 透析方式 */
    dialysisModeLabel?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 干体重 *kg */
    bestWeight?: number | undefined;
    /** 偏移量调整 */
    deductionWeight?: number | undefined;
    /** 透前体重 */
    beforeWeight?: number | undefined;
    /** 目标脱水量 */
    ufg?: number | undefined;
    /** 透后体重 */
    afterWeight?: number | undefined;
    /** 实际脱水量 */
    ufv?: number | undefined;
    /** 最后一次体重(算法改变，接口默认填 0) */
    lastWeight?: number;
    /** 透前收缩压 */
    beforeSbp?: number | undefined;
    /** 透前舒张压 */
    beforeDbp?: number | undefined;
    /** 透前脉搏 */
    beforePulse?: number | undefined;
    /** 透后收缩压 */
    afterSbp?: number | undefined;
    /** 透后舒张压 */
    afterDbp?: number | undefined;
    /** 透后脉搏 */
    afterPulse?: number | undefined;
    /** 透析状态：透前(up)、透后(down) */
    status?: string | undefined;
    /** 透析时长 */
    duration?: string | undefined;
    /** 抗凝剂 */
    anticoagulantName?: string | undefined;
    /** 抗凝剂剂量 */
    anticoagulantDose?: string | undefined;
    /** 血流量 */
    bloodFlowRate?: number | undefined;
    /** 透析器 */
    dialyzer?: string | undefined;
    /** 血路管 */
    xlg?: string | undefined;
    /** 透析液流量 */
    dialysateFlowRate?: number | undefined;
    /** 透析液K */
    k?: number | undefined;
    /** 透析液Na */
    na?: number | undefined;
    /** 透析液Ca */
    ca?: number | undefined;
    /** 置换液量 */
    rfv?: number | undefined;
    /** 医嘱 */
    orders?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    cureRecordId?: string | undefined;
    isPrint?: number | undefined;
    dialysisDate?: dayjs.Dayjs;
    isEnact?: boolean;

    constructor(data?: IPrintRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientName = _data["patientName"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.shiftName = _data["shiftName"];
            this.bedName = _data["bedName"];
            this.bestWeight = _data["bestWeight"];
            this.deductionWeight = _data["deductionWeight"];
            this.beforeWeight = _data["beforeWeight"];
            this.ufg = _data["ufg"];
            this.afterWeight = _data["afterWeight"];
            this.ufv = _data["ufv"];
            this.lastWeight = _data["lastWeight"];
            this.beforeSbp = _data["beforeSbp"];
            this.beforeDbp = _data["beforeDbp"];
            this.beforePulse = _data["beforePulse"];
            this.afterSbp = _data["afterSbp"];
            this.afterDbp = _data["afterDbp"];
            this.afterPulse = _data["afterPulse"];
            this.status = _data["status"];
            this.duration = _data["duration"];
            this.anticoagulantName = _data["anticoagulantName"];
            this.anticoagulantDose = _data["anticoagulantDose"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.dialyzer = _data["dialyzer"];
            this.xlg = _data["xlg"];
            this.dialysateFlowRate = _data["dialysateFlowRate"];
            this.k = _data["k"];
            this.na = _data["na"];
            this.ca = _data["ca"];
            this.rfv = _data["rfv"];
            this.orders = _data["orders"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.cureRecordId = _data["cureRecordId"];
            this.isPrint = _data["isPrint"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.isEnact = _data["isEnact"];
        }
    }

    static fromJS(data: any): PrintRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new PrintRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientName"] = this.patientName;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["shiftName"] = this.shiftName;
        data["bedName"] = this.bedName;
        data["bestWeight"] = this.bestWeight;
        data["deductionWeight"] = this.deductionWeight;
        data["beforeWeight"] = this.beforeWeight;
        data["ufg"] = this.ufg;
        data["afterWeight"] = this.afterWeight;
        data["ufv"] = this.ufv;
        data["lastWeight"] = this.lastWeight;
        data["beforeSbp"] = this.beforeSbp;
        data["beforeDbp"] = this.beforeDbp;
        data["beforePulse"] = this.beforePulse;
        data["afterSbp"] = this.afterSbp;
        data["afterDbp"] = this.afterDbp;
        data["afterPulse"] = this.afterPulse;
        data["status"] = this.status;
        data["duration"] = this.duration;
        data["anticoagulantName"] = this.anticoagulantName;
        data["anticoagulantDose"] = this.anticoagulantDose;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["dialyzer"] = this.dialyzer;
        data["xlg"] = this.xlg;
        data["dialysateFlowRate"] = this.dialysateFlowRate;
        data["k"] = this.k;
        data["na"] = this.na;
        data["ca"] = this.ca;
        data["rfv"] = this.rfv;
        data["orders"] = this.orders;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["cureRecordId"] = this.cureRecordId;
        data["isPrint"] = this.isPrint;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["isEnact"] = this.isEnact;
        return data;
    }
}

/** 打印内容 */
export interface IPrintRecordView {
    /** 透析记录标识 */
    id?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 透析区间 */
    dialysisAreaName?: string | undefined;
    /** 透析方式 */
    dialysisModeLabel?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 干体重 *kg */
    bestWeight?: number | undefined;
    /** 偏移量调整 */
    deductionWeight?: number | undefined;
    /** 透前体重 */
    beforeWeight?: number | undefined;
    /** 目标脱水量 */
    ufg?: number | undefined;
    /** 透后体重 */
    afterWeight?: number | undefined;
    /** 实际脱水量 */
    ufv?: number | undefined;
    /** 最后一次体重(算法改变，接口默认填 0) */
    lastWeight?: number;
    /** 透前收缩压 */
    beforeSbp?: number | undefined;
    /** 透前舒张压 */
    beforeDbp?: number | undefined;
    /** 透前脉搏 */
    beforePulse?: number | undefined;
    /** 透后收缩压 */
    afterSbp?: number | undefined;
    /** 透后舒张压 */
    afterDbp?: number | undefined;
    /** 透后脉搏 */
    afterPulse?: number | undefined;
    /** 透析状态：透前(up)、透后(down) */
    status?: string | undefined;
    /** 透析时长 */
    duration?: string | undefined;
    /** 抗凝剂 */
    anticoagulantName?: string | undefined;
    /** 抗凝剂剂量 */
    anticoagulantDose?: string | undefined;
    /** 血流量 */
    bloodFlowRate?: number | undefined;
    /** 透析器 */
    dialyzer?: string | undefined;
    /** 血路管 */
    xlg?: string | undefined;
    /** 透析液流量 */
    dialysateFlowRate?: number | undefined;
    /** 透析液K */
    k?: number | undefined;
    /** 透析液Na */
    na?: number | undefined;
    /** 透析液Ca */
    ca?: number | undefined;
    /** 置换液量 */
    rfv?: number | undefined;
    /** 医嘱 */
    orders?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    cureRecordId?: string | undefined;
    isPrint?: number | undefined;
    dialysisDate?: dayjs.Dayjs;
    isEnact?: boolean;
}

/** Reponse */
export class PrintRecordViewResult implements IPrintRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PrintRecordView[] | undefined;

    constructor(data?: IPrintRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PrintRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PrintRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PrintRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPrintRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PrintRecordView[] | undefined;
}

/** Reponse */
export class Result implements IResult {
    /** 返回结果(true,false) */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 相关的链接地址 */
    url?: string | undefined;
    count?: number;
    /** 数据 */
    data?: any | undefined;

    constructor(data?: IResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.url = _data["url"];
            this.count = _data["count"];
            this.data = _data["data"];
        }
    }

    static fromJS(data: any): Result {
        data = typeof data === 'object' ? data : {};
        let result = new Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["url"] = this.url;
        data["count"] = this.count;
        data["data"] = this.data;
        return data;
    }
}

/** Reponse */
export interface IResult {
    /** 返回结果(true,false) */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 相关的链接地址 */
    url?: string | undefined;
    count?: number;
    /** 数据 */
    data?: any | undefined;
}

/** 费用项目 */
export class RoomRecordItem implements IRoomRecordItem {
    /** 耗材分类代码 */
    roomItemTypeCode?: string | undefined;
    /** [耗材标识](项目清单Id) */
    roomItemListId!: string;
    /** 耗材数量 */
    count!: number;
    /** 批号管理 */
    batchManage!: number;
    /** 编码 */
    code?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 耗材编码 */
    devBarCode?: string | undefined;
    /** 患者编号 */
    patientId?: string | undefined;
    /** 批次明细 */
    batchItems?: CureRecordConsumableItemView[] | undefined;

    constructor(data?: IRoomRecordItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemTypeCode = _data["roomItemTypeCode"];
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
            this.batchManage = _data["batchManage"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.devBarCode = _data["devBarCode"];
            this.patientId = _data["patientId"];
            if (Array.isArray(_data["batchItems"])) {
                this.batchItems = [] as any;
                for (let item of _data["batchItems"])
                    this.batchItems!.push(CureRecordConsumableItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomRecordItem {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemTypeCode"] = this.roomItemTypeCode;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        data["batchManage"] = this.batchManage;
        data["code"] = this.code;
        data["name"] = this.name;
        data["devBarCode"] = this.devBarCode;
        data["patientId"] = this.patientId;
        if (Array.isArray(this.batchItems)) {
            data["batchItems"] = [];
            for (let item of this.batchItems)
                data["batchItems"].push(item.toJSON());
        }
        return data;
    }
}

/** 费用项目 */
export interface IRoomRecordItem {
    /** 耗材分类代码 */
    roomItemTypeCode?: string | undefined;
    /** [耗材标识](项目清单Id) */
    roomItemListId: string;
    /** 耗材数量 */
    count: number;
    /** 批号管理 */
    batchManage: number;
    /** 编码 */
    code?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 耗材编码 */
    devBarCode?: string | undefined;
    /** 患者编号 */
    patientId?: string | undefined;
    /** 批次明细 */
    batchItems?: CureRecordConsumableItemView[] | undefined;
}

/** Reponse */
export class StringResultEntry implements IStringResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: string | undefined;

    constructor(data?: IStringResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"];
        }
    }

    static fromJS(data: any): StringResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new StringResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data;
        return data;
    }
}

/** Reponse */
export interface IStringResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: string | undefined;
}

export class SummaryCureAfterEditModel implements ISummaryCureAfterEditModel {
    /** 透析记录标识 */
    cureRecordId!: string;
    /** 小结内容 */
    content!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ISummaryCureAfterEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.content = _data["content"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): SummaryCureAfterEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new SummaryCureAfterEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["content"] = this.content;
        data["remark"] = this.remark;
        return data;
    }
}

export interface ISummaryCureAfterEditModel {
    /** 透析记录标识 */
    cureRecordId: string;
    /** 小结内容 */
    content: string;
    /** 备注 */
    remark?: string | undefined;
}

export class SummaryCureAfterView implements ISummaryCureAfterView {
    /** 透析记录标识 */
    cureRecordId!: string;
    /** 小结内容 */
    content!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 是否已经下机 */
    hasDown?: boolean;
    /** 是否已经透后小结 */
    hasSummary?: boolean;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 标识 */
    cureSummaryId?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** [记录人员标识](用户信息) */
    sysUserId?: string | undefined;
    /** 记录人员名称 */
    sysUserName?: string | undefined;
    /** 记录人员别名 */
    sysUserName2?: string | undefined;
    /** 记录人员全名 */
    sysUserNameFull?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISummaryCureAfterView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.content = _data["content"];
            this.remark = _data["remark"];
            this.timeOff = _data["timeOff"] ? dayjs(_data["timeOff"].toString()) : <any>undefined;
            this.hasDown = _data["hasDown"];
            this.hasSummary = _data["hasSummary"];
            this.patientId = _data["patientId"];
            this.cureSummaryId = _data["cureSummaryId"];
            this.sn = _data["sn"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.surnameCode = _data["surnameCode"];
            this.sysUserId = _data["sysUserId"];
            this.sysUserName = _data["sysUserName"];
            this.sysUserName2 = _data["sysUserName2"];
            this.sysUserNameFull = _data["sysUserNameFull"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SummaryCureAfterView {
        data = typeof data === 'object' ? data : {};
        let result = new SummaryCureAfterView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["content"] = this.content;
        data["remark"] = this.remark;
        data["timeOff"] = this.timeOff ? this.timeOff.toISOString() : <any>undefined;
        data["hasDown"] = this.hasDown;
        data["hasSummary"] = this.hasSummary;
        data["patientId"] = this.patientId;
        data["cureSummaryId"] = this.cureSummaryId;
        data["sn"] = this.sn;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["surnameCode"] = this.surnameCode;
        data["sysUserId"] = this.sysUserId;
        data["sysUserName"] = this.sysUserName;
        data["sysUserName2"] = this.sysUserName2;
        data["sysUserNameFull"] = this.sysUserNameFull;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface ISummaryCureAfterView {
    /** 透析记录标识 */
    cureRecordId: string;
    /** 小结内容 */
    content: string;
    /** 备注 */
    remark?: string | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 是否已经下机 */
    hasDown?: boolean;
    /** 是否已经透后小结 */
    hasSummary?: boolean;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 标识 */
    cureSummaryId?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** [记录人员标识](用户信息) */
    sysUserId?: string | undefined;
    /** 记录人员名称 */
    sysUserName?: string | undefined;
    /** 记录人员别名 */
    sysUserName2?: string | undefined;
    /** 记录人员全名 */
    sysUserNameFull?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class SummaryCureAfterViewResult implements ISummaryCureAfterViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SummaryCureAfterView[] | undefined;

    constructor(data?: ISummaryCureAfterViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SummaryCureAfterView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SummaryCureAfterViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SummaryCureAfterViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISummaryCureAfterViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SummaryCureAfterView[] | undefined;
}

/** Reponse */
export class SummaryCureAfterViewResultEntry implements ISummaryCureAfterViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SummaryCureAfterView;

    constructor(data?: ISummaryCureAfterViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SummaryCureAfterView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SummaryCureAfterViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SummaryCureAfterViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISummaryCureAfterViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SummaryCureAfterView;
}

/** 自定义表单数据 */
export class SysFormValueView implements ISysFormValueView {
    /** 名称 */
    name?: string | undefined;
    /** 键 */
    key?: string | undefined;
    /** 值 */
    value?: any | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 是否在透析记录单显示0,1 *只在透析记录单中评估内容自动生成场景下生效* */
    cureRecordShow?: number;

    constructor(data?: ISysFormValueView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.key = _data["key"];
            this.value = _data["value"];
            this.unit = _data["unit"];
            this.cureRecordShow = _data["cureRecordShow"];
        }
    }

    static fromJS(data: any): SysFormValueView {
        data = typeof data === 'object' ? data : {};
        let result = new SysFormValueView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["key"] = this.key;
        data["value"] = this.value;
        data["unit"] = this.unit;
        data["cureRecordShow"] = this.cureRecordShow;
        return data;
    }
}

/** 自定义表单数据 */
export interface ISysFormValueView {
    /** 名称 */
    name?: string | undefined;
    /** 键 */
    key?: string | undefined;
    /** 值 */
    value?: any | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 是否在透析记录单显示0,1 *只在透析记录单中评估内容自动生成场景下生效* */
    cureRecordShow?: number;
}

/** 透析室 */
export class SysHospitalArea implements ISysHospitalArea {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysHospitalArea) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.parentId = _data["parentId"];
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysHospitalArea {
        data = typeof data === 'object' ? data : {};
        let result = new SysHospitalArea();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["parentId"] = this.parentId;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析室 */
export interface ISysHospitalArea {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 常用模板 */
export class TmplCommon implements ITmplCommon {
    /** 标识 */
    id?: string | undefined;
    /** 大类 *病历模板,小结模板* */
    classify1?: string | undefined;
    /** 小类 */
    classify2?: string | undefined;
    /** 名称 *○同一个`classify_1/classify_2`下不允许重复* */
    name?: string | undefined;
    /** 是否常用 *0,1* */
    frequently?: number | undefined;
    /** 模板内容 */
    content?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ITmplCommon) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.classify1 = _data["classify1"];
            this.classify2 = _data["classify2"];
            this.name = _data["name"];
            this.frequently = _data["frequently"];
            this.content = _data["content"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): TmplCommon {
        data = typeof data === 'object' ? data : {};
        let result = new TmplCommon();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["classify1"] = this.classify1;
        data["classify2"] = this.classify2;
        data["name"] = this.name;
        data["frequently"] = this.frequently;
        data["content"] = this.content;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 常用模板 */
export interface ITmplCommon {
    /** 标识 */
    id?: string | undefined;
    /** 大类 *病历模板,小结模板* */
    classify1?: string | undefined;
    /** 小类 */
    classify2?: string | undefined;
    /** 名称 *○同一个`classify_1/classify_2`下不允许重复* */
    name?: string | undefined;
    /** 是否常用 *0,1* */
    frequently?: number | undefined;
    /** 模板内容 */
    content?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class TmplCommonResult implements ITmplCommonResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: TmplCommon[] | undefined;

    constructor(data?: ITmplCommonResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(TmplCommon.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TmplCommonResult {
        data = typeof data === 'object' ? data : {};
        let result = new TmplCommonResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ITmplCommonResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: TmplCommon[] | undefined;
}

/** 交叉核对view */
export class VerifyCureMiddleView implements IVerifyCureMiddleView {
    /** 来源 （来源为门诊时显示门诊号，来源为住院时显示住院号） */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 穿刺方法 `DIC.DIALYSIS.PUNCTURE.METHOD` */
    punctureMethod?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode!: string;
    /** 设定透析时长 *分钟* */
    dialysisDurationSet!: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路Id) */
    patientVascularAccessId!: string;
    /** 血管通路 */
    patientVascularAccessName!: string;
    /** [血管通路](患者血管通路Id) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessType?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessName?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换液速度 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *ml Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 治疗状态 `DIC.DIALYSIS.STATUS` *已签到,上机准备,治疗中,已下机,已结束* */
    status!: string;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *kg Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    beforeBpPosition?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前体温 *℃* */
    onTemp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 医生制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 方案是否通过0,1 */
    check?: number | undefined;
    /** 护士确认方案时间 */
    timeCheckNurse?: dayjs.Dayjs | undefined;
    /** 制定方案医生标识 */
    enactDoctorId?: string | undefined;
    /** 制定方案医生姓名 */
    enactDoctorName?: string | undefined;
    /** 确认方案护士标识 */
    checkNurseId?: string | undefined;
    /** 确认方案护士姓名 */
    checkNurseName?: string | undefined;
    /** 透析液名称 */
    dialysateName!: string;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
    /** 抗凝剂名称 */
    anticoagulantName!: string;
    /** 抗凝剂模版类型 */
    antiTmplType?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1!: string;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *枸橼酸钠>浓度* */
    first?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加量-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它 */
    anticoagulantOther?: string | undefined;
    /** 无肝素原因 */
    nonReason?: string | undefined;
    /** 来源显示值 */
    sourceLabel?: string | undefined;
    /** 穿刺护士标识 */
    punctureNurseId?: string | undefined;
    /** 穿刺护士姓名 */
    punctureNurseName?: string | undefined;
    /** 穿刺方法显示值 */
    punctureMethodLabel?: string | undefined;
    /** 交叉核对护士标识 */
    verifyNurseId?: string | undefined;
    /** 交叉核对护士姓名 */
    verifyNurseName?: string | undefined;
    /** 交叉核对时间 */
    timeVerify?: dayjs.Dayjs | undefined;
    /** 是否已经核对 */
    hasVerify?: boolean;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 透析记录标识 */
    cureRecordId?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 透析方式 */
    dialysisModeLabel?: string | undefined;
    /** 置换方式显示值 */
    rfmLabel?: string | undefined;
    /** 治疗状态显示值 */
    statusLabel?: string | undefined;
    /** 透前体重方式显示值 */
    beforeWeightModeLabel?: string | undefined;
    /** 透前血压测量位置显示值 */
    beforeBpPositionLabel?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 血管通路类型 */
    patientVascularAccessType?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 大类名称 */
    classify1Label?: string | undefined;
    /** 小类名称 */
    classify2Label?: string | undefined;
    /** 首剂-单位名称 */
    firstUnitLabel?: string | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 费用组套 */
    cureCostGroups?: CureCostGroupView[] | undefined;
    recordLogView?: CureRecordLogView;
    /** 是否已经交叉核对(true 已核对,false 未核对) */
    isChecked?: boolean;
    /** 是否单超0,1 */
    iuf?: number;
    /** 单超方式 */
    iufMode?: string | undefined;
    /** 单超时间 */
    iufHour?: number | undefined;
    /** 单超量 */
    iufValue?: number | undefined;
    /** 自定义字段 */
    cureRecordFieldItems?: CureRecordFieldItemBase[] | undefined;

    constructor(data?: IVerifyCureMiddleView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.source = _data["source"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.punctureMethod = _data["punctureMethod"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisDurationSet = _data["dialysisDurationSet"];
            this.bestWeight = _data["bestWeight"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.patientOtherVascularAccessId = _data["patientOtherVascularAccessId"];
            this.patientOtherVascularAccessType = _data["patientOtherVascularAccessType"];
            this.patientOtherVascularAccessName = _data["patientOtherVascularAccessName"];
            this.rfm = _data["rfm"];
            this.rfr = _data["rfr"];
            this.rfv = _data["rfv"];
            this.status = _data["status"];
            this.beforeWeight = _data["beforeWeight"];
            this.beforeWeightMode = _data["beforeWeightMode"];
            this.deductionWeight = _data["deductionWeight"];
            this.ufg = _data["ufg"];
            this.beforeBpPosition = _data["beforeBpPosition"];
            this.beforeSbp = _data["beforeSbp"];
            this.beforeDbp = _data["beforeDbp"];
            this.onTemp = _data["onTemp"];
            this.beforePulse = _data["beforePulse"];
            this.timeEnactDoctor = _data["timeEnactDoctor"] ? dayjs(_data["timeEnactDoctor"].toString()) : <any>undefined;
            this.check = _data["check"];
            this.timeCheckNurse = _data["timeCheckNurse"] ? dayjs(_data["timeCheckNurse"].toString()) : <any>undefined;
            this.enactDoctorId = _data["enactDoctorId"];
            this.enactDoctorName = _data["enactDoctorName"];
            this.checkNurseId = _data["checkNurseId"];
            this.checkNurseName = _data["checkNurseName"];
            this.dialysateName = _data["dialysateName"];
            this.flowRate = _data["flowRate"];
            this.temp = _data["temp"];
            this.cond = _data["cond"];
            this.k = _data["k"];
            this.ca = _data["ca"];
            this.na = _data["na"];
            this.hco = _data["hco"];
            this.glucose = _data["glucose"];
            this.anticoagulantName = _data["anticoagulantName"];
            this.antiTmplType = _data["antiTmplType"];
            this.classify1 = _data["classify1"];
            this.classify2 = _data["classify2"];
            this.first = _data["first"];
            this.firstUnit = _data["firstUnit"];
            this.appendRate = _data["appendRate"];
            this.appendRateUnit = _data["appendRateUnit"];
            this.appendTime = _data["appendTime"];
            this.append = _data["append"];
            this.appendUnit = _data["appendUnit"];
            this.total = _data["total"];
            this.totalUnit = _data["totalUnit"];
            this.anticoagulantOther = _data["anticoagulantOther"];
            this.nonReason = _data["nonReason"];
            this.sourceLabel = _data["sourceLabel"];
            this.punctureNurseId = _data["punctureNurseId"];
            this.punctureNurseName = _data["punctureNurseName"];
            this.punctureMethodLabel = _data["punctureMethodLabel"];
            this.verifyNurseId = _data["verifyNurseId"];
            this.verifyNurseName = _data["verifyNurseName"];
            this.timeVerify = _data["timeVerify"] ? dayjs(_data["timeVerify"].toString()) : <any>undefined;
            this.hasVerify = _data["hasVerify"];
            this.sn = _data["sn"];
            this.patientId = _data["patientId"];
            this.surnameCode = _data["surnameCode"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisMachineModel = _data["dialysisMachineModel"];
            this.dialysisMachineNo = _data["dialysisMachineNo"];
            this.cureRecordId = _data["cureRecordId"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.rfmLabel = _data["rfmLabel"];
            this.statusLabel = _data["statusLabel"];
            this.beforeWeightModeLabel = _data["beforeWeightModeLabel"];
            this.beforeBpPositionLabel = _data["beforeBpPositionLabel"];
            this.age = _data["age"];
            this.ward = _data["ward"];
            this.bed = _data["bed"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            this.suggestion = _data["suggestion"];
            this.patientVascularAccessType = _data["patientVascularAccessType"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.classify1Label = _data["classify1Label"];
            this.classify2Label = _data["classify2Label"];
            this.firstUnitLabel = _data["firstUnitLabel"];
            this.concentration = _data["concentration"];
            if (Array.isArray(_data["cureCostGroups"])) {
                this.cureCostGroups = [] as any;
                for (let item of _data["cureCostGroups"])
                    this.cureCostGroups!.push(CureCostGroupView.fromJS(item));
            }
            this.recordLogView = _data["recordLogView"] ? CureRecordLogView.fromJS(_data["recordLogView"]) : <any>undefined;
            this.isChecked = _data["isChecked"];
            this.iuf = _data["iuf"];
            this.iufMode = _data["iufMode"];
            this.iufHour = _data["iufHour"];
            this.iufValue = _data["iufValue"];
            if (Array.isArray(_data["cureRecordFieldItems"])) {
                this.cureRecordFieldItems = [] as any;
                for (let item of _data["cureRecordFieldItems"])
                    this.cureRecordFieldItems!.push(CureRecordFieldItemBase.fromJS(item));
            }
        }
    }

    static fromJS(data: any): VerifyCureMiddleView {
        data = typeof data === 'object' ? data : {};
        let result = new VerifyCureMiddleView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["source"] = this.source;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["punctureMethod"] = this.punctureMethod;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisDurationSet"] = this.dialysisDurationSet;
        data["bestWeight"] = this.bestWeight;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["patientOtherVascularAccessId"] = this.patientOtherVascularAccessId;
        data["patientOtherVascularAccessType"] = this.patientOtherVascularAccessType;
        data["patientOtherVascularAccessName"] = this.patientOtherVascularAccessName;
        data["rfm"] = this.rfm;
        data["rfr"] = this.rfr;
        data["rfv"] = this.rfv;
        data["status"] = this.status;
        data["beforeWeight"] = this.beforeWeight;
        data["beforeWeightMode"] = this.beforeWeightMode;
        data["deductionWeight"] = this.deductionWeight;
        data["ufg"] = this.ufg;
        data["beforeBpPosition"] = this.beforeBpPosition;
        data["beforeSbp"] = this.beforeSbp;
        data["beforeDbp"] = this.beforeDbp;
        data["onTemp"] = this.onTemp;
        data["beforePulse"] = this.beforePulse;
        data["timeEnactDoctor"] = this.timeEnactDoctor ? this.timeEnactDoctor.toISOString() : <any>undefined;
        data["check"] = this.check;
        data["timeCheckNurse"] = this.timeCheckNurse ? this.timeCheckNurse.toISOString() : <any>undefined;
        data["enactDoctorId"] = this.enactDoctorId;
        data["enactDoctorName"] = this.enactDoctorName;
        data["checkNurseId"] = this.checkNurseId;
        data["checkNurseName"] = this.checkNurseName;
        data["dialysateName"] = this.dialysateName;
        data["flowRate"] = this.flowRate;
        data["temp"] = this.temp;
        data["cond"] = this.cond;
        data["k"] = this.k;
        data["ca"] = this.ca;
        data["na"] = this.na;
        data["hco"] = this.hco;
        data["glucose"] = this.glucose;
        data["anticoagulantName"] = this.anticoagulantName;
        data["antiTmplType"] = this.antiTmplType;
        data["classify1"] = this.classify1;
        data["classify2"] = this.classify2;
        data["first"] = this.first;
        data["firstUnit"] = this.firstUnit;
        data["appendRate"] = this.appendRate;
        data["appendRateUnit"] = this.appendRateUnit;
        data["appendTime"] = this.appendTime;
        data["append"] = this.append;
        data["appendUnit"] = this.appendUnit;
        data["total"] = this.total;
        data["totalUnit"] = this.totalUnit;
        data["anticoagulantOther"] = this.anticoagulantOther;
        data["nonReason"] = this.nonReason;
        data["sourceLabel"] = this.sourceLabel;
        data["punctureNurseId"] = this.punctureNurseId;
        data["punctureNurseName"] = this.punctureNurseName;
        data["punctureMethodLabel"] = this.punctureMethodLabel;
        data["verifyNurseId"] = this.verifyNurseId;
        data["verifyNurseName"] = this.verifyNurseName;
        data["timeVerify"] = this.timeVerify ? this.timeVerify.toISOString() : <any>undefined;
        data["hasVerify"] = this.hasVerify;
        data["sn"] = this.sn;
        data["patientId"] = this.patientId;
        data["surnameCode"] = this.surnameCode;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisMachineModel"] = this.dialysisMachineModel;
        data["dialysisMachineNo"] = this.dialysisMachineNo;
        data["cureRecordId"] = this.cureRecordId;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["rfmLabel"] = this.rfmLabel;
        data["statusLabel"] = this.statusLabel;
        data["beforeWeightModeLabel"] = this.beforeWeightModeLabel;
        data["beforeBpPositionLabel"] = this.beforeBpPositionLabel;
        data["age"] = this.age;
        data["ward"] = this.ward;
        data["bed"] = this.bed;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        data["suggestion"] = this.suggestion;
        data["patientVascularAccessType"] = this.patientVascularAccessType;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["classify1Label"] = this.classify1Label;
        data["classify2Label"] = this.classify2Label;
        data["firstUnitLabel"] = this.firstUnitLabel;
        data["concentration"] = this.concentration;
        if (Array.isArray(this.cureCostGroups)) {
            data["cureCostGroups"] = [];
            for (let item of this.cureCostGroups)
                data["cureCostGroups"].push(item.toJSON());
        }
        data["recordLogView"] = this.recordLogView ? this.recordLogView.toJSON() : <any>undefined;
        data["isChecked"] = this.isChecked;
        data["iuf"] = this.iuf;
        data["iufMode"] = this.iufMode;
        data["iufHour"] = this.iufHour;
        data["iufValue"] = this.iufValue;
        if (Array.isArray(this.cureRecordFieldItems)) {
            data["cureRecordFieldItems"] = [];
            for (let item of this.cureRecordFieldItems)
                data["cureRecordFieldItems"].push(item.toJSON());
        }
        return data;
    }
}

/** 交叉核对view */
export interface IVerifyCureMiddleView {
    /** 来源 （来源为门诊时显示门诊号，来源为住院时显示住院号） */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 穿刺方法 `DIC.DIALYSIS.PUNCTURE.METHOD` */
    punctureMethod?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode: string;
    /** 设定透析时长 *分钟* */
    dialysisDurationSet: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路Id) */
    patientVascularAccessId: string;
    /** 血管通路 */
    patientVascularAccessName: string;
    /** [血管通路](患者血管通路Id) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessType?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessName?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换液速度 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *ml Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 治疗状态 `DIC.DIALYSIS.STATUS` *已签到,上机准备,治疗中,已下机,已结束* */
    status: string;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *kg Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    beforeBpPosition?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前体温 *℃* */
    onTemp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 医生制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 方案是否通过0,1 */
    check?: number | undefined;
    /** 护士确认方案时间 */
    timeCheckNurse?: dayjs.Dayjs | undefined;
    /** 制定方案医生标识 */
    enactDoctorId?: string | undefined;
    /** 制定方案医生姓名 */
    enactDoctorName?: string | undefined;
    /** 确认方案护士标识 */
    checkNurseId?: string | undefined;
    /** 确认方案护士姓名 */
    checkNurseName?: string | undefined;
    /** 透析液名称 */
    dialysateName: string;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
    /** 抗凝剂名称 */
    anticoagulantName: string;
    /** 抗凝剂模版类型 */
    antiTmplType?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1: string;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *枸橼酸钠>浓度* */
    first?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加量-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它 */
    anticoagulantOther?: string | undefined;
    /** 无肝素原因 */
    nonReason?: string | undefined;
    /** 来源显示值 */
    sourceLabel?: string | undefined;
    /** 穿刺护士标识 */
    punctureNurseId?: string | undefined;
    /** 穿刺护士姓名 */
    punctureNurseName?: string | undefined;
    /** 穿刺方法显示值 */
    punctureMethodLabel?: string | undefined;
    /** 交叉核对护士标识 */
    verifyNurseId?: string | undefined;
    /** 交叉核对护士姓名 */
    verifyNurseName?: string | undefined;
    /** 交叉核对时间 */
    timeVerify?: dayjs.Dayjs | undefined;
    /** 是否已经核对 */
    hasVerify?: boolean;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 透析记录标识 */
    cureRecordId?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 透析方式 */
    dialysisModeLabel?: string | undefined;
    /** 置换方式显示值 */
    rfmLabel?: string | undefined;
    /** 治疗状态显示值 */
    statusLabel?: string | undefined;
    /** 透前体重方式显示值 */
    beforeWeightModeLabel?: string | undefined;
    /** 透前血压测量位置显示值 */
    beforeBpPositionLabel?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 血管通路类型 */
    patientVascularAccessType?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 大类名称 */
    classify1Label?: string | undefined;
    /** 小类名称 */
    classify2Label?: string | undefined;
    /** 首剂-单位名称 */
    firstUnitLabel?: string | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 费用组套 */
    cureCostGroups?: CureCostGroupView[] | undefined;
    recordLogView?: CureRecordLogView;
    /** 是否已经交叉核对(true 已核对,false 未核对) */
    isChecked?: boolean;
    /** 是否单超0,1 */
    iuf?: number;
    /** 单超方式 */
    iufMode?: string | undefined;
    /** 单超时间 */
    iufHour?: number | undefined;
    /** 单超量 */
    iufValue?: number | undefined;
    /** 自定义字段 */
    cureRecordFieldItems?: CureRecordFieldItemBase[] | undefined;
}

/** Reponse */
export class VerifyCureMiddleViewResultEntry implements IVerifyCureMiddleViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: VerifyCureMiddleView;

    constructor(data?: IVerifyCureMiddleViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? VerifyCureMiddleView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): VerifyCureMiddleViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new VerifyCureMiddleViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IVerifyCureMiddleViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: VerifyCureMiddleView;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}