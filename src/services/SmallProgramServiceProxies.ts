/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import {ServiceProxyBase} from './ServiceProxyBase'
import axios, { AxiosError, type AxiosInstance, type AxiosRequestConfig, type AxiosResponse, type CancelToken } from 'axios';

import dayjs from 'dayjs';

export class SmallProgramServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 医院信息
     * @param filter (optional) 查询条件
     * @return Success
     */
    hospital(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysHospitalResult> {
        let url_ = this.baseUrl + "/api/SmallProgram/Hospital";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospital(_response));
        });
    }

    protected processHospital(response: AxiosResponse): Promise<SysHospitalResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysHospitalResult.fromJS(resultData200);
            return Promise.resolve<SysHospitalResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysHospitalResult>(null as any);
    }

    /**
     * 药品信息
     * @param filter (optional) 查询条件
     * @return Success
     */
    roomList(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<InventoryViewResult> {
        let url_ = this.baseUrl + "/api/SmallProgram/RoomList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomList(_response));
        });
    }

    protected processRoomList(response: AxiosResponse): Promise<InventoryViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = InventoryViewResult.fromJS(resultData200);
            return Promise.resolve<InventoryViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<InventoryViewResult>(null as any);
    }

    /**
     * 患者医嘱信息 -- 长期医嘱
     * @param filter (optional) 查询条件
     * @param key (optional) 名称/拼音码/五笔码 *选填
     * @return Success
     */
    patientDaLongterm(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientDaLongtermViewResult> {
        let url_ = this.baseUrl + "/api/SmallProgram/PatientDaLongterm?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDaLongterm(_response));
        });
    }

    protected processPatientDaLongterm(response: AxiosResponse): Promise<PatientDaLongtermViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDaLongtermViewResult.fromJS(resultData200);
            return Promise.resolve<PatientDaLongtermViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDaLongtermViewResult>(null as any);
    }

    /**
     * 患者医嘱信息 -- 临时医嘱
     * @param filter (optional) 查询条件
     * @param key (optional) 名称/拼音码/五笔码 *选填
     * @return Success
     */
    patientDaTemporary(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientDaTemporaryViewResult> {
        let url_ = this.baseUrl + "/api/SmallProgram/PatientDaTemporary?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDaTemporary(_response));
        });
    }

    protected processPatientDaTemporary(response: AxiosResponse): Promise<PatientDaTemporaryViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDaTemporaryViewResult.fromJS(resultData200);
            return Promise.resolve<PatientDaTemporaryViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDaTemporaryViewResult>(null as any);
    }

    /**
     * 患者医嘱信息 -- 透析医嘱
     * @param startDate (optional) 开始时间(yyyy-MM-dd)
     * @param endDate (optional) 结束时间(yyyy-MM-dd)
     * @param usage (optional)
     * @param filter (optional) 查询条件
     * @param key (optional) 名称/拼音码/五笔码 *选填
     * @return Success
     */
    patientDaCure(startDate: string | undefined, endDate: string | undefined, usage: string | undefined, filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureDaViewResult> {
        let url_ = this.baseUrl + "/api/SmallProgram/PatientDaCure?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (usage === null)
            throw new Error("The parameter 'usage' cannot be null.");
        else if (usage !== undefined)
            url_ += "usage=" + encodeURIComponent("" + usage) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDaCure(_response));
        });
    }

    protected processPatientDaCure(response: AxiosResponse): Promise<CureDaViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDaViewResult.fromJS(resultData200);
            return Promise.resolve<CureDaViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDaViewResult>(null as any);
    }

    /**
     * 患者检验项编码 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 本系统编码 *选填
     * @return Success
     */
    mapLis(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<MapLisItemIhdisViewResult> {
        let url_ = this.baseUrl + "/api/SmallProgram/MapLis?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMapLis(_response));
        });
    }

    protected processMapLis(response: AxiosResponse): Promise<MapLisItemIhdisViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisItemIhdisViewResult.fromJS(resultData200);
            return Promise.resolve<MapLisItemIhdisViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisItemIhdisViewResult>(null as any);
    }

    /**
     * 患者检验大类 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    mapLisType(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<MapLisTypeResult> {
        let url_ = this.baseUrl + "/api/SmallProgram/MapLisType";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMapLisType(_response));
        });
    }

    protected processMapLisType(response: AxiosResponse): Promise<MapLisTypeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisTypeResult.fromJS(resultData200);
            return Promise.resolve<MapLisTypeResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisTypeResult>(null as any);
    }

    /**
     * 患者检验小项 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    mapLisItem(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<MapLisItemResult> {
        let url_ = this.baseUrl + "/api/SmallProgram/MapLisItem";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMapLisItem(_response));
        });
    }

    protected processMapLisItem(response: AxiosResponse): Promise<MapLisItemResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisItemResult.fromJS(resultData200);
            return Promise.resolve<MapLisItemResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisItemResult>(null as any);
    }

    /**
     * 患者检验报告信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    patientLisReport(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientLisReportViewResult> {
        let url_ = this.baseUrl + "/api/SmallProgram/PatientLisReport";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientLisReport(_response));
        });
    }

    protected processPatientLisReport(response: AxiosResponse): Promise<PatientLisReportViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientLisReportViewResult.fromJS(resultData200);
            return Promise.resolve<PatientLisReportViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientLisReportViewResult>(null as any);
    }

    /**
     * 患者检查报告信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    patientPacsReport(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientPacsReportViewResult> {
        let url_ = this.baseUrl + "/api/SmallProgram/PatientPacsReport";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientPacsReport(_response));
        });
    }

    protected processPatientPacsReport(response: AxiosResponse): Promise<PatientPacsReportViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientPacsReportViewResult.fromJS(resultData200);
            return Promise.resolve<PatientPacsReportViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientPacsReportViewResult>(null as any);
    }

    /**
     * 患者透析记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/别名/五笔码/拼音码 *选填
     * @return Success
     */
    cureRecord(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordViewResult> {
        let url_ = this.baseUrl + "/api/SmallProgram/CureRecord?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecord(_response));
        });
    }

    protected processCureRecord(response: AxiosResponse): Promise<CureRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordViewResult.fromJS(resultData200);
            return Promise.resolve<CureRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordViewResult>(null as any);
    }

    /**
     * 患者口服用药
     * @param patientId 患者标识
     * @param filter (optional)
     * @return Success
     */
    orally(patientId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureDaCustomViewResult> {
        let url_ = this.baseUrl + "/api/SmallProgram/Orally/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processOrally(_response));
        });
    }

    protected processOrally(response: AxiosResponse): Promise<CureDaCustomViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDaCustomViewResult.fromJS(resultData200);
            return Promise.resolve<CureDaCustomViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDaCustomViewResult>(null as any);
    }

    /**
     * 患者透析排床 -- 根据日期查询数据
     * @param date (optional) 一周的起始日期(例如： 2019-10-14~2019-10-20)
     * @return Success
     */
    cureSchedule(date: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureScheduleDetailViewResultEntry> {
        let url_ = this.baseUrl + "/api/SmallProgram/CureSchedule?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureSchedule(_response));
        });
    }

    protected processCureSchedule(response: AxiosResponse): Promise<CureScheduleDetailViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureScheduleDetailViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureScheduleDetailViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureScheduleDetailViewResultEntry>(null as any);
    }

    /**
     * 患者既往病史 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    patientPmh(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientPmhViewResult> {
        let url_ = this.baseUrl + "/api/SmallProgram/PatientPmh";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientPmh(_response));
        });
    }

    protected processPatientPmh(response: AxiosResponse): Promise<PatientPmhViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientPmhViewResult.fromJS(resultData200);
            return Promise.resolve<PatientPmhViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientPmhViewResult>(null as any);
    }

    /**
     * 患者体格检查 -- 血压记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param patientId (optional) 患者标识 *可选
     * @return Success
     */
    bloodPressureGET(filter: string | undefined, patientId: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientBloodPressureViewResult> {
        let url_ = this.baseUrl + "/api/SmallProgram/PatientMedical/BloodPressure?";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBloodPressureGET(_response));
        });
    }

    protected processBloodPressureGET(response: AxiosResponse): Promise<PatientBloodPressureViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientBloodPressureViewResult.fromJS(resultData200);
            return Promise.resolve<PatientBloodPressureViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientBloodPressureViewResult>(null as any);
    }

    /**
     * 患者体格检查 -- 血压记录 -- 新增
     * @param body (optional)
     * @return Success
     */
    bloodPressurePOST(body: PatientBloodPressureViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SmallProgram/PatientMedical/BloodPressure";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBloodPressurePOST(_response));
        });
    }

    protected processBloodPressurePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者体格检查 -- 体重记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param patientId (optional) 患者标识 *可选
     * @return Success
     */
    weightGET(filter: string | undefined, patientId: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientWeightViewResult> {
        let url_ = this.baseUrl + "/api/SmallProgram/PatientMedical/Weight?";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processWeightGET(_response));
        });
    }

    protected processWeightGET(response: AxiosResponse): Promise<PatientWeightViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientWeightViewResult.fromJS(resultData200);
            return Promise.resolve<PatientWeightViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientWeightViewResult>(null as any);
    }

    /**
     * 患者体格检查 -- 体重记录 -- 新增
     * @param body (optional)
     * @return Success
     */
    weightPOST(body: PatientWeightViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SmallProgram/PatientMedical/Weight";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processWeightPOST(_response));
        });
    }

    protected processWeightPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者体格检查 -- 干体重记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    weightBestGET(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientWeightBestResult> {
        let url_ = this.baseUrl + "/api/SmallProgram/PatientMedical/WeightBest";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processWeightBestGET(_response));
        });
    }

    protected processWeightBestGET(response: AxiosResponse): Promise<PatientWeightBestResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientWeightBestResult.fromJS(resultData200);
            return Promise.resolve<PatientWeightBestResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientWeightBestResult>(null as any);
    }

    /**
     * 患者体格检查 -- 干体重记录 -- 根据条件查询数据
     * @param body (optional)
     * @return Success
     */
    weightBestPOST(body: PatientWeightBestViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SmallProgram/PatientMedical/WeightBest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processWeightBestPOST(_response));
        });
    }

    protected processWeightBestPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者血管通路 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/拼音码/五笔码 *选填
     * @return Success
     */
    patientVascularAccess(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientVascularAccessViewResult> {
        let url_ = this.baseUrl + "/api/SmallProgram/PatientVascularAccess?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccess(_response));
        });
    }

    protected processPatientVascularAccess(response: AxiosResponse): Promise<PatientVascularAccessViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientVascularAccessViewResult.fromJS(resultData200);
            return Promise.resolve<PatientVascularAccessViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientVascularAccessViewResult>(null as any);
    }

    /**
     * 患者原发病诊断 -- 根据患者Id查询数据
     * @return Success
     */
    patientDiagnosisPrimaryDisease(patientId: string , cancelToken?: CancelToken | undefined): Promise<PatientDiagnosisPrimaryDiseaseViewResultEntry> {
        let url_ = this.baseUrl + "/api/SmallProgram/PatientDiagnosisPrimaryDisease/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDiagnosisPrimaryDisease(_response));
        });
    }

    protected processPatientDiagnosisPrimaryDisease(response: AxiosResponse): Promise<PatientDiagnosisPrimaryDiseaseViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDiagnosisPrimaryDiseaseViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientDiagnosisPrimaryDiseaseViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDiagnosisPrimaryDiseaseViewResultEntry>(null as any);
    }

    /**
     * 患者病理诊断 -- 根据患者Id查询数据
     * @return Success
     */
    patientDiagnosisPathological(patientId: string , cancelToken?: CancelToken | undefined): Promise<PatientDiagnosisPathologicalViewResultEntry> {
        let url_ = this.baseUrl + "/api/SmallProgram/PatientDiagnosisPathological/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDiagnosisPathological(_response));
        });
    }

    protected processPatientDiagnosisPathological(response: AxiosResponse): Promise<PatientDiagnosisPathologicalViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDiagnosisPathologicalViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientDiagnosisPathologicalViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDiagnosisPathologicalViewResultEntry>(null as any);
    }

    /**
     * 患者并发症诊断 -- 根据患者ID查询数据
     * @param patientId 患者ID
     * @return Success
     */
    patientDiagnosisComplication(patientId: string , cancelToken?: CancelToken | undefined): Promise<PatientDiagnosisComplicationViewResultEntry> {
        let url_ = this.baseUrl + "/api/SmallProgram/PatientDiagnosisComplication/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDiagnosisComplication(_response));
        });
    }

    protected processPatientDiagnosisComplication(response: AxiosResponse): Promise<PatientDiagnosisComplicationViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDiagnosisComplicationViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientDiagnosisComplicationViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDiagnosisComplicationViewResultEntry>(null as any);
    }

    /**
     * 患者传染病诊断 -- 根据患者ID查询数据
     * @param patientId 患者ID
     * @return Success
     */
    patientDiagnosisInfectiousDiseases(patientId: string , cancelToken?: CancelToken | undefined): Promise<PatientDiagnosisInfectiousDiseasesViewResultEntry> {
        let url_ = this.baseUrl + "/api/SmallProgram/PatientDiagnosisInfectiousDiseases/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDiagnosisInfectiousDiseases(_response));
        });
    }

    protected processPatientDiagnosisInfectiousDiseases(response: AxiosResponse): Promise<PatientDiagnosisInfectiousDiseasesViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDiagnosisInfectiousDiseasesViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientDiagnosisInfectiousDiseasesViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDiagnosisInfectiousDiseasesViewResultEntry>(null as any);
    }

    /**
     * 患者肿瘤诊断 -- 根据患者ID查询数据
     * @param patientId 患者ID
     * @return Success
     */
    patientDiagnosisTumor(patientId: string , cancelToken?: CancelToken | undefined): Promise<PatientDiagnosisTumorViewResultEntry> {
        let url_ = this.baseUrl + "/api/SmallProgram/PatientDiagnosisTumor/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDiagnosisTumor(_response));
        });
    }

    protected processPatientDiagnosisTumor(response: AxiosResponse): Promise<PatientDiagnosisTumorViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDiagnosisTumorViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientDiagnosisTumorViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDiagnosisTumorViewResultEntry>(null as any);
    }

    /**
     * 患者过敏诊断 -- 根据患者ID查询数据
     * @param patientId 患者ID
     * @return Success
     */
    patientDiagnosisAllergy(patientId: string , cancelToken?: CancelToken | undefined): Promise<PatientDiagnosisAllergyViewResultEntry> {
        let url_ = this.baseUrl + "/api/SmallProgram/PatientDiagnosisAllergy/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDiagnosisAllergy(_response));
        });
    }

    protected processPatientDiagnosisAllergy(response: AxiosResponse): Promise<PatientDiagnosisAllergyViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDiagnosisAllergyViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientDiagnosisAllergyViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDiagnosisAllergyViewResultEntry>(null as any);
    }

    /**
     * 透中 - 透中事件 - 查询 -- 根据时间段查询
     * @param patientId 患者标识
     * @param filter (optional) 查询条件
     * @return Success
     */
    patientComplication(patientId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<ComplicationCureMiddleViewResult> {
        let url_ = this.baseUrl + "/api/SmallProgram/PatientComplication/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientComplication(_response));
        });
    }

    protected processPatientComplication(response: AxiosResponse): Promise<ComplicationCureMiddleViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ComplicationCureMiddleViewResult.fromJS(resultData200);
            return Promise.resolve<ComplicationCureMiddleViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ComplicationCureMiddleViewResult>(null as any);
    }

    /**
     * 透中 - 透中事件 - 查询 -- 根据时间段查询
     * @param startDate (optional) 开始时间(yyyy-MM-dd)
     * @param endDate (optional) 结束时间(yyyy-MM-dd)
     * @param filter (optional) 查询条件
     * @return Success
     */
    period(startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<ComplicationCureMiddleViewResult> {
        let url_ = this.baseUrl + "/api/SmallProgram/PatientComplication/Period?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPeriod(_response));
        });
    }

    protected processPeriod(response: AxiosResponse): Promise<ComplicationCureMiddleViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ComplicationCureMiddleViewResult.fromJS(resultData200);
            return Promise.resolve<ComplicationCureMiddleViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ComplicationCureMiddleViewResult>(null as any);
    }

    /**
     * 患者健康宣教记录 -- 根据患者标识查询数据
     * @param patientId 患者标识
     * @param filter (optional) 查询条件
     * @return Success
     */
    patientHealtheducationRecord(patientId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientHealtheducationRecordViewResult> {
        let url_ = this.baseUrl + "/api/SmallProgram/PatientHealtheducationRecord/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientHealtheducationRecord(_response));
        });
    }

    protected processPatientHealtheducationRecord(response: AxiosResponse): Promise<PatientHealtheducationRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientHealtheducationRecordViewResult.fromJS(resultData200);
            return Promise.resolve<PatientHealtheducationRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientHealtheducationRecordViewResult>(null as any);
    }

    /**
     * 患者健康宣教记录课程列表 -- 更新宣教时长/标记为已学习
     * @param id 传PatientHealtheducationLessonItem的ID(宣教记录第三层)
     * @param complete 是否已完成(0,1)
     * @param duration (optional) 视频/音频，必填
     * @return Success
     */
    read(id: string, complete: number, duration: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SmallProgram/PatientHealtheducationRecord/Read/{id}/{complete}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (complete === undefined || complete === null)
            throw new Error("The parameter 'complete' must be defined.");
        url_ = url_.replace("{complete}", encodeURIComponent("" + complete));
        if (duration === null)
            throw new Error("The parameter 'duration' cannot be null.");
        else if (duration !== undefined)
            url_ += "duration=" + encodeURIComponent("" + duration) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRead(_response));
        });
    }

    protected processRead(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 字典明细表 -- 根据Code查询明细
     * @param code (optional)
     * @return Success
     */
    sysDic(code: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysDicItemViewResult> {
        let url_ = this.baseUrl + "/api/SmallProgram/SysDic?";
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysDic(_response));
        });
    }

    protected processSysDic(response: AxiosResponse): Promise<SysDicItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysDicItemViewResult.fromJS(resultData200);
            return Promise.resolve<SysDicItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysDicItemViewResult>(null as any);
    }
}

export class ComplicationCureMiddleView implements IComplicationCureMiddleView {
    /** 发生时间 */
    occurredTime!: dayjs.Dayjs;
    /** 透析记录标识 */
    cureRecordId!: string;
    /** 并发症 */
    name!: string;
    /** 处理 */
    dispose!: ComplicationItem[];
    /** 原因 */
    cause!: ComplicationItem[];
    /** 备注 */
    remark?: string | undefined;
    /** 文件列表 */
    complicationFiles?: ComplicationFileItem[] | undefined;
    /** 透中事件记录标识 */
    cureComplicationId?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 操作者标识 */
    operatorId?: string | undefined;
    /** 操作者姓名 */
    operatorName?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IComplicationCureMiddleView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.dispose = [];
            this.cause = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.occurredTime = _data["occurredTime"] ? dayjs(_data["occurredTime"].toString()) : <any>undefined;
            this.cureRecordId = _data["cureRecordId"];
            this.name = _data["name"];
            if (Array.isArray(_data["dispose"])) {
                this.dispose = [] as any;
                for (let item of _data["dispose"])
                    this.dispose!.push(ComplicationItem.fromJS(item));
            }
            if (Array.isArray(_data["cause"])) {
                this.cause = [] as any;
                for (let item of _data["cause"])
                    this.cause!.push(ComplicationItem.fromJS(item));
            }
            this.remark = _data["remark"];
            if (Array.isArray(_data["complicationFiles"])) {
                this.complicationFiles = [] as any;
                for (let item of _data["complicationFiles"])
                    this.complicationFiles!.push(ComplicationFileItem.fromJS(item));
            }
            this.cureComplicationId = _data["cureComplicationId"];
            this.sn = _data["sn"];
            this.patientId = _data["patientId"];
            this.surnameCode = _data["surnameCode"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.operatorId = _data["operatorId"];
            this.operatorName = _data["operatorName"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ComplicationCureMiddleView {
        data = typeof data === 'object' ? data : {};
        let result = new ComplicationCureMiddleView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["occurredTime"] = this.occurredTime ? this.occurredTime.toISOString() : <any>undefined;
        data["cureRecordId"] = this.cureRecordId;
        data["name"] = this.name;
        if (Array.isArray(this.dispose)) {
            data["dispose"] = [];
            for (let item of this.dispose)
                data["dispose"].push(item.toJSON());
        }
        if (Array.isArray(this.cause)) {
            data["cause"] = [];
            for (let item of this.cause)
                data["cause"].push(item.toJSON());
        }
        data["remark"] = this.remark;
        if (Array.isArray(this.complicationFiles)) {
            data["complicationFiles"] = [];
            for (let item of this.complicationFiles)
                data["complicationFiles"].push(item.toJSON());
        }
        data["cureComplicationId"] = this.cureComplicationId;
        data["sn"] = this.sn;
        data["patientId"] = this.patientId;
        data["surnameCode"] = this.surnameCode;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["operatorId"] = this.operatorId;
        data["operatorName"] = this.operatorName;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IComplicationCureMiddleView {
    /** 发生时间 */
    occurredTime: dayjs.Dayjs;
    /** 透析记录标识 */
    cureRecordId: string;
    /** 并发症 */
    name: string;
    /** 处理 */
    dispose: ComplicationItem[];
    /** 原因 */
    cause: ComplicationItem[];
    /** 备注 */
    remark?: string | undefined;
    /** 文件列表 */
    complicationFiles?: ComplicationFileItem[] | undefined;
    /** 透中事件记录标识 */
    cureComplicationId?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 操作者标识 */
    operatorId?: string | undefined;
    /** 操作者姓名 */
    operatorName?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class ComplicationCureMiddleViewResult implements IComplicationCureMiddleViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ComplicationCureMiddleView[] | undefined;

    constructor(data?: IComplicationCureMiddleViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ComplicationCureMiddleView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ComplicationCureMiddleViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new ComplicationCureMiddleViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IComplicationCureMiddleViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ComplicationCureMiddleView[] | undefined;
}

export class ComplicationFileItem implements IComplicationFileItem {
    /** 文件标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 文件路径 */
    url?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;

    constructor(data?: IComplicationFileItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.url = _data["url"];
            this.extension = _data["extension"];
            this.length = _data["length"];
        }
    }

    static fromJS(data: any): ComplicationFileItem {
        data = typeof data === 'object' ? data : {};
        let result = new ComplicationFileItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["url"] = this.url;
        data["extension"] = this.extension;
        data["length"] = this.length;
        return data;
    }
}

export interface IComplicationFileItem {
    /** 文件标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 文件路径 */
    url?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
}

export class ComplicationItem implements IComplicationItem {
    /** 名称 */
    name?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IComplicationItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): ComplicationItem {
        data = typeof data === 'object' ? data : {};
        let result = new ComplicationItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["remark"] = this.remark;
        return data;
    }
}

export interface IComplicationItem {
    /** 名称 */
    name?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 患者排床床位信息 */
export class CureBedItem implements ICureBedItem {
    /** 透析床位标识 */
    deptDialysisBedId?: string | undefined;
    /** 透析床位名称 */
    deptDialysisBedName?: string | undefined;
    /** 序列 */
    deptDialysisBedSequence?: number;
    /** 科室设备标识 */
    devId?: string | undefined;
    /** 科室设备编号 */
    devCode?: string | undefined;
    /** 科室设备类型 */
    devType?: string | undefined;
    /** 科室设备型号 */
    devModel?: string | undefined;
    /** 是否阳性 *如阳性不可改为阴性* */
    devPositive?: number;
    /** 科室设备是否可用 */
    devAvailable?: number;
    /** 启用状态0,1 */
    deptDialysisBedEnabled?: number;
    /** 患者排床床位上的患者信息 */
    patients?: CurePatient[] | undefined;

    constructor(data?: ICureBedItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deptDialysisBedId = _data["deptDialysisBedId"];
            this.deptDialysisBedName = _data["deptDialysisBedName"];
            this.deptDialysisBedSequence = _data["deptDialysisBedSequence"];
            this.devId = _data["devId"];
            this.devCode = _data["devCode"];
            this.devType = _data["devType"];
            this.devModel = _data["devModel"];
            this.devPositive = _data["devPositive"];
            this.devAvailable = _data["devAvailable"];
            this.deptDialysisBedEnabled = _data["deptDialysisBedEnabled"];
            if (Array.isArray(_data["patients"])) {
                this.patients = [] as any;
                for (let item of _data["patients"])
                    this.patients!.push(CurePatient.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureBedItem {
        data = typeof data === 'object' ? data : {};
        let result = new CureBedItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deptDialysisBedId"] = this.deptDialysisBedId;
        data["deptDialysisBedName"] = this.deptDialysisBedName;
        data["deptDialysisBedSequence"] = this.deptDialysisBedSequence;
        data["devId"] = this.devId;
        data["devCode"] = this.devCode;
        data["devType"] = this.devType;
        data["devModel"] = this.devModel;
        data["devPositive"] = this.devPositive;
        data["devAvailable"] = this.devAvailable;
        data["deptDialysisBedEnabled"] = this.deptDialysisBedEnabled;
        if (Array.isArray(this.patients)) {
            data["patients"] = [];
            for (let item of this.patients)
                data["patients"].push(item.toJSON());
        }
        return data;
    }
}

/** 患者排床床位信息 */
export interface ICureBedItem {
    /** 透析床位标识 */
    deptDialysisBedId?: string | undefined;
    /** 透析床位名称 */
    deptDialysisBedName?: string | undefined;
    /** 序列 */
    deptDialysisBedSequence?: number;
    /** 科室设备标识 */
    devId?: string | undefined;
    /** 科室设备编号 */
    devCode?: string | undefined;
    /** 科室设备类型 */
    devType?: string | undefined;
    /** 科室设备型号 */
    devModel?: string | undefined;
    /** 是否阳性 *如阳性不可改为阴性* */
    devPositive?: number;
    /** 科室设备是否可用 */
    devAvailable?: number;
    /** 启用状态0,1 */
    deptDialysisBedEnabled?: number;
    /** 患者排床床位上的患者信息 */
    patients?: CurePatient[] | undefined;
}

/** 床位患者明细 */
export class CureBedPatientDetail implements ICureBedPatientDetail {
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs | undefined;
    /** 透析日 `DIC.DIALYSIS.WEEKDAY` */
    weekday?: number;
    /** 床位标识 */
    bedId?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 区间标识 */
    dialysisAreaId?: string | undefined;
    /** 床位 */
    dialysisAreaName?: string | undefined;
    /** 透析日名称 */
    weekdayName?: string | undefined;
    dossierNum?: string | undefined;
    /** 班次标识 */
    shiftId?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者是否阳性0,1 */
    patientPositive?: number;
    /** 透析方式 `DIC.DIALYSIS.MODE`  *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式名称 */
    dialysisModeName?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 颜色代码名称 */
    colorName?: string | undefined;
    /** 字体颜色 `DIC.SYS.FONTCOLOR` 可自定义颜色 */
    fontColor?: string | undefined;
    /** 字体颜色名称 */
    fontColorName?: string | undefined;
    /** 透析器标识 */
    dialyzerId?: string | undefined;
    /** 透析器名称 */
    dialyzerName?: string | undefined;
    /** 透析器数量 */
    dialyzerCount?: string | undefined;
    /** 血滤器标识 */
    filterId?: string | undefined;
    /** 血滤器名称 */
    filterName?: string | undefined;
    /** 血滤器数量 */
    filterCount?: string | undefined;
    /** 灌流器标识 */
    perfusionId?: string | undefined;
    /** 灌流器名称 */
    perfusionName?: string | undefined;
    /** 灌流器数量 */
    perfusionCount?: string | undefined;
    /** 图标 */
    icon?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 抗凝剂类型 */
    anticoagulantName?: string | undefined;
    /** 剂量 */
    anticoagulantTotal?: string | undefined;
    /** 费用组套 */
    cureCostGroups?: CureCostGroupView[] | undefined;

    constructor(data?: ICureBedPatientDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.weekday = _data["weekday"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.weekdayName = _data["weekdayName"];
            this.dossierNum = _data["dossierNum"];
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.patientPositive = _data["patientPositive"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisModeName = _data["dialysisModeName"];
            this.color = _data["color"];
            this.colorName = _data["colorName"];
            this.fontColor = _data["fontColor"];
            this.fontColorName = _data["fontColorName"];
            this.dialyzerId = _data["dialyzerId"];
            this.dialyzerName = _data["dialyzerName"];
            this.dialyzerCount = _data["dialyzerCount"];
            this.filterId = _data["filterId"];
            this.filterName = _data["filterName"];
            this.filterCount = _data["filterCount"];
            this.perfusionId = _data["perfusionId"];
            this.perfusionName = _data["perfusionName"];
            this.perfusionCount = _data["perfusionCount"];
            this.icon = _data["icon"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.remark = _data["remark"];
            this.anticoagulantName = _data["anticoagulantName"];
            this.anticoagulantTotal = _data["anticoagulantTotal"];
            if (Array.isArray(_data["cureCostGroups"])) {
                this.cureCostGroups = [] as any;
                for (let item of _data["cureCostGroups"])
                    this.cureCostGroups!.push(CureCostGroupView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureBedPatientDetail {
        data = typeof data === 'object' ? data : {};
        let result = new CureBedPatientDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["weekday"] = this.weekday;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["weekdayName"] = this.weekdayName;
        data["dossierNum"] = this.dossierNum;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["patientPositive"] = this.patientPositive;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisModeName"] = this.dialysisModeName;
        data["color"] = this.color;
        data["colorName"] = this.colorName;
        data["fontColor"] = this.fontColor;
        data["fontColorName"] = this.fontColorName;
        data["dialyzerId"] = this.dialyzerId;
        data["dialyzerName"] = this.dialyzerName;
        data["dialyzerCount"] = this.dialyzerCount;
        data["filterId"] = this.filterId;
        data["filterName"] = this.filterName;
        data["filterCount"] = this.filterCount;
        data["perfusionId"] = this.perfusionId;
        data["perfusionName"] = this.perfusionName;
        data["perfusionCount"] = this.perfusionCount;
        data["icon"] = this.icon;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["remark"] = this.remark;
        data["anticoagulantName"] = this.anticoagulantName;
        data["anticoagulantTotal"] = this.anticoagulantTotal;
        if (Array.isArray(this.cureCostGroups)) {
            data["cureCostGroups"] = [];
            for (let item of this.cureCostGroups)
                data["cureCostGroups"].push(item.toJSON());
        }
        return data;
    }
}

/** 床位患者明细 */
export interface ICureBedPatientDetail {
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs | undefined;
    /** 透析日 `DIC.DIALYSIS.WEEKDAY` */
    weekday?: number;
    /** 床位标识 */
    bedId?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 区间标识 */
    dialysisAreaId?: string | undefined;
    /** 床位 */
    dialysisAreaName?: string | undefined;
    /** 透析日名称 */
    weekdayName?: string | undefined;
    dossierNum?: string | undefined;
    /** 班次标识 */
    shiftId?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者是否阳性0,1 */
    patientPositive?: number;
    /** 透析方式 `DIC.DIALYSIS.MODE`  *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式名称 */
    dialysisModeName?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 颜色代码名称 */
    colorName?: string | undefined;
    /** 字体颜色 `DIC.SYS.FONTCOLOR` 可自定义颜色 */
    fontColor?: string | undefined;
    /** 字体颜色名称 */
    fontColorName?: string | undefined;
    /** 透析器标识 */
    dialyzerId?: string | undefined;
    /** 透析器名称 */
    dialyzerName?: string | undefined;
    /** 透析器数量 */
    dialyzerCount?: string | undefined;
    /** 血滤器标识 */
    filterId?: string | undefined;
    /** 血滤器名称 */
    filterName?: string | undefined;
    /** 血滤器数量 */
    filterCount?: string | undefined;
    /** 灌流器标识 */
    perfusionId?: string | undefined;
    /** 灌流器名称 */
    perfusionName?: string | undefined;
    /** 灌流器数量 */
    perfusionCount?: string | undefined;
    /** 图标 */
    icon?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 抗凝剂类型 */
    anticoagulantName?: string | undefined;
    /** 剂量 */
    anticoagulantTotal?: string | undefined;
    /** 费用组套 */
    cureCostGroups?: CureCostGroupView[] | undefined;
}

export class CureCostGroupView implements ICureCostGroupView {
    /** 耗材分类代码 */
    roomItemTypeCode!: string;
    /** [耗材标识](项目清单Id) */
    roomItemListId!: string;
    /** 耗材数量 */
    count!: number;
    /** 批号管理 */
    batchManage!: number | undefined;
    /** 编码 */
    code?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 耗材编码 */
    devBarCode?: string | undefined;
    /** 项目标识 */
    cureRecordConsumableId?: string | undefined;
    /** 项目排序 */
    sequence?: number;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 种类名称 */
    roomItemTypeName?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 售价 */
    sellingPrice?: number | undefined;
    /** 基本单位 */
    unit?: string | undefined;
    /** 基本单位显示值 */
    unitLabel?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` */
    unitLevel1?: string | undefined;
    /** 一级单位显示值 */
    unitLevel1Label?: string | undefined;
    /** 一级单位与基本单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 项目启用状态0,1 */
    enabled?: number;
    /** 库存 *基本单位的库存* */
    inventoryCount?: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 批号明细 */
    batchItems?: CureRecordConsumableItemView[] | undefined;

    constructor(data?: ICureCostGroupView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemTypeCode = _data["roomItemTypeCode"];
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
            this.batchManage = _data["batchManage"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.devBarCode = _data["devBarCode"];
            this.cureRecordConsumableId = _data["cureRecordConsumableId"];
            this.sequence = _data["sequence"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.spec = _data["spec"];
            this.sellingPrice = _data["sellingPrice"];
            this.unit = _data["unit"];
            this.unitLabel = _data["unitLabel"];
            this.usageMode = _data["usageMode"];
            this.usageModeLabel = _data["usageModeLabel"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitLevel1Label = _data["unitLevel1Label"];
            if (Array.isArray(_data["unitList"])) {
                this.unitList = [] as any;
                for (let item of _data["unitList"])
                    this.unitList!.push(LabelModel.fromJS(item));
            }
            this.enabled = _data["enabled"];
            this.inventoryCount = _data["inventoryCount"];
            this.batchNo = _data["batchNo"];
            if (Array.isArray(_data["batchItems"])) {
                this.batchItems = [] as any;
                for (let item of _data["batchItems"])
                    this.batchItems!.push(CureRecordConsumableItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureCostGroupView {
        data = typeof data === 'object' ? data : {};
        let result = new CureCostGroupView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemTypeCode"] = this.roomItemTypeCode;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        data["batchManage"] = this.batchManage;
        data["code"] = this.code;
        data["name"] = this.name;
        data["devBarCode"] = this.devBarCode;
        data["cureRecordConsumableId"] = this.cureRecordConsumableId;
        data["sequence"] = this.sequence;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["spec"] = this.spec;
        data["sellingPrice"] = this.sellingPrice;
        data["unit"] = this.unit;
        data["unitLabel"] = this.unitLabel;
        data["usageMode"] = this.usageMode;
        data["usageModeLabel"] = this.usageModeLabel;
        data["unitLevel1"] = this.unitLevel1;
        data["unitLevel1Label"] = this.unitLevel1Label;
        if (Array.isArray(this.unitList)) {
            data["unitList"] = [];
            for (let item of this.unitList)
                data["unitList"].push(item.toJSON());
        }
        data["enabled"] = this.enabled;
        data["inventoryCount"] = this.inventoryCount;
        data["batchNo"] = this.batchNo;
        if (Array.isArray(this.batchItems)) {
            data["batchItems"] = [];
            for (let item of this.batchItems)
                data["batchItems"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICureCostGroupView {
    /** 耗材分类代码 */
    roomItemTypeCode: string;
    /** [耗材标识](项目清单Id) */
    roomItemListId: string;
    /** 耗材数量 */
    count: number;
    /** 批号管理 */
    batchManage: number | undefined;
    /** 编码 */
    code?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 耗材编码 */
    devBarCode?: string | undefined;
    /** 项目标识 */
    cureRecordConsumableId?: string | undefined;
    /** 项目排序 */
    sequence?: number;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 种类名称 */
    roomItemTypeName?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 售价 */
    sellingPrice?: number | undefined;
    /** 基本单位 */
    unit?: string | undefined;
    /** 基本单位显示值 */
    unitLabel?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` */
    unitLevel1?: string | undefined;
    /** 一级单位显示值 */
    unitLevel1Label?: string | undefined;
    /** 一级单位与基本单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 项目启用状态0,1 */
    enabled?: number;
    /** 库存 *基本单位的库存* */
    inventoryCount?: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 批号明细 */
    batchItems?: CureRecordConsumableItemView[] | undefined;
}

/** 口服用药添加频次 */
export class CureDaCustomView implements ICureDaCustomView {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` */
    unit?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 自备药0,1 */
    owned!: number;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 执行日期 */
    execDate!: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 基本单位（用于组合规格） `DIC.SYS.UNIT` */
    unitBase?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel?: string | undefined;
    /** 一级单位（用于组合规格） `DIC.SYS.UNIT` */
    unitLevel1?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立医生标识 */
    doctorId?: string | undefined;
    /** 开立医生姓名 */
    doctorName?: string | undefined;
    /** 核对护士标识 */
    checkNurseId?: string | undefined;
    /** 核对护士姓名 */
    checkNurseName?: string | undefined;
    /** 执行护士标识 */
    nurseId?: string | undefined;
    /** 执行护士姓名 */
    nurseName?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 核对时间 */
    checkTime?: dayjs.Dayjs | undefined;
    /** 执行时间 */
    execTime?: dayjs.Dayjs | undefined;
    /** 执行状态 `DIC.DIALYSIS.DA.STATUS` *待核对,已核对(待执行),已撤销,待调整,已执行* */
    status?: string | undefined;
    /** 长期医嘱标识 *医嘱来源* */
    patientDaLongtermId?: string | undefined;
    /** 临时医嘱标识 *医嘱来源* */
    patientDaTemporaryId?: string | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 区域 */
    deptDialysisAreaId?: string | undefined;
    /** 区域排序 */
    deptDialysisSequence?: number | undefined;
    /** 区域名称 */
    deptDialysisAreaName?: string | undefined;
    /** 床号 */
    bedNumber?: string | undefined;
    /** 床位序号 */
    bedSequence?: number | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    patientAge?: string | undefined;
    patientGender?: string | undefined;
    patientDept?: string | undefined;
    patientInNo?: string | undefined;
    patientBed?: string | undefined;
    hospName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 患者拼音首字母 */
    pinYinCode?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 医嘱类型 */
    cureDaTypeName?: string | undefined;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 分组 */
    group?: string | undefined;
    /** 项目分类标识 */
    roomItemTypeId?: string | undefined;
    /** 数量单位名称 */
    unitName?: string | undefined;
    /** 单次用量单位名称 */
    singleUnitName?: string | undefined;
    /** 用法名称 */
    usageName?: string | undefined;
    /** 执行状态名称 */
    statusName?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 是否允许核对(未核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能核对)(用户权限未判断) */
    allowCheck?: boolean;
    /** 是否允许编辑(未核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能核对)(用户权限未判断) */
    allowModify?: boolean;
    /** 是否允许执行(已核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能执行)(用户权限未判断) */
    allowExec?: boolean;
    /** 是否允许撤销(未执行未撤销的医嘱，才能撤销)(用户权限未判断) */
    allowRevocation?: boolean;
    /** 撤销人 */
    revocationer?: string | undefined;
    /** 撤销时间 */
    revocationTime?: dayjs.Dayjs | undefined;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 来源标签 */
    source?: string | undefined;
    /** 药品库存 */
    inventoryCount?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 床位标识 */
    deptDialysisBedId?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    execNurseName?: string | undefined;
    execNurseTime?: string | undefined;
    openTimeHH?: string | undefined;
    openTimeDate?: string | undefined;
    /** 频次 */
    interval?: string | undefined;
    /** 频次 `DIC.DA.INTERVAL` */
    intervalName?: string | undefined;

    constructor(data?: ICureDaCustomView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.type = _data["type"];
            this.content = _data["content"];
            this.name = _data["name"];
            this.roomItemListId = _data["roomItemListId"];
            this.usage = _data["usage"];
            this.dosage = _data["dosage"];
            this.unit = _data["unit"];
            this.singleDosage = _data["singleDosage"];
            this.singleUnit = _data["singleUnit"];
            this.orally = _data["orally"];
            this.owned = _data["owned"];
            this.doctorCreateTime = _data["doctorCreateTime"] ? dayjs(_data["doctorCreateTime"].toString()) : <any>undefined;
            this.execDate = _data["execDate"] ? dayjs(_data["execDate"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.unitBase = _data["unitBase"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.unitLevel1 = _data["unitLevel1"];
            this.groupId = _data["groupId"];
            this.doctorId = _data["doctorId"];
            this.doctorName = _data["doctorName"];
            this.checkNurseId = _data["checkNurseId"];
            this.checkNurseName = _data["checkNurseName"];
            this.nurseId = _data["nurseId"];
            this.nurseName = _data["nurseName"];
            this.onNurseId = _data["onNurseId"];
            this.onNurseName = _data["onNurseName"];
            this.checkTime = _data["checkTime"] ? dayjs(_data["checkTime"].toString()) : <any>undefined;
            this.execTime = _data["execTime"] ? dayjs(_data["execTime"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.patientDaLongtermId = _data["patientDaLongtermId"];
            this.patientDaTemporaryId = _data["patientDaTemporaryId"];
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.deptDialysisAreaId = _data["deptDialysisAreaId"];
            this.deptDialysisSequence = _data["deptDialysisSequence"];
            this.deptDialysisAreaName = _data["deptDialysisAreaName"];
            this.bedNumber = _data["bedNumber"];
            this.bedSequence = _data["bedSequence"];
            this.patientName = _data["patientName"];
            this.patientAge = _data["patientAge"];
            this.patientGender = _data["patientGender"];
            this.patientDept = _data["patientDept"];
            this.patientInNo = _data["patientInNo"];
            this.patientBed = _data["patientBed"];
            this.hospName = _data["hospName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.surnameCode = _data["surnameCode"];
            this.pinYinCode = _data["pinYinCode"];
            this.idNumber = _data["idNumber"];
            this.idType = _data["idType"];
            this.cureDaTypeName = _data["cureDaTypeName"];
            this.cureDaContent = _data["cureDaContent"];
            this.group = _data["group"];
            this.roomItemTypeId = _data["roomItemTypeId"];
            this.unitName = _data["unitName"];
            this.singleUnitName = _data["singleUnitName"];
            this.usageName = _data["usageName"];
            this.statusName = _data["statusName"];
            this.specLabel = _data["specLabel"];
            this.nameGoods = _data["nameGoods"];
            if (Array.isArray(_data["unitList"])) {
                this.unitList = [] as any;
                for (let item of _data["unitList"])
                    this.unitList!.push(LabelModel.fromJS(item));
            }
            this.allowCheck = _data["allowCheck"];
            this.allowModify = _data["allowModify"];
            this.allowExec = _data["allowExec"];
            this.allowRevocation = _data["allowRevocation"];
            this.revocationer = _data["revocationer"];
            this.revocationTime = _data["revocationTime"] ? dayjs(_data["revocationTime"].toString()) : <any>undefined;
            this.typeName = _data["typeName"];
            this.source = _data["source"];
            this.inventoryCount = _data["inventoryCount"];
            this.id = _data["id"];
            this.deptDialysisBedId = _data["deptDialysisBedId"];
            this.patientId = _data["patientId"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.execNurseName = _data["execNurseName"];
            this.execNurseTime = _data["execNurseTime"];
            this.openTimeHH = _data["openTimeHH"];
            this.openTimeDate = _data["openTimeDate"];
            this.interval = _data["interval"];
            this.intervalName = _data["intervalName"];
        }
    }

    static fromJS(data: any): CureDaCustomView {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaCustomView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["type"] = this.type;
        data["content"] = this.content;
        data["name"] = this.name;
        data["roomItemListId"] = this.roomItemListId;
        data["usage"] = this.usage;
        data["dosage"] = this.dosage;
        data["unit"] = this.unit;
        data["singleDosage"] = this.singleDosage;
        data["singleUnit"] = this.singleUnit;
        data["orally"] = this.orally;
        data["owned"] = this.owned;
        data["doctorCreateTime"] = this.doctorCreateTime ? this.doctorCreateTime.toISOString() : <any>undefined;
        data["execDate"] = this.execDate ? this.execDate.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        data["unitBase"] = this.unitBase;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["unitLevel1"] = this.unitLevel1;
        data["groupId"] = this.groupId;
        data["doctorId"] = this.doctorId;
        data["doctorName"] = this.doctorName;
        data["checkNurseId"] = this.checkNurseId;
        data["checkNurseName"] = this.checkNurseName;
        data["nurseId"] = this.nurseId;
        data["nurseName"] = this.nurseName;
        data["onNurseId"] = this.onNurseId;
        data["onNurseName"] = this.onNurseName;
        data["checkTime"] = this.checkTime ? this.checkTime.toISOString() : <any>undefined;
        data["execTime"] = this.execTime ? this.execTime.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["patientDaLongtermId"] = this.patientDaLongtermId;
        data["patientDaTemporaryId"] = this.patientDaTemporaryId;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["deptDialysisAreaId"] = this.deptDialysisAreaId;
        data["deptDialysisSequence"] = this.deptDialysisSequence;
        data["deptDialysisAreaName"] = this.deptDialysisAreaName;
        data["bedNumber"] = this.bedNumber;
        data["bedSequence"] = this.bedSequence;
        data["patientName"] = this.patientName;
        data["patientAge"] = this.patientAge;
        data["patientGender"] = this.patientGender;
        data["patientDept"] = this.patientDept;
        data["patientInNo"] = this.patientInNo;
        data["patientBed"] = this.patientBed;
        data["hospName"] = this.hospName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["surnameCode"] = this.surnameCode;
        data["pinYinCode"] = this.pinYinCode;
        data["idNumber"] = this.idNumber;
        data["idType"] = this.idType;
        data["cureDaTypeName"] = this.cureDaTypeName;
        data["cureDaContent"] = this.cureDaContent;
        data["group"] = this.group;
        data["roomItemTypeId"] = this.roomItemTypeId;
        data["unitName"] = this.unitName;
        data["singleUnitName"] = this.singleUnitName;
        data["usageName"] = this.usageName;
        data["statusName"] = this.statusName;
        data["specLabel"] = this.specLabel;
        data["nameGoods"] = this.nameGoods;
        if (Array.isArray(this.unitList)) {
            data["unitList"] = [];
            for (let item of this.unitList)
                data["unitList"].push(item.toJSON());
        }
        data["allowCheck"] = this.allowCheck;
        data["allowModify"] = this.allowModify;
        data["allowExec"] = this.allowExec;
        data["allowRevocation"] = this.allowRevocation;
        data["revocationer"] = this.revocationer;
        data["revocationTime"] = this.revocationTime ? this.revocationTime.toISOString() : <any>undefined;
        data["typeName"] = this.typeName;
        data["source"] = this.source;
        data["inventoryCount"] = this.inventoryCount;
        data["id"] = this.id;
        data["deptDialysisBedId"] = this.deptDialysisBedId;
        data["patientId"] = this.patientId;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["execNurseName"] = this.execNurseName;
        data["execNurseTime"] = this.execNurseTime;
        data["openTimeHH"] = this.openTimeHH;
        data["openTimeDate"] = this.openTimeDate;
        data["interval"] = this.interval;
        data["intervalName"] = this.intervalName;
        return data;
    }
}

/** 口服用药添加频次 */
export interface ICureDaCustomView {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` */
    unit?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 自备药0,1 */
    owned: number;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 执行日期 */
    execDate: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 基本单位（用于组合规格） `DIC.SYS.UNIT` */
    unitBase?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel?: string | undefined;
    /** 一级单位（用于组合规格） `DIC.SYS.UNIT` */
    unitLevel1?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立医生标识 */
    doctorId?: string | undefined;
    /** 开立医生姓名 */
    doctorName?: string | undefined;
    /** 核对护士标识 */
    checkNurseId?: string | undefined;
    /** 核对护士姓名 */
    checkNurseName?: string | undefined;
    /** 执行护士标识 */
    nurseId?: string | undefined;
    /** 执行护士姓名 */
    nurseName?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 核对时间 */
    checkTime?: dayjs.Dayjs | undefined;
    /** 执行时间 */
    execTime?: dayjs.Dayjs | undefined;
    /** 执行状态 `DIC.DIALYSIS.DA.STATUS` *待核对,已核对(待执行),已撤销,待调整,已执行* */
    status?: string | undefined;
    /** 长期医嘱标识 *医嘱来源* */
    patientDaLongtermId?: string | undefined;
    /** 临时医嘱标识 *医嘱来源* */
    patientDaTemporaryId?: string | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 区域 */
    deptDialysisAreaId?: string | undefined;
    /** 区域排序 */
    deptDialysisSequence?: number | undefined;
    /** 区域名称 */
    deptDialysisAreaName?: string | undefined;
    /** 床号 */
    bedNumber?: string | undefined;
    /** 床位序号 */
    bedSequence?: number | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    patientAge?: string | undefined;
    patientGender?: string | undefined;
    patientDept?: string | undefined;
    patientInNo?: string | undefined;
    patientBed?: string | undefined;
    hospName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 患者拼音首字母 */
    pinYinCode?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 医嘱类型 */
    cureDaTypeName?: string | undefined;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 分组 */
    group?: string | undefined;
    /** 项目分类标识 */
    roomItemTypeId?: string | undefined;
    /** 数量单位名称 */
    unitName?: string | undefined;
    /** 单次用量单位名称 */
    singleUnitName?: string | undefined;
    /** 用法名称 */
    usageName?: string | undefined;
    /** 执行状态名称 */
    statusName?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 是否允许核对(未核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能核对)(用户权限未判断) */
    allowCheck?: boolean;
    /** 是否允许编辑(未核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能核对)(用户权限未判断) */
    allowModify?: boolean;
    /** 是否允许执行(已核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能执行)(用户权限未判断) */
    allowExec?: boolean;
    /** 是否允许撤销(未执行未撤销的医嘱，才能撤销)(用户权限未判断) */
    allowRevocation?: boolean;
    /** 撤销人 */
    revocationer?: string | undefined;
    /** 撤销时间 */
    revocationTime?: dayjs.Dayjs | undefined;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 来源标签 */
    source?: string | undefined;
    /** 药品库存 */
    inventoryCount?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 床位标识 */
    deptDialysisBedId?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    execNurseName?: string | undefined;
    execNurseTime?: string | undefined;
    openTimeHH?: string | undefined;
    openTimeDate?: string | undefined;
    /** 频次 */
    interval?: string | undefined;
    /** 频次 `DIC.DA.INTERVAL` */
    intervalName?: string | undefined;
}

/** Reponse */
export class CureDaCustomViewResult implements ICureDaCustomViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDaCustomView[] | undefined;

    constructor(data?: ICureDaCustomViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureDaCustomView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureDaCustomViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaCustomViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureDaCustomViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDaCustomView[] | undefined;
}

/** 透析医嘱 */
export class CureDaView implements ICureDaView {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` */
    unit?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 自备药0,1 */
    owned!: number;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 执行日期 */
    execDate!: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 基本单位（用于组合规格） `DIC.SYS.UNIT` */
    unitBase?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel?: string | undefined;
    /** 一级单位（用于组合规格） `DIC.SYS.UNIT` */
    unitLevel1?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立医生标识 */
    doctorId?: string | undefined;
    /** 开立医生姓名 */
    doctorName?: string | undefined;
    /** 核对护士标识 */
    checkNurseId?: string | undefined;
    /** 核对护士姓名 */
    checkNurseName?: string | undefined;
    /** 执行护士标识 */
    nurseId?: string | undefined;
    /** 执行护士姓名 */
    nurseName?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 核对时间 */
    checkTime?: dayjs.Dayjs | undefined;
    /** 执行时间 */
    execTime?: dayjs.Dayjs | undefined;
    /** 执行状态 `DIC.DIALYSIS.DA.STATUS` *待核对,已核对(待执行),已撤销,待调整,已执行* */
    status?: string | undefined;
    /** 长期医嘱标识 *医嘱来源* */
    patientDaLongtermId?: string | undefined;
    /** 临时医嘱标识 *医嘱来源* */
    patientDaTemporaryId?: string | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 区域 */
    deptDialysisAreaId?: string | undefined;
    /** 区域排序 */
    deptDialysisSequence?: number | undefined;
    /** 区域名称 */
    deptDialysisAreaName?: string | undefined;
    /** 床号 */
    bedNumber?: string | undefined;
    /** 床位序号 */
    bedSequence?: number | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    patientAge?: string | undefined;
    patientGender?: string | undefined;
    patientDept?: string | undefined;
    patientInNo?: string | undefined;
    patientBed?: string | undefined;
    hospName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 患者拼音首字母 */
    pinYinCode?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 医嘱类型 */
    cureDaTypeName?: string | undefined;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 分组 */
    group?: string | undefined;
    /** 项目分类标识 */
    roomItemTypeId?: string | undefined;
    /** 数量单位名称 */
    unitName?: string | undefined;
    /** 单次用量单位名称 */
    singleUnitName?: string | undefined;
    /** 用法名称 */
    usageName?: string | undefined;
    /** 执行状态名称 */
    statusName?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 是否允许核对(未核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能核对)(用户权限未判断) */
    allowCheck?: boolean;
    /** 是否允许编辑(未核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能核对)(用户权限未判断) */
    allowModify?: boolean;
    /** 是否允许执行(已核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能执行)(用户权限未判断) */
    allowExec?: boolean;
    /** 是否允许撤销(未执行未撤销的医嘱，才能撤销)(用户权限未判断) */
    allowRevocation?: boolean;
    /** 撤销人 */
    revocationer?: string | undefined;
    /** 撤销时间 */
    revocationTime?: dayjs.Dayjs | undefined;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 来源标签 */
    source?: string | undefined;
    /** 药品库存 */
    inventoryCount?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 床位标识 */
    deptDialysisBedId?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    execNurseName?: string | undefined;
    execNurseTime?: string | undefined;
    openTimeHH?: string | undefined;
    openTimeDate?: string | undefined;

    constructor(data?: ICureDaView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.type = _data["type"];
            this.content = _data["content"];
            this.name = _data["name"];
            this.roomItemListId = _data["roomItemListId"];
            this.usage = _data["usage"];
            this.dosage = _data["dosage"];
            this.unit = _data["unit"];
            this.singleDosage = _data["singleDosage"];
            this.singleUnit = _data["singleUnit"];
            this.orally = _data["orally"];
            this.owned = _data["owned"];
            this.doctorCreateTime = _data["doctorCreateTime"] ? dayjs(_data["doctorCreateTime"].toString()) : <any>undefined;
            this.execDate = _data["execDate"] ? dayjs(_data["execDate"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.unitBase = _data["unitBase"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.unitLevel1 = _data["unitLevel1"];
            this.groupId = _data["groupId"];
            this.doctorId = _data["doctorId"];
            this.doctorName = _data["doctorName"];
            this.checkNurseId = _data["checkNurseId"];
            this.checkNurseName = _data["checkNurseName"];
            this.nurseId = _data["nurseId"];
            this.nurseName = _data["nurseName"];
            this.onNurseId = _data["onNurseId"];
            this.onNurseName = _data["onNurseName"];
            this.checkTime = _data["checkTime"] ? dayjs(_data["checkTime"].toString()) : <any>undefined;
            this.execTime = _data["execTime"] ? dayjs(_data["execTime"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.patientDaLongtermId = _data["patientDaLongtermId"];
            this.patientDaTemporaryId = _data["patientDaTemporaryId"];
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.deptDialysisAreaId = _data["deptDialysisAreaId"];
            this.deptDialysisSequence = _data["deptDialysisSequence"];
            this.deptDialysisAreaName = _data["deptDialysisAreaName"];
            this.bedNumber = _data["bedNumber"];
            this.bedSequence = _data["bedSequence"];
            this.patientName = _data["patientName"];
            this.patientAge = _data["patientAge"];
            this.patientGender = _data["patientGender"];
            this.patientDept = _data["patientDept"];
            this.patientInNo = _data["patientInNo"];
            this.patientBed = _data["patientBed"];
            this.hospName = _data["hospName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.surnameCode = _data["surnameCode"];
            this.pinYinCode = _data["pinYinCode"];
            this.idNumber = _data["idNumber"];
            this.idType = _data["idType"];
            this.cureDaTypeName = _data["cureDaTypeName"];
            this.cureDaContent = _data["cureDaContent"];
            this.group = _data["group"];
            this.roomItemTypeId = _data["roomItemTypeId"];
            this.unitName = _data["unitName"];
            this.singleUnitName = _data["singleUnitName"];
            this.usageName = _data["usageName"];
            this.statusName = _data["statusName"];
            this.specLabel = _data["specLabel"];
            this.nameGoods = _data["nameGoods"];
            if (Array.isArray(_data["unitList"])) {
                this.unitList = [] as any;
                for (let item of _data["unitList"])
                    this.unitList!.push(LabelModel.fromJS(item));
            }
            this.allowCheck = _data["allowCheck"];
            this.allowModify = _data["allowModify"];
            this.allowExec = _data["allowExec"];
            this.allowRevocation = _data["allowRevocation"];
            this.revocationer = _data["revocationer"];
            this.revocationTime = _data["revocationTime"] ? dayjs(_data["revocationTime"].toString()) : <any>undefined;
            this.typeName = _data["typeName"];
            this.source = _data["source"];
            this.inventoryCount = _data["inventoryCount"];
            this.id = _data["id"];
            this.deptDialysisBedId = _data["deptDialysisBedId"];
            this.patientId = _data["patientId"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.execNurseName = _data["execNurseName"];
            this.execNurseTime = _data["execNurseTime"];
            this.openTimeHH = _data["openTimeHH"];
            this.openTimeDate = _data["openTimeDate"];
        }
    }

    static fromJS(data: any): CureDaView {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["type"] = this.type;
        data["content"] = this.content;
        data["name"] = this.name;
        data["roomItemListId"] = this.roomItemListId;
        data["usage"] = this.usage;
        data["dosage"] = this.dosage;
        data["unit"] = this.unit;
        data["singleDosage"] = this.singleDosage;
        data["singleUnit"] = this.singleUnit;
        data["orally"] = this.orally;
        data["owned"] = this.owned;
        data["doctorCreateTime"] = this.doctorCreateTime ? this.doctorCreateTime.toISOString() : <any>undefined;
        data["execDate"] = this.execDate ? this.execDate.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        data["unitBase"] = this.unitBase;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["unitLevel1"] = this.unitLevel1;
        data["groupId"] = this.groupId;
        data["doctorId"] = this.doctorId;
        data["doctorName"] = this.doctorName;
        data["checkNurseId"] = this.checkNurseId;
        data["checkNurseName"] = this.checkNurseName;
        data["nurseId"] = this.nurseId;
        data["nurseName"] = this.nurseName;
        data["onNurseId"] = this.onNurseId;
        data["onNurseName"] = this.onNurseName;
        data["checkTime"] = this.checkTime ? this.checkTime.toISOString() : <any>undefined;
        data["execTime"] = this.execTime ? this.execTime.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["patientDaLongtermId"] = this.patientDaLongtermId;
        data["patientDaTemporaryId"] = this.patientDaTemporaryId;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["deptDialysisAreaId"] = this.deptDialysisAreaId;
        data["deptDialysisSequence"] = this.deptDialysisSequence;
        data["deptDialysisAreaName"] = this.deptDialysisAreaName;
        data["bedNumber"] = this.bedNumber;
        data["bedSequence"] = this.bedSequence;
        data["patientName"] = this.patientName;
        data["patientAge"] = this.patientAge;
        data["patientGender"] = this.patientGender;
        data["patientDept"] = this.patientDept;
        data["patientInNo"] = this.patientInNo;
        data["patientBed"] = this.patientBed;
        data["hospName"] = this.hospName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["surnameCode"] = this.surnameCode;
        data["pinYinCode"] = this.pinYinCode;
        data["idNumber"] = this.idNumber;
        data["idType"] = this.idType;
        data["cureDaTypeName"] = this.cureDaTypeName;
        data["cureDaContent"] = this.cureDaContent;
        data["group"] = this.group;
        data["roomItemTypeId"] = this.roomItemTypeId;
        data["unitName"] = this.unitName;
        data["singleUnitName"] = this.singleUnitName;
        data["usageName"] = this.usageName;
        data["statusName"] = this.statusName;
        data["specLabel"] = this.specLabel;
        data["nameGoods"] = this.nameGoods;
        if (Array.isArray(this.unitList)) {
            data["unitList"] = [];
            for (let item of this.unitList)
                data["unitList"].push(item.toJSON());
        }
        data["allowCheck"] = this.allowCheck;
        data["allowModify"] = this.allowModify;
        data["allowExec"] = this.allowExec;
        data["allowRevocation"] = this.allowRevocation;
        data["revocationer"] = this.revocationer;
        data["revocationTime"] = this.revocationTime ? this.revocationTime.toISOString() : <any>undefined;
        data["typeName"] = this.typeName;
        data["source"] = this.source;
        data["inventoryCount"] = this.inventoryCount;
        data["id"] = this.id;
        data["deptDialysisBedId"] = this.deptDialysisBedId;
        data["patientId"] = this.patientId;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["execNurseName"] = this.execNurseName;
        data["execNurseTime"] = this.execNurseTime;
        data["openTimeHH"] = this.openTimeHH;
        data["openTimeDate"] = this.openTimeDate;
        return data;
    }
}

/** 透析医嘱 */
export interface ICureDaView {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` */
    unit?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 自备药0,1 */
    owned: number;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 执行日期 */
    execDate: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 基本单位（用于组合规格） `DIC.SYS.UNIT` */
    unitBase?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel?: string | undefined;
    /** 一级单位（用于组合规格） `DIC.SYS.UNIT` */
    unitLevel1?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立医生标识 */
    doctorId?: string | undefined;
    /** 开立医生姓名 */
    doctorName?: string | undefined;
    /** 核对护士标识 */
    checkNurseId?: string | undefined;
    /** 核对护士姓名 */
    checkNurseName?: string | undefined;
    /** 执行护士标识 */
    nurseId?: string | undefined;
    /** 执行护士姓名 */
    nurseName?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 核对时间 */
    checkTime?: dayjs.Dayjs | undefined;
    /** 执行时间 */
    execTime?: dayjs.Dayjs | undefined;
    /** 执行状态 `DIC.DIALYSIS.DA.STATUS` *待核对,已核对(待执行),已撤销,待调整,已执行* */
    status?: string | undefined;
    /** 长期医嘱标识 *医嘱来源* */
    patientDaLongtermId?: string | undefined;
    /** 临时医嘱标识 *医嘱来源* */
    patientDaTemporaryId?: string | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 区域 */
    deptDialysisAreaId?: string | undefined;
    /** 区域排序 */
    deptDialysisSequence?: number | undefined;
    /** 区域名称 */
    deptDialysisAreaName?: string | undefined;
    /** 床号 */
    bedNumber?: string | undefined;
    /** 床位序号 */
    bedSequence?: number | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    patientAge?: string | undefined;
    patientGender?: string | undefined;
    patientDept?: string | undefined;
    patientInNo?: string | undefined;
    patientBed?: string | undefined;
    hospName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 患者拼音首字母 */
    pinYinCode?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 医嘱类型 */
    cureDaTypeName?: string | undefined;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 分组 */
    group?: string | undefined;
    /** 项目分类标识 */
    roomItemTypeId?: string | undefined;
    /** 数量单位名称 */
    unitName?: string | undefined;
    /** 单次用量单位名称 */
    singleUnitName?: string | undefined;
    /** 用法名称 */
    usageName?: string | undefined;
    /** 执行状态名称 */
    statusName?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 是否允许核对(未核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能核对)(用户权限未判断) */
    allowCheck?: boolean;
    /** 是否允许编辑(未核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能核对)(用户权限未判断) */
    allowModify?: boolean;
    /** 是否允许执行(已核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能执行)(用户权限未判断) */
    allowExec?: boolean;
    /** 是否允许撤销(未执行未撤销的医嘱，才能撤销)(用户权限未判断) */
    allowRevocation?: boolean;
    /** 撤销人 */
    revocationer?: string | undefined;
    /** 撤销时间 */
    revocationTime?: dayjs.Dayjs | undefined;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 来源标签 */
    source?: string | undefined;
    /** 药品库存 */
    inventoryCount?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 床位标识 */
    deptDialysisBedId?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    execNurseName?: string | undefined;
    execNurseTime?: string | undefined;
    openTimeHH?: string | undefined;
    openTimeDate?: string | undefined;
}

/** Reponse */
export class CureDaViewResult implements ICureDaViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDaView[] | undefined;

    constructor(data?: ICureDaViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureDaView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureDaViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureDaViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDaView[] | undefined;
}

/** 透析区间信息 */
export class CureDialysisItem implements ICureDialysisItem {
    /** 透析区间标识 */
    deptDialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    deptDialysisAreaName?: string | undefined;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    deptDialysisAreaType?: string | undefined;
    /** 类型名称 */
    deptDialysisAreaTypeName?: string | undefined;
    /** 图标 */
    deptDialysisAreaIcon?: string | undefined;
    /** 图标 */
    deptDialysisAreaIconLabel?: string | undefined;
    /** 是否阳性分区0,1 */
    deptDialysisAreaPositive?: number;
    /** 序列 */
    deptDialysisAreaSequence?: number;
    /** 启用状态0,1 */
    deptDialysisAreaEnabled?: number;
    /** 患者排床床位信息 */
    bedItems?: CureBedItem[] | undefined;

    constructor(data?: ICureDialysisItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deptDialysisAreaId = _data["deptDialysisAreaId"];
            this.deptDialysisAreaName = _data["deptDialysisAreaName"];
            this.deptDialysisAreaType = _data["deptDialysisAreaType"];
            this.deptDialysisAreaTypeName = _data["deptDialysisAreaTypeName"];
            this.deptDialysisAreaIcon = _data["deptDialysisAreaIcon"];
            this.deptDialysisAreaIconLabel = _data["deptDialysisAreaIconLabel"];
            this.deptDialysisAreaPositive = _data["deptDialysisAreaPositive"];
            this.deptDialysisAreaSequence = _data["deptDialysisAreaSequence"];
            this.deptDialysisAreaEnabled = _data["deptDialysisAreaEnabled"];
            if (Array.isArray(_data["bedItems"])) {
                this.bedItems = [] as any;
                for (let item of _data["bedItems"])
                    this.bedItems!.push(CureBedItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureDialysisItem {
        data = typeof data === 'object' ? data : {};
        let result = new CureDialysisItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deptDialysisAreaId"] = this.deptDialysisAreaId;
        data["deptDialysisAreaName"] = this.deptDialysisAreaName;
        data["deptDialysisAreaType"] = this.deptDialysisAreaType;
        data["deptDialysisAreaTypeName"] = this.deptDialysisAreaTypeName;
        data["deptDialysisAreaIcon"] = this.deptDialysisAreaIcon;
        data["deptDialysisAreaIconLabel"] = this.deptDialysisAreaIconLabel;
        data["deptDialysisAreaPositive"] = this.deptDialysisAreaPositive;
        data["deptDialysisAreaSequence"] = this.deptDialysisAreaSequence;
        data["deptDialysisAreaEnabled"] = this.deptDialysisAreaEnabled;
        if (Array.isArray(this.bedItems)) {
            data["bedItems"] = [];
            for (let item of this.bedItems)
                data["bedItems"].push(item.toJSON());
        }
        return data;
    }
}

/** 透析区间信息 */
export interface ICureDialysisItem {
    /** 透析区间标识 */
    deptDialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    deptDialysisAreaName?: string | undefined;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    deptDialysisAreaType?: string | undefined;
    /** 类型名称 */
    deptDialysisAreaTypeName?: string | undefined;
    /** 图标 */
    deptDialysisAreaIcon?: string | undefined;
    /** 图标 */
    deptDialysisAreaIconLabel?: string | undefined;
    /** 是否阳性分区0,1 */
    deptDialysisAreaPositive?: number;
    /** 序列 */
    deptDialysisAreaSequence?: number;
    /** 启用状态0,1 */
    deptDialysisAreaEnabled?: number;
    /** 患者排床床位信息 */
    bedItems?: CureBedItem[] | undefined;
}

export class CureFieldValueView implements ICureFieldValueView {
    /** 透析记录单 */
    cureRecordId?: string | undefined;
    /** 字段名 */
    fieldKey?: string | undefined;
    /** 字段值 */
    fieldValue?: string | undefined;
    /** 字段类型 */
    dataType?: string | undefined;
    /** 单位 */
    unit?: string | undefined;

    constructor(data?: ICureFieldValueView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.fieldKey = _data["fieldKey"];
            this.fieldValue = _data["fieldValue"];
            this.dataType = _data["dataType"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): CureFieldValueView {
        data = typeof data === 'object' ? data : {};
        let result = new CureFieldValueView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["fieldKey"] = this.fieldKey;
        data["fieldValue"] = this.fieldValue;
        data["dataType"] = this.dataType;
        data["unit"] = this.unit;
        return data;
    }
}

export interface ICureFieldValueView {
    /** 透析记录单 */
    cureRecordId?: string | undefined;
    /** 字段名 */
    fieldKey?: string | undefined;
    /** 字段值 */
    fieldValue?: string | undefined;
    /** 字段类型 */
    dataType?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
}

/** 患者排床详细信息 */
export class CurePatient implements ICurePatient {
    isShift?: boolean;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 透析日 `DIC.DIALYSIS.WEEKDAY` */
    weekday?: number;
    /** 透析日名称 */
    weekdayName?: string | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName?: string | undefined;
    /** 班次颜色 */
    shiftColor?: string | undefined;
    /** 班次序列 */
    sequence?: number;
    /** 开始时间 *HH:mm:ss* */
    beginTime?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    endTime?: string | undefined;
    patient?: CureBedPatientDetail;

    constructor(data?: ICurePatient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isShift = _data["isShift"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.weekday = _data["weekday"];
            this.weekdayName = _data["weekdayName"];
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.shiftColor = _data["shiftColor"];
            this.sequence = _data["sequence"];
            this.beginTime = _data["beginTime"];
            this.endTime = _data["endTime"];
            this.patient = _data["patient"] ? CureBedPatientDetail.fromJS(_data["patient"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CurePatient {
        data = typeof data === 'object' ? data : {};
        let result = new CurePatient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isShift"] = this.isShift;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["weekday"] = this.weekday;
        data["weekdayName"] = this.weekdayName;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["shiftColor"] = this.shiftColor;
        data["sequence"] = this.sequence;
        data["beginTime"] = this.beginTime;
        data["endTime"] = this.endTime;
        data["patient"] = this.patient ? this.patient.toJSON() : <any>undefined;
        return data;
    }
}

/** 患者排床详细信息 */
export interface ICurePatient {
    isShift?: boolean;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 透析日 `DIC.DIALYSIS.WEEKDAY` */
    weekday?: number;
    /** 透析日名称 */
    weekdayName?: string | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName?: string | undefined;
    /** 班次颜色 */
    shiftColor?: string | undefined;
    /** 班次序列 */
    sequence?: number;
    /** 开始时间 *HH:mm:ss* */
    beginTime?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    endTime?: string | undefined;
    patient?: CureBedPatientDetail;
}

/** 透析耗材 */
export class CureRecordConsumableItemView implements ICureRecordConsumableItemView {
    /** [透析耗材标识](#透析耗材) */
    cureRecordConsumableId?: string | undefined;
    /** [入库记录标识](#入库记录) */
    roomRecordInId?: string | undefined;
    /** 耗材数量 */
    batchCount!: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 批号剩余数量 */
    surplusCount?: number;
    /** 批号有效期 */
    expiryDate?: dayjs.Dayjs | undefined;

    constructor(data?: ICureRecordConsumableItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordConsumableId = _data["cureRecordConsumableId"];
            this.roomRecordInId = _data["roomRecordInId"];
            this.batchCount = _data["batchCount"];
            this.batchNo = _data["batchNo"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.surplusCount = _data["surplusCount"];
            this.expiryDate = _data["expiryDate"] ? dayjs(_data["expiryDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordConsumableItemView {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordConsumableItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordConsumableId"] = this.cureRecordConsumableId;
        data["roomRecordInId"] = this.roomRecordInId;
        data["batchCount"] = this.batchCount;
        data["batchNo"] = this.batchNo;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["surplusCount"] = this.surplusCount;
        data["expiryDate"] = this.expiryDate ? this.expiryDate.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析耗材 */
export interface ICureRecordConsumableItemView {
    /** [透析耗材标识](#透析耗材) */
    cureRecordConsumableId?: string | undefined;
    /** [入库记录标识](#入库记录) */
    roomRecordInId?: string | undefined;
    /** 耗材数量 */
    batchCount: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 批号剩余数量 */
    surplusCount?: number;
    /** 批号有效期 */
    expiryDate?: dayjs.Dayjs | undefined;
}

/** 抗凝剂 */
export class CureRecordItemAnticoagulant implements ICureRecordItemAnticoagulant {
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** 抗凝剂简称 */
    anticoagulantShortName?: string | undefined;
    /** 抗凝剂模版类型 */
    antiTmplType?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1?: string | undefined;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *枸橼酸钠>浓度* */
    first?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它 */
    anticoagulantOther?: string | undefined;
    /** 大类名称 */
    classify1Label?: string | undefined;
    /** 小类名称 */
    classify2Label?: string | undefined;
    /** 首剂-单位名称 */
    firstUnitLabel?: string | undefined;
    /** 无抗凝剂原因 */
    nonReason?: string | undefined;

    constructor(data?: ICureRecordItemAnticoagulant) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.anticoagulantName = _data["anticoagulantName"];
            this.anticoagulantShortName = _data["anticoagulantShortName"];
            this.antiTmplType = _data["antiTmplType"];
            this.classify1 = _data["classify1"];
            this.classify2 = _data["classify2"];
            this.first = _data["first"];
            this.firstUnit = _data["firstUnit"];
            this.appendRate = _data["appendRate"];
            this.appendRateUnit = _data["appendRateUnit"];
            this.appendTime = _data["appendTime"];
            this.append = _data["append"];
            this.appendUnit = _data["appendUnit"];
            this.concentration = _data["concentration"];
            this.total = _data["total"];
            this.totalUnit = _data["totalUnit"];
            this.anticoagulantOther = _data["anticoagulantOther"];
            this.classify1Label = _data["classify1Label"];
            this.classify2Label = _data["classify2Label"];
            this.firstUnitLabel = _data["firstUnitLabel"];
            this.nonReason = _data["nonReason"];
        }
    }

    static fromJS(data: any): CureRecordItemAnticoagulant {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemAnticoagulant();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["anticoagulantName"] = this.anticoagulantName;
        data["anticoagulantShortName"] = this.anticoagulantShortName;
        data["antiTmplType"] = this.antiTmplType;
        data["classify1"] = this.classify1;
        data["classify2"] = this.classify2;
        data["first"] = this.first;
        data["firstUnit"] = this.firstUnit;
        data["appendRate"] = this.appendRate;
        data["appendRateUnit"] = this.appendRateUnit;
        data["appendTime"] = this.appendTime;
        data["append"] = this.append;
        data["appendUnit"] = this.appendUnit;
        data["concentration"] = this.concentration;
        data["total"] = this.total;
        data["totalUnit"] = this.totalUnit;
        data["anticoagulantOther"] = this.anticoagulantOther;
        data["classify1Label"] = this.classify1Label;
        data["classify2Label"] = this.classify2Label;
        data["firstUnitLabel"] = this.firstUnitLabel;
        data["nonReason"] = this.nonReason;
        return data;
    }
}

/** 抗凝剂 */
export interface ICureRecordItemAnticoagulant {
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** 抗凝剂简称 */
    anticoagulantShortName?: string | undefined;
    /** 抗凝剂模版类型 */
    antiTmplType?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1?: string | undefined;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *枸橼酸钠>浓度* */
    first?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它 */
    anticoagulantOther?: string | undefined;
    /** 大类名称 */
    classify1Label?: string | undefined;
    /** 小类名称 */
    classify2Label?: string | undefined;
    /** 首剂-单位名称 */
    firstUnitLabel?: string | undefined;
    /** 无抗凝剂原因 */
    nonReason?: string | undefined;
}

/** 透前评估 */
export class CureRecordItemAssement implements ICureRecordItemAssement {
    /** 表单结构 */
    data?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** 受支持的表单自定义数据 */
    values?: SysFormValueView[] | undefined;

    constructor(data?: ICureRecordItemAssement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"];
            this.dataValue = _data["dataValue"];
            if (Array.isArray(_data["values"])) {
                this.values = [] as any;
                for (let item of _data["values"])
                    this.values!.push(SysFormValueView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordItemAssement {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemAssement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data;
        data["dataValue"] = this.dataValue;
        if (Array.isArray(this.values)) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item.toJSON());
        }
        return data;
    }
}

/** 透前评估 */
export interface ICureRecordItemAssement {
    /** 表单结构 */
    data?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** 受支持的表单自定义数据 */
    values?: SysFormValueView[] | undefined;
}

/** 透中事件 */
export class CureRecordItemComplication implements ICureRecordItemComplication {
    /** 标识 */
    id?: string | undefined;
    /** 操作者标识 */
    operatorId?: string | undefined;
    /** 操作者姓名 */
    operatorName?: string | undefined;
    /** 发生时间 */
    occurredTime?: dayjs.Dayjs;
    /** 并发症名称 */
    name?: string | undefined;
    /** 处理 */
    dispose?: string | undefined;
    /** 原因 */
    cause?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 文件列表 */
    complicationFiles?: CureRecordItemComplicationFile[] | undefined;

    constructor(data?: ICureRecordItemComplication) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.operatorId = _data["operatorId"];
            this.operatorName = _data["operatorName"];
            this.occurredTime = _data["occurredTime"] ? dayjs(_data["occurredTime"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.dispose = _data["dispose"];
            this.cause = _data["cause"];
            this.remark = _data["remark"];
            if (Array.isArray(_data["complicationFiles"])) {
                this.complicationFiles = [] as any;
                for (let item of _data["complicationFiles"])
                    this.complicationFiles!.push(CureRecordItemComplicationFile.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordItemComplication {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemComplication();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["operatorId"] = this.operatorId;
        data["operatorName"] = this.operatorName;
        data["occurredTime"] = this.occurredTime ? this.occurredTime.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["dispose"] = this.dispose;
        data["cause"] = this.cause;
        data["remark"] = this.remark;
        if (Array.isArray(this.complicationFiles)) {
            data["complicationFiles"] = [];
            for (let item of this.complicationFiles)
                data["complicationFiles"].push(item.toJSON());
        }
        return data;
    }
}

/** 透中事件 */
export interface ICureRecordItemComplication {
    /** 标识 */
    id?: string | undefined;
    /** 操作者标识 */
    operatorId?: string | undefined;
    /** 操作者姓名 */
    operatorName?: string | undefined;
    /** 发生时间 */
    occurredTime?: dayjs.Dayjs;
    /** 并发症名称 */
    name?: string | undefined;
    /** 处理 */
    dispose?: string | undefined;
    /** 原因 */
    cause?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 文件列表 */
    complicationFiles?: CureRecordItemComplicationFile[] | undefined;
}

export class CureRecordItemComplicationFile implements ICureRecordItemComplicationFile {
    /** 文件标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 文件路径 */
    url?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;

    constructor(data?: ICureRecordItemComplicationFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.url = _data["url"];
            this.extension = _data["extension"];
            this.length = _data["length"];
        }
    }

    static fromJS(data: any): CureRecordItemComplicationFile {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemComplicationFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["url"] = this.url;
        data["extension"] = this.extension;
        data["length"] = this.length;
        return data;
    }
}

export interface ICureRecordItemComplicationFile {
    /** 文件标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 文件路径 */
    url?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
}

/** 耗材 */
export class CureRecordItemConsumable implements ICureRecordItemConsumable {
    /** 耗材标识-透析器 */
    roomItemListTXQId?: string | undefined;
    /** 耗材-透析器名称 */
    roomItemListTXQLabel?: string | undefined;
    /** 耗材-所有透析器名称 */
    roomItemListTXQLabels?: string | undefined;
    /** 耗材-透析器数量 */
    roomItemListTXQCount?: number | undefined;
    /** 透析器耗材条码 */
    roomItemListTXQDevBarCode?: string | undefined;
    /** 透析器耗材批号 */
    roomItemListTXQBatchNo?: string | undefined;
    /** 耗材标识-灌流器 */
    roomItemListGLQId?: string | undefined;
    /** 耗材-灌流器名称 */
    roomItemListGLQLabel?: string | undefined;
    /** 耗材-灌流器名称 */
    roomItemListGLQLabels?: string | undefined;
    /** 灌流器耗材条码 */
    roomItemListGLQDevBarCode?: string | undefined;
    /** 灌流器耗材批号 */
    roomItemListGLQBatchNo?: string | undefined;
    /** 耗材-灌流器数量 */
    roomItemListGLQCount?: number | undefined;
    /** 耗材标识-血滤器 */
    roomItemListXLQId?: string | undefined;
    /** 耗材-血滤器名称 */
    roomItemListXLQLabel?: string | undefined;
    /** 耗材-血滤器名称 */
    roomItemListXLQLabels?: string | undefined;
    /** 耗材-血滤器数量 */
    roomItemListXLQCount?: number | undefined;
    /** 血滤器耗材条码 */
    roomItemListXLQDevBarCode?: string | undefined;
    /** 血滤器耗材批号 */
    roomItemListXLQBatchNo?: string | undefined;
    /** 耗材标识-血路管 */
    roomItemListXLGId?: string | undefined;
    /** 耗材-血路管名称 */
    roomItemListXLGLabel?: string | undefined;
    /** 耗材-血路管名称 */
    roomItemListXLGLabels?: string | undefined;
    /** 耗材-血路管数量 */
    roomItemListXLGCount?: number | undefined;
    /** 血路管耗材条码 */
    roomItemListXLGDevBarCode?: string | undefined;
    /** 血路管耗材批号 */
    roomItemListXLGBatchNo?: string | undefined;
    /** 耗材标识-内瘘针 */
    roomItemListNLZId?: string | undefined;
    /** 耗材-内瘘针名称 */
    roomItemListNLZLabel?: string | undefined;
    /** 耗材-内瘘针名称 */
    roomItemListNLZLabels?: string | undefined;
    /** 耗材-内瘘针数量 */
    roomItemListNLZCount?: number | undefined;
    /** 内瘘针耗材条码 */
    roomItemListNLZDevBarCode?: string | undefined;
    /** 耗材标识-置换液管路 */
    roomItemListZHYGLId?: string | undefined;
    /** 耗材-置换液管路名称 */
    roomItemListZHYGLLabel?: string | undefined;
    /** 耗材-置换液管路名称 */
    roomItemListZHYGLLabels?: string | undefined;
    /** 耗材-置换液管路数量 */
    roomItemListZHYGLCount?: number | undefined;
    /** 置换液管路耗材条码 */
    roomItemListZHYGLDevBarCode?: string | undefined;
    /** 灌流连接管 */
    perfusionCatheter?: string | undefined;
    /** 灌流连接管 */
    perfusionCatheters?: string | undefined;
    /** 灌流连接管条码 */
    perfusionCatheterDevBarCode?: string | undefined;
    /** 血浆分离器 */
    plasmaSeparator?: string | undefined;
    /** 血浆分离器 */
    plasmaSeparators?: string | undefined;
    /** 血浆分离器条码 */
    plasmaSeparatorDevBarCode?: string | undefined;

    constructor(data?: ICureRecordItemConsumable) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListTXQId = _data["roomItemListTXQId"];
            this.roomItemListTXQLabel = _data["roomItemListTXQLabel"];
            this.roomItemListTXQLabels = _data["roomItemListTXQLabels"];
            this.roomItemListTXQCount = _data["roomItemListTXQCount"];
            this.roomItemListTXQDevBarCode = _data["roomItemListTXQDevBarCode"];
            this.roomItemListTXQBatchNo = _data["roomItemListTXQBatchNo"];
            this.roomItemListGLQId = _data["roomItemListGLQId"];
            this.roomItemListGLQLabel = _data["roomItemListGLQLabel"];
            this.roomItemListGLQLabels = _data["roomItemListGLQLabels"];
            this.roomItemListGLQDevBarCode = _data["roomItemListGLQDevBarCode"];
            this.roomItemListGLQBatchNo = _data["roomItemListGLQBatchNo"];
            this.roomItemListGLQCount = _data["roomItemListGLQCount"];
            this.roomItemListXLQId = _data["roomItemListXLQId"];
            this.roomItemListXLQLabel = _data["roomItemListXLQLabel"];
            this.roomItemListXLQLabels = _data["roomItemListXLQLabels"];
            this.roomItemListXLQCount = _data["roomItemListXLQCount"];
            this.roomItemListXLQDevBarCode = _data["roomItemListXLQDevBarCode"];
            this.roomItemListXLQBatchNo = _data["roomItemListXLQBatchNo"];
            this.roomItemListXLGId = _data["roomItemListXLGId"];
            this.roomItemListXLGLabel = _data["roomItemListXLGLabel"];
            this.roomItemListXLGLabels = _data["roomItemListXLGLabels"];
            this.roomItemListXLGCount = _data["roomItemListXLGCount"];
            this.roomItemListXLGDevBarCode = _data["roomItemListXLGDevBarCode"];
            this.roomItemListXLGBatchNo = _data["roomItemListXLGBatchNo"];
            this.roomItemListNLZId = _data["roomItemListNLZId"];
            this.roomItemListNLZLabel = _data["roomItemListNLZLabel"];
            this.roomItemListNLZLabels = _data["roomItemListNLZLabels"];
            this.roomItemListNLZCount = _data["roomItemListNLZCount"];
            this.roomItemListNLZDevBarCode = _data["roomItemListNLZDevBarCode"];
            this.roomItemListZHYGLId = _data["roomItemListZHYGLId"];
            this.roomItemListZHYGLLabel = _data["roomItemListZHYGLLabel"];
            this.roomItemListZHYGLLabels = _data["roomItemListZHYGLLabels"];
            this.roomItemListZHYGLCount = _data["roomItemListZHYGLCount"];
            this.roomItemListZHYGLDevBarCode = _data["roomItemListZHYGLDevBarCode"];
            this.perfusionCatheter = _data["perfusionCatheter"];
            this.perfusionCatheters = _data["perfusionCatheters"];
            this.perfusionCatheterDevBarCode = _data["perfusionCatheterDevBarCode"];
            this.plasmaSeparator = _data["plasmaSeparator"];
            this.plasmaSeparators = _data["plasmaSeparators"];
            this.plasmaSeparatorDevBarCode = _data["plasmaSeparatorDevBarCode"];
        }
    }

    static fromJS(data: any): CureRecordItemConsumable {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemConsumable();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListTXQId"] = this.roomItemListTXQId;
        data["roomItemListTXQLabel"] = this.roomItemListTXQLabel;
        data["roomItemListTXQLabels"] = this.roomItemListTXQLabels;
        data["roomItemListTXQCount"] = this.roomItemListTXQCount;
        data["roomItemListTXQDevBarCode"] = this.roomItemListTXQDevBarCode;
        data["roomItemListTXQBatchNo"] = this.roomItemListTXQBatchNo;
        data["roomItemListGLQId"] = this.roomItemListGLQId;
        data["roomItemListGLQLabel"] = this.roomItemListGLQLabel;
        data["roomItemListGLQLabels"] = this.roomItemListGLQLabels;
        data["roomItemListGLQDevBarCode"] = this.roomItemListGLQDevBarCode;
        data["roomItemListGLQBatchNo"] = this.roomItemListGLQBatchNo;
        data["roomItemListGLQCount"] = this.roomItemListGLQCount;
        data["roomItemListXLQId"] = this.roomItemListXLQId;
        data["roomItemListXLQLabel"] = this.roomItemListXLQLabel;
        data["roomItemListXLQLabels"] = this.roomItemListXLQLabels;
        data["roomItemListXLQCount"] = this.roomItemListXLQCount;
        data["roomItemListXLQDevBarCode"] = this.roomItemListXLQDevBarCode;
        data["roomItemListXLQBatchNo"] = this.roomItemListXLQBatchNo;
        data["roomItemListXLGId"] = this.roomItemListXLGId;
        data["roomItemListXLGLabel"] = this.roomItemListXLGLabel;
        data["roomItemListXLGLabels"] = this.roomItemListXLGLabels;
        data["roomItemListXLGCount"] = this.roomItemListXLGCount;
        data["roomItemListXLGDevBarCode"] = this.roomItemListXLGDevBarCode;
        data["roomItemListXLGBatchNo"] = this.roomItemListXLGBatchNo;
        data["roomItemListNLZId"] = this.roomItemListNLZId;
        data["roomItemListNLZLabel"] = this.roomItemListNLZLabel;
        data["roomItemListNLZLabels"] = this.roomItemListNLZLabels;
        data["roomItemListNLZCount"] = this.roomItemListNLZCount;
        data["roomItemListNLZDevBarCode"] = this.roomItemListNLZDevBarCode;
        data["roomItemListZHYGLId"] = this.roomItemListZHYGLId;
        data["roomItemListZHYGLLabel"] = this.roomItemListZHYGLLabel;
        data["roomItemListZHYGLLabels"] = this.roomItemListZHYGLLabels;
        data["roomItemListZHYGLCount"] = this.roomItemListZHYGLCount;
        data["roomItemListZHYGLDevBarCode"] = this.roomItemListZHYGLDevBarCode;
        data["perfusionCatheter"] = this.perfusionCatheter;
        data["perfusionCatheters"] = this.perfusionCatheters;
        data["perfusionCatheterDevBarCode"] = this.perfusionCatheterDevBarCode;
        data["plasmaSeparator"] = this.plasmaSeparator;
        data["plasmaSeparators"] = this.plasmaSeparators;
        data["plasmaSeparatorDevBarCode"] = this.plasmaSeparatorDevBarCode;
        return data;
    }
}

/** 耗材 */
export interface ICureRecordItemConsumable {
    /** 耗材标识-透析器 */
    roomItemListTXQId?: string | undefined;
    /** 耗材-透析器名称 */
    roomItemListTXQLabel?: string | undefined;
    /** 耗材-所有透析器名称 */
    roomItemListTXQLabels?: string | undefined;
    /** 耗材-透析器数量 */
    roomItemListTXQCount?: number | undefined;
    /** 透析器耗材条码 */
    roomItemListTXQDevBarCode?: string | undefined;
    /** 透析器耗材批号 */
    roomItemListTXQBatchNo?: string | undefined;
    /** 耗材标识-灌流器 */
    roomItemListGLQId?: string | undefined;
    /** 耗材-灌流器名称 */
    roomItemListGLQLabel?: string | undefined;
    /** 耗材-灌流器名称 */
    roomItemListGLQLabels?: string | undefined;
    /** 灌流器耗材条码 */
    roomItemListGLQDevBarCode?: string | undefined;
    /** 灌流器耗材批号 */
    roomItemListGLQBatchNo?: string | undefined;
    /** 耗材-灌流器数量 */
    roomItemListGLQCount?: number | undefined;
    /** 耗材标识-血滤器 */
    roomItemListXLQId?: string | undefined;
    /** 耗材-血滤器名称 */
    roomItemListXLQLabel?: string | undefined;
    /** 耗材-血滤器名称 */
    roomItemListXLQLabels?: string | undefined;
    /** 耗材-血滤器数量 */
    roomItemListXLQCount?: number | undefined;
    /** 血滤器耗材条码 */
    roomItemListXLQDevBarCode?: string | undefined;
    /** 血滤器耗材批号 */
    roomItemListXLQBatchNo?: string | undefined;
    /** 耗材标识-血路管 */
    roomItemListXLGId?: string | undefined;
    /** 耗材-血路管名称 */
    roomItemListXLGLabel?: string | undefined;
    /** 耗材-血路管名称 */
    roomItemListXLGLabels?: string | undefined;
    /** 耗材-血路管数量 */
    roomItemListXLGCount?: number | undefined;
    /** 血路管耗材条码 */
    roomItemListXLGDevBarCode?: string | undefined;
    /** 血路管耗材批号 */
    roomItemListXLGBatchNo?: string | undefined;
    /** 耗材标识-内瘘针 */
    roomItemListNLZId?: string | undefined;
    /** 耗材-内瘘针名称 */
    roomItemListNLZLabel?: string | undefined;
    /** 耗材-内瘘针名称 */
    roomItemListNLZLabels?: string | undefined;
    /** 耗材-内瘘针数量 */
    roomItemListNLZCount?: number | undefined;
    /** 内瘘针耗材条码 */
    roomItemListNLZDevBarCode?: string | undefined;
    /** 耗材标识-置换液管路 */
    roomItemListZHYGLId?: string | undefined;
    /** 耗材-置换液管路名称 */
    roomItemListZHYGLLabel?: string | undefined;
    /** 耗材-置换液管路名称 */
    roomItemListZHYGLLabels?: string | undefined;
    /** 耗材-置换液管路数量 */
    roomItemListZHYGLCount?: number | undefined;
    /** 置换液管路耗材条码 */
    roomItemListZHYGLDevBarCode?: string | undefined;
    /** 灌流连接管 */
    perfusionCatheter?: string | undefined;
    /** 灌流连接管 */
    perfusionCatheters?: string | undefined;
    /** 灌流连接管条码 */
    perfusionCatheterDevBarCode?: string | undefined;
    /** 血浆分离器 */
    plasmaSeparator?: string | undefined;
    /** 血浆分离器 */
    plasmaSeparators?: string | undefined;
    /** 血浆分离器条码 */
    plasmaSeparatorDevBarCode?: string | undefined;
}

/** 透析医嘱 */
export class CureRecordItemDa implements ICureRecordItemDa {
    /** 标识 */
    id?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 分组 */
    group?: string | undefined;
    /** 开立医生标识 */
    doctorId?: string | undefined;
    /** 开立医生姓名 */
    doctorName?: string | undefined;
    /** 核对护士标识 */
    checkNurseId?: string | undefined;
    /** 核对护士姓名 */
    checkNurseName?: string | undefined;
    /** 执行护士标识 */
    nurseId?: string | undefined;
    /** 执行护士姓名 */
    nurseName?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 核对时间 */
    checkTime?: dayjs.Dayjs | undefined;
    /** 执行时间 */
    execTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** [项目标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 用量 */
    dosage?: number;
    /** 单位 `DIC.SYS.UNIT` */
    unit?: string | undefined;
    /** 单次数量 */
    singleDosage?: number | undefined;
    /** 单次数量单位 */
    singleUnit?: string | undefined;
    /** 单次数量单位显示值 */
    singleUnitLabel?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 执行状态 `DIC.DIALYSIS.DA.STATUS` *待核对,已核对(待执行),已撤销,待调整,已执行* */
    status?: string | undefined;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 单位显示值 */
    unitLabel?: string | undefined;
    /** 用法显示值 */
    usageLabel?: string | undefined;
    /** 执行状态显示值 */
    statusLabel?: string | undefined;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureRecordItemDa) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.groupId = _data["groupId"];
            this.group = _data["group"];
            this.doctorId = _data["doctorId"];
            this.doctorName = _data["doctorName"];
            this.checkNurseId = _data["checkNurseId"];
            this.checkNurseName = _data["checkNurseName"];
            this.nurseId = _data["nurseId"];
            this.nurseName = _data["nurseName"];
            this.doctorCreateTime = _data["doctorCreateTime"] ? dayjs(_data["doctorCreateTime"].toString()) : <any>undefined;
            this.checkTime = _data["checkTime"] ? dayjs(_data["checkTime"].toString()) : <any>undefined;
            this.execTime = _data["execTime"] ? dayjs(_data["execTime"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.nameGoods = _data["nameGoods"];
            this.roomItemListId = _data["roomItemListId"];
            this.usage = _data["usage"];
            this.dosage = _data["dosage"];
            this.unit = _data["unit"];
            this.singleDosage = _data["singleDosage"];
            this.singleUnit = _data["singleUnit"];
            this.singleUnitLabel = _data["singleUnitLabel"];
            this.orally = _data["orally"];
            this.status = _data["status"];
            this.cureDaContent = _data["cureDaContent"];
            this.unitLabel = _data["unitLabel"];
            this.usageLabel = _data["usageLabel"];
            this.statusLabel = _data["statusLabel"];
            this.type = _data["type"];
            this.typeName = _data["typeName"];
            this.content = _data["content"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureRecordItemDa {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemDa();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["groupId"] = this.groupId;
        data["group"] = this.group;
        data["doctorId"] = this.doctorId;
        data["doctorName"] = this.doctorName;
        data["checkNurseId"] = this.checkNurseId;
        data["checkNurseName"] = this.checkNurseName;
        data["nurseId"] = this.nurseId;
        data["nurseName"] = this.nurseName;
        data["doctorCreateTime"] = this.doctorCreateTime ? this.doctorCreateTime.toISOString() : <any>undefined;
        data["checkTime"] = this.checkTime ? this.checkTime.toISOString() : <any>undefined;
        data["execTime"] = this.execTime ? this.execTime.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["nameGoods"] = this.nameGoods;
        data["roomItemListId"] = this.roomItemListId;
        data["usage"] = this.usage;
        data["dosage"] = this.dosage;
        data["unit"] = this.unit;
        data["singleDosage"] = this.singleDosage;
        data["singleUnit"] = this.singleUnit;
        data["singleUnitLabel"] = this.singleUnitLabel;
        data["orally"] = this.orally;
        data["status"] = this.status;
        data["cureDaContent"] = this.cureDaContent;
        data["unitLabel"] = this.unitLabel;
        data["usageLabel"] = this.usageLabel;
        data["statusLabel"] = this.statusLabel;
        data["type"] = this.type;
        data["typeName"] = this.typeName;
        data["content"] = this.content;
        data["remark"] = this.remark;
        return data;
    }
}

/** 透析医嘱 */
export interface ICureRecordItemDa {
    /** 标识 */
    id?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 分组 */
    group?: string | undefined;
    /** 开立医生标识 */
    doctorId?: string | undefined;
    /** 开立医生姓名 */
    doctorName?: string | undefined;
    /** 核对护士标识 */
    checkNurseId?: string | undefined;
    /** 核对护士姓名 */
    checkNurseName?: string | undefined;
    /** 执行护士标识 */
    nurseId?: string | undefined;
    /** 执行护士姓名 */
    nurseName?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 核对时间 */
    checkTime?: dayjs.Dayjs | undefined;
    /** 执行时间 */
    execTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** [项目标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 用量 */
    dosage?: number;
    /** 单位 `DIC.SYS.UNIT` */
    unit?: string | undefined;
    /** 单次数量 */
    singleDosage?: number | undefined;
    /** 单次数量单位 */
    singleUnit?: string | undefined;
    /** 单次数量单位显示值 */
    singleUnitLabel?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 执行状态 `DIC.DIALYSIS.DA.STATUS` *待核对,已核对(待执行),已撤销,待调整,已执行* */
    status?: string | undefined;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 单位显示值 */
    unitLabel?: string | undefined;
    /** 用法显示值 */
    usageLabel?: string | undefined;
    /** 执行状态显示值 */
    statusLabel?: string | undefined;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 透析液 */
export class CureRecordItemDialysate implements ICureRecordItemDialysate {
    /** 透析液名称 */
    dialysateName?: string | undefined;
    /** 透析液简称 */
    dialysateShortName?: string | undefined;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;

    constructor(data?: ICureRecordItemDialysate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysateName = _data["dialysateName"];
            this.dialysateShortName = _data["dialysateShortName"];
            this.flowRate = _data["flowRate"];
            this.temp = _data["temp"];
            this.cond = _data["cond"];
            this.k = _data["k"];
            this.ca = _data["ca"];
            this.na = _data["na"];
            this.hco = _data["hco"];
            this.glucose = _data["glucose"];
        }
    }

    static fromJS(data: any): CureRecordItemDialysate {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemDialysate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysateName"] = this.dialysateName;
        data["dialysateShortName"] = this.dialysateShortName;
        data["flowRate"] = this.flowRate;
        data["temp"] = this.temp;
        data["cond"] = this.cond;
        data["k"] = this.k;
        data["ca"] = this.ca;
        data["na"] = this.na;
        data["hco"] = this.hco;
        data["glucose"] = this.glucose;
        return data;
    }
}

/** 透析液 */
export interface ICureRecordItemDialysate {
    /** 透析液名称 */
    dialysateName?: string | undefined;
    /** 透析液简称 */
    dialysateShortName?: string | undefined;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
}

/** 消毒信息 */
export class CureRecordItemDisinfect implements ICureRecordItemDisinfect {
    /** 开始时间 */
    beginDate?: dayjs.Dayjs;
    /** 停止时间 */
    endDate?: dayjs.Dayjs;
    /** 消毒时长(分钟) */
    disinfectTime?: number;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** 机内消毒方式显示值 */
    programInternalLabel?: string | undefined;
    /** 机内消毒人标识 */
    internalOperatorId?: string | undefined;
    /** 机内消毒人名称 */
    internalOperatorName?: string | undefined;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** 机外消毒方式显示值 */
    programExteriorLabel?: string | undefined;
    /** 机外消毒人标识 */
    externalOperatorId?: string | undefined;
    /** 机外消毒人名称 */
    externalOperatorName?: string | undefined;
    /** 床单元清洁 */
    bedUnitCleaning?: string | undefined;
    /** 过滤网更换 */
    filterScreenChanging?: string | undefined;
    /** 消毒温度 */
    disinfectTemp?: string | undefined;

    constructor(data?: ICureRecordItemDisinfect) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.beginDate = _data["beginDate"] ? dayjs(_data["beginDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? dayjs(_data["endDate"].toString()) : <any>undefined;
            this.disinfectTime = _data["disinfectTime"];
            this.programInternal = _data["programInternal"];
            this.programInternalLabel = _data["programInternalLabel"];
            this.internalOperatorId = _data["internalOperatorId"];
            this.internalOperatorName = _data["internalOperatorName"];
            this.programExterior = _data["programExterior"];
            this.programExteriorLabel = _data["programExteriorLabel"];
            this.externalOperatorId = _data["externalOperatorId"];
            this.externalOperatorName = _data["externalOperatorName"];
            this.bedUnitCleaning = _data["bedUnitCleaning"];
            this.filterScreenChanging = _data["filterScreenChanging"];
            this.disinfectTemp = _data["disinfectTemp"];
        }
    }

    static fromJS(data: any): CureRecordItemDisinfect {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemDisinfect();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["beginDate"] = this.beginDate ? this.beginDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["disinfectTime"] = this.disinfectTime;
        data["programInternal"] = this.programInternal;
        data["programInternalLabel"] = this.programInternalLabel;
        data["internalOperatorId"] = this.internalOperatorId;
        data["internalOperatorName"] = this.internalOperatorName;
        data["programExterior"] = this.programExterior;
        data["programExteriorLabel"] = this.programExteriorLabel;
        data["externalOperatorId"] = this.externalOperatorId;
        data["externalOperatorName"] = this.externalOperatorName;
        data["bedUnitCleaning"] = this.bedUnitCleaning;
        data["filterScreenChanging"] = this.filterScreenChanging;
        data["disinfectTemp"] = this.disinfectTemp;
        return data;
    }
}

/** 消毒信息 */
export interface ICureRecordItemDisinfect {
    /** 开始时间 */
    beginDate?: dayjs.Dayjs;
    /** 停止时间 */
    endDate?: dayjs.Dayjs;
    /** 消毒时长(分钟) */
    disinfectTime?: number;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** 机内消毒方式显示值 */
    programInternalLabel?: string | undefined;
    /** 机内消毒人标识 */
    internalOperatorId?: string | undefined;
    /** 机内消毒人名称 */
    internalOperatorName?: string | undefined;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** 机外消毒方式显示值 */
    programExteriorLabel?: string | undefined;
    /** 机外消毒人标识 */
    externalOperatorId?: string | undefined;
    /** 机外消毒人名称 */
    externalOperatorName?: string | undefined;
    /** 床单元清洁 */
    bedUnitCleaning?: string | undefined;
    /** 过滤网更换 */
    filterScreenChanging?: string | undefined;
    /** 消毒温度 */
    disinfectTemp?: string | undefined;
}

/** 透中监测 */
export class CureRecordItemMonitor implements ICureRecordItemMonitor {
    /** 标识 */
    id?: string | undefined;
    /** 监测时间 */
    monitorTime?: dayjs.Dayjs | undefined;
    /** 记录护士标识 */
    nurseId?: string | undefined;
    /** 记录护士姓名 */
    nurseName?: string | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** 血流量单位 */
    bloodFlowRateUnit?: string | undefined;
    /** 静脉压 *mmHg* */
    venousPressure?: number | undefined;
    /** 静脉压单位 */
    venousPressureUnit?: string | undefined;
    /** 动脉压 *mmHg* */
    arterialPressure?: number | undefined;
    /** 动脉压单位 */
    arterialPressureUnit?: string | undefined;
    /** 跨膜压 *mmHg Transmembrane Pressure* */
    tmp?: number | undefined;
    /** 跨膜压单位 */
    tmpUnit?: string | undefined;
    /** 测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    position?: string | undefined;
    /** 测量位置显示值 */
    positionLabel?: string | undefined;
    /** 收缩压 *mmHg* */
    sbp?: number | undefined;
    /** 收缩压单位 */
    sbpUnit?: string | undefined;
    /** 舒张压 *mmHg* */
    dbp?: number | undefined;
    /** 舒张压单位 */
    dbpUnit?: string | undefined;
    /** 脉搏 *次/分* */
    pulse?: number | undefined;
    /** 脉搏单位 */
    pulseUnit?: string | undefined;
    /** 呼吸 *次/分* */
    breathe?: number | undefined;
    /** 呼吸单位 */
    breatheUnit?: string | undefined;
    /** 体温 */
    temp?: number | undefined;
    /** 体温单位 */
    tempUnit?: string | undefined;
    /** 超滤率 *ml/h Ultrafiltration Rate* */
    ufr?: number | undefined;
    /** 超滤率单位 */
    ufrUnit?: string | undefined;
    /** 超滤量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 超滤量单位 */
    ufvUnit?: string | undefined;
    /** 透析液流量 *ml/min* */
    dialysateFlowRate?: number | undefined;
    /** 透析液流量单位 */
    dialysateFlowRateUnit?: string | undefined;
    /** 透析液温度 *℃* */
    dialysateTemp?: number | undefined;
    /** 透析液温度单位 */
    dialysateTempUnit?: string | undefined;
    /** 透析液电导度 *mS/cm dialysate conductivity* */
    dialysateCond?: number | undefined;
    /** 透析液电导度单位 */
    dialysateCondUnit?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液流量单位 */
    rfrUnit?: string | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 累计肝素量 */
    cumulativeHeparinVolume?: number | undefined;
    /** 置换液量单位 */
    rfvUnit?: string | undefined;
    /** 肝素量 *mg* */
    heparin?: number | undefined;
    /** 肝素量单位 */
    heparinUnit?: string | undefined;
    /** 管路情况 `DIC.DIALYSIS.MONITOR.TUBE` *多选* */
    remarkTube?: string | undefined;
    /** 渗血情况 `DIC.DIALYSIS.MONITOR.ERRHYSIS` *多选* */
    remarkErrhysis?: string | undefined;
    /** 抗凝情况 `DIC.DIALYSIS.MONITOR.ANT` *多选* */
    remarkAnticoagulation?: string | undefined;
    /** 管路情况显示值 */
    remarkTubeLabel?: string | undefined;
    /** 渗血情况显示值 */
    remarkErrhysisLabel?: string | undefined;
    /** 抗凝情况显示值 */
    remarkAnticoagulationLabel?: string | undefined;
    /** 病情与处理 *病情与处理模板* `DIC.DIALYSIS.MONITOR.REMARK` *选择后往编辑域中追加* */
    remark?: string | undefined;
    /** 血压 */
    bp?: string | undefined;
    /** 血压单位 */
    bpUnit?: string | undefined;
    /** 字段1 *预留字段用于使用* */
    ext1?: string | undefined;
    /** 字段2 *预留字段用于使用* */
    ext2?: string | undefined;
    /** 字段3 *预留字段用于使用* */
    ext3?: string | undefined;
    /** 字段4 *预留字段用于使用* */
    ext4?: string | undefined;
    /** 字段5 *预留字段用于使用* */
    ext5?: string | undefined;
    /** 字段6 *预留字段用于使用* */
    ext6?: string | undefined;
    /** 字段7 *预留字段用于使用* */
    ext7?: string | undefined;
    /** 字段8 *预留字段用于使用* */
    ext8?: string | undefined;
    /** 字段9 *预留字段用于使用* */
    ext9?: string | undefined;
    /** 字段10 *预留字段用于使用* */
    ext10?: string | undefined;

    constructor(data?: ICureRecordItemMonitor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.monitorTime = _data["monitorTime"] ? dayjs(_data["monitorTime"].toString()) : <any>undefined;
            this.nurseId = _data["nurseId"];
            this.nurseName = _data["nurseName"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.bloodFlowRateUnit = _data["bloodFlowRateUnit"];
            this.venousPressure = _data["venousPressure"];
            this.venousPressureUnit = _data["venousPressureUnit"];
            this.arterialPressure = _data["arterialPressure"];
            this.arterialPressureUnit = _data["arterialPressureUnit"];
            this.tmp = _data["tmp"];
            this.tmpUnit = _data["tmpUnit"];
            this.position = _data["position"];
            this.positionLabel = _data["positionLabel"];
            this.sbp = _data["sbp"];
            this.sbpUnit = _data["sbpUnit"];
            this.dbp = _data["dbp"];
            this.dbpUnit = _data["dbpUnit"];
            this.pulse = _data["pulse"];
            this.pulseUnit = _data["pulseUnit"];
            this.breathe = _data["breathe"];
            this.breatheUnit = _data["breatheUnit"];
            this.temp = _data["temp"];
            this.tempUnit = _data["tempUnit"];
            this.ufr = _data["ufr"];
            this.ufrUnit = _data["ufrUnit"];
            this.ufv = _data["ufv"];
            this.ufvUnit = _data["ufvUnit"];
            this.dialysateFlowRate = _data["dialysateFlowRate"];
            this.dialysateFlowRateUnit = _data["dialysateFlowRateUnit"];
            this.dialysateTemp = _data["dialysateTemp"];
            this.dialysateTempUnit = _data["dialysateTempUnit"];
            this.dialysateCond = _data["dialysateCond"];
            this.dialysateCondUnit = _data["dialysateCondUnit"];
            this.rfr = _data["rfr"];
            this.rfrUnit = _data["rfrUnit"];
            this.rfv = _data["rfv"];
            this.cumulativeHeparinVolume = _data["cumulativeHeparinVolume"];
            this.rfvUnit = _data["rfvUnit"];
            this.heparin = _data["heparin"];
            this.heparinUnit = _data["heparinUnit"];
            this.remarkTube = _data["remarkTube"];
            this.remarkErrhysis = _data["remarkErrhysis"];
            this.remarkAnticoagulation = _data["remarkAnticoagulation"];
            this.remarkTubeLabel = _data["remarkTubeLabel"];
            this.remarkErrhysisLabel = _data["remarkErrhysisLabel"];
            this.remarkAnticoagulationLabel = _data["remarkAnticoagulationLabel"];
            this.remark = _data["remark"];
            this.bp = _data["bp"];
            this.bpUnit = _data["bpUnit"];
            this.ext1 = _data["ext1"];
            this.ext2 = _data["ext2"];
            this.ext3 = _data["ext3"];
            this.ext4 = _data["ext4"];
            this.ext5 = _data["ext5"];
            this.ext6 = _data["ext6"];
            this.ext7 = _data["ext7"];
            this.ext8 = _data["ext8"];
            this.ext9 = _data["ext9"];
            this.ext10 = _data["ext10"];
        }
    }

    static fromJS(data: any): CureRecordItemMonitor {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemMonitor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["monitorTime"] = this.monitorTime ? this.monitorTime.toISOString() : <any>undefined;
        data["nurseId"] = this.nurseId;
        data["nurseName"] = this.nurseName;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["bloodFlowRateUnit"] = this.bloodFlowRateUnit;
        data["venousPressure"] = this.venousPressure;
        data["venousPressureUnit"] = this.venousPressureUnit;
        data["arterialPressure"] = this.arterialPressure;
        data["arterialPressureUnit"] = this.arterialPressureUnit;
        data["tmp"] = this.tmp;
        data["tmpUnit"] = this.tmpUnit;
        data["position"] = this.position;
        data["positionLabel"] = this.positionLabel;
        data["sbp"] = this.sbp;
        data["sbpUnit"] = this.sbpUnit;
        data["dbp"] = this.dbp;
        data["dbpUnit"] = this.dbpUnit;
        data["pulse"] = this.pulse;
        data["pulseUnit"] = this.pulseUnit;
        data["breathe"] = this.breathe;
        data["breatheUnit"] = this.breatheUnit;
        data["temp"] = this.temp;
        data["tempUnit"] = this.tempUnit;
        data["ufr"] = this.ufr;
        data["ufrUnit"] = this.ufrUnit;
        data["ufv"] = this.ufv;
        data["ufvUnit"] = this.ufvUnit;
        data["dialysateFlowRate"] = this.dialysateFlowRate;
        data["dialysateFlowRateUnit"] = this.dialysateFlowRateUnit;
        data["dialysateTemp"] = this.dialysateTemp;
        data["dialysateTempUnit"] = this.dialysateTempUnit;
        data["dialysateCond"] = this.dialysateCond;
        data["dialysateCondUnit"] = this.dialysateCondUnit;
        data["rfr"] = this.rfr;
        data["rfrUnit"] = this.rfrUnit;
        data["rfv"] = this.rfv;
        data["cumulativeHeparinVolume"] = this.cumulativeHeparinVolume;
        data["rfvUnit"] = this.rfvUnit;
        data["heparin"] = this.heparin;
        data["heparinUnit"] = this.heparinUnit;
        data["remarkTube"] = this.remarkTube;
        data["remarkErrhysis"] = this.remarkErrhysis;
        data["remarkAnticoagulation"] = this.remarkAnticoagulation;
        data["remarkTubeLabel"] = this.remarkTubeLabel;
        data["remarkErrhysisLabel"] = this.remarkErrhysisLabel;
        data["remarkAnticoagulationLabel"] = this.remarkAnticoagulationLabel;
        data["remark"] = this.remark;
        data["bp"] = this.bp;
        data["bpUnit"] = this.bpUnit;
        data["ext1"] = this.ext1;
        data["ext2"] = this.ext2;
        data["ext3"] = this.ext3;
        data["ext4"] = this.ext4;
        data["ext5"] = this.ext5;
        data["ext6"] = this.ext6;
        data["ext7"] = this.ext7;
        data["ext8"] = this.ext8;
        data["ext9"] = this.ext9;
        data["ext10"] = this.ext10;
        return data;
    }
}

/** 透中监测 */
export interface ICureRecordItemMonitor {
    /** 标识 */
    id?: string | undefined;
    /** 监测时间 */
    monitorTime?: dayjs.Dayjs | undefined;
    /** 记录护士标识 */
    nurseId?: string | undefined;
    /** 记录护士姓名 */
    nurseName?: string | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** 血流量单位 */
    bloodFlowRateUnit?: string | undefined;
    /** 静脉压 *mmHg* */
    venousPressure?: number | undefined;
    /** 静脉压单位 */
    venousPressureUnit?: string | undefined;
    /** 动脉压 *mmHg* */
    arterialPressure?: number | undefined;
    /** 动脉压单位 */
    arterialPressureUnit?: string | undefined;
    /** 跨膜压 *mmHg Transmembrane Pressure* */
    tmp?: number | undefined;
    /** 跨膜压单位 */
    tmpUnit?: string | undefined;
    /** 测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    position?: string | undefined;
    /** 测量位置显示值 */
    positionLabel?: string | undefined;
    /** 收缩压 *mmHg* */
    sbp?: number | undefined;
    /** 收缩压单位 */
    sbpUnit?: string | undefined;
    /** 舒张压 *mmHg* */
    dbp?: number | undefined;
    /** 舒张压单位 */
    dbpUnit?: string | undefined;
    /** 脉搏 *次/分* */
    pulse?: number | undefined;
    /** 脉搏单位 */
    pulseUnit?: string | undefined;
    /** 呼吸 *次/分* */
    breathe?: number | undefined;
    /** 呼吸单位 */
    breatheUnit?: string | undefined;
    /** 体温 */
    temp?: number | undefined;
    /** 体温单位 */
    tempUnit?: string | undefined;
    /** 超滤率 *ml/h Ultrafiltration Rate* */
    ufr?: number | undefined;
    /** 超滤率单位 */
    ufrUnit?: string | undefined;
    /** 超滤量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 超滤量单位 */
    ufvUnit?: string | undefined;
    /** 透析液流量 *ml/min* */
    dialysateFlowRate?: number | undefined;
    /** 透析液流量单位 */
    dialysateFlowRateUnit?: string | undefined;
    /** 透析液温度 *℃* */
    dialysateTemp?: number | undefined;
    /** 透析液温度单位 */
    dialysateTempUnit?: string | undefined;
    /** 透析液电导度 *mS/cm dialysate conductivity* */
    dialysateCond?: number | undefined;
    /** 透析液电导度单位 */
    dialysateCondUnit?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液流量单位 */
    rfrUnit?: string | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 累计肝素量 */
    cumulativeHeparinVolume?: number | undefined;
    /** 置换液量单位 */
    rfvUnit?: string | undefined;
    /** 肝素量 *mg* */
    heparin?: number | undefined;
    /** 肝素量单位 */
    heparinUnit?: string | undefined;
    /** 管路情况 `DIC.DIALYSIS.MONITOR.TUBE` *多选* */
    remarkTube?: string | undefined;
    /** 渗血情况 `DIC.DIALYSIS.MONITOR.ERRHYSIS` *多选* */
    remarkErrhysis?: string | undefined;
    /** 抗凝情况 `DIC.DIALYSIS.MONITOR.ANT` *多选* */
    remarkAnticoagulation?: string | undefined;
    /** 管路情况显示值 */
    remarkTubeLabel?: string | undefined;
    /** 渗血情况显示值 */
    remarkErrhysisLabel?: string | undefined;
    /** 抗凝情况显示值 */
    remarkAnticoagulationLabel?: string | undefined;
    /** 病情与处理 *病情与处理模板* `DIC.DIALYSIS.MONITOR.REMARK` *选择后往编辑域中追加* */
    remark?: string | undefined;
    /** 血压 */
    bp?: string | undefined;
    /** 血压单位 */
    bpUnit?: string | undefined;
    /** 字段1 *预留字段用于使用* */
    ext1?: string | undefined;
    /** 字段2 *预留字段用于使用* */
    ext2?: string | undefined;
    /** 字段3 *预留字段用于使用* */
    ext3?: string | undefined;
    /** 字段4 *预留字段用于使用* */
    ext4?: string | undefined;
    /** 字段5 *预留字段用于使用* */
    ext5?: string | undefined;
    /** 字段6 *预留字段用于使用* */
    ext6?: string | undefined;
    /** 字段7 *预留字段用于使用* */
    ext7?: string | undefined;
    /** 字段8 *预留字段用于使用* */
    ext8?: string | undefined;
    /** 字段9 *预留字段用于使用* */
    ext9?: string | undefined;
    /** 字段10 *预留字段用于使用* */
    ext10?: string | undefined;
}

/** 透后小结 */
export class CureRecordItemSummary implements ICureRecordItemSummary {
    /** 小结内容 */
    content?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureRecordItemSummary) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.content = _data["content"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureRecordItemSummary {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemSummary();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["content"] = this.content;
        data["remark"] = this.remark;
        return data;
    }
}

/** 透后小结 */
export interface ICureRecordItemSummary {
    /** 小结内容 */
    content?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 透析记录单 */
export class CureRecordView implements ICureRecordView {
    /** 标识 */
    id?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析机标识 */
    dialysisMachineId?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineType?: string | undefined;
    /** 透析机类型显示值 */
    dialysisMachineTypeLabel?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 设备号 */
    dialysisMachineSn?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式显示值 */
    dialysisModeLabel?: string | undefined;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet?: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight1?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路) */
    patientVascularAccessId?: string | undefined;
    /** 血管通路类型 */
    patientVascularAccessType?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** [血管通路](患者血管通路) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路类型 */
    patientOtherVascularAccessType?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessName?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换方式显示值 */
    rfmLabel?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 治疗流程状态 `DIC.DIALYSIS.STATUS` *已签到,上机准备,治疗中,已下机,已结束* */
    status?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重 *kg* */
    beforeWeight1?: number | undefined;
    /** 透前净体重 */
    readonly beforeNetWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前体重方式显示值 */
    beforeWeightModeLabel?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    readonly ufg1?: number | undefined;
    /** 净脱水量 *ml Ultrafiltration Complete* */
    ufc?: number | undefined;
    /** 偏移后透前体重 */
    deductionBeforeWeight?: number | undefined;
    /** 偏移后透后体重 */
    deductionAfterWeight?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight1?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后体重方式显示值 */
    afterWeightModeLabel?: string | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 称重脱水量 *ml* */
    ufvWeight?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    beforeBpPosition?: string | undefined;
    /** 透前血压测量位置显示值 */
    beforeBpPositionLabel?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前血压 *mmHg* */
    beforeBp?: string | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透后血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    afterBpPosition?: string | undefined;
    /** 透后血压测量位置显示值 */
    afterBpPositionLabel?: string | undefined;
    /** 透后收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 透后舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 透后血压 *mmHg* */
    afterBp?: string | undefined;
    /** 透后脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 透前体重时间 */
    timeBeforeWeight?: dayjs.Dayjs | undefined;
    /** 上次透后体重 */
    preAfterWeight?: number | undefined;
    /** 上次透后体重 */
    preAfterWeight1?: number | undefined;
    /** 较干体重增加量 */
    addBestWeight?: number | undefined;
    /** 本次透析体重下降量 */
    reduceWeight?: number | undefined;
    appendWeight?: number | undefined;
    /** 透前血压时间 */
    timeBeforeBp?: dayjs.Dayjs | undefined;
    /** 医生制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 方案是否制定0,1 */
    enact?: number | undefined;
    /** 护士确认方案时间 */
    timeCheckNurse?: dayjs.Dayjs | undefined;
    /** 方案是否通过0,1 */
    check?: number | undefined;
    /** 透前评估时间 */
    timeAssementBefore?: dayjs.Dayjs | undefined;
    /** 穿刺时间 */
    timeOn?: dayjs.Dayjs | undefined;
    /** 穿刺方法 */
    punctureMethod?: string | undefined;
    /** 穿刺方法显示值 */
    punctureMethodLabel?: string | undefined;
    /** 穿刺护士 */
    punctureNurseId?: string | undefined;
    /** 穿刺护士 */
    punctureNurseName?: string | undefined;
    /** 交叉核对时间 */
    timeVerify?: dayjs.Dayjs | undefined;
    /** 首次监测时间 */
    timeFirstMonitor?: dayjs.Dayjs | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 消毒时间 */
    timeDisinfect?: dayjs.Dayjs | undefined;
    /** 透后评估时间 */
    timeAssementAfter?: dayjs.Dayjs | undefined;
    /** 透后体重时间 */
    timeAfterWeight?: dayjs.Dayjs | undefined;
    /** 透后血压时间 */
    timeAfterBp?: dayjs.Dayjs | undefined;
    /** 透后小结时间 */
    timeAfterSummary?: dayjs.Dayjs | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 制定方案医生标识 */
    enactDoctorId?: string | undefined;
    /** 制定方案医生姓名 */
    enactDoctorName?: string | undefined;
    /** 确认方案护士标识 */
    checkNurseId?: string | undefined;
    /** 确认方案护士姓名 */
    checkNurseName?: string | undefined;
    /** 透前评估护士标识 */
    assementBeforeNurseId?: string | undefined;
    /** 透前评估护士姓名 */
    assementBeforeNurseName?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 透前体温 */
    onTemp?: number | undefined;
    /** 核对护士标识 */
    verifyNurseId?: string | undefined;
    /** 核对护士姓名 */
    verifyNurseName?: string | undefined;
    /** 核对是否通过0,1 */
    verify?: number | undefined;
    /** 下机护士标识 */
    offNurseId?: string | undefined;
    /** 下机护士姓名 */
    offNurseName?: string | undefined;
    /** 下机体温 */
    offTemp?: number | undefined;
    /** 下机呼吸 */
    offBreathe?: number | undefined;
    /** 透后评估护士标识 */
    assementAfterNurseId?: string | undefined;
    vascularLocation?: string | undefined;
    /** 血管通路部位 */
    vascularPosition?: string | undefined;
    monitorBP?: string | undefined;
    /** 透后评估护士姓名 */
    assementAfterNurseName?: string | undefined;
    /** 透后小结护士标识 */
    summaryAfterNurseId?: string | undefined;
    /** 透后小结护士姓名 */
    summaryAfterNurseName?: string | undefined;
    /** 是否提前下机0,1 *判断标准：提前半个小时以上下机* */
    offEarly?: number | undefined;
    /** 提前下机原因 */
    offEarlyCause?: string | undefined;
    /** 取消透析原因 *在交叉核对之前都可以取消透析* */
    cancelReason?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    source?: string | undefined;
    /** 来源显示值 */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 诊断显示值 */
    diagnosisLabel?: string | undefined;
    /** 病区 *住院的* */
    ward?: string | undefined;
    /** 床位 *住院的* */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 病历夹号 *病历夹号* */
    dossierNumber?: string | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 透析次数 */
    dialysisCount?: number | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 管床护士标识 */
    bedNurseId?: string | undefined;
    /** 管床护士姓名 */
    bedNurseName?: string | undefined;
    /** 置管护士标识 */
    placementNurseId?: string | undefined;
    /** 置管护士姓名 */
    placementNurseName?: string | undefined;
    /** 质控护士标识 */
    qualityNurseId?: string | undefined;
    /** 质控护士姓名 */
    qualityNurseName?: string | undefined;
    /** 是否单超0,1 */
    iuf?: number;
    /** 点位穿刺节点 */
    punctureNodes?: string | undefined;
    /** 点位穿刺节点备注 */
    punctureNodesRemark?: string | undefined;
    /** 穿刺记录备注 */
    punctureRemark?: string | undefined;
    /** 是否单超0,1 */
    iufLabel?: string | undefined;
    /** 单超方式 */
    iufMode?: string | undefined;
    /** 单超时间 */
    iufHour?: number | undefined;
    /** 单超量 */
    iufValue?: number | undefined;
    /** 单超开始时间 */
    iufStartTime?: dayjs.Dayjs | undefined;
    /** 是否归档 */
    isArchive?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 上一次透析标识 */
    lastId?: string | undefined;
    /** 下一次透析标识 */
    nextId?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 指纹图片 */
    finger?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者姓名拼音码 */
    patientPinyinCode?: string | undefined;
    /** 患者姓名五笔码 */
    patientWubiCode?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 性别显示值 */
    genderLabel?: string | undefined;
    /** 病情 `DIC.PEOPLE.CONDITION` */
    medicareCondition?: string | undefined;
    /** 病情显示值 */
    medicareConditionName?: string | undefined;
    /** 治疗状态名称 */
    statusLabel?: string | undefined;
    /** 透析龄 */
    dialysisAge?: string | undefined;
    /** 透析龄 */
    dialysisAgeMonth?: string | undefined;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    cureDialysate?: CureRecordItemDialysate;
    cureAnticoagulant?: CureRecordItemAnticoagulant;
    cureConsumable?: CureRecordItemConsumable;
    cureMonitorFirst?: CureRecordItemMonitor;
    cureMonitorLast?: CureRecordItemMonitor;
    /** 透中监测 */
    cureMonitor?: CureRecordItemMonitor[] | undefined;
    cureComplicationFirst?: CureRecordItemComplication;
    /** 透中事件 */
    cureComplication?: CureRecordItemComplication[] | undefined;
    /** 透析医嘱 */
    cureDa?: CureRecordItemDa[] | undefined;
    cureSummary?: CureRecordItemSummary;
    disinfect?: CureRecordItemDisinfect;
    assementBefore?: CureRecordItemAssement;
    assementAfter?: CureRecordItemAssement;
    assementDialysis?: CureRecordItemAssement;
    /** 受支持的表单自定义数据 */
    assementValues?: SysFormValueView[] | undefined;
    /** 透前评估用 */
    assementValuesBefore?: SysFormValueView[] | undefined;
    /** 透后评估用 */
    assementValuesAfter?: SysFormValueView[] | undefined;
    /** 透析评估用 */
    assementValuesDialysis?: SysFormValueView[] | undefined;
    /** 影像文件 *data:image/jpeg;base64,...* */
    signature?: string | undefined;
    /** 自定义字段 */
    cureFieldValues?: CureFieldValueView[] | undefined;

    constructor(data?: ICureRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sn = _data["sn"];
            this.patientId = _data["patientId"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisMachineId = _data["dialysisMachineId"];
            this.dialysisMachineType = _data["dialysisMachineType"];
            this.dialysisMachineTypeLabel = _data["dialysisMachineTypeLabel"];
            this.dialysisMachineModel = _data["dialysisMachineModel"];
            this.dialysisMachineNo = _data["dialysisMachineNo"];
            this.dialysisMachineSn = _data["dialysisMachineSn"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.dialysisDurationSet = _data["dialysisDurationSet"];
            this.bestWeight = _data["bestWeight"];
            this.bestWeight1 = _data["bestWeight1"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.patientVascularAccessType = _data["patientVascularAccessType"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.patientOtherVascularAccessId = _data["patientOtherVascularAccessId"];
            this.patientOtherVascularAccessType = _data["patientOtherVascularAccessType"];
            this.patientOtherVascularAccessName = _data["patientOtherVascularAccessName"];
            this.rfm = _data["rfm"];
            this.rfmLabel = _data["rfmLabel"];
            this.rfr = _data["rfr"];
            this.rfv = _data["rfv"];
            this.status = _data["status"];
            this.beforeWeight = _data["beforeWeight"];
            this.beforeWeight1 = _data["beforeWeight1"];
            (<any>this).beforeNetWeight = _data["beforeNetWeight"];
            this.beforeWeightMode = _data["beforeWeightMode"];
            this.beforeWeightModeLabel = _data["beforeWeightModeLabel"];
            this.deductionWeight = _data["deductionWeight"];
            this.ufg = _data["ufg"];
            (<any>this).ufg1 = _data["ufg1"];
            this.ufc = _data["ufc"];
            this.deductionBeforeWeight = _data["deductionBeforeWeight"];
            this.deductionAfterWeight = _data["deductionAfterWeight"];
            this.afterWeight = _data["afterWeight"];
            this.afterWeight1 = _data["afterWeight1"];
            this.afterWeightMode = _data["afterWeightMode"];
            this.afterWeightModeLabel = _data["afterWeightModeLabel"];
            this.ufv = _data["ufv"];
            this.ufvWeight = _data["ufvWeight"];
            this.beforeBpPosition = _data["beforeBpPosition"];
            this.beforeBpPositionLabel = _data["beforeBpPositionLabel"];
            this.beforeSbp = _data["beforeSbp"];
            this.beforeDbp = _data["beforeDbp"];
            this.beforeBp = _data["beforeBp"];
            this.beforePulse = _data["beforePulse"];
            this.afterBpPosition = _data["afterBpPosition"];
            this.afterBpPositionLabel = _data["afterBpPositionLabel"];
            this.afterSbp = _data["afterSbp"];
            this.afterDbp = _data["afterDbp"];
            this.afterBp = _data["afterBp"];
            this.afterPulse = _data["afterPulse"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeBeforeWeight = _data["timeBeforeWeight"] ? dayjs(_data["timeBeforeWeight"].toString()) : <any>undefined;
            this.preAfterWeight = _data["preAfterWeight"];
            this.preAfterWeight1 = _data["preAfterWeight1"];
            this.addBestWeight = _data["addBestWeight"];
            this.reduceWeight = _data["reduceWeight"];
            this.appendWeight = _data["appendWeight"];
            this.timeBeforeBp = _data["timeBeforeBp"] ? dayjs(_data["timeBeforeBp"].toString()) : <any>undefined;
            this.timeEnactDoctor = _data["timeEnactDoctor"] ? dayjs(_data["timeEnactDoctor"].toString()) : <any>undefined;
            this.enact = _data["enact"];
            this.timeCheckNurse = _data["timeCheckNurse"] ? dayjs(_data["timeCheckNurse"].toString()) : <any>undefined;
            this.check = _data["check"];
            this.timeAssementBefore = _data["timeAssementBefore"] ? dayjs(_data["timeAssementBefore"].toString()) : <any>undefined;
            this.timeOn = _data["timeOn"] ? dayjs(_data["timeOn"].toString()) : <any>undefined;
            this.punctureMethod = _data["punctureMethod"];
            this.punctureMethodLabel = _data["punctureMethodLabel"];
            this.punctureNurseId = _data["punctureNurseId"];
            this.punctureNurseName = _data["punctureNurseName"];
            this.timeVerify = _data["timeVerify"] ? dayjs(_data["timeVerify"].toString()) : <any>undefined;
            this.timeFirstMonitor = _data["timeFirstMonitor"] ? dayjs(_data["timeFirstMonitor"].toString()) : <any>undefined;
            this.timeOff = _data["timeOff"] ? dayjs(_data["timeOff"].toString()) : <any>undefined;
            this.timeDisinfect = _data["timeDisinfect"] ? dayjs(_data["timeDisinfect"].toString()) : <any>undefined;
            this.timeAssementAfter = _data["timeAssementAfter"] ? dayjs(_data["timeAssementAfter"].toString()) : <any>undefined;
            this.timeAfterWeight = _data["timeAfterWeight"] ? dayjs(_data["timeAfterWeight"].toString()) : <any>undefined;
            this.timeAfterBp = _data["timeAfterBp"] ? dayjs(_data["timeAfterBp"].toString()) : <any>undefined;
            this.timeAfterSummary = _data["timeAfterSummary"] ? dayjs(_data["timeAfterSummary"].toString()) : <any>undefined;
            this.dialysisDurationFact = _data["dialysisDurationFact"];
            this.enactDoctorId = _data["enactDoctorId"];
            this.enactDoctorName = _data["enactDoctorName"];
            this.checkNurseId = _data["checkNurseId"];
            this.checkNurseName = _data["checkNurseName"];
            this.assementBeforeNurseId = _data["assementBeforeNurseId"];
            this.assementBeforeNurseName = _data["assementBeforeNurseName"];
            this.onNurseId = _data["onNurseId"];
            this.onNurseName = _data["onNurseName"];
            this.onTemp = _data["onTemp"];
            this.verifyNurseId = _data["verifyNurseId"];
            this.verifyNurseName = _data["verifyNurseName"];
            this.verify = _data["verify"];
            this.offNurseId = _data["offNurseId"];
            this.offNurseName = _data["offNurseName"];
            this.offTemp = _data["offTemp"];
            this.offBreathe = _data["offBreathe"];
            this.assementAfterNurseId = _data["assementAfterNurseId"];
            this.vascularLocation = _data["vascularLocation"];
            this.vascularPosition = _data["vascularPosition"];
            this.monitorBP = _data["monitorBP"];
            this.assementAfterNurseName = _data["assementAfterNurseName"];
            this.summaryAfterNurseId = _data["summaryAfterNurseId"];
            this.summaryAfterNurseName = _data["summaryAfterNurseName"];
            this.offEarly = _data["offEarly"];
            this.offEarlyCause = _data["offEarlyCause"];
            this.cancelReason = _data["cancelReason"];
            this.age = _data["age"];
            this.source = _data["source"];
            this.sourceLabel = _data["sourceLabel"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.diagnosis = _data["diagnosis"];
            this.diagnosisLabel = _data["diagnosisLabel"];
            this.ward = _data["ward"];
            this.bed = _data["bed"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dossierNumber = _data["dossierNumber"];
            this.dialysisCountInit = _data["dialysisCountInit"];
            this.dialysisCount = _data["dialysisCount"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            this.suggestion = _data["suggestion"];
            this.bedNurseId = _data["bedNurseId"];
            this.bedNurseName = _data["bedNurseName"];
            this.placementNurseId = _data["placementNurseId"];
            this.placementNurseName = _data["placementNurseName"];
            this.qualityNurseId = _data["qualityNurseId"];
            this.qualityNurseName = _data["qualityNurseName"];
            this.iuf = _data["iuf"];
            this.punctureNodes = _data["punctureNodes"];
            this.punctureNodesRemark = _data["punctureNodesRemark"];
            this.punctureRemark = _data["punctureRemark"];
            this.iufLabel = _data["iufLabel"];
            this.iufMode = _data["iufMode"];
            this.iufHour = _data["iufHour"];
            this.iufValue = _data["iufValue"];
            this.iufStartTime = _data["iufStartTime"] ? dayjs(_data["iufStartTime"].toString()) : <any>undefined;
            this.isArchive = _data["isArchive"];
            this.remark = _data["remark"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.lastId = _data["lastId"];
            this.nextId = _data["nextId"];
            this.patientName = _data["patientName"];
            this.finger = _data["finger"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.patientPinyinCode = _data["patientPinyinCode"];
            this.patientWubiCode = _data["patientWubiCode"];
            this.gender = _data["gender"];
            this.genderLabel = _data["genderLabel"];
            this.medicareCondition = _data["medicareCondition"];
            this.medicareConditionName = _data["medicareConditionName"];
            this.statusLabel = _data["statusLabel"];
            this.dialysisAge = _data["dialysisAge"];
            this.dialysisAgeMonth = _data["dialysisAgeMonth"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.cureDialysate = _data["cureDialysate"] ? CureRecordItemDialysate.fromJS(_data["cureDialysate"]) : <any>undefined;
            this.cureAnticoagulant = _data["cureAnticoagulant"] ? CureRecordItemAnticoagulant.fromJS(_data["cureAnticoagulant"]) : <any>undefined;
            this.cureConsumable = _data["cureConsumable"] ? CureRecordItemConsumable.fromJS(_data["cureConsumable"]) : <any>undefined;
            this.cureMonitorFirst = _data["cureMonitorFirst"] ? CureRecordItemMonitor.fromJS(_data["cureMonitorFirst"]) : <any>undefined;
            this.cureMonitorLast = _data["cureMonitorLast"] ? CureRecordItemMonitor.fromJS(_data["cureMonitorLast"]) : <any>undefined;
            if (Array.isArray(_data["cureMonitor"])) {
                this.cureMonitor = [] as any;
                for (let item of _data["cureMonitor"])
                    this.cureMonitor!.push(CureRecordItemMonitor.fromJS(item));
            }
            this.cureComplicationFirst = _data["cureComplicationFirst"] ? CureRecordItemComplication.fromJS(_data["cureComplicationFirst"]) : <any>undefined;
            if (Array.isArray(_data["cureComplication"])) {
                this.cureComplication = [] as any;
                for (let item of _data["cureComplication"])
                    this.cureComplication!.push(CureRecordItemComplication.fromJS(item));
            }
            if (Array.isArray(_data["cureDa"])) {
                this.cureDa = [] as any;
                for (let item of _data["cureDa"])
                    this.cureDa!.push(CureRecordItemDa.fromJS(item));
            }
            this.cureSummary = _data["cureSummary"] ? CureRecordItemSummary.fromJS(_data["cureSummary"]) : <any>undefined;
            this.disinfect = _data["disinfect"] ? CureRecordItemDisinfect.fromJS(_data["disinfect"]) : <any>undefined;
            this.assementBefore = _data["assementBefore"] ? CureRecordItemAssement.fromJS(_data["assementBefore"]) : <any>undefined;
            this.assementAfter = _data["assementAfter"] ? CureRecordItemAssement.fromJS(_data["assementAfter"]) : <any>undefined;
            this.assementDialysis = _data["assementDialysis"] ? CureRecordItemAssement.fromJS(_data["assementDialysis"]) : <any>undefined;
            if (Array.isArray(_data["assementValues"])) {
                this.assementValues = [] as any;
                for (let item of _data["assementValues"])
                    this.assementValues!.push(SysFormValueView.fromJS(item));
            }
            if (Array.isArray(_data["assementValuesBefore"])) {
                this.assementValuesBefore = [] as any;
                for (let item of _data["assementValuesBefore"])
                    this.assementValuesBefore!.push(SysFormValueView.fromJS(item));
            }
            if (Array.isArray(_data["assementValuesAfter"])) {
                this.assementValuesAfter = [] as any;
                for (let item of _data["assementValuesAfter"])
                    this.assementValuesAfter!.push(SysFormValueView.fromJS(item));
            }
            if (Array.isArray(_data["assementValuesDialysis"])) {
                this.assementValuesDialysis = [] as any;
                for (let item of _data["assementValuesDialysis"])
                    this.assementValuesDialysis!.push(SysFormValueView.fromJS(item));
            }
            this.signature = _data["signature"];
            if (Array.isArray(_data["cureFieldValues"])) {
                this.cureFieldValues = [] as any;
                for (let item of _data["cureFieldValues"])
                    this.cureFieldValues!.push(CureFieldValueView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sn"] = this.sn;
        data["patientId"] = this.patientId;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisMachineId"] = this.dialysisMachineId;
        data["dialysisMachineType"] = this.dialysisMachineType;
        data["dialysisMachineTypeLabel"] = this.dialysisMachineTypeLabel;
        data["dialysisMachineModel"] = this.dialysisMachineModel;
        data["dialysisMachineNo"] = this.dialysisMachineNo;
        data["dialysisMachineSn"] = this.dialysisMachineSn;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["dialysisDurationSet"] = this.dialysisDurationSet;
        data["bestWeight"] = this.bestWeight;
        data["bestWeight1"] = this.bestWeight1;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["patientVascularAccessType"] = this.patientVascularAccessType;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["patientOtherVascularAccessId"] = this.patientOtherVascularAccessId;
        data["patientOtherVascularAccessType"] = this.patientOtherVascularAccessType;
        data["patientOtherVascularAccessName"] = this.patientOtherVascularAccessName;
        data["rfm"] = this.rfm;
        data["rfmLabel"] = this.rfmLabel;
        data["rfr"] = this.rfr;
        data["rfv"] = this.rfv;
        data["status"] = this.status;
        data["beforeWeight"] = this.beforeWeight;
        data["beforeWeight1"] = this.beforeWeight1;
        data["beforeNetWeight"] = this.beforeNetWeight;
        data["beforeWeightMode"] = this.beforeWeightMode;
        data["beforeWeightModeLabel"] = this.beforeWeightModeLabel;
        data["deductionWeight"] = this.deductionWeight;
        data["ufg"] = this.ufg;
        data["ufg1"] = this.ufg1;
        data["ufc"] = this.ufc;
        data["deductionBeforeWeight"] = this.deductionBeforeWeight;
        data["deductionAfterWeight"] = this.deductionAfterWeight;
        data["afterWeight"] = this.afterWeight;
        data["afterWeight1"] = this.afterWeight1;
        data["afterWeightMode"] = this.afterWeightMode;
        data["afterWeightModeLabel"] = this.afterWeightModeLabel;
        data["ufv"] = this.ufv;
        data["ufvWeight"] = this.ufvWeight;
        data["beforeBpPosition"] = this.beforeBpPosition;
        data["beforeBpPositionLabel"] = this.beforeBpPositionLabel;
        data["beforeSbp"] = this.beforeSbp;
        data["beforeDbp"] = this.beforeDbp;
        data["beforeBp"] = this.beforeBp;
        data["beforePulse"] = this.beforePulse;
        data["afterBpPosition"] = this.afterBpPosition;
        data["afterBpPositionLabel"] = this.afterBpPositionLabel;
        data["afterSbp"] = this.afterSbp;
        data["afterDbp"] = this.afterDbp;
        data["afterBp"] = this.afterBp;
        data["afterPulse"] = this.afterPulse;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toISOString() : <any>undefined;
        data["timeBeforeWeight"] = this.timeBeforeWeight ? this.timeBeforeWeight.toISOString() : <any>undefined;
        data["preAfterWeight"] = this.preAfterWeight;
        data["preAfterWeight1"] = this.preAfterWeight1;
        data["addBestWeight"] = this.addBestWeight;
        data["reduceWeight"] = this.reduceWeight;
        data["appendWeight"] = this.appendWeight;
        data["timeBeforeBp"] = this.timeBeforeBp ? this.timeBeforeBp.toISOString() : <any>undefined;
        data["timeEnactDoctor"] = this.timeEnactDoctor ? this.timeEnactDoctor.toISOString() : <any>undefined;
        data["enact"] = this.enact;
        data["timeCheckNurse"] = this.timeCheckNurse ? this.timeCheckNurse.toISOString() : <any>undefined;
        data["check"] = this.check;
        data["timeAssementBefore"] = this.timeAssementBefore ? this.timeAssementBefore.toISOString() : <any>undefined;
        data["timeOn"] = this.timeOn ? this.timeOn.toISOString() : <any>undefined;
        data["punctureMethod"] = this.punctureMethod;
        data["punctureMethodLabel"] = this.punctureMethodLabel;
        data["punctureNurseId"] = this.punctureNurseId;
        data["punctureNurseName"] = this.punctureNurseName;
        data["timeVerify"] = this.timeVerify ? this.timeVerify.toISOString() : <any>undefined;
        data["timeFirstMonitor"] = this.timeFirstMonitor ? this.timeFirstMonitor.toISOString() : <any>undefined;
        data["timeOff"] = this.timeOff ? this.timeOff.toISOString() : <any>undefined;
        data["timeDisinfect"] = this.timeDisinfect ? this.timeDisinfect.toISOString() : <any>undefined;
        data["timeAssementAfter"] = this.timeAssementAfter ? this.timeAssementAfter.toISOString() : <any>undefined;
        data["timeAfterWeight"] = this.timeAfterWeight ? this.timeAfterWeight.toISOString() : <any>undefined;
        data["timeAfterBp"] = this.timeAfterBp ? this.timeAfterBp.toISOString() : <any>undefined;
        data["timeAfterSummary"] = this.timeAfterSummary ? this.timeAfterSummary.toISOString() : <any>undefined;
        data["dialysisDurationFact"] = this.dialysisDurationFact;
        data["enactDoctorId"] = this.enactDoctorId;
        data["enactDoctorName"] = this.enactDoctorName;
        data["checkNurseId"] = this.checkNurseId;
        data["checkNurseName"] = this.checkNurseName;
        data["assementBeforeNurseId"] = this.assementBeforeNurseId;
        data["assementBeforeNurseName"] = this.assementBeforeNurseName;
        data["onNurseId"] = this.onNurseId;
        data["onNurseName"] = this.onNurseName;
        data["onTemp"] = this.onTemp;
        data["verifyNurseId"] = this.verifyNurseId;
        data["verifyNurseName"] = this.verifyNurseName;
        data["verify"] = this.verify;
        data["offNurseId"] = this.offNurseId;
        data["offNurseName"] = this.offNurseName;
        data["offTemp"] = this.offTemp;
        data["offBreathe"] = this.offBreathe;
        data["assementAfterNurseId"] = this.assementAfterNurseId;
        data["vascularLocation"] = this.vascularLocation;
        data["vascularPosition"] = this.vascularPosition;
        data["monitorBP"] = this.monitorBP;
        data["assementAfterNurseName"] = this.assementAfterNurseName;
        data["summaryAfterNurseId"] = this.summaryAfterNurseId;
        data["summaryAfterNurseName"] = this.summaryAfterNurseName;
        data["offEarly"] = this.offEarly;
        data["offEarlyCause"] = this.offEarlyCause;
        data["cancelReason"] = this.cancelReason;
        data["age"] = this.age;
        data["source"] = this.source;
        data["sourceLabel"] = this.sourceLabel;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["diagnosis"] = this.diagnosis;
        data["diagnosisLabel"] = this.diagnosisLabel;
        data["ward"] = this.ward;
        data["bed"] = this.bed;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dossierNumber"] = this.dossierNumber;
        data["dialysisCountInit"] = this.dialysisCountInit;
        data["dialysisCount"] = this.dialysisCount;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        data["suggestion"] = this.suggestion;
        data["bedNurseId"] = this.bedNurseId;
        data["bedNurseName"] = this.bedNurseName;
        data["placementNurseId"] = this.placementNurseId;
        data["placementNurseName"] = this.placementNurseName;
        data["qualityNurseId"] = this.qualityNurseId;
        data["qualityNurseName"] = this.qualityNurseName;
        data["iuf"] = this.iuf;
        data["punctureNodes"] = this.punctureNodes;
        data["punctureNodesRemark"] = this.punctureNodesRemark;
        data["punctureRemark"] = this.punctureRemark;
        data["iufLabel"] = this.iufLabel;
        data["iufMode"] = this.iufMode;
        data["iufHour"] = this.iufHour;
        data["iufValue"] = this.iufValue;
        data["iufStartTime"] = this.iufStartTime ? this.iufStartTime.toISOString() : <any>undefined;
        data["isArchive"] = this.isArchive;
        data["remark"] = this.remark;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["lastId"] = this.lastId;
        data["nextId"] = this.nextId;
        data["patientName"] = this.patientName;
        data["finger"] = this.finger;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["patientPinyinCode"] = this.patientPinyinCode;
        data["patientWubiCode"] = this.patientWubiCode;
        data["gender"] = this.gender;
        data["genderLabel"] = this.genderLabel;
        data["medicareCondition"] = this.medicareCondition;
        data["medicareConditionName"] = this.medicareConditionName;
        data["statusLabel"] = this.statusLabel;
        data["dialysisAge"] = this.dialysisAge;
        data["dialysisAgeMonth"] = this.dialysisAgeMonth;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["cureDialysate"] = this.cureDialysate ? this.cureDialysate.toJSON() : <any>undefined;
        data["cureAnticoagulant"] = this.cureAnticoagulant ? this.cureAnticoagulant.toJSON() : <any>undefined;
        data["cureConsumable"] = this.cureConsumable ? this.cureConsumable.toJSON() : <any>undefined;
        data["cureMonitorFirst"] = this.cureMonitorFirst ? this.cureMonitorFirst.toJSON() : <any>undefined;
        data["cureMonitorLast"] = this.cureMonitorLast ? this.cureMonitorLast.toJSON() : <any>undefined;
        if (Array.isArray(this.cureMonitor)) {
            data["cureMonitor"] = [];
            for (let item of this.cureMonitor)
                data["cureMonitor"].push(item.toJSON());
        }
        data["cureComplicationFirst"] = this.cureComplicationFirst ? this.cureComplicationFirst.toJSON() : <any>undefined;
        if (Array.isArray(this.cureComplication)) {
            data["cureComplication"] = [];
            for (let item of this.cureComplication)
                data["cureComplication"].push(item.toJSON());
        }
        if (Array.isArray(this.cureDa)) {
            data["cureDa"] = [];
            for (let item of this.cureDa)
                data["cureDa"].push(item.toJSON());
        }
        data["cureSummary"] = this.cureSummary ? this.cureSummary.toJSON() : <any>undefined;
        data["disinfect"] = this.disinfect ? this.disinfect.toJSON() : <any>undefined;
        data["assementBefore"] = this.assementBefore ? this.assementBefore.toJSON() : <any>undefined;
        data["assementAfter"] = this.assementAfter ? this.assementAfter.toJSON() : <any>undefined;
        data["assementDialysis"] = this.assementDialysis ? this.assementDialysis.toJSON() : <any>undefined;
        if (Array.isArray(this.assementValues)) {
            data["assementValues"] = [];
            for (let item of this.assementValues)
                data["assementValues"].push(item.toJSON());
        }
        if (Array.isArray(this.assementValuesBefore)) {
            data["assementValuesBefore"] = [];
            for (let item of this.assementValuesBefore)
                data["assementValuesBefore"].push(item.toJSON());
        }
        if (Array.isArray(this.assementValuesAfter)) {
            data["assementValuesAfter"] = [];
            for (let item of this.assementValuesAfter)
                data["assementValuesAfter"].push(item.toJSON());
        }
        if (Array.isArray(this.assementValuesDialysis)) {
            data["assementValuesDialysis"] = [];
            for (let item of this.assementValuesDialysis)
                data["assementValuesDialysis"].push(item.toJSON());
        }
        data["signature"] = this.signature;
        if (Array.isArray(this.cureFieldValues)) {
            data["cureFieldValues"] = [];
            for (let item of this.cureFieldValues)
                data["cureFieldValues"].push(item.toJSON());
        }
        return data;
    }
}

/** 透析记录单 */
export interface ICureRecordView {
    /** 标识 */
    id?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析机标识 */
    dialysisMachineId?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineType?: string | undefined;
    /** 透析机类型显示值 */
    dialysisMachineTypeLabel?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 设备号 */
    dialysisMachineSn?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式显示值 */
    dialysisModeLabel?: string | undefined;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet?: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight1?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路) */
    patientVascularAccessId?: string | undefined;
    /** 血管通路类型 */
    patientVascularAccessType?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** [血管通路](患者血管通路) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路类型 */
    patientOtherVascularAccessType?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessName?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换方式显示值 */
    rfmLabel?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 治疗流程状态 `DIC.DIALYSIS.STATUS` *已签到,上机准备,治疗中,已下机,已结束* */
    status?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重 *kg* */
    beforeWeight1?: number | undefined;
    /** 透前净体重 */
    beforeNetWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前体重方式显示值 */
    beforeWeightModeLabel?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg1?: number | undefined;
    /** 净脱水量 *ml Ultrafiltration Complete* */
    ufc?: number | undefined;
    /** 偏移后透前体重 */
    deductionBeforeWeight?: number | undefined;
    /** 偏移后透后体重 */
    deductionAfterWeight?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight1?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后体重方式显示值 */
    afterWeightModeLabel?: string | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 称重脱水量 *ml* */
    ufvWeight?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    beforeBpPosition?: string | undefined;
    /** 透前血压测量位置显示值 */
    beforeBpPositionLabel?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前血压 *mmHg* */
    beforeBp?: string | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透后血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    afterBpPosition?: string | undefined;
    /** 透后血压测量位置显示值 */
    afterBpPositionLabel?: string | undefined;
    /** 透后收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 透后舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 透后血压 *mmHg* */
    afterBp?: string | undefined;
    /** 透后脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 透前体重时间 */
    timeBeforeWeight?: dayjs.Dayjs | undefined;
    /** 上次透后体重 */
    preAfterWeight?: number | undefined;
    /** 上次透后体重 */
    preAfterWeight1?: number | undefined;
    /** 较干体重增加量 */
    addBestWeight?: number | undefined;
    /** 本次透析体重下降量 */
    reduceWeight?: number | undefined;
    appendWeight?: number | undefined;
    /** 透前血压时间 */
    timeBeforeBp?: dayjs.Dayjs | undefined;
    /** 医生制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 方案是否制定0,1 */
    enact?: number | undefined;
    /** 护士确认方案时间 */
    timeCheckNurse?: dayjs.Dayjs | undefined;
    /** 方案是否通过0,1 */
    check?: number | undefined;
    /** 透前评估时间 */
    timeAssementBefore?: dayjs.Dayjs | undefined;
    /** 穿刺时间 */
    timeOn?: dayjs.Dayjs | undefined;
    /** 穿刺方法 */
    punctureMethod?: string | undefined;
    /** 穿刺方法显示值 */
    punctureMethodLabel?: string | undefined;
    /** 穿刺护士 */
    punctureNurseId?: string | undefined;
    /** 穿刺护士 */
    punctureNurseName?: string | undefined;
    /** 交叉核对时间 */
    timeVerify?: dayjs.Dayjs | undefined;
    /** 首次监测时间 */
    timeFirstMonitor?: dayjs.Dayjs | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 消毒时间 */
    timeDisinfect?: dayjs.Dayjs | undefined;
    /** 透后评估时间 */
    timeAssementAfter?: dayjs.Dayjs | undefined;
    /** 透后体重时间 */
    timeAfterWeight?: dayjs.Dayjs | undefined;
    /** 透后血压时间 */
    timeAfterBp?: dayjs.Dayjs | undefined;
    /** 透后小结时间 */
    timeAfterSummary?: dayjs.Dayjs | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 制定方案医生标识 */
    enactDoctorId?: string | undefined;
    /** 制定方案医生姓名 */
    enactDoctorName?: string | undefined;
    /** 确认方案护士标识 */
    checkNurseId?: string | undefined;
    /** 确认方案护士姓名 */
    checkNurseName?: string | undefined;
    /** 透前评估护士标识 */
    assementBeforeNurseId?: string | undefined;
    /** 透前评估护士姓名 */
    assementBeforeNurseName?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 透前体温 */
    onTemp?: number | undefined;
    /** 核对护士标识 */
    verifyNurseId?: string | undefined;
    /** 核对护士姓名 */
    verifyNurseName?: string | undefined;
    /** 核对是否通过0,1 */
    verify?: number | undefined;
    /** 下机护士标识 */
    offNurseId?: string | undefined;
    /** 下机护士姓名 */
    offNurseName?: string | undefined;
    /** 下机体温 */
    offTemp?: number | undefined;
    /** 下机呼吸 */
    offBreathe?: number | undefined;
    /** 透后评估护士标识 */
    assementAfterNurseId?: string | undefined;
    vascularLocation?: string | undefined;
    /** 血管通路部位 */
    vascularPosition?: string | undefined;
    monitorBP?: string | undefined;
    /** 透后评估护士姓名 */
    assementAfterNurseName?: string | undefined;
    /** 透后小结护士标识 */
    summaryAfterNurseId?: string | undefined;
    /** 透后小结护士姓名 */
    summaryAfterNurseName?: string | undefined;
    /** 是否提前下机0,1 *判断标准：提前半个小时以上下机* */
    offEarly?: number | undefined;
    /** 提前下机原因 */
    offEarlyCause?: string | undefined;
    /** 取消透析原因 *在交叉核对之前都可以取消透析* */
    cancelReason?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    source?: string | undefined;
    /** 来源显示值 */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 诊断显示值 */
    diagnosisLabel?: string | undefined;
    /** 病区 *住院的* */
    ward?: string | undefined;
    /** 床位 *住院的* */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 病历夹号 *病历夹号* */
    dossierNumber?: string | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 透析次数 */
    dialysisCount?: number | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 管床护士标识 */
    bedNurseId?: string | undefined;
    /** 管床护士姓名 */
    bedNurseName?: string | undefined;
    /** 置管护士标识 */
    placementNurseId?: string | undefined;
    /** 置管护士姓名 */
    placementNurseName?: string | undefined;
    /** 质控护士标识 */
    qualityNurseId?: string | undefined;
    /** 质控护士姓名 */
    qualityNurseName?: string | undefined;
    /** 是否单超0,1 */
    iuf?: number;
    /** 点位穿刺节点 */
    punctureNodes?: string | undefined;
    /** 点位穿刺节点备注 */
    punctureNodesRemark?: string | undefined;
    /** 穿刺记录备注 */
    punctureRemark?: string | undefined;
    /** 是否单超0,1 */
    iufLabel?: string | undefined;
    /** 单超方式 */
    iufMode?: string | undefined;
    /** 单超时间 */
    iufHour?: number | undefined;
    /** 单超量 */
    iufValue?: number | undefined;
    /** 单超开始时间 */
    iufStartTime?: dayjs.Dayjs | undefined;
    /** 是否归档 */
    isArchive?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 上一次透析标识 */
    lastId?: string | undefined;
    /** 下一次透析标识 */
    nextId?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 指纹图片 */
    finger?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者姓名拼音码 */
    patientPinyinCode?: string | undefined;
    /** 患者姓名五笔码 */
    patientWubiCode?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 性别显示值 */
    genderLabel?: string | undefined;
    /** 病情 `DIC.PEOPLE.CONDITION` */
    medicareCondition?: string | undefined;
    /** 病情显示值 */
    medicareConditionName?: string | undefined;
    /** 治疗状态名称 */
    statusLabel?: string | undefined;
    /** 透析龄 */
    dialysisAge?: string | undefined;
    /** 透析龄 */
    dialysisAgeMonth?: string | undefined;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    cureDialysate?: CureRecordItemDialysate;
    cureAnticoagulant?: CureRecordItemAnticoagulant;
    cureConsumable?: CureRecordItemConsumable;
    cureMonitorFirst?: CureRecordItemMonitor;
    cureMonitorLast?: CureRecordItemMonitor;
    /** 透中监测 */
    cureMonitor?: CureRecordItemMonitor[] | undefined;
    cureComplicationFirst?: CureRecordItemComplication;
    /** 透中事件 */
    cureComplication?: CureRecordItemComplication[] | undefined;
    /** 透析医嘱 */
    cureDa?: CureRecordItemDa[] | undefined;
    cureSummary?: CureRecordItemSummary;
    disinfect?: CureRecordItemDisinfect;
    assementBefore?: CureRecordItemAssement;
    assementAfter?: CureRecordItemAssement;
    assementDialysis?: CureRecordItemAssement;
    /** 受支持的表单自定义数据 */
    assementValues?: SysFormValueView[] | undefined;
    /** 透前评估用 */
    assementValuesBefore?: SysFormValueView[] | undefined;
    /** 透后评估用 */
    assementValuesAfter?: SysFormValueView[] | undefined;
    /** 透析评估用 */
    assementValuesDialysis?: SysFormValueView[] | undefined;
    /** 影像文件 *data:image/jpeg;base64,...* */
    signature?: string | undefined;
    /** 自定义字段 */
    cureFieldValues?: CureFieldValueView[] | undefined;
}

/** Reponse */
export class CureRecordViewResult implements ICureRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordView[] | undefined;

    constructor(data?: ICureRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordView[] | undefined;
}

/** 透析排床 */
export class CureScheduleDetailView implements ICureScheduleDetailView {
    /** 班次 */
    sysHospitalAreas?: SysHospitalArea[] | undefined;
    /** 透析区间 */
    deptDialysisAreas?: DeptDialysisArea[] | undefined;
    /** 班次 */
    cureShifts?: CureShift[] | undefined;
    /** 患者排床透析区间信息 */
    dialysisItems?: CureDialysisItem[] | undefined;

    constructor(data?: ICureScheduleDetailView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["sysHospitalAreas"])) {
                this.sysHospitalAreas = [] as any;
                for (let item of _data["sysHospitalAreas"])
                    this.sysHospitalAreas!.push(SysHospitalArea.fromJS(item));
            }
            if (Array.isArray(_data["deptDialysisAreas"])) {
                this.deptDialysisAreas = [] as any;
                for (let item of _data["deptDialysisAreas"])
                    this.deptDialysisAreas!.push(DeptDialysisArea.fromJS(item));
            }
            if (Array.isArray(_data["cureShifts"])) {
                this.cureShifts = [] as any;
                for (let item of _data["cureShifts"])
                    this.cureShifts!.push(CureShift.fromJS(item));
            }
            if (Array.isArray(_data["dialysisItems"])) {
                this.dialysisItems = [] as any;
                for (let item of _data["dialysisItems"])
                    this.dialysisItems!.push(CureDialysisItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureScheduleDetailView {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleDetailView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.sysHospitalAreas)) {
            data["sysHospitalAreas"] = [];
            for (let item of this.sysHospitalAreas)
                data["sysHospitalAreas"].push(item.toJSON());
        }
        if (Array.isArray(this.deptDialysisAreas)) {
            data["deptDialysisAreas"] = [];
            for (let item of this.deptDialysisAreas)
                data["deptDialysisAreas"].push(item.toJSON());
        }
        if (Array.isArray(this.cureShifts)) {
            data["cureShifts"] = [];
            for (let item of this.cureShifts)
                data["cureShifts"].push(item.toJSON());
        }
        if (Array.isArray(this.dialysisItems)) {
            data["dialysisItems"] = [];
            for (let item of this.dialysisItems)
                data["dialysisItems"].push(item.toJSON());
        }
        return data;
    }
}

/** 透析排床 */
export interface ICureScheduleDetailView {
    /** 班次 */
    sysHospitalAreas?: SysHospitalArea[] | undefined;
    /** 透析区间 */
    deptDialysisAreas?: DeptDialysisArea[] | undefined;
    /** 班次 */
    cureShifts?: CureShift[] | undefined;
    /** 患者排床透析区间信息 */
    dialysisItems?: CureDialysisItem[] | undefined;
}

/** Reponse */
export class CureScheduleDetailViewResultEntry implements ICureScheduleDetailViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureScheduleDetailView;

    constructor(data?: ICureScheduleDetailViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureScheduleDetailView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureScheduleDetailViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleDetailViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureScheduleDetailViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureScheduleDetailView;
}

/** 透析班次 */
export class CureShift implements ICureShift {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○不允许重复* */
    name?: string | undefined;
    /** 简称 *○不允许重复* */
    shortName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    beginTime?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    endDate?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureShift) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.beginTime = _data["beginTime"];
            this.endDate = _data["endDate"];
            this.color = _data["color"];
            this.remark = _data["remark"];
            this.sequence = _data["sequence"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureShift {
        data = typeof data === 'object' ? data : {};
        let result = new CureShift();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["beginTime"] = this.beginTime;
        data["endDate"] = this.endDate;
        data["color"] = this.color;
        data["remark"] = this.remark;
        data["sequence"] = this.sequence;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析班次 */
export interface ICureShift {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○不允许重复* */
    name?: string | undefined;
    /** 简称 *○不允许重复* */
    shortName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    beginTime?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    endDate?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 透析区间 */
export class DeptDialysisArea implements IDeptDialysisArea {
    /** 标识 */
    id?: string | undefined;
    /** [归属透析室标识](透析室) */
    sysHospitalAreaId?: string | undefined;
    /** 名称 *○同一个`sys_hospital_area_id`下不允许重复* */
    name?: string | undefined;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    type?: string | undefined;
    /** 阳性分区0,1 */
    positive?: number;
    /** 最大床位数量 */
    bedMax?: number | undefined;
    /** 已有床位数量 */
    bedCount?: number | undefined;
    /** 所在建筑 */
    build?: string | undefined;
    /** 所在楼层 */
    floor?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 图标 `DIC.DIALYSIS.AREA.ICON` */
    icon?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    sysHospitalAreas?: SysHospitalArea;

    constructor(data?: IDeptDialysisArea) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.positive = _data["positive"];
            this.bedMax = _data["bedMax"];
            this.bedCount = _data["bedCount"];
            this.build = _data["build"];
            this.floor = _data["floor"];
            this.color = _data["color"];
            this.icon = _data["icon"];
            this.remark = _data["remark"];
            this.sequence = _data["sequence"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.sysHospitalAreas = _data["sysHospitalAreas"] ? SysHospitalArea.fromJS(_data["sysHospitalAreas"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptDialysisArea {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisArea();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["name"] = this.name;
        data["type"] = this.type;
        data["positive"] = this.positive;
        data["bedMax"] = this.bedMax;
        data["bedCount"] = this.bedCount;
        data["build"] = this.build;
        data["floor"] = this.floor;
        data["color"] = this.color;
        data["icon"] = this.icon;
        data["remark"] = this.remark;
        data["sequence"] = this.sequence;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["sysHospitalAreas"] = this.sysHospitalAreas ? this.sysHospitalAreas.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析区间 */
export interface IDeptDialysisArea {
    /** 标识 */
    id?: string | undefined;
    /** [归属透析室标识](透析室) */
    sysHospitalAreaId?: string | undefined;
    /** 名称 *○同一个`sys_hospital_area_id`下不允许重复* */
    name?: string | undefined;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    type?: string | undefined;
    /** 阳性分区0,1 */
    positive?: number;
    /** 最大床位数量 */
    bedMax?: number | undefined;
    /** 已有床位数量 */
    bedCount?: number | undefined;
    /** 所在建筑 */
    build?: string | undefined;
    /** 所在楼层 */
    floor?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 图标 `DIC.DIALYSIS.AREA.ICON` */
    icon?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    sysHospitalAreas?: SysHospitalArea;
}

/** 文件列表 */
export class HfsFiles implements IHfsFiles {
    /** 标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
    /** 文件路径 */
    path?: string | undefined;
    /** url */
    url?: string | undefined;
    /** 状态0,1 *0：临时 1：正式* */
    status?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IHfsFiles) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.extension = _data["extension"];
            this.length = _data["length"];
            this.path = _data["path"];
            this.url = _data["url"];
            this.status = _data["status"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HfsFiles {
        data = typeof data === 'object' ? data : {};
        let result = new HfsFiles();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["extension"] = this.extension;
        data["length"] = this.length;
        data["path"] = this.path;
        data["url"] = this.url;
        data["status"] = this.status;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 文件列表 */
export interface IHfsFiles {
    /** 标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
    /** 文件路径 */
    path?: string | undefined;
    /** url */
    url?: string | undefined;
    /** 状态0,1 *0：临时 1：正式* */
    status?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 项目清单/账套管理/库存记录/期初库存(以项目清单为主表) 入库记录/出库记录(以库存为主表) */
export class InventoryView implements IInventoryView {
    /** 项目清单-标识 */
    roomItemListId?: string | undefined;
    /** 项目清单-项目名称 */
    roomItemListName?: string | undefined;
    /** 种类 *[项目分类标识](项目分类)* */
    roomItemTypeId?: string | undefined;
    /** 种类名称 *[项目分类标识](项目分类)* */
    roomItemTypeName?: string | undefined;
    /** 种类名称全称 */
    roomItemTypeNameFull?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** 过期预警提醒(天)  *0:不预警,离过期日期还有多少天* */
    warningDay?: number;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 一级单位名称 */
    unitLevel1Name?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 基本单位名称 */
    unitBaseName?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位* */
    conversionRate?: number;
    /** 售价 */
    sellingPrice?: number;
    /** 库存上限预警阈值 */
    maximum?: number | undefined;
    /** 库存下限预警阈值 *0:不预警* */
    minimum?: number | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式名称 */
    usageModeName?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商 `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 期初库存 *基本单位的库存* */
    inventoryBegin?: number | undefined;
    /** 库存扣减 */
    inventory?: number;
    /** 库存 *基本单位的库存* */
    inventoryCount?: number | undefined;
    /** 启用状态 */
    enabled?: number;
    /** 使用说明 */
    remark?: string | undefined;
    /** 是否后收费 *0:否,1:是* */
    afterCharge?: number | undefined;
    /** 是否进行收费 *0:否,1:是* */
    inCharge?: number | undefined;
    /** 是否编码管理 *0:否,1:是* */
    codeManage?: number | undefined;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 项目类型Code */
    typeCode?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 完整规格 */
    fullSpecLabel?: string | undefined;
    /** 单位显示值 */
    unitLabel?: string | undefined;
    /** 一级单位、基本单位、规格单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 一级单位与基本单位集合 */
    unitListBase?: LabelModel[] | undefined;
    /** 项目类型:1-药品 2-耗材 0-其他 */
    type?: number;
    /** 扣减来源 0：科室扣减  1：个人库存 */
    deductionSource?: number;
    /** 费用类型 */
    costType?: string | undefined;
    /** 账套分组标识 */
    roomAccountGroupId?: string | undefined;
    /** 账套分组名称 */
    roomAccountGroupName?: string | undefined;
    /** 账套分组全称 */
    roomAccountGroupNameFull?: string | undefined;

    constructor(data?: IInventoryView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListId = _data["roomItemListId"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemTypeId = _data["roomItemTypeId"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.roomItemTypeNameFull = _data["roomItemTypeNameFull"];
            this.name = _data["name"];
            this.nameGoods = _data["nameGoods"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.shortName = _data["shortName"];
            this.model = _data["model"];
            this.spec = _data["spec"];
            this.origin = _data["origin"];
            this.dealer = _data["dealer"];
            this.warningDay = _data["warningDay"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitLevel1Name = _data["unitLevel1Name"];
            this.unitBase = _data["unitBase"];
            this.unitBaseName = _data["unitBaseName"];
            this.conversionRate = _data["conversionRate"];
            this.sellingPrice = _data["sellingPrice"];
            this.maximum = _data["maximum"];
            this.minimum = _data["minimum"];
            this.usageMode = _data["usageMode"];
            this.usageModeName = _data["usageModeName"];
            this.manufacturer = _data["manufacturer"];
            this.suppler = _data["suppler"];
            this.inventoryBegin = _data["inventoryBegin"];
            this.inventory = _data["inventory"];
            this.inventoryCount = _data["inventoryCount"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
            this.afterCharge = _data["afterCharge"];
            this.inCharge = _data["inCharge"];
            this.codeManage = _data["codeManage"];
            this.batchManage = _data["batchManage"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.typeCode = _data["typeCode"];
            this.manufacturerLabel = _data["manufacturerLabel"];
            this.specLabel = _data["specLabel"];
            this.fullSpecLabel = _data["fullSpecLabel"];
            this.unitLabel = _data["unitLabel"];
            if (Array.isArray(_data["unitList"])) {
                this.unitList = [] as any;
                for (let item of _data["unitList"])
                    this.unitList!.push(LabelModel.fromJS(item));
            }
            if (Array.isArray(_data["unitListBase"])) {
                this.unitListBase = [] as any;
                for (let item of _data["unitListBase"])
                    this.unitListBase!.push(LabelModel.fromJS(item));
            }
            this.type = _data["type"];
            this.deductionSource = _data["deductionSource"];
            this.costType = _data["costType"];
            this.roomAccountGroupId = _data["roomAccountGroupId"];
            this.roomAccountGroupName = _data["roomAccountGroupName"];
            this.roomAccountGroupNameFull = _data["roomAccountGroupNameFull"];
        }
    }

    static fromJS(data: any): InventoryView {
        data = typeof data === 'object' ? data : {};
        let result = new InventoryView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListId"] = this.roomItemListId;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemTypeId"] = this.roomItemTypeId;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["roomItemTypeNameFull"] = this.roomItemTypeNameFull;
        data["name"] = this.name;
        data["nameGoods"] = this.nameGoods;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["shortName"] = this.shortName;
        data["model"] = this.model;
        data["spec"] = this.spec;
        data["origin"] = this.origin;
        data["dealer"] = this.dealer;
        data["warningDay"] = this.warningDay;
        data["unitLevel1"] = this.unitLevel1;
        data["unitLevel1Name"] = this.unitLevel1Name;
        data["unitBase"] = this.unitBase;
        data["unitBaseName"] = this.unitBaseName;
        data["conversionRate"] = this.conversionRate;
        data["sellingPrice"] = this.sellingPrice;
        data["maximum"] = this.maximum;
        data["minimum"] = this.minimum;
        data["usageMode"] = this.usageMode;
        data["usageModeName"] = this.usageModeName;
        data["manufacturer"] = this.manufacturer;
        data["suppler"] = this.suppler;
        data["inventoryBegin"] = this.inventoryBegin;
        data["inventory"] = this.inventory;
        data["inventoryCount"] = this.inventoryCount;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        data["afterCharge"] = this.afterCharge;
        data["inCharge"] = this.inCharge;
        data["codeManage"] = this.codeManage;
        data["batchManage"] = this.batchManage;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["typeCode"] = this.typeCode;
        data["manufacturerLabel"] = this.manufacturerLabel;
        data["specLabel"] = this.specLabel;
        data["fullSpecLabel"] = this.fullSpecLabel;
        data["unitLabel"] = this.unitLabel;
        if (Array.isArray(this.unitList)) {
            data["unitList"] = [];
            for (let item of this.unitList)
                data["unitList"].push(item.toJSON());
        }
        if (Array.isArray(this.unitListBase)) {
            data["unitListBase"] = [];
            for (let item of this.unitListBase)
                data["unitListBase"].push(item.toJSON());
        }
        data["type"] = this.type;
        data["deductionSource"] = this.deductionSource;
        data["costType"] = this.costType;
        data["roomAccountGroupId"] = this.roomAccountGroupId;
        data["roomAccountGroupName"] = this.roomAccountGroupName;
        data["roomAccountGroupNameFull"] = this.roomAccountGroupNameFull;
        return data;
    }
}

/** 项目清单/账套管理/库存记录/期初库存(以项目清单为主表) 入库记录/出库记录(以库存为主表) */
export interface IInventoryView {
    /** 项目清单-标识 */
    roomItemListId?: string | undefined;
    /** 项目清单-项目名称 */
    roomItemListName?: string | undefined;
    /** 种类 *[项目分类标识](项目分类)* */
    roomItemTypeId?: string | undefined;
    /** 种类名称 *[项目分类标识](项目分类)* */
    roomItemTypeName?: string | undefined;
    /** 种类名称全称 */
    roomItemTypeNameFull?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** 过期预警提醒(天)  *0:不预警,离过期日期还有多少天* */
    warningDay?: number;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 一级单位名称 */
    unitLevel1Name?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 基本单位名称 */
    unitBaseName?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位* */
    conversionRate?: number;
    /** 售价 */
    sellingPrice?: number;
    /** 库存上限预警阈值 */
    maximum?: number | undefined;
    /** 库存下限预警阈值 *0:不预警* */
    minimum?: number | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式名称 */
    usageModeName?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商 `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 期初库存 *基本单位的库存* */
    inventoryBegin?: number | undefined;
    /** 库存扣减 */
    inventory?: number;
    /** 库存 *基本单位的库存* */
    inventoryCount?: number | undefined;
    /** 启用状态 */
    enabled?: number;
    /** 使用说明 */
    remark?: string | undefined;
    /** 是否后收费 *0:否,1:是* */
    afterCharge?: number | undefined;
    /** 是否进行收费 *0:否,1:是* */
    inCharge?: number | undefined;
    /** 是否编码管理 *0:否,1:是* */
    codeManage?: number | undefined;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 项目类型Code */
    typeCode?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 完整规格 */
    fullSpecLabel?: string | undefined;
    /** 单位显示值 */
    unitLabel?: string | undefined;
    /** 一级单位、基本单位、规格单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 一级单位与基本单位集合 */
    unitListBase?: LabelModel[] | undefined;
    /** 项目类型:1-药品 2-耗材 0-其他 */
    type?: number;
    /** 扣减来源 0：科室扣减  1：个人库存 */
    deductionSource?: number;
    /** 费用类型 */
    costType?: string | undefined;
    /** 账套分组标识 */
    roomAccountGroupId?: string | undefined;
    /** 账套分组名称 */
    roomAccountGroupName?: string | undefined;
    /** 账套分组全称 */
    roomAccountGroupNameFull?: string | undefined;
}

/** Reponse */
export class InventoryViewResult implements IInventoryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: InventoryView[] | undefined;

    constructor(data?: IInventoryViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(InventoryView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): InventoryViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new InventoryViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IInventoryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: InventoryView[] | undefined;
}

export class LabelModel implements ILabelModel {
    /** 显示值 */
    label?: string | undefined;
    /** 值 */
    value?: string | undefined;

    constructor(data?: ILabelModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.label = _data["label"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): LabelModel {
        data = typeof data === 'object' ? data : {};
        let result = new LabelModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["label"] = this.label;
        data["value"] = this.value;
        return data;
    }
}

export interface ILabelModel {
    /** 显示值 */
    label?: string | undefined;
    /** 值 */
    value?: string | undefined;
}

/** 检验报告项 */
export class MapLisItem implements IMapLisItem {
    /** 标识 */
    id?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [检验报告分类标识](检验报告分类) */
    mapLisTypeId?: string | undefined;
    /** [iHDIS检验项配置标识](iHDIS检验项配置) */
    mapLisItemIhdisId?: string | undefined;
    /** LIS编码 */
    codeLis?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    mapLisTypes?: MapLisType;
    mapLisItemIhdiss?: MapLisItemIhdis;

    constructor(data?: IMapLisItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.mapLisTypeId = _data["mapLisTypeId"];
            this.mapLisItemIhdisId = _data["mapLisItemIhdisId"];
            this.codeLis = _data["codeLis"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.mapLisTypes = _data["mapLisTypes"] ? MapLisType.fromJS(_data["mapLisTypes"]) : <any>undefined;
            this.mapLisItemIhdiss = _data["mapLisItemIhdiss"] ? MapLisItemIhdis.fromJS(_data["mapLisItemIhdiss"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MapLisItem {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["mapLisTypeId"] = this.mapLisTypeId;
        data["mapLisItemIhdisId"] = this.mapLisItemIhdisId;
        data["codeLis"] = this.codeLis;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["mapLisTypes"] = this.mapLisTypes ? this.mapLisTypes.toJSON() : <any>undefined;
        data["mapLisItemIhdiss"] = this.mapLisItemIhdiss ? this.mapLisItemIhdiss.toJSON() : <any>undefined;
        return data;
    }
}

/** 检验报告项 */
export interface IMapLisItem {
    /** 标识 */
    id?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [检验报告分类标识](检验报告分类) */
    mapLisTypeId?: string | undefined;
    /** [iHDIS检验项配置标识](iHDIS检验项配置) */
    mapLisItemIhdisId?: string | undefined;
    /** LIS编码 */
    codeLis?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    mapLisTypes?: MapLisType;
    mapLisItemIhdiss?: MapLisItemIhdis;
}

/** iHDIS检验项配置 */
export class MapLisItemIhdis implements IMapLisItemIhdis {
    /** 标识 */
    id?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [关联的检验报告分类标识](检验报告分类) */
    mapLisTypeId?: string | undefined;
    /** 本系统编码，唯一 */
    codeI?: string | undefined;
    /** LIS编码 */
    codeLis?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 达标率范围 */
    complianceRateRange?: string | undefined;
    /** 参考范围 */
    referenceRange?: string | undefined;
    /** 参考范围最小值-男性 */
    referenceRangeMinMan?: string | undefined;
    /** 参考范围最大值-男性 */
    referenceRangeMaxMan?: string | undefined;
    /** 参考范围最小值-女性 */
    referenceRangeMinWoman?: string | undefined;
    /** 参考范围最大值-女性 */
    referenceRangeMaxWoman?: string | undefined;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 是否异常提醒 */
    abnormaRemind?: number | undefined;
    /** 是否必查项目 */
    must?: number | undefined;
    /** 是否进行质控报表统计 */
    report?: number | undefined;
    /** 为必查时的检验周期 `DIC.LISPACS.CHECK.INTERVAL` *日/次* */
    checkInterval?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    mapLisTypes?: MapLisType;

    constructor(data?: IMapLisItemIhdis) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.mapLisTypeId = _data["mapLisTypeId"];
            this.codeI = _data["codeI"];
            this.codeLis = _data["codeLis"];
            this.unit = _data["unit"];
            this.complianceRateRange = _data["complianceRateRange"];
            this.referenceRange = _data["referenceRange"];
            this.referenceRangeMinMan = _data["referenceRangeMinMan"];
            this.referenceRangeMaxMan = _data["referenceRangeMaxMan"];
            this.referenceRangeMinWoman = _data["referenceRangeMinWoman"];
            this.referenceRangeMaxWoman = _data["referenceRangeMaxWoman"];
            this.commonTerms = _data["commonTerms"];
            this.abnormaRemind = _data["abnormaRemind"];
            this.must = _data["must"];
            this.report = _data["report"];
            this.checkInterval = _data["checkInterval"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.mapLisTypes = _data["mapLisTypes"] ? MapLisType.fromJS(_data["mapLisTypes"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MapLisItemIhdis {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisItemIhdis();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["mapLisTypeId"] = this.mapLisTypeId;
        data["codeI"] = this.codeI;
        data["codeLis"] = this.codeLis;
        data["unit"] = this.unit;
        data["complianceRateRange"] = this.complianceRateRange;
        data["referenceRange"] = this.referenceRange;
        data["referenceRangeMinMan"] = this.referenceRangeMinMan;
        data["referenceRangeMaxMan"] = this.referenceRangeMaxMan;
        data["referenceRangeMinWoman"] = this.referenceRangeMinWoman;
        data["referenceRangeMaxWoman"] = this.referenceRangeMaxWoman;
        data["commonTerms"] = this.commonTerms;
        data["abnormaRemind"] = this.abnormaRemind;
        data["must"] = this.must;
        data["report"] = this.report;
        data["checkInterval"] = this.checkInterval;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["mapLisTypes"] = this.mapLisTypes ? this.mapLisTypes.toJSON() : <any>undefined;
        return data;
    }
}

/** iHDIS检验项配置 */
export interface IMapLisItemIhdis {
    /** 标识 */
    id?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [关联的检验报告分类标识](检验报告分类) */
    mapLisTypeId?: string | undefined;
    /** 本系统编码，唯一 */
    codeI?: string | undefined;
    /** LIS编码 */
    codeLis?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 达标率范围 */
    complianceRateRange?: string | undefined;
    /** 参考范围 */
    referenceRange?: string | undefined;
    /** 参考范围最小值-男性 */
    referenceRangeMinMan?: string | undefined;
    /** 参考范围最大值-男性 */
    referenceRangeMaxMan?: string | undefined;
    /** 参考范围最小值-女性 */
    referenceRangeMinWoman?: string | undefined;
    /** 参考范围最大值-女性 */
    referenceRangeMaxWoman?: string | undefined;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 是否异常提醒 */
    abnormaRemind?: number | undefined;
    /** 是否必查项目 */
    must?: number | undefined;
    /** 是否进行质控报表统计 */
    report?: number | undefined;
    /** 为必查时的检验周期 `DIC.LISPACS.CHECK.INTERVAL` *日/次* */
    checkInterval?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    mapLisTypes?: MapLisType;
}

/** iHDIS检验项明细 */
export class MapLisItemIhdisView implements IMapLisItemIhdisView {
    /** 名称 */
    name!: string;
    /** [关联的检验报告分类标识](#检验报告分类) */
    mapLisTypeId?: string | undefined;
    /** 本系统编码，唯一 */
    codeI!: string;
    /** LIS编码 */
    codeLis?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 达标率范围 */
    complianceRateRange?: string | undefined;
    /** 参考范围 */
    referenceRange?: string | undefined;
    /** 参考范围最小值-男性 */
    referenceRangeMinMan?: string | undefined;
    /** 参考范围最大值-男性 */
    referenceRangeMaxMan?: string | undefined;
    /** 参考范围最小值-女性 */
    referenceRangeMinWoman?: string | undefined;
    /** 参考范围最大值-女性 */
    referenceRangeMaxWoman?: string | undefined;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 是否异常提醒 */
    abnormaRemind?: number | undefined;
    /** 是否必查项目 */
    must?: number | undefined;
    /** 是否进行质控报表统计 */
    report?: number | undefined;
    /** 为必查时的检验周期 `DIC.LISPACS.CHECK.INTERVAL` *日/次* */
    checkInterval?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 关联的检验报告分类名称 */
    mapLisTypeName?: string | undefined;

    constructor(data?: IMapLisItemIhdisView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.mapLisTypeId = _data["mapLisTypeId"];
            this.codeI = _data["codeI"];
            this.codeLis = _data["codeLis"];
            this.unit = _data["unit"];
            this.complianceRateRange = _data["complianceRateRange"];
            this.referenceRange = _data["referenceRange"];
            this.referenceRangeMinMan = _data["referenceRangeMinMan"];
            this.referenceRangeMaxMan = _data["referenceRangeMaxMan"];
            this.referenceRangeMinWoman = _data["referenceRangeMinWoman"];
            this.referenceRangeMaxWoman = _data["referenceRangeMaxWoman"];
            this.commonTerms = _data["commonTerms"];
            this.abnormaRemind = _data["abnormaRemind"];
            this.must = _data["must"];
            this.report = _data["report"];
            this.checkInterval = _data["checkInterval"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.mapLisTypeName = _data["mapLisTypeName"];
        }
    }

    static fromJS(data: any): MapLisItemIhdisView {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisItemIhdisView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["mapLisTypeId"] = this.mapLisTypeId;
        data["codeI"] = this.codeI;
        data["codeLis"] = this.codeLis;
        data["unit"] = this.unit;
        data["complianceRateRange"] = this.complianceRateRange;
        data["referenceRange"] = this.referenceRange;
        data["referenceRangeMinMan"] = this.referenceRangeMinMan;
        data["referenceRangeMaxMan"] = this.referenceRangeMaxMan;
        data["referenceRangeMinWoman"] = this.referenceRangeMinWoman;
        data["referenceRangeMaxWoman"] = this.referenceRangeMaxWoman;
        data["commonTerms"] = this.commonTerms;
        data["abnormaRemind"] = this.abnormaRemind;
        data["must"] = this.must;
        data["report"] = this.report;
        data["checkInterval"] = this.checkInterval;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["mapLisTypeName"] = this.mapLisTypeName;
        return data;
    }
}

/** iHDIS检验项明细 */
export interface IMapLisItemIhdisView {
    /** 名称 */
    name: string;
    /** [关联的检验报告分类标识](#检验报告分类) */
    mapLisTypeId?: string | undefined;
    /** 本系统编码，唯一 */
    codeI: string;
    /** LIS编码 */
    codeLis?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 达标率范围 */
    complianceRateRange?: string | undefined;
    /** 参考范围 */
    referenceRange?: string | undefined;
    /** 参考范围最小值-男性 */
    referenceRangeMinMan?: string | undefined;
    /** 参考范围最大值-男性 */
    referenceRangeMaxMan?: string | undefined;
    /** 参考范围最小值-女性 */
    referenceRangeMinWoman?: string | undefined;
    /** 参考范围最大值-女性 */
    referenceRangeMaxWoman?: string | undefined;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 是否异常提醒 */
    abnormaRemind?: number | undefined;
    /** 是否必查项目 */
    must?: number | undefined;
    /** 是否进行质控报表统计 */
    report?: number | undefined;
    /** 为必查时的检验周期 `DIC.LISPACS.CHECK.INTERVAL` *日/次* */
    checkInterval?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 关联的检验报告分类名称 */
    mapLisTypeName?: string | undefined;
}

/** Reponse */
export class MapLisItemIhdisViewResult implements IMapLisItemIhdisViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MapLisItemIhdisView[] | undefined;

    constructor(data?: IMapLisItemIhdisViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(MapLisItemIhdisView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MapLisItemIhdisViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisItemIhdisViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IMapLisItemIhdisViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MapLisItemIhdisView[] | undefined;
}

/** Reponse */
export class MapLisItemResult implements IMapLisItemResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MapLisItem[] | undefined;

    constructor(data?: IMapLisItemResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(MapLisItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MapLisItemResult {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisItemResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IMapLisItemResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MapLisItem[] | undefined;
}

/** 检验报告分类 */
export class MapLisType implements IMapLisType {
    /** 标识 */
    id?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IMapLisType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): MapLisType {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 检验报告分类 */
export interface IMapLisType {
    /** 标识 */
    id?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class MapLisTypeResult implements IMapLisTypeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MapLisType[] | undefined;

    constructor(data?: IMapLisTypeResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(MapLisType.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MapLisTypeResult {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisTypeResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IMapLisTypeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MapLisType[] | undefined;
}

/** 患者信息 */
export class Patient implements IPatient {
    /** 标识 */
    id?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 姓首字母 */
    surnameCode?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 *用于患者重名,默认填姓名,系统内默认显示别名,打印单据使用姓名* */
    name2?: string | undefined;
    /** 照片路径 */
    photo?: string | undefined;
    /** 人脸识别图像 */
    face?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 档案号 *XT{Year}{Month}{Sequence}* */
    archiveNumber?: string | undefined;
    /** 医保类型 `DIC.PEOPLE.MEDICARETYPE` *城镇职工,城镇居民* */
    medicareType?: string | undefined;
    /** 医保号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 血型 `DIC.PEOPLE.BLOODTYPE` *字典:A,B,O,未知* */
    bloodType?: string | undefined;
    /** RH `DIC.PEOPLE.RH` */
    rh?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 本人电话 */
    telephone?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 职业 `DIC.PEOPLE.PROFESSION` *个体,工人,农民,学生* */
    profession?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 家庭住址 */
    address?: string | undefined;
    /** 工作单位 */
    workUnit?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: dayjs.Dayjs | undefined;
    /** 透析状态 `DIC.PATIENT.DIALYSIS.STATE` *长期,临时* */
    dialysisState?: string | undefined;
    /** 透析状态是否转换 `DIC.PATIENT.DIALYSIS.STATE.TRANSITION` *0:未转换,1:已转换 编辑诊断-状态自动转换时管理这个状态* */
    dialysisStateTransition?: number;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 转归状态 `DIC.PROGNOSIS.TYPE` *患者编辑界面不做维护,自动管理* */
    prognosisState?: string | undefined;
    /** 传染病 `DIC.PATIENT.POSITIVE` *0:阴性,1:阳性 编辑诊断-传染病时管理这个状态* */
    positive?: number;
    /** 并发症 `DIC.PATIENT.COMPLICATION` *多选* */
    complication?: string | undefined;
    /** 主治医生 */
    doctor?: string | undefined;
    /** 主管护士 */
    nurse?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 病理诊断 *0:无,1:有* */
    diagnosisPathological?: number | undefined;
    /** 并发症诊断 *0:无,1:有* */
    diagnosisComplication?: number | undefined;
    /** 传染病诊断 *0:无,1:有* */
    diagnosisInfectiousDiseases?: number | undefined;
    /** 肿瘤诊断 *0:无,1:有* */
    diagnosisTumor?: number | undefined;
    /** 过敏诊断 *0:无,1:有* */
    diagnosisAllergy?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 患者数据初始化来源 *ihdis,his* */
    initialSource?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 指纹 */
    finger?: string | undefined;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 病历夹号 `DIC.PATIENT.CONDITION` *一般,病重,病危* */
    medicareCondition?: string | undefined;
    /** 下次感筛检验日期 */
    nextDate?: dayjs.Dayjs | undefined;
    /** 首次透析时采用的通路类型 */
    firstDialysisVascularAccess?: string | undefined;
    /** 首次透析时采取的方式 */
    firstDialysisMode?: string | undefined;
    /** 首次肾脏代替治疗时肾功能 */
    firstGfr?: string | undefined;
    /** 首次肾脏代替治疗时血肌酐水平 */
    firstScr?: string | undefined;

    constructor(data?: IPatient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.surnameCode = _data["surnameCode"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.photo = _data["photo"];
            this.face = _data["face"];
            this.gender = _data["gender"];
            this.source = _data["source"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.department = _data["department"];
            this.ward = _data["ward"];
            this.bed = _data["bed"];
            this.archiveNumber = _data["archiveNumber"];
            this.medicareType = _data["medicareType"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.nationality = _data["nationality"];
            this.idType = _data["idType"];
            this.idNumber = _data["idNumber"];
            this.birthdate = _data["birthdate"] ? dayjs(_data["birthdate"].toString()) : <any>undefined;
            this.bloodType = _data["bloodType"];
            this.rh = _data["rh"];
            this.height = _data["height"];
            this.telephone = _data["telephone"];
            this.marital = _data["marital"];
            this.educationalLevel = _data["educationalLevel"];
            this.profession = _data["profession"];
            this.province = _data["province"];
            this.city = _data["city"];
            this.area = _data["area"];
            this.address = _data["address"];
            this.workUnit = _data["workUnit"];
            this.receiptDate = _data["receiptDate"] ? dayjs(_data["receiptDate"].toString()) : <any>undefined;
            this.dialysisState = _data["dialysisState"];
            this.dialysisStateTransition = _data["dialysisStateTransition"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.dialysisCountInit = _data["dialysisCountInit"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            this.prognosisState = _data["prognosisState"];
            this.positive = _data["positive"];
            this.complication = _data["complication"];
            this.doctor = _data["doctor"];
            this.nurse = _data["nurse"];
            this.diagnosis = _data["diagnosis"];
            this.diagnosisPathological = _data["diagnosisPathological"];
            this.diagnosisComplication = _data["diagnosisComplication"];
            this.diagnosisInfectiousDiseases = _data["diagnosisInfectiousDiseases"];
            this.diagnosisTumor = _data["diagnosisTumor"];
            this.diagnosisAllergy = _data["diagnosisAllergy"];
            this.remark = _data["remark"];
            this.initialSource = _data["initialSource"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.finger = _data["finger"];
            this.dossierNumber = _data["dossierNumber"];
            this.medicareCondition = _data["medicareCondition"];
            this.nextDate = _data["nextDate"] ? dayjs(_data["nextDate"].toString()) : <any>undefined;
            this.firstDialysisVascularAccess = _data["firstDialysisVascularAccess"];
            this.firstDialysisMode = _data["firstDialysisMode"];
            this.firstGfr = _data["firstGfr"];
            this.firstScr = _data["firstScr"];
        }
    }

    static fromJS(data: any): Patient {
        data = typeof data === 'object' ? data : {};
        let result = new Patient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["surnameCode"] = this.surnameCode;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["photo"] = this.photo;
        data["face"] = this.face;
        data["gender"] = this.gender;
        data["source"] = this.source;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["department"] = this.department;
        data["ward"] = this.ward;
        data["bed"] = this.bed;
        data["archiveNumber"] = this.archiveNumber;
        data["medicareType"] = this.medicareType;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["dialysisNumber"] = this.dialysisNumber;
        data["nationality"] = this.nationality;
        data["idType"] = this.idType;
        data["idNumber"] = this.idNumber;
        data["birthdate"] = this.birthdate ? this.birthdate.toISOString() : <any>undefined;
        data["bloodType"] = this.bloodType;
        data["rh"] = this.rh;
        data["height"] = this.height;
        data["telephone"] = this.telephone;
        data["marital"] = this.marital;
        data["educationalLevel"] = this.educationalLevel;
        data["profession"] = this.profession;
        data["province"] = this.province;
        data["city"] = this.city;
        data["area"] = this.area;
        data["address"] = this.address;
        data["workUnit"] = this.workUnit;
        data["receiptDate"] = this.receiptDate ? this.receiptDate.toISOString() : <any>undefined;
        data["dialysisState"] = this.dialysisState;
        data["dialysisStateTransition"] = this.dialysisStateTransition;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["dialysisCountInit"] = this.dialysisCountInit;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        data["prognosisState"] = this.prognosisState;
        data["positive"] = this.positive;
        data["complication"] = this.complication;
        data["doctor"] = this.doctor;
        data["nurse"] = this.nurse;
        data["diagnosis"] = this.diagnosis;
        data["diagnosisPathological"] = this.diagnosisPathological;
        data["diagnosisComplication"] = this.diagnosisComplication;
        data["diagnosisInfectiousDiseases"] = this.diagnosisInfectiousDiseases;
        data["diagnosisTumor"] = this.diagnosisTumor;
        data["diagnosisAllergy"] = this.diagnosisAllergy;
        data["remark"] = this.remark;
        data["initialSource"] = this.initialSource;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["finger"] = this.finger;
        data["dossierNumber"] = this.dossierNumber;
        data["medicareCondition"] = this.medicareCondition;
        data["nextDate"] = this.nextDate ? this.nextDate.toISOString() : <any>undefined;
        data["firstDialysisVascularAccess"] = this.firstDialysisVascularAccess;
        data["firstDialysisMode"] = this.firstDialysisMode;
        data["firstGfr"] = this.firstGfr;
        data["firstScr"] = this.firstScr;
        return data;
    }
}

/** 患者信息 */
export interface IPatient {
    /** 标识 */
    id?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 姓首字母 */
    surnameCode?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 *用于患者重名,默认填姓名,系统内默认显示别名,打印单据使用姓名* */
    name2?: string | undefined;
    /** 照片路径 */
    photo?: string | undefined;
    /** 人脸识别图像 */
    face?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 档案号 *XT{Year}{Month}{Sequence}* */
    archiveNumber?: string | undefined;
    /** 医保类型 `DIC.PEOPLE.MEDICARETYPE` *城镇职工,城镇居民* */
    medicareType?: string | undefined;
    /** 医保号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 血型 `DIC.PEOPLE.BLOODTYPE` *字典:A,B,O,未知* */
    bloodType?: string | undefined;
    /** RH `DIC.PEOPLE.RH` */
    rh?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 本人电话 */
    telephone?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 职业 `DIC.PEOPLE.PROFESSION` *个体,工人,农民,学生* */
    profession?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 家庭住址 */
    address?: string | undefined;
    /** 工作单位 */
    workUnit?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: dayjs.Dayjs | undefined;
    /** 透析状态 `DIC.PATIENT.DIALYSIS.STATE` *长期,临时* */
    dialysisState?: string | undefined;
    /** 透析状态是否转换 `DIC.PATIENT.DIALYSIS.STATE.TRANSITION` *0:未转换,1:已转换 编辑诊断-状态自动转换时管理这个状态* */
    dialysisStateTransition?: number;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 转归状态 `DIC.PROGNOSIS.TYPE` *患者编辑界面不做维护,自动管理* */
    prognosisState?: string | undefined;
    /** 传染病 `DIC.PATIENT.POSITIVE` *0:阴性,1:阳性 编辑诊断-传染病时管理这个状态* */
    positive?: number;
    /** 并发症 `DIC.PATIENT.COMPLICATION` *多选* */
    complication?: string | undefined;
    /** 主治医生 */
    doctor?: string | undefined;
    /** 主管护士 */
    nurse?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 病理诊断 *0:无,1:有* */
    diagnosisPathological?: number | undefined;
    /** 并发症诊断 *0:无,1:有* */
    diagnosisComplication?: number | undefined;
    /** 传染病诊断 *0:无,1:有* */
    diagnosisInfectiousDiseases?: number | undefined;
    /** 肿瘤诊断 *0:无,1:有* */
    diagnosisTumor?: number | undefined;
    /** 过敏诊断 *0:无,1:有* */
    diagnosisAllergy?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 患者数据初始化来源 *ihdis,his* */
    initialSource?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 指纹 */
    finger?: string | undefined;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 病历夹号 `DIC.PATIENT.CONDITION` *一般,病重,病危* */
    medicareCondition?: string | undefined;
    /** 下次感筛检验日期 */
    nextDate?: dayjs.Dayjs | undefined;
    /** 首次透析时采用的通路类型 */
    firstDialysisVascularAccess?: string | undefined;
    /** 首次透析时采取的方式 */
    firstDialysisMode?: string | undefined;
    /** 首次肾脏代替治疗时肾功能 */
    firstGfr?: string | undefined;
    /** 首次肾脏代替治疗时血肌酐水平 */
    firstScr?: string | undefined;
}

export class PatientBloodPressureView implements IPatientBloodPressureView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 收缩压 *mmHg* */
    sbp!: number;
    /** 舒张压 *mmHg* */
    dbp!: number;
    /** 脉搏 *次/分* */
    pulse!: number;
    /** 测量时间 */
    measureTime!: dayjs.Dayjs;
    /** 测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢* */
    position?: string | undefined;
    /** 测量标签 `DIC.PATIENT.MEASURE.TAG` *透前,透中,透后,非透析日* */
    tag?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 测量位置显示值 */
    positionLabel?: string | undefined;
    /** 测量标签显示值 */
    tagLabel?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientBloodPressureView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.sbp = _data["sbp"];
            this.dbp = _data["dbp"];
            this.pulse = _data["pulse"];
            this.measureTime = _data["measureTime"] ? dayjs(_data["measureTime"].toString()) : <any>undefined;
            this.position = _data["position"];
            this.tag = _data["tag"];
            this.remark = _data["remark"];
            this.positionLabel = _data["positionLabel"];
            this.tagLabel = _data["tagLabel"];
            this.id = _data["id"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientBloodPressureView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBloodPressureView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["sbp"] = this.sbp;
        data["dbp"] = this.dbp;
        data["pulse"] = this.pulse;
        data["measureTime"] = this.measureTime ? this.measureTime.toISOString() : <any>undefined;
        data["position"] = this.position;
        data["tag"] = this.tag;
        data["remark"] = this.remark;
        data["positionLabel"] = this.positionLabel;
        data["tagLabel"] = this.tagLabel;
        data["id"] = this.id;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IPatientBloodPressureView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 收缩压 *mmHg* */
    sbp: number;
    /** 舒张压 *mmHg* */
    dbp: number;
    /** 脉搏 *次/分* */
    pulse: number;
    /** 测量时间 */
    measureTime: dayjs.Dayjs;
    /** 测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢* */
    position?: string | undefined;
    /** 测量标签 `DIC.PATIENT.MEASURE.TAG` *透前,透中,透后,非透析日* */
    tag?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 测量位置显示值 */
    positionLabel?: string | undefined;
    /** 测量标签显示值 */
    tagLabel?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 血压记录 (ViewModel) */
export class PatientBloodPressureViewModel implements IPatientBloodPressureViewModel {
    /** [患者标识](患者信息Id) */
    patientId!: string;
    /** 收缩压 *mmHg* */
    sbp!: number;
    /** 舒张压 *mmHg* */
    dbp!: number;
    /** 脉搏 *次/分* */
    pulse!: number;
    /** 测量时间 */
    measureTime!: dayjs.Dayjs;
    /** 测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢* */
    position?: string | undefined;
    /** 测量标签 `DIC.PATIENT.MEASURE.TAG` *透前,透中,透后,非透析日* */
    tag?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IPatientBloodPressureViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.sbp = _data["sbp"];
            this.dbp = _data["dbp"];
            this.pulse = _data["pulse"];
            this.measureTime = _data["measureTime"] ? dayjs(_data["measureTime"].toString()) : <any>undefined;
            this.position = _data["position"];
            this.tag = _data["tag"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): PatientBloodPressureViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBloodPressureViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["sbp"] = this.sbp;
        data["dbp"] = this.dbp;
        data["pulse"] = this.pulse;
        data["measureTime"] = this.measureTime ? this.measureTime.toISOString() : <any>undefined;
        data["position"] = this.position;
        data["tag"] = this.tag;
        data["remark"] = this.remark;
        return data;
    }
}

/** 血压记录 (ViewModel) */
export interface IPatientBloodPressureViewModel {
    /** [患者标识](患者信息Id) */
    patientId: string;
    /** 收缩压 *mmHg* */
    sbp: number;
    /** 舒张压 *mmHg* */
    dbp: number;
    /** 脉搏 *次/分* */
    pulse: number;
    /** 测量时间 */
    measureTime: dayjs.Dayjs;
    /** 测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢* */
    position?: string | undefined;
    /** 测量标签 `DIC.PATIENT.MEASURE.TAG` *透前,透中,透后,非透析日* */
    tag?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class PatientBloodPressureViewResult implements IPatientBloodPressureViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBloodPressureView[] | undefined;

    constructor(data?: IPatientBloodPressureViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientBloodPressureView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientBloodPressureViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBloodPressureViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientBloodPressureViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBloodPressureView[] | undefined;
}

/** 长期医嘱View */
export class PatientDaLongtermView implements IPatientDaLongtermView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` *默认带出项目基本单位* */
    unit?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 停止日期 */
    endDate?: dayjs.Dayjs | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 频次 `DIC.DA.INTERVAL` */
    interval?: string | undefined;
    /** 自备药0,1 */
    owned!: number;
    /** 透中医嘱0,1 */
    dialysis!: number;
    /** 周执行 `DIC.DA.WEEKDAY` *多个用`;`分隔* */
    weekday?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 停止人 */
    stoper?: string | undefined;
    /** 停止人id */
    stoperId?: string | undefined;
    /** 停止时间 */
    stopTime?: string | undefined;
    /** 开立时间 */
    openTime?: string | undefined;
    /** 口服药 */
    orallyLabel?: string | undefined;
    /** 透中医嘱 */
    dialysisLabel?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 是否勾选 */
    checked?: boolean;
    /** 患者姓名 */
    patientName?: string | undefined;
    patientAge?: string | undefined;
    patientGender?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    patientDept?: string | undefined;
    patientBed?: string | undefined;
    patientInNo?: string | undefined;
    hospName?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usageName?: string | undefined;
    /** 数量单位 `DIC.SYS.UNIT` *默认带出项目基本单位* */
    unitName?: string | undefined;
    /** 单次用量单位显示值 */
    singleUnitName?: string | undefined;
    /** 分组标识 */
    group?: string | undefined;
    startExecNurseName?: string | undefined;
    stopExecNurseName?: string | undefined;
    /** 种类名称全称 */
    roomItemTypeNameFull?: string | undefined;
    /** 频次 `DIC.DA.INTERVAL` */
    intervalName?: string | undefined;
    /** 周执行 `DIC.DA.WEEKDAY` *多个用`;`分隔* */
    weekdayName?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 项目启用状态 */
    listEnabled?: number;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 患者来源 */
    source?: string | undefined;
    /** 药品库存 */
    inventoryCount?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 医嘱模板标识 */
    tmplGroupDaId?: string | undefined;
    /** 开立医生标识 */
    doctorId!: string;
    /** 开立医生姓名 */
    doctorName!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientDaLongtermView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.type = _data["type"];
            this.content = _data["content"];
            this.groupId = _data["groupId"];
            this.doctorCreateTime = _data["doctorCreateTime"] ? dayjs(_data["doctorCreateTime"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.roomItemListId = _data["roomItemListId"];
            this.usage = _data["usage"];
            this.dosage = _data["dosage"];
            this.unit = _data["unit"];
            this.singleDosage = _data["singleDosage"];
            this.endDate = _data["endDate"] ? dayjs(_data["endDate"].toString()) : <any>undefined;
            this.singleUnit = _data["singleUnit"];
            this.orally = _data["orally"];
            this.interval = _data["interval"];
            this.owned = _data["owned"];
            this.dialysis = _data["dialysis"];
            this.weekday = _data["weekday"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
            this.stoper = _data["stoper"];
            this.stoperId = _data["stoperId"];
            this.stopTime = _data["stopTime"];
            this.openTime = _data["openTime"];
            this.orallyLabel = _data["orallyLabel"];
            this.dialysisLabel = _data["dialysisLabel"];
            this.nameGoods = _data["nameGoods"];
            this.checked = _data["checked"];
            this.patientName = _data["patientName"];
            this.patientAge = _data["patientAge"];
            this.patientGender = _data["patientGender"];
            this.patientName2 = _data["patientName2"];
            this.patientDept = _data["patientDept"];
            this.patientBed = _data["patientBed"];
            this.patientInNo = _data["patientInNo"];
            this.hospName = _data["hospName"];
            this.patientNameFull = _data["patientNameFull"];
            this.usageName = _data["usageName"];
            this.unitName = _data["unitName"];
            this.singleUnitName = _data["singleUnitName"];
            this.group = _data["group"];
            this.startExecNurseName = _data["startExecNurseName"];
            this.stopExecNurseName = _data["stopExecNurseName"];
            this.roomItemTypeNameFull = _data["roomItemTypeNameFull"];
            this.intervalName = _data["intervalName"];
            this.weekdayName = _data["weekdayName"];
            this.specLabel = _data["specLabel"];
            this.listEnabled = _data["listEnabled"];
            this.cureDaContent = _data["cureDaContent"];
            this.typeName = _data["typeName"];
            this.source = _data["source"];
            this.inventoryCount = _data["inventoryCount"];
            this.id = _data["id"];
            this.tmplGroupDaId = _data["tmplGroupDaId"];
            this.doctorId = _data["doctorId"];
            this.doctorName = _data["doctorName"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDaLongtermView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDaLongtermView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["type"] = this.type;
        data["content"] = this.content;
        data["groupId"] = this.groupId;
        data["doctorCreateTime"] = this.doctorCreateTime ? this.doctorCreateTime.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["roomItemListId"] = this.roomItemListId;
        data["usage"] = this.usage;
        data["dosage"] = this.dosage;
        data["unit"] = this.unit;
        data["singleDosage"] = this.singleDosage;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["singleUnit"] = this.singleUnit;
        data["orally"] = this.orally;
        data["interval"] = this.interval;
        data["owned"] = this.owned;
        data["dialysis"] = this.dialysis;
        data["weekday"] = this.weekday;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        data["stoper"] = this.stoper;
        data["stoperId"] = this.stoperId;
        data["stopTime"] = this.stopTime;
        data["openTime"] = this.openTime;
        data["orallyLabel"] = this.orallyLabel;
        data["dialysisLabel"] = this.dialysisLabel;
        data["nameGoods"] = this.nameGoods;
        data["checked"] = this.checked;
        data["patientName"] = this.patientName;
        data["patientAge"] = this.patientAge;
        data["patientGender"] = this.patientGender;
        data["patientName2"] = this.patientName2;
        data["patientDept"] = this.patientDept;
        data["patientBed"] = this.patientBed;
        data["patientInNo"] = this.patientInNo;
        data["hospName"] = this.hospName;
        data["patientNameFull"] = this.patientNameFull;
        data["usageName"] = this.usageName;
        data["unitName"] = this.unitName;
        data["singleUnitName"] = this.singleUnitName;
        data["group"] = this.group;
        data["startExecNurseName"] = this.startExecNurseName;
        data["stopExecNurseName"] = this.stopExecNurseName;
        data["roomItemTypeNameFull"] = this.roomItemTypeNameFull;
        data["intervalName"] = this.intervalName;
        data["weekdayName"] = this.weekdayName;
        data["specLabel"] = this.specLabel;
        data["listEnabled"] = this.listEnabled;
        data["cureDaContent"] = this.cureDaContent;
        data["typeName"] = this.typeName;
        data["source"] = this.source;
        data["inventoryCount"] = this.inventoryCount;
        data["id"] = this.id;
        data["tmplGroupDaId"] = this.tmplGroupDaId;
        data["doctorId"] = this.doctorId;
        data["doctorName"] = this.doctorName;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 长期医嘱View */
export interface IPatientDaLongtermView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` *默认带出项目基本单位* */
    unit?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 停止日期 */
    endDate?: dayjs.Dayjs | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 频次 `DIC.DA.INTERVAL` */
    interval?: string | undefined;
    /** 自备药0,1 */
    owned: number;
    /** 透中医嘱0,1 */
    dialysis: number;
    /** 周执行 `DIC.DA.WEEKDAY` *多个用`;`分隔* */
    weekday?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
    /** 备注 */
    remark?: string | undefined;
    /** 停止人 */
    stoper?: string | undefined;
    /** 停止人id */
    stoperId?: string | undefined;
    /** 停止时间 */
    stopTime?: string | undefined;
    /** 开立时间 */
    openTime?: string | undefined;
    /** 口服药 */
    orallyLabel?: string | undefined;
    /** 透中医嘱 */
    dialysisLabel?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 是否勾选 */
    checked?: boolean;
    /** 患者姓名 */
    patientName?: string | undefined;
    patientAge?: string | undefined;
    patientGender?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    patientDept?: string | undefined;
    patientBed?: string | undefined;
    patientInNo?: string | undefined;
    hospName?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usageName?: string | undefined;
    /** 数量单位 `DIC.SYS.UNIT` *默认带出项目基本单位* */
    unitName?: string | undefined;
    /** 单次用量单位显示值 */
    singleUnitName?: string | undefined;
    /** 分组标识 */
    group?: string | undefined;
    startExecNurseName?: string | undefined;
    stopExecNurseName?: string | undefined;
    /** 种类名称全称 */
    roomItemTypeNameFull?: string | undefined;
    /** 频次 `DIC.DA.INTERVAL` */
    intervalName?: string | undefined;
    /** 周执行 `DIC.DA.WEEKDAY` *多个用`;`分隔* */
    weekdayName?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 项目启用状态 */
    listEnabled?: number;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 患者来源 */
    source?: string | undefined;
    /** 药品库存 */
    inventoryCount?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 医嘱模板标识 */
    tmplGroupDaId?: string | undefined;
    /** 开立医生标识 */
    doctorId: string;
    /** 开立医生姓名 */
    doctorName: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientDaLongtermViewResult implements IPatientDaLongtermViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDaLongtermView[] | undefined;

    constructor(data?: IPatientDaLongtermViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientDaLongtermView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientDaLongtermViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDaLongtermViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientDaLongtermViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDaLongtermView[] | undefined;
}

/** 临时医嘱View */
export class PatientDaTemporaryView implements IPatientDaTemporaryView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` *默认带出项目基本单位* */
    unit?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 自备药0,1 */
    owned!: number;
    /** 透中医嘱0,1 */
    dialysis!: number;
    /** 执行日期 */
    execDate!: dayjs.Dayjs;
    /** 口服药 */
    orallyLabel?: string | undefined;
    /** 透中医嘱 */
    dialysisLabel?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 状态 `DIC.DA.TEMP.STATUS` *新医嘱,已使用,已撤销* */
    status?: string | undefined;
    /** 是否勾选(制定处方与确认处方时使用) */
    checked?: boolean;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usageName?: string | undefined;
    /** 数量单位 `DIC.SYS.UNIT` */
    unitName?: string | undefined;
    /** 单次用量单位名称 */
    singleUnitName?: string | undefined;
    /** 状态显示值 */
    statusLabel?: string | undefined;
    /** 分组标识 */
    group?: string | undefined;
    /** 种类名称全称 */
    roomItemTypeNameFull?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 项目启用状态 */
    listEnabled?: number;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 患者来源 */
    source?: string | undefined;
    /** 药品库存 */
    inventoryCount?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 医嘱模板标识 */
    tmplGroupDaId?: string | undefined;
    /** 开立医生标识 */
    doctorId!: string;
    /** 开立医生姓名 */
    doctorName!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientDaTemporaryView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.type = _data["type"];
            this.content = _data["content"];
            this.groupId = _data["groupId"];
            this.doctorCreateTime = _data["doctorCreateTime"] ? dayjs(_data["doctorCreateTime"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.roomItemListId = _data["roomItemListId"];
            this.usage = _data["usage"];
            this.dosage = _data["dosage"];
            this.unit = _data["unit"];
            this.singleDosage = _data["singleDosage"];
            this.singleUnit = _data["singleUnit"];
            this.orally = _data["orally"];
            this.owned = _data["owned"];
            this.dialysis = _data["dialysis"];
            this.execDate = _data["execDate"] ? dayjs(_data["execDate"].toString()) : <any>undefined;
            this.orallyLabel = _data["orallyLabel"];
            this.dialysisLabel = _data["dialysisLabel"];
            this.nameGoods = _data["nameGoods"];
            this.status = _data["status"];
            this.checked = _data["checked"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.usageName = _data["usageName"];
            this.unitName = _data["unitName"];
            this.singleUnitName = _data["singleUnitName"];
            this.statusLabel = _data["statusLabel"];
            this.group = _data["group"];
            this.roomItemTypeNameFull = _data["roomItemTypeNameFull"];
            this.specLabel = _data["specLabel"];
            this.cureDaContent = _data["cureDaContent"];
            this.listEnabled = _data["listEnabled"];
            this.typeName = _data["typeName"];
            this.source = _data["source"];
            this.inventoryCount = _data["inventoryCount"];
            this.id = _data["id"];
            this.tmplGroupDaId = _data["tmplGroupDaId"];
            this.doctorId = _data["doctorId"];
            this.doctorName = _data["doctorName"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDaTemporaryView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDaTemporaryView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["type"] = this.type;
        data["content"] = this.content;
        data["groupId"] = this.groupId;
        data["doctorCreateTime"] = this.doctorCreateTime ? this.doctorCreateTime.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["roomItemListId"] = this.roomItemListId;
        data["usage"] = this.usage;
        data["dosage"] = this.dosage;
        data["unit"] = this.unit;
        data["singleDosage"] = this.singleDosage;
        data["singleUnit"] = this.singleUnit;
        data["orally"] = this.orally;
        data["owned"] = this.owned;
        data["dialysis"] = this.dialysis;
        data["execDate"] = this.execDate ? this.execDate.toISOString() : <any>undefined;
        data["orallyLabel"] = this.orallyLabel;
        data["dialysisLabel"] = this.dialysisLabel;
        data["nameGoods"] = this.nameGoods;
        data["status"] = this.status;
        data["checked"] = this.checked;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["usageName"] = this.usageName;
        data["unitName"] = this.unitName;
        data["singleUnitName"] = this.singleUnitName;
        data["statusLabel"] = this.statusLabel;
        data["group"] = this.group;
        data["roomItemTypeNameFull"] = this.roomItemTypeNameFull;
        data["specLabel"] = this.specLabel;
        data["cureDaContent"] = this.cureDaContent;
        data["listEnabled"] = this.listEnabled;
        data["typeName"] = this.typeName;
        data["source"] = this.source;
        data["inventoryCount"] = this.inventoryCount;
        data["id"] = this.id;
        data["tmplGroupDaId"] = this.tmplGroupDaId;
        data["doctorId"] = this.doctorId;
        data["doctorName"] = this.doctorName;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 临时医嘱View */
export interface IPatientDaTemporaryView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` *默认带出项目基本单位* */
    unit?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 自备药0,1 */
    owned: number;
    /** 透中医嘱0,1 */
    dialysis: number;
    /** 执行日期 */
    execDate: dayjs.Dayjs;
    /** 口服药 */
    orallyLabel?: string | undefined;
    /** 透中医嘱 */
    dialysisLabel?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 状态 `DIC.DA.TEMP.STATUS` *新医嘱,已使用,已撤销* */
    status?: string | undefined;
    /** 是否勾选(制定处方与确认处方时使用) */
    checked?: boolean;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usageName?: string | undefined;
    /** 数量单位 `DIC.SYS.UNIT` */
    unitName?: string | undefined;
    /** 单次用量单位名称 */
    singleUnitName?: string | undefined;
    /** 状态显示值 */
    statusLabel?: string | undefined;
    /** 分组标识 */
    group?: string | undefined;
    /** 种类名称全称 */
    roomItemTypeNameFull?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 项目启用状态 */
    listEnabled?: number;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 患者来源 */
    source?: string | undefined;
    /** 药品库存 */
    inventoryCount?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 医嘱模板标识 */
    tmplGroupDaId?: string | undefined;
    /** 开立医生标识 */
    doctorId: string;
    /** 开立医生姓名 */
    doctorName: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientDaTemporaryViewResult implements IPatientDaTemporaryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDaTemporaryView[] | undefined;

    constructor(data?: IPatientDaTemporaryViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientDaTemporaryView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientDaTemporaryViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDaTemporaryViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientDaTemporaryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDaTemporaryView[] | undefined;
}

/** 过敏诊断 */
export class PatientDiagnosisAllergyItemView implements IPatientDiagnosisAllergyItemView {
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 检查日期 */
    date!: dayjs.Dayjs;
    /** 过敏反应 *多选* *透析器材过敏,药物过敏,食物过敏,其它过敏* */
    anaphylaxis!: string;
    /** 透析器材过敏 *多选* *本次使用膜材料,消毒方式* */
    dialysisEquipmentAllergy?: string | undefined;
    /** 本次使用膜材料 *多选* *聚砜膜,聚醚砜膜,聚丙烯晴膜,聚甲基丙烯酸甲酯莫,Polyamix膜,醋酸纤维素膜,其它* */
    useMembraneMaterials?: string | undefined;
    /** 本次使用其它膜材料 */
    ummOther?: string | undefined;
    /** 消毒方式 *多选* *γ射线,环氧乙烷熏蒸,蒸汽高压灭菌,其它* */
    disinfectionMethod?: string | undefined;
    /** 其它消毒方式 */
    dmOther?: string | undefined;
    /** 药物过敏 *多选* *抗生素,静脉铁剂,肝素,其它* */
    drugAllergy?: string | undefined;
    /** 抗生素 *多选* *青霉素类,头孢菌素类,大环内酯类,氨基糖苷类,喹诺酮类,碳青霉烯类,其它* */
    antibiotic?: string | undefined;
    /** 其它抗生素 */
    antibioticOther?: string | undefined;
    /** 静脉铁剂 *多选* *蔗糖铁,右旋糖苷铁,葡萄糖醛酸铁* */
    ferricCarboxymaltose?: string | undefined;
    /** 肝素 *肝素诱导的血小板减少症,其它* */
    heparin?: string | undefined;
    /** 其它肝素 */
    heparinOther?: string | undefined;
    /** 其它药物过敏说明 */
    drugAllergyInstructionsOther?: string | undefined;
    /** 其它过敏反应 */
    allergicReactionsOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 是否启用 */
    enable?: number | undefined;
    /** 类型 */
    readonly anaphylaxisLabel?: string | undefined;

    constructor(data?: IPatientDiagnosisAllergyItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.anaphylaxis = _data["anaphylaxis"];
            this.dialysisEquipmentAllergy = _data["dialysisEquipmentAllergy"];
            this.useMembraneMaterials = _data["useMembraneMaterials"];
            this.ummOther = _data["ummOther"];
            this.disinfectionMethod = _data["disinfectionMethod"];
            this.dmOther = _data["dmOther"];
            this.drugAllergy = _data["drugAllergy"];
            this.antibiotic = _data["antibiotic"];
            this.antibioticOther = _data["antibioticOther"];
            this.ferricCarboxymaltose = _data["ferricCarboxymaltose"];
            this.heparin = _data["heparin"];
            this.heparinOther = _data["heparinOther"];
            this.drugAllergyInstructionsOther = _data["drugAllergyInstructionsOther"];
            this.allergicReactionsOther = _data["allergicReactionsOther"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.enable = _data["enable"];
            (<any>this).anaphylaxisLabel = _data["anaphylaxisLabel"];
        }
    }

    static fromJS(data: any): PatientDiagnosisAllergyItemView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisAllergyItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["anaphylaxis"] = this.anaphylaxis;
        data["dialysisEquipmentAllergy"] = this.dialysisEquipmentAllergy;
        data["useMembraneMaterials"] = this.useMembraneMaterials;
        data["ummOther"] = this.ummOther;
        data["disinfectionMethod"] = this.disinfectionMethod;
        data["dmOther"] = this.dmOther;
        data["drugAllergy"] = this.drugAllergy;
        data["antibiotic"] = this.antibiotic;
        data["antibioticOther"] = this.antibioticOther;
        data["ferricCarboxymaltose"] = this.ferricCarboxymaltose;
        data["heparin"] = this.heparin;
        data["heparinOther"] = this.heparinOther;
        data["drugAllergyInstructionsOther"] = this.drugAllergyInstructionsOther;
        data["allergicReactionsOther"] = this.allergicReactionsOther;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["enable"] = this.enable;
        data["anaphylaxisLabel"] = this.anaphylaxisLabel;
        return data;
    }
}

/** 过敏诊断 */
export interface IPatientDiagnosisAllergyItemView {
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 检查日期 */
    date: dayjs.Dayjs;
    /** 过敏反应 *多选* *透析器材过敏,药物过敏,食物过敏,其它过敏* */
    anaphylaxis: string;
    /** 透析器材过敏 *多选* *本次使用膜材料,消毒方式* */
    dialysisEquipmentAllergy?: string | undefined;
    /** 本次使用膜材料 *多选* *聚砜膜,聚醚砜膜,聚丙烯晴膜,聚甲基丙烯酸甲酯莫,Polyamix膜,醋酸纤维素膜,其它* */
    useMembraneMaterials?: string | undefined;
    /** 本次使用其它膜材料 */
    ummOther?: string | undefined;
    /** 消毒方式 *多选* *γ射线,环氧乙烷熏蒸,蒸汽高压灭菌,其它* */
    disinfectionMethod?: string | undefined;
    /** 其它消毒方式 */
    dmOther?: string | undefined;
    /** 药物过敏 *多选* *抗生素,静脉铁剂,肝素,其它* */
    drugAllergy?: string | undefined;
    /** 抗生素 *多选* *青霉素类,头孢菌素类,大环内酯类,氨基糖苷类,喹诺酮类,碳青霉烯类,其它* */
    antibiotic?: string | undefined;
    /** 其它抗生素 */
    antibioticOther?: string | undefined;
    /** 静脉铁剂 *多选* *蔗糖铁,右旋糖苷铁,葡萄糖醛酸铁* */
    ferricCarboxymaltose?: string | undefined;
    /** 肝素 *肝素诱导的血小板减少症,其它* */
    heparin?: string | undefined;
    /** 其它肝素 */
    heparinOther?: string | undefined;
    /** 其它药物过敏说明 */
    drugAllergyInstructionsOther?: string | undefined;
    /** 其它过敏反应 */
    allergicReactionsOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 是否启用 */
    enable?: number | undefined;
    /** 类型 */
    anaphylaxisLabel?: string | undefined;
}

export class PatientDiagnosisAllergyView implements IPatientDiagnosisAllergyView {
    /** 诊断类型(*0:无,1:有*) */
    diagnosis?: number | undefined;
    /** 诊断详情 */
    items?: PatientDiagnosisAllergyItemView[] | undefined;

    constructor(data?: IPatientDiagnosisAllergyView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.diagnosis = _data["diagnosis"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PatientDiagnosisAllergyItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientDiagnosisAllergyView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisAllergyView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["diagnosis"] = this.diagnosis;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPatientDiagnosisAllergyView {
    /** 诊断类型(*0:无,1:有*) */
    diagnosis?: number | undefined;
    /** 诊断详情 */
    items?: PatientDiagnosisAllergyItemView[] | undefined;
}

/** Reponse */
export class PatientDiagnosisAllergyViewResultEntry implements IPatientDiagnosisAllergyViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDiagnosisAllergyView;

    constructor(data?: IPatientDiagnosisAllergyViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientDiagnosisAllergyView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDiagnosisAllergyViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisAllergyViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientDiagnosisAllergyViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDiagnosisAllergyView;
}

export class PatientDiagnosisComplicationItemView implements IPatientDiagnosisComplicationItemView {
    /** [患者标识](患者信息Id) */
    patientId!: string;
    /** 检查日期 */
    date!: dayjs.Dayjs;
    /** 并发症分类 *多选* *肾性贫血,骨矿物质代谢紊乱,营养不良,淀粉样变性,呼吸系统,心血管系统,神经系统,消化系统,皮肤瘙痒,不安腿,其它* */
    type!: string;
    /** 骨矿物质代谢紊乱 *多选* *高转运骨病(需骨活检支持Id),低转运骨病(需骨活检支持Id),混合型骨病(需骨活检支持Id),转移性钙化,骨质疏松,继发性甲旁亢,其它* */
    boneMineralMetabolismDisturbance?: string | undefined;
    /** 其它骨矿物质代谢紊乱 */
    bmmdOther?: string | undefined;
    /** 淀粉样变性 *多选* *腕管综合征,心脏损害,骨损害,其它* */
    amyloidosis?: string | undefined;
    /** 其它淀粉样变性 */
    amyloidosisOther?: string | undefined;
    /** 呼吸系统并发症 *多选* *肺部感染,结核,胸膜炎,胸腔积液,尿毒症肺炎,其它* */
    respiratoryComplications?: string | undefined;
    /** 其它呼吸系统并发症 */
    rcOther?: string | undefined;
    /** 心血管系统并发症 *多选* *高血压,低血压,心律失常,心功能不全,急性左心衰竭,缺血性心脏病,心包炎,心肌病变,其它* */
    cardiovascularComplications?: string | undefined;
    /** 其它心血管系统并发症 */
    ccOther?: string | undefined;
    /** 神经系统并发症 *多选* *脑梗塞,脑出血,神经病变,尿毒性脑病,其它* */
    neurologicalComplications?: string | undefined;
    /** 其它神经系统并发症 */
    ncOther?: string | undefined;
    /** 消化系统并发症 *多选* *肝硬化,消化道出血,其它* */
    digestiveSystemComplications?: string | undefined;
    /** 其它消化系统并发症 */
    dscOther?: string | undefined;
    /** 其它并发症 */
    complicationOther?: string | undefined;
    /** 具体情况描述 */
    specificDescription?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;

    constructor(data?: IPatientDiagnosisComplicationItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.boneMineralMetabolismDisturbance = _data["boneMineralMetabolismDisturbance"];
            this.bmmdOther = _data["bmmdOther"];
            this.amyloidosis = _data["amyloidosis"];
            this.amyloidosisOther = _data["amyloidosisOther"];
            this.respiratoryComplications = _data["respiratoryComplications"];
            this.rcOther = _data["rcOther"];
            this.cardiovascularComplications = _data["cardiovascularComplications"];
            this.ccOther = _data["ccOther"];
            this.neurologicalComplications = _data["neurologicalComplications"];
            this.ncOther = _data["ncOther"];
            this.digestiveSystemComplications = _data["digestiveSystemComplications"];
            this.dscOther = _data["dscOther"];
            this.complicationOther = _data["complicationOther"];
            this.specificDescription = _data["specificDescription"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
        }
    }

    static fromJS(data: any): PatientDiagnosisComplicationItemView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisComplicationItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["type"] = this.type;
        data["boneMineralMetabolismDisturbance"] = this.boneMineralMetabolismDisturbance;
        data["bmmdOther"] = this.bmmdOther;
        data["amyloidosis"] = this.amyloidosis;
        data["amyloidosisOther"] = this.amyloidosisOther;
        data["respiratoryComplications"] = this.respiratoryComplications;
        data["rcOther"] = this.rcOther;
        data["cardiovascularComplications"] = this.cardiovascularComplications;
        data["ccOther"] = this.ccOther;
        data["neurologicalComplications"] = this.neurologicalComplications;
        data["ncOther"] = this.ncOther;
        data["digestiveSystemComplications"] = this.digestiveSystemComplications;
        data["dscOther"] = this.dscOther;
        data["complicationOther"] = this.complicationOther;
        data["specificDescription"] = this.specificDescription;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        return data;
    }
}

export interface IPatientDiagnosisComplicationItemView {
    /** [患者标识](患者信息Id) */
    patientId: string;
    /** 检查日期 */
    date: dayjs.Dayjs;
    /** 并发症分类 *多选* *肾性贫血,骨矿物质代谢紊乱,营养不良,淀粉样变性,呼吸系统,心血管系统,神经系统,消化系统,皮肤瘙痒,不安腿,其它* */
    type: string;
    /** 骨矿物质代谢紊乱 *多选* *高转运骨病(需骨活检支持Id),低转运骨病(需骨活检支持Id),混合型骨病(需骨活检支持Id),转移性钙化,骨质疏松,继发性甲旁亢,其它* */
    boneMineralMetabolismDisturbance?: string | undefined;
    /** 其它骨矿物质代谢紊乱 */
    bmmdOther?: string | undefined;
    /** 淀粉样变性 *多选* *腕管综合征,心脏损害,骨损害,其它* */
    amyloidosis?: string | undefined;
    /** 其它淀粉样变性 */
    amyloidosisOther?: string | undefined;
    /** 呼吸系统并发症 *多选* *肺部感染,结核,胸膜炎,胸腔积液,尿毒症肺炎,其它* */
    respiratoryComplications?: string | undefined;
    /** 其它呼吸系统并发症 */
    rcOther?: string | undefined;
    /** 心血管系统并发症 *多选* *高血压,低血压,心律失常,心功能不全,急性左心衰竭,缺血性心脏病,心包炎,心肌病变,其它* */
    cardiovascularComplications?: string | undefined;
    /** 其它心血管系统并发症 */
    ccOther?: string | undefined;
    /** 神经系统并发症 *多选* *脑梗塞,脑出血,神经病变,尿毒性脑病,其它* */
    neurologicalComplications?: string | undefined;
    /** 其它神经系统并发症 */
    ncOther?: string | undefined;
    /** 消化系统并发症 *多选* *肝硬化,消化道出血,其它* */
    digestiveSystemComplications?: string | undefined;
    /** 其它消化系统并发症 */
    dscOther?: string | undefined;
    /** 其它并发症 */
    complicationOther?: string | undefined;
    /** 具体情况描述 */
    specificDescription?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
}

export class PatientDiagnosisComplicationView implements IPatientDiagnosisComplicationView {
    /** 诊断类型(*0:无,1:有*) */
    diagnosis?: number | undefined;
    /** 诊断详情 */
    items?: PatientDiagnosisComplicationItemView[] | undefined;

    constructor(data?: IPatientDiagnosisComplicationView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.diagnosis = _data["diagnosis"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PatientDiagnosisComplicationItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientDiagnosisComplicationView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisComplicationView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["diagnosis"] = this.diagnosis;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPatientDiagnosisComplicationView {
    /** 诊断类型(*0:无,1:有*) */
    diagnosis?: number | undefined;
    /** 诊断详情 */
    items?: PatientDiagnosisComplicationItemView[] | undefined;
}

/** Reponse */
export class PatientDiagnosisComplicationViewResultEntry implements IPatientDiagnosisComplicationViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDiagnosisComplicationView;

    constructor(data?: IPatientDiagnosisComplicationViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientDiagnosisComplicationView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDiagnosisComplicationViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisComplicationViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientDiagnosisComplicationViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDiagnosisComplicationView;
}

export class PatientDiagnosisInfectiousDiseasesItemView implements IPatientDiagnosisInfectiousDiseasesItemView {
    /** [患者标识](患者信息Id) */
    patientId!: string;
    /** 检查日期 */
    date!: dayjs.Dayjs;
    /** 疾病种类 `DIC.DIAGNOSIS.ID.TYPE` *多选，用逗号隔开* *丙肝,乙肝,艾滋病,梅毒,结核,其它* */
    type!: string;
    /** 丙肝 *活动期,恢复期,携带者* */
    hcv?: string | undefined;
    /** 乙肝 *活动期,恢复期* */
    hepatitisb?: string | undefined;
    /** 艾滋病 *活动期,既往感染* */
    hiv?: string | undefined;
    /** 梅毒 *活动期,既往感染,携带者* */
    syphilis?: string | undefined;
    /** 结核 *活动期,恢复期,携带者* */
    tuberculosis?: string | undefined;
    /** 其它说明 */
    otherInstructions?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 疾病种类显示值 */
    typeLabel?: string | undefined;
    /** 是否启用 */
    enable?: number | undefined;

    constructor(data?: IPatientDiagnosisInfectiousDiseasesItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.hcv = _data["hcv"];
            this.hepatitisb = _data["hepatitisb"];
            this.hiv = _data["hiv"];
            this.syphilis = _data["syphilis"];
            this.tuberculosis = _data["tuberculosis"];
            this.otherInstructions = _data["otherInstructions"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.typeLabel = _data["typeLabel"];
            this.enable = _data["enable"];
        }
    }

    static fromJS(data: any): PatientDiagnosisInfectiousDiseasesItemView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisInfectiousDiseasesItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["type"] = this.type;
        data["hcv"] = this.hcv;
        data["hepatitisb"] = this.hepatitisb;
        data["hiv"] = this.hiv;
        data["syphilis"] = this.syphilis;
        data["tuberculosis"] = this.tuberculosis;
        data["otherInstructions"] = this.otherInstructions;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["typeLabel"] = this.typeLabel;
        data["enable"] = this.enable;
        return data;
    }
}

export interface IPatientDiagnosisInfectiousDiseasesItemView {
    /** [患者标识](患者信息Id) */
    patientId: string;
    /** 检查日期 */
    date: dayjs.Dayjs;
    /** 疾病种类 `DIC.DIAGNOSIS.ID.TYPE` *多选，用逗号隔开* *丙肝,乙肝,艾滋病,梅毒,结核,其它* */
    type: string;
    /** 丙肝 *活动期,恢复期,携带者* */
    hcv?: string | undefined;
    /** 乙肝 *活动期,恢复期* */
    hepatitisb?: string | undefined;
    /** 艾滋病 *活动期,既往感染* */
    hiv?: string | undefined;
    /** 梅毒 *活动期,既往感染,携带者* */
    syphilis?: string | undefined;
    /** 结核 *活动期,恢复期,携带者* */
    tuberculosis?: string | undefined;
    /** 其它说明 */
    otherInstructions?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 疾病种类显示值 */
    typeLabel?: string | undefined;
    /** 是否启用 */
    enable?: number | undefined;
}

export class PatientDiagnosisInfectiousDiseasesView implements IPatientDiagnosisInfectiousDiseasesView {
    /** 诊断类型(*0:无,1:有*) */
    diagnosis?: number | undefined;
    /** 诊断详情 */
    items?: PatientDiagnosisInfectiousDiseasesItemView[] | undefined;

    constructor(data?: IPatientDiagnosisInfectiousDiseasesView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.diagnosis = _data["diagnosis"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PatientDiagnosisInfectiousDiseasesItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientDiagnosisInfectiousDiseasesView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisInfectiousDiseasesView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["diagnosis"] = this.diagnosis;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPatientDiagnosisInfectiousDiseasesView {
    /** 诊断类型(*0:无,1:有*) */
    diagnosis?: number | undefined;
    /** 诊断详情 */
    items?: PatientDiagnosisInfectiousDiseasesItemView[] | undefined;
}

/** Reponse */
export class PatientDiagnosisInfectiousDiseasesViewResultEntry implements IPatientDiagnosisInfectiousDiseasesViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDiagnosisInfectiousDiseasesView;

    constructor(data?: IPatientDiagnosisInfectiousDiseasesViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientDiagnosisInfectiousDiseasesView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDiagnosisInfectiousDiseasesViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisInfectiousDiseasesViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientDiagnosisInfectiousDiseasesViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDiagnosisInfectiousDiseasesView;
}

export class PatientDiagnosisPathologicalView implements IPatientDiagnosisPathologicalView {
    /** 诊断类型(*0:无,1:有*) */
    diagnosis?: number | undefined;
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 诊断日期 */
    date?: dayjs.Dayjs | undefined;
    /** 病理诊断分类 *多选* *原发性肾小球疾病,继发性肾小球疾病,遗传性及先天性肾病,肾小管间质疾病* */
    type?: string | undefined;
    /** 原发性肾小球疾病 *多选* *肾小球轻微病变,微小病变性肾病,局灶节段性肾小球损害,膜性肾病,系膜增殖性肾炎,IgA肾病,毛细血管内增值性肾炎,膜增值性肾炎,新月体肾炎,硬化性肾炎,其它* */
    primaryGlomerularDisease?: string | undefined;
    /** 其它原发性肾小球疾病 */
    pgdOther?: string | undefined;
    /** 继发性肾小球疾病 *多选* *高血压肾硬化,糖尿病肾病,肥胖相关性肾病,淀粉样变性,多发骨髓瘤肾病,冷球蛋白血症性肾炎,轻链型肾病,狼疮性肾炎,过敏紫癜性肾炎,抗基底膜肾炎(Goodpasture综合征),系统性血管炎,血栓性微血管病,干燥综合征肾损害,硬皮病肾损害,乙型肝炎病毒相关性肾炎,丙型肝炎病毒相关性肾炎,HIV相关性肾损害,流行性出血热肾损害,其它* */
    secondaryGlomerularDisease?: string | undefined;
    /** 其它继发性肾小球疾病 */
    sgdOther?: string | undefined;
    /** 遗传性及先天性肾病 *多选* *Alport综合征,薄基底膜肾病,近端肾小管损伤及Fanconi综合征,Bartter综合征,Fabry病,脂蛋白肾病,肾发育不良,其它* */
    hereditaryCongenitalDisease?: string | undefined;
    /** 其它遗传性及先天性肾病 */
    hcdOther?: string | undefined;
    /** 肾小管间质疾病 *多选* *急性肾小管间质性肾炎,慢性肾小管间质性肾炎,急性肾小管坏死,马兜铃酸肾病,其它* */
    tubulointerstitialDisease?: string | undefined;
    /** 其它肾小管间质疾病 */
    tdOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientDiagnosisPathologicalView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.diagnosis = _data["diagnosis"];
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.primaryGlomerularDisease = _data["primaryGlomerularDisease"];
            this.pgdOther = _data["pgdOther"];
            this.secondaryGlomerularDisease = _data["secondaryGlomerularDisease"];
            this.sgdOther = _data["sgdOther"];
            this.hereditaryCongenitalDisease = _data["hereditaryCongenitalDisease"];
            this.hcdOther = _data["hcdOther"];
            this.tubulointerstitialDisease = _data["tubulointerstitialDisease"];
            this.tdOther = _data["tdOther"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDiagnosisPathologicalView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisPathologicalView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["diagnosis"] = this.diagnosis;
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["type"] = this.type;
        data["primaryGlomerularDisease"] = this.primaryGlomerularDisease;
        data["pgdOther"] = this.pgdOther;
        data["secondaryGlomerularDisease"] = this.secondaryGlomerularDisease;
        data["sgdOther"] = this.sgdOther;
        data["hereditaryCongenitalDisease"] = this.hereditaryCongenitalDisease;
        data["hcdOther"] = this.hcdOther;
        data["tubulointerstitialDisease"] = this.tubulointerstitialDisease;
        data["tdOther"] = this.tdOther;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IPatientDiagnosisPathologicalView {
    /** 诊断类型(*0:无,1:有*) */
    diagnosis?: number | undefined;
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 诊断日期 */
    date?: dayjs.Dayjs | undefined;
    /** 病理诊断分类 *多选* *原发性肾小球疾病,继发性肾小球疾病,遗传性及先天性肾病,肾小管间质疾病* */
    type?: string | undefined;
    /** 原发性肾小球疾病 *多选* *肾小球轻微病变,微小病变性肾病,局灶节段性肾小球损害,膜性肾病,系膜增殖性肾炎,IgA肾病,毛细血管内增值性肾炎,膜增值性肾炎,新月体肾炎,硬化性肾炎,其它* */
    primaryGlomerularDisease?: string | undefined;
    /** 其它原发性肾小球疾病 */
    pgdOther?: string | undefined;
    /** 继发性肾小球疾病 *多选* *高血压肾硬化,糖尿病肾病,肥胖相关性肾病,淀粉样变性,多发骨髓瘤肾病,冷球蛋白血症性肾炎,轻链型肾病,狼疮性肾炎,过敏紫癜性肾炎,抗基底膜肾炎(Goodpasture综合征),系统性血管炎,血栓性微血管病,干燥综合征肾损害,硬皮病肾损害,乙型肝炎病毒相关性肾炎,丙型肝炎病毒相关性肾炎,HIV相关性肾损害,流行性出血热肾损害,其它* */
    secondaryGlomerularDisease?: string | undefined;
    /** 其它继发性肾小球疾病 */
    sgdOther?: string | undefined;
    /** 遗传性及先天性肾病 *多选* *Alport综合征,薄基底膜肾病,近端肾小管损伤及Fanconi综合征,Bartter综合征,Fabry病,脂蛋白肾病,肾发育不良,其它* */
    hereditaryCongenitalDisease?: string | undefined;
    /** 其它遗传性及先天性肾病 */
    hcdOther?: string | undefined;
    /** 肾小管间质疾病 *多选* *急性肾小管间质性肾炎,慢性肾小管间质性肾炎,急性肾小管坏死,马兜铃酸肾病,其它* */
    tubulointerstitialDisease?: string | undefined;
    /** 其它肾小管间质疾病 */
    tdOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientDiagnosisPathologicalViewResultEntry implements IPatientDiagnosisPathologicalViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDiagnosisPathologicalView;

    constructor(data?: IPatientDiagnosisPathologicalViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientDiagnosisPathologicalView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDiagnosisPathologicalViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisPathologicalViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientDiagnosisPathologicalViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDiagnosisPathologicalView;
}

/** 原发病诊断 */
export class PatientDiagnosisPrimaryDiseaseView implements IPatientDiagnosisPrimaryDiseaseView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 诊断日期 */
    date!: dayjs.Dayjs;
    /** 原发病诊断分类 *多选* *原发性肾小球疾病,继发性肾小球疾病,遗传性及先天性疾病,肾小管间质疾病,药物性肾损害,泌尿系肿瘤,泌尿系感染和结石,肾脏切除术后,原发病不明确* */
    type!: string;
    /** 原发性肾小球疾病 *多选* *急性肾炎综合征,急进性肾炎综合征,慢性肾炎综合征,肾病综合征,血尿,孤立性蛋白尿,其它* */
    primaryGlomerularDisease?: string | undefined;
    /** 其它原发性肾小球肾病 */
    pgdOther?: string | undefined;
    /** 继发性肾小球疾病 *多选* *高血压肾损害,糖尿病肾病,肥胖相关性肾病,淀粉样变肾损害,多发骨髓瘤肾病,狼疮性肾炎,系统性血管炎肾损害,过敏紫癜性肾炎,血栓性微血管病肾损害,干燥综合征肾损害,硬皮病肾损害,类风湿性关节炎和强制性脊柱炎肾损害,银屑病肾损害,乙型肝炎病毒相关性肾炎,丙型肝炎病毒相关性肾炎,hiv相关性肾损害,流行性出血热肾损害,其它* */
    secondaryGlomerularDisease?: string | undefined;
    /** 其它继发性肾小球肾病 */
    sgdOther?: string | undefined;
    /** 遗传性及先天性疾病 *多选* *多囊肾病,alport综合征,薄基底膜肾病,近端肾小管损伤及fanconi综合征,bartter综合征,fabry病,脂蛋白肾病,肾发育不良,其它* */
    hereditaryCongenitalDisease?: string | undefined;
    /** 其它遗传性及先天性肾病 */
    hcdOther?: string | undefined;
    /** 肾小管间质疾病 *多选* *急性肾小管间质性肾炎,慢性肾小管间质性肾炎,急性肾小管坏死,肾小管性酸中毒,慢性肾孟肾炎,反流性肾病,梗阻性肾病,其它* */
    tubulointerstitialDisease?: string | undefined;
    /** 其它肾小管间质疾病 */
    tdOther?: string | undefined;
    /** 药物性肾损害 *多选* *马兜铃酸肾病,造影剂肾病,重金属中毒性肾脏损害,放射性肾病及抗肿瘤药物所致的肾损害,氨基苷类抗生素肾损害,其它* */
    drugInducedRenalDamage?: string | undefined;
    /** 其它药物性肾损害 */
    dindOther?: string | undefined;
    /** 泌尿系感染和结石 *多选* *泌尿系结核,肾结石,其它* */
    urinaryInfectionStones?: string | undefined;
    /** 其它泌尿系感染和结石 */
    uisOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientDiagnosisPrimaryDiseaseView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.primaryGlomerularDisease = _data["primaryGlomerularDisease"];
            this.pgdOther = _data["pgdOther"];
            this.secondaryGlomerularDisease = _data["secondaryGlomerularDisease"];
            this.sgdOther = _data["sgdOther"];
            this.hereditaryCongenitalDisease = _data["hereditaryCongenitalDisease"];
            this.hcdOther = _data["hcdOther"];
            this.tubulointerstitialDisease = _data["tubulointerstitialDisease"];
            this.tdOther = _data["tdOther"];
            this.drugInducedRenalDamage = _data["drugInducedRenalDamage"];
            this.dindOther = _data["dindOther"];
            this.urinaryInfectionStones = _data["urinaryInfectionStones"];
            this.uisOther = _data["uisOther"];
            this.remark = _data["remark"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDiagnosisPrimaryDiseaseView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisPrimaryDiseaseView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["type"] = this.type;
        data["primaryGlomerularDisease"] = this.primaryGlomerularDisease;
        data["pgdOther"] = this.pgdOther;
        data["secondaryGlomerularDisease"] = this.secondaryGlomerularDisease;
        data["sgdOther"] = this.sgdOther;
        data["hereditaryCongenitalDisease"] = this.hereditaryCongenitalDisease;
        data["hcdOther"] = this.hcdOther;
        data["tubulointerstitialDisease"] = this.tubulointerstitialDisease;
        data["tdOther"] = this.tdOther;
        data["drugInducedRenalDamage"] = this.drugInducedRenalDamage;
        data["dindOther"] = this.dindOther;
        data["urinaryInfectionStones"] = this.urinaryInfectionStones;
        data["uisOther"] = this.uisOther;
        data["remark"] = this.remark;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 原发病诊断 */
export interface IPatientDiagnosisPrimaryDiseaseView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 诊断日期 */
    date: dayjs.Dayjs;
    /** 原发病诊断分类 *多选* *原发性肾小球疾病,继发性肾小球疾病,遗传性及先天性疾病,肾小管间质疾病,药物性肾损害,泌尿系肿瘤,泌尿系感染和结石,肾脏切除术后,原发病不明确* */
    type: string;
    /** 原发性肾小球疾病 *多选* *急性肾炎综合征,急进性肾炎综合征,慢性肾炎综合征,肾病综合征,血尿,孤立性蛋白尿,其它* */
    primaryGlomerularDisease?: string | undefined;
    /** 其它原发性肾小球肾病 */
    pgdOther?: string | undefined;
    /** 继发性肾小球疾病 *多选* *高血压肾损害,糖尿病肾病,肥胖相关性肾病,淀粉样变肾损害,多发骨髓瘤肾病,狼疮性肾炎,系统性血管炎肾损害,过敏紫癜性肾炎,血栓性微血管病肾损害,干燥综合征肾损害,硬皮病肾损害,类风湿性关节炎和强制性脊柱炎肾损害,银屑病肾损害,乙型肝炎病毒相关性肾炎,丙型肝炎病毒相关性肾炎,hiv相关性肾损害,流行性出血热肾损害,其它* */
    secondaryGlomerularDisease?: string | undefined;
    /** 其它继发性肾小球肾病 */
    sgdOther?: string | undefined;
    /** 遗传性及先天性疾病 *多选* *多囊肾病,alport综合征,薄基底膜肾病,近端肾小管损伤及fanconi综合征,bartter综合征,fabry病,脂蛋白肾病,肾发育不良,其它* */
    hereditaryCongenitalDisease?: string | undefined;
    /** 其它遗传性及先天性肾病 */
    hcdOther?: string | undefined;
    /** 肾小管间质疾病 *多选* *急性肾小管间质性肾炎,慢性肾小管间质性肾炎,急性肾小管坏死,肾小管性酸中毒,慢性肾孟肾炎,反流性肾病,梗阻性肾病,其它* */
    tubulointerstitialDisease?: string | undefined;
    /** 其它肾小管间质疾病 */
    tdOther?: string | undefined;
    /** 药物性肾损害 *多选* *马兜铃酸肾病,造影剂肾病,重金属中毒性肾脏损害,放射性肾病及抗肿瘤药物所致的肾损害,氨基苷类抗生素肾损害,其它* */
    drugInducedRenalDamage?: string | undefined;
    /** 其它药物性肾损害 */
    dindOther?: string | undefined;
    /** 泌尿系感染和结石 *多选* *泌尿系结核,肾结石,其它* */
    urinaryInfectionStones?: string | undefined;
    /** 其它泌尿系感染和结石 */
    uisOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientDiagnosisPrimaryDiseaseViewResultEntry implements IPatientDiagnosisPrimaryDiseaseViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDiagnosisPrimaryDiseaseView;

    constructor(data?: IPatientDiagnosisPrimaryDiseaseViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientDiagnosisPrimaryDiseaseView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDiagnosisPrimaryDiseaseViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisPrimaryDiseaseViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientDiagnosisPrimaryDiseaseViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDiagnosisPrimaryDiseaseView;
}

export class PatientDiagnosisTumorItemView implements IPatientDiagnosisTumorItemView {
    /** [患者标识](患者信息Id) */
    patientId!: string;
    /** 检查日期 */
    date!: dayjs.Dayjs;
    /** 诊断 *多选* *消化系统,呼吸系统,血液系统,泌尿生殖系统,神经系统,骨骼肌肉系统,其它* */
    type!: string;
    /** 消化系统诊断 */
    digestive?: string | undefined;
    /** 呼吸系统诊断 */
    respiratory?: string | undefined;
    /** 血液系统诊断 */
    blood?: string | undefined;
    /** 泌尿生殖系统诊断 */
    urogenital?: string | undefined;
    /** 神经系统诊断 */
    nervous?: string | undefined;
    /** 骨骼肌肉系统诊断 */
    skeletalMuscle?: string | undefined;
    /** 其它诊断 */
    otherDiagnoses?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 是否启用 */
    enable?: number | undefined;
    /** 类型 */
    readonly typeLabel?: string | undefined;

    constructor(data?: IPatientDiagnosisTumorItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.digestive = _data["digestive"];
            this.respiratory = _data["respiratory"];
            this.blood = _data["blood"];
            this.urogenital = _data["urogenital"];
            this.nervous = _data["nervous"];
            this.skeletalMuscle = _data["skeletalMuscle"];
            this.otherDiagnoses = _data["otherDiagnoses"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.enable = _data["enable"];
            (<any>this).typeLabel = _data["typeLabel"];
        }
    }

    static fromJS(data: any): PatientDiagnosisTumorItemView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisTumorItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["type"] = this.type;
        data["digestive"] = this.digestive;
        data["respiratory"] = this.respiratory;
        data["blood"] = this.blood;
        data["urogenital"] = this.urogenital;
        data["nervous"] = this.nervous;
        data["skeletalMuscle"] = this.skeletalMuscle;
        data["otherDiagnoses"] = this.otherDiagnoses;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["enable"] = this.enable;
        data["typeLabel"] = this.typeLabel;
        return data;
    }
}

export interface IPatientDiagnosisTumorItemView {
    /** [患者标识](患者信息Id) */
    patientId: string;
    /** 检查日期 */
    date: dayjs.Dayjs;
    /** 诊断 *多选* *消化系统,呼吸系统,血液系统,泌尿生殖系统,神经系统,骨骼肌肉系统,其它* */
    type: string;
    /** 消化系统诊断 */
    digestive?: string | undefined;
    /** 呼吸系统诊断 */
    respiratory?: string | undefined;
    /** 血液系统诊断 */
    blood?: string | undefined;
    /** 泌尿生殖系统诊断 */
    urogenital?: string | undefined;
    /** 神经系统诊断 */
    nervous?: string | undefined;
    /** 骨骼肌肉系统诊断 */
    skeletalMuscle?: string | undefined;
    /** 其它诊断 */
    otherDiagnoses?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 是否启用 */
    enable?: number | undefined;
    /** 类型 */
    typeLabel?: string | undefined;
}

export class PatientDiagnosisTumorView implements IPatientDiagnosisTumorView {
    /** 诊断类型(*0:无,1:有*) */
    diagnosis?: number | undefined;
    /** 诊断详情 */
    items?: PatientDiagnosisTumorItemView[] | undefined;

    constructor(data?: IPatientDiagnosisTumorView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.diagnosis = _data["diagnosis"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PatientDiagnosisTumorItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientDiagnosisTumorView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisTumorView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["diagnosis"] = this.diagnosis;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPatientDiagnosisTumorView {
    /** 诊断类型(*0:无,1:有*) */
    diagnosis?: number | undefined;
    /** 诊断详情 */
    items?: PatientDiagnosisTumorItemView[] | undefined;
}

/** Reponse */
export class PatientDiagnosisTumorViewResultEntry implements IPatientDiagnosisTumorViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDiagnosisTumorView;

    constructor(data?: IPatientDiagnosisTumorViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientDiagnosisTumorView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDiagnosisTumorViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisTumorViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientDiagnosisTumorViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDiagnosisTumorView;
}

export class PatientHealtheducationLessonItemView implements IPatientHealtheducationLessonItemView {
    /** [患者健康宣教记录课程标识](#患者健康宣教记录课程) */
    patientHealtheducationLessonId!: string;
    /** [宣教内容明细标识](#宣教内容明细) */
    repositoryHealtheducationDetailId!: string;
    /** 宣教时长 *内容为视频/音频时，时长不能>最大播放时长，再次打开时从播放时长倒退5s开始播放* */
    duration?: number | undefined;
    detail?: RepositoryHealtheducationDetailView;
    /** 标识 */
    id?: string | undefined;
    /** 是否完成0,1 */
    complete?: number;
    /** 最近学习0,1 */
    recentStudy?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientHealtheducationLessonItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientHealtheducationLessonId = _data["patientHealtheducationLessonId"];
            this.repositoryHealtheducationDetailId = _data["repositoryHealtheducationDetailId"];
            this.duration = _data["duration"];
            this.detail = _data["detail"] ? RepositoryHealtheducationDetailView.fromJS(_data["detail"]) : <any>undefined;
            this.id = _data["id"];
            this.complete = _data["complete"];
            this.recentStudy = _data["recentStudy"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientHealtheducationLessonItemView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHealtheducationLessonItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientHealtheducationLessonId"] = this.patientHealtheducationLessonId;
        data["repositoryHealtheducationDetailId"] = this.repositoryHealtheducationDetailId;
        data["duration"] = this.duration;
        data["detail"] = this.detail ? this.detail.toJSON() : <any>undefined;
        data["id"] = this.id;
        data["complete"] = this.complete;
        data["recentStudy"] = this.recentStudy;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IPatientHealtheducationLessonItemView {
    /** [患者健康宣教记录课程标识](#患者健康宣教记录课程) */
    patientHealtheducationLessonId: string;
    /** [宣教内容明细标识](#宣教内容明细) */
    repositoryHealtheducationDetailId: string;
    /** 宣教时长 *内容为视频/音频时，时长不能>最大播放时长，再次打开时从播放时长倒退5s开始播放* */
    duration?: number | undefined;
    detail?: RepositoryHealtheducationDetailView;
    /** 标识 */
    id?: string | undefined;
    /** 是否完成0,1 */
    complete?: number;
    /** 最近学习0,1 */
    recentStudy?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

export class PatientHealtheducationLessonView implements IPatientHealtheducationLessonView {
    /** [患者健康宣教记录标识](#患者健康宣教记录) */
    patientHealtheducationRecordId!: string;
    /** 课程名称 */
    name!: string;
    /** 课程列表信息 */
    items?: PatientHealtheducationLessonItemView[] | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 是否完成0,1 */
    complete?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientHealtheducationLessonView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientHealtheducationRecordId = _data["patientHealtheducationRecordId"];
            this.name = _data["name"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PatientHealtheducationLessonItemView.fromJS(item));
            }
            this.id = _data["id"];
            this.complete = _data["complete"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientHealtheducationLessonView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHealtheducationLessonView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientHealtheducationRecordId"] = this.patientHealtheducationRecordId;
        data["name"] = this.name;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["id"] = this.id;
        data["complete"] = this.complete;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IPatientHealtheducationLessonView {
    /** [患者健康宣教记录标识](#患者健康宣教记录) */
    patientHealtheducationRecordId: string;
    /** 课程名称 */
    name: string;
    /** 课程列表信息 */
    items?: PatientHealtheducationLessonItemView[] | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 是否完成0,1 */
    complete?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

export class PatientHealtheducationRecordView implements IPatientHealtheducationRecordView {
    /** 标识(编辑时必传) */
    id?: string | undefined;
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 宣教日期 */
    date!: dayjs.Dayjs;
    /** 宣教评估表单vaule */
    dataValue?: string | undefined;
    /** 主观评价 */
    subjective?: string | undefined;
    /** 客观评价 */
    objective?: string | undefined;
    /** 宣教效果 `DIC.PATIENT.HEALTHEDUCATION.EFFECT` *掌握,熟悉,了解,欠缺* */
    effect?: string | undefined;
    /** 宣教内容 */
    content?: string | undefined;
    /** 宣教效果显示值 */
    effectLabel?: string | undefined;
    /** [宣教评估模板标识](表单模板Id) */
    tmplFormId?: string | undefined;
    /** 宣教评估表单结构 */
    data?: string | undefined;
    /** 是否完成0,1 - 记录下，所有课程均已完成，标注为已完成 */
    complete?: number;
    /** 是否评估0,1 */
    assement?: number;
    /** 课程信息 */
    lessons?: PatientHealtheducationLessonView[] | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patientName?: string | undefined;

    constructor(data?: IPatientHealtheducationRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.dataValue = _data["dataValue"];
            this.subjective = _data["subjective"];
            this.objective = _data["objective"];
            this.effect = _data["effect"];
            this.content = _data["content"];
            this.effectLabel = _data["effectLabel"];
            this.tmplFormId = _data["tmplFormId"];
            this.data = _data["data"];
            this.complete = _data["complete"];
            this.assement = _data["assement"];
            if (Array.isArray(_data["lessons"])) {
                this.lessons = [] as any;
                for (let item of _data["lessons"])
                    this.lessons!.push(PatientHealtheducationLessonView.fromJS(item));
            }
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patientName = _data["patientName"];
        }
    }

    static fromJS(data: any): PatientHealtheducationRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHealtheducationRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["dataValue"] = this.dataValue;
        data["subjective"] = this.subjective;
        data["objective"] = this.objective;
        data["effect"] = this.effect;
        data["content"] = this.content;
        data["effectLabel"] = this.effectLabel;
        data["tmplFormId"] = this.tmplFormId;
        data["data"] = this.data;
        data["complete"] = this.complete;
        data["assement"] = this.assement;
        if (Array.isArray(this.lessons)) {
            data["lessons"] = [];
            for (let item of this.lessons)
                data["lessons"].push(item.toJSON());
        }
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["patientName"] = this.patientName;
        return data;
    }
}

export interface IPatientHealtheducationRecordView {
    /** 标识(编辑时必传) */
    id?: string | undefined;
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 宣教日期 */
    date: dayjs.Dayjs;
    /** 宣教评估表单vaule */
    dataValue?: string | undefined;
    /** 主观评价 */
    subjective?: string | undefined;
    /** 客观评价 */
    objective?: string | undefined;
    /** 宣教效果 `DIC.PATIENT.HEALTHEDUCATION.EFFECT` *掌握,熟悉,了解,欠缺* */
    effect?: string | undefined;
    /** 宣教内容 */
    content?: string | undefined;
    /** 宣教效果显示值 */
    effectLabel?: string | undefined;
    /** [宣教评估模板标识](表单模板Id) */
    tmplFormId?: string | undefined;
    /** 宣教评估表单结构 */
    data?: string | undefined;
    /** 是否完成0,1 - 记录下，所有课程均已完成，标注为已完成 */
    complete?: number;
    /** 是否评估0,1 */
    assement?: number;
    /** 课程信息 */
    lessons?: PatientHealtheducationLessonView[] | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patientName?: string | undefined;
}

/** Reponse */
export class PatientHealtheducationRecordViewResult implements IPatientHealtheducationRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientHealtheducationRecordView[] | undefined;

    constructor(data?: IPatientHealtheducationRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientHealtheducationRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientHealtheducationRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHealtheducationRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientHealtheducationRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientHealtheducationRecordView[] | undefined;
}

export class PatientLisReportItemView implements IPatientLisReportItemView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [检验报告单标识](#检验报告单信息) */
    patientLisReportId?: string | undefined;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 编码 */
    itemCode!: string;
    /** 名称 */
    itemName?: string | undefined;
    /** 检验结果 */
    itemValue?: string | undefined;
    /** 单位 */
    itemValueUnit?: string | undefined;
    /** 数值标识 *1|↑|高；-1|↓|低；0|-|正常* */
    itemValueMark1?: string | undefined;
    /** 危险标识 */
    itemValueMark2?: string | undefined;
    /** 参考范围 */
    itemValueReference?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 检验子项全称显示值 */
    itemTextLabel?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 检验日期 */
    reportTime?: dayjs.Dayjs;
    /** 是否为数字 */
    isNumber?: boolean;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientLisReportItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientLisReportId = _data["patientLisReportId"];
            this.reportNo = _data["reportNo"];
            this.itemCode = _data["itemCode"];
            this.itemName = _data["itemName"];
            this.itemValue = _data["itemValue"];
            this.itemValueUnit = _data["itemValueUnit"];
            this.itemValueMark1 = _data["itemValueMark1"];
            this.itemValueMark2 = _data["itemValueMark2"];
            this.itemValueReference = _data["itemValueReference"];
            this.remark = _data["remark"];
            this.itemTextLabel = _data["itemTextLabel"];
            this.patientName = _data["patientName"];
            this.reportTime = _data["reportTime"] ? dayjs(_data["reportTime"].toString()) : <any>undefined;
            this.isNumber = _data["isNumber"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientLisReportItemView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLisReportItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientLisReportId"] = this.patientLisReportId;
        data["reportNo"] = this.reportNo;
        data["itemCode"] = this.itemCode;
        data["itemName"] = this.itemName;
        data["itemValue"] = this.itemValue;
        data["itemValueUnit"] = this.itemValueUnit;
        data["itemValueMark1"] = this.itemValueMark1;
        data["itemValueMark2"] = this.itemValueMark2;
        data["itemValueReference"] = this.itemValueReference;
        data["remark"] = this.remark;
        data["itemTextLabel"] = this.itemTextLabel;
        data["patientName"] = this.patientName;
        data["reportTime"] = this.reportTime ? this.reportTime.toISOString() : <any>undefined;
        data["isNumber"] = this.isNumber;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IPatientLisReportItemView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [检验报告单标识](#检验报告单信息) */
    patientLisReportId?: string | undefined;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 编码 */
    itemCode: string;
    /** 名称 */
    itemName?: string | undefined;
    /** 检验结果 */
    itemValue?: string | undefined;
    /** 单位 */
    itemValueUnit?: string | undefined;
    /** 数值标识 *1|↑|高；-1|↓|低；0|-|正常* */
    itemValueMark1?: string | undefined;
    /** 危险标识 */
    itemValueMark2?: string | undefined;
    /** 参考范围 */
    itemValueReference?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 检验子项全称显示值 */
    itemTextLabel?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 检验日期 */
    reportTime?: dayjs.Dayjs;
    /** 是否为数字 */
    isNumber?: boolean;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

export class PatientLisReportView implements IPatientLisReportView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 数据来源 `DIC.EXAMINE.DATASOURCE` */
    dataSource?: string | undefined;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 样本编号 */
    sampleNo?: string | undefined;
    /** 样本类型 `DIC.TEST.SAMPLETYPE` *血清,全血* */
    sampleType?: string | undefined;
    /** 检验大类 */
    testCategory?: string | undefined;
    /** 是否透后血0,1 */
    cureAfterBlood?: number | undefined;
    /** 检验项目 */
    testItem?: string | undefined;
    /** 临床诊断 */
    diagnosis?: string | undefined;
    /** 申请时间 */
    applicationTime?: dayjs.Dayjs | undefined;
    /** 申请科室 */
    applicationDepartment?: string | undefined;
    /** 申请人编码 */
    proposerId?: string | undefined;
    /** 申请人姓名 */
    proposerName?: string | undefined;
    /** 报告时间 */
    reportTime?: dayjs.Dayjs;
    /** 报告人编码 */
    reportId?: string | undefined;
    /** 报告人姓名 */
    reportName?: string | undefined;
    /** 审核时间 */
    auditTime?: dayjs.Dayjs | undefined;
    /** 审核人编码 */
    auditId?: string | undefined;
    /** 审核人姓名 */
    auditName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 检验项目名称 */
    testItemLabel?: string | undefined;
    /** 数据来源显示值 */
    dataSourceLable?: string | undefined;
    /** 样本类型显示值 */
    sampleTypeLabel?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 检验报告条目信息 */
    patientLisReportItems?: PatientLisReportItemView[] | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientLisReportView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.dataSource = _data["dataSource"];
            this.reportNo = _data["reportNo"];
            this.sampleNo = _data["sampleNo"];
            this.sampleType = _data["sampleType"];
            this.testCategory = _data["testCategory"];
            this.cureAfterBlood = _data["cureAfterBlood"];
            this.testItem = _data["testItem"];
            this.diagnosis = _data["diagnosis"];
            this.applicationTime = _data["applicationTime"] ? dayjs(_data["applicationTime"].toString()) : <any>undefined;
            this.applicationDepartment = _data["applicationDepartment"];
            this.proposerId = _data["proposerId"];
            this.proposerName = _data["proposerName"];
            this.reportTime = _data["reportTime"] ? dayjs(_data["reportTime"].toString()) : <any>undefined;
            this.reportId = _data["reportId"];
            this.reportName = _data["reportName"];
            this.auditTime = _data["auditTime"] ? dayjs(_data["auditTime"].toString()) : <any>undefined;
            this.auditId = _data["auditId"];
            this.auditName = _data["auditName"];
            this.remark = _data["remark"];
            this.testItemLabel = _data["testItemLabel"];
            this.dataSourceLable = _data["dataSourceLable"];
            this.sampleTypeLabel = _data["sampleTypeLabel"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.idType = _data["idType"];
            this.idNumber = _data["idNumber"];
            if (Array.isArray(_data["patientLisReportItems"])) {
                this.patientLisReportItems = [] as any;
                for (let item of _data["patientLisReportItems"])
                    this.patientLisReportItems!.push(PatientLisReportItemView.fromJS(item));
            }
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientLisReportView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLisReportView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["dataSource"] = this.dataSource;
        data["reportNo"] = this.reportNo;
        data["sampleNo"] = this.sampleNo;
        data["sampleType"] = this.sampleType;
        data["testCategory"] = this.testCategory;
        data["cureAfterBlood"] = this.cureAfterBlood;
        data["testItem"] = this.testItem;
        data["diagnosis"] = this.diagnosis;
        data["applicationTime"] = this.applicationTime ? this.applicationTime.toISOString() : <any>undefined;
        data["applicationDepartment"] = this.applicationDepartment;
        data["proposerId"] = this.proposerId;
        data["proposerName"] = this.proposerName;
        data["reportTime"] = this.reportTime ? this.reportTime.toISOString() : <any>undefined;
        data["reportId"] = this.reportId;
        data["reportName"] = this.reportName;
        data["auditTime"] = this.auditTime ? this.auditTime.toISOString() : <any>undefined;
        data["auditId"] = this.auditId;
        data["auditName"] = this.auditName;
        data["remark"] = this.remark;
        data["testItemLabel"] = this.testItemLabel;
        data["dataSourceLable"] = this.dataSourceLable;
        data["sampleTypeLabel"] = this.sampleTypeLabel;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["idType"] = this.idType;
        data["idNumber"] = this.idNumber;
        if (Array.isArray(this.patientLisReportItems)) {
            data["patientLisReportItems"] = [];
            for (let item of this.patientLisReportItems)
                data["patientLisReportItems"].push(item.toJSON());
        }
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IPatientLisReportView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 数据来源 `DIC.EXAMINE.DATASOURCE` */
    dataSource?: string | undefined;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 样本编号 */
    sampleNo?: string | undefined;
    /** 样本类型 `DIC.TEST.SAMPLETYPE` *血清,全血* */
    sampleType?: string | undefined;
    /** 检验大类 */
    testCategory?: string | undefined;
    /** 是否透后血0,1 */
    cureAfterBlood?: number | undefined;
    /** 检验项目 */
    testItem?: string | undefined;
    /** 临床诊断 */
    diagnosis?: string | undefined;
    /** 申请时间 */
    applicationTime?: dayjs.Dayjs | undefined;
    /** 申请科室 */
    applicationDepartment?: string | undefined;
    /** 申请人编码 */
    proposerId?: string | undefined;
    /** 申请人姓名 */
    proposerName?: string | undefined;
    /** 报告时间 */
    reportTime?: dayjs.Dayjs;
    /** 报告人编码 */
    reportId?: string | undefined;
    /** 报告人姓名 */
    reportName?: string | undefined;
    /** 审核时间 */
    auditTime?: dayjs.Dayjs | undefined;
    /** 审核人编码 */
    auditId?: string | undefined;
    /** 审核人姓名 */
    auditName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 检验项目名称 */
    testItemLabel?: string | undefined;
    /** 数据来源显示值 */
    dataSourceLable?: string | undefined;
    /** 样本类型显示值 */
    sampleTypeLabel?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 检验报告条目信息 */
    patientLisReportItems?: PatientLisReportItemView[] | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientLisReportViewResult implements IPatientLisReportViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientLisReportView[] | undefined;

    constructor(data?: IPatientLisReportViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientLisReportView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientLisReportViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLisReportViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientLisReportViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientLisReportView[] | undefined;
}

export class PatientPacsReportView implements IPatientPacsReportView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 数据来源 `DIC.EXAMINE.DATASOURCE` */
    dataSource?: string | undefined;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 检查大类 `DIC.EXAMINE.CATEGORY` */
    examineCategory?: string | undefined;
    /** 检查项目 `DIC.EXAMINE.ITEM` */
    examineItem?: string | undefined;
    /** 检查部位 `DIC.EXAMINE.POSITION` */
    examinePosition?: string | undefined;
    /** 检查目的 */
    examinePurpose?: string | undefined;
    /** 临床诊断 */
    diagnosis?: string | undefined;
    /** 申请时间 */
    applicationTime?: dayjs.Dayjs | undefined;
    /** 申请科室 */
    applicationDepartment?: string | undefined;
    /** 申请人编码 */
    proposerId?: string | undefined;
    /** 申请人姓名 */
    proposerName?: string | undefined;
    /** 报告时间 */
    reportTime?: dayjs.Dayjs | undefined;
    /** 报告人编码 */
    reportId?: string | undefined;
    /** 报告人姓名 */
    reportName?: string | undefined;
    /** 审核时间 */
    auditTime?: dayjs.Dayjs | undefined;
    /** 审核人编码 */
    auditId?: string | undefined;
    /** 审核人姓名 */
    auditName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 检查所见 */
    examineFind?: string | undefined;
    /** 检查结论 */
    examineConclusion?: string | undefined;
    /** 胶片类型 */
    filmType?: string | undefined;
    /** 影像文件 *data:image/jpeg;base64,...* */
    film?: string | undefined;
    /** 影像文件路径 */
    filmUrl?: string | undefined;
    /** 数据来源显示值 */
    dataSourceLable?: string | undefined;
    /** 检查大类显示值 */
    examineCategoryLable?: string | undefined;
    /** 检查项目显示值 */
    examineItemLable?: string | undefined;
    /** 检查部位显示值 */
    examinePositionLable?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientPacsReportView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.dataSource = _data["dataSource"];
            this.reportNo = _data["reportNo"];
            this.examineCategory = _data["examineCategory"];
            this.examineItem = _data["examineItem"];
            this.examinePosition = _data["examinePosition"];
            this.examinePurpose = _data["examinePurpose"];
            this.diagnosis = _data["diagnosis"];
            this.applicationTime = _data["applicationTime"] ? dayjs(_data["applicationTime"].toString()) : <any>undefined;
            this.applicationDepartment = _data["applicationDepartment"];
            this.proposerId = _data["proposerId"];
            this.proposerName = _data["proposerName"];
            this.reportTime = _data["reportTime"] ? dayjs(_data["reportTime"].toString()) : <any>undefined;
            this.reportId = _data["reportId"];
            this.reportName = _data["reportName"];
            this.auditTime = _data["auditTime"] ? dayjs(_data["auditTime"].toString()) : <any>undefined;
            this.auditId = _data["auditId"];
            this.auditName = _data["auditName"];
            this.remark = _data["remark"];
            this.examineFind = _data["examineFind"];
            this.examineConclusion = _data["examineConclusion"];
            this.filmType = _data["filmType"];
            this.film = _data["film"];
            this.filmUrl = _data["filmUrl"];
            this.dataSourceLable = _data["dataSourceLable"];
            this.examineCategoryLable = _data["examineCategoryLable"];
            this.examineItemLable = _data["examineItemLable"];
            this.examinePositionLable = _data["examinePositionLable"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientPacsReportView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPacsReportView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["dataSource"] = this.dataSource;
        data["reportNo"] = this.reportNo;
        data["examineCategory"] = this.examineCategory;
        data["examineItem"] = this.examineItem;
        data["examinePosition"] = this.examinePosition;
        data["examinePurpose"] = this.examinePurpose;
        data["diagnosis"] = this.diagnosis;
        data["applicationTime"] = this.applicationTime ? this.applicationTime.toISOString() : <any>undefined;
        data["applicationDepartment"] = this.applicationDepartment;
        data["proposerId"] = this.proposerId;
        data["proposerName"] = this.proposerName;
        data["reportTime"] = this.reportTime ? this.reportTime.toISOString() : <any>undefined;
        data["reportId"] = this.reportId;
        data["reportName"] = this.reportName;
        data["auditTime"] = this.auditTime ? this.auditTime.toISOString() : <any>undefined;
        data["auditId"] = this.auditId;
        data["auditName"] = this.auditName;
        data["remark"] = this.remark;
        data["examineFind"] = this.examineFind;
        data["examineConclusion"] = this.examineConclusion;
        data["filmType"] = this.filmType;
        data["film"] = this.film;
        data["filmUrl"] = this.filmUrl;
        data["dataSourceLable"] = this.dataSourceLable;
        data["examineCategoryLable"] = this.examineCategoryLable;
        data["examineItemLable"] = this.examineItemLable;
        data["examinePositionLable"] = this.examinePositionLable;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IPatientPacsReportView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 数据来源 `DIC.EXAMINE.DATASOURCE` */
    dataSource?: string | undefined;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 检查大类 `DIC.EXAMINE.CATEGORY` */
    examineCategory?: string | undefined;
    /** 检查项目 `DIC.EXAMINE.ITEM` */
    examineItem?: string | undefined;
    /** 检查部位 `DIC.EXAMINE.POSITION` */
    examinePosition?: string | undefined;
    /** 检查目的 */
    examinePurpose?: string | undefined;
    /** 临床诊断 */
    diagnosis?: string | undefined;
    /** 申请时间 */
    applicationTime?: dayjs.Dayjs | undefined;
    /** 申请科室 */
    applicationDepartment?: string | undefined;
    /** 申请人编码 */
    proposerId?: string | undefined;
    /** 申请人姓名 */
    proposerName?: string | undefined;
    /** 报告时间 */
    reportTime?: dayjs.Dayjs | undefined;
    /** 报告人编码 */
    reportId?: string | undefined;
    /** 报告人姓名 */
    reportName?: string | undefined;
    /** 审核时间 */
    auditTime?: dayjs.Dayjs | undefined;
    /** 审核人编码 */
    auditId?: string | undefined;
    /** 审核人姓名 */
    auditName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 检查所见 */
    examineFind?: string | undefined;
    /** 检查结论 */
    examineConclusion?: string | undefined;
    /** 胶片类型 */
    filmType?: string | undefined;
    /** 影像文件 *data:image/jpeg;base64,...* */
    film?: string | undefined;
    /** 影像文件路径 */
    filmUrl?: string | undefined;
    /** 数据来源显示值 */
    dataSourceLable?: string | undefined;
    /** 检查大类显示值 */
    examineCategoryLable?: string | undefined;
    /** 检查项目显示值 */
    examineItemLable?: string | undefined;
    /** 检查部位显示值 */
    examinePositionLable?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientPacsReportViewResult implements IPatientPacsReportViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientPacsReportView[] | undefined;

    constructor(data?: IPatientPacsReportViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientPacsReportView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientPacsReportViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPacsReportViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientPacsReportViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientPacsReportView[] | undefined;
}

export class PatientPmhView implements IPatientPmhView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 有无既往史0,1 */
    isPmh!: number;
    /** 否有以下系统疾病史或者异常 `DIC.PATIENT.DHAA` *多选 DiseaseHistoryAndAbnormalities* */
    dhaa?: string | undefined;
    /** 既往肾脏替代治疗史0,1 *RenalReplacementTherapy* */
    isRrt?: number | undefined;
    /** 既往肾脏替代治疗史详情 `DIC.PATIENT.RRTD` *多选 RenalReplacementTherapyDetails* */
    rrtd?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 否有以下系统疾病史或者异常 `DIC.PATIENT.DHAA` *多选 DiseaseHistoryAndAbnormalities* */
    dhaaLabel?: string | undefined;
    /** 既往肾脏替代治疗史详情 `DIC.PATIENT.RRTD` *多选 RenalReplacementTherapyDetails* */
    rrtdLabel?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientPmhView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.isPmh = _data["isPmh"];
            this.dhaa = _data["dhaa"];
            this.isRrt = _data["isRrt"];
            this.rrtd = _data["rrtd"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.dhaaLabel = _data["dhaaLabel"];
            this.rrtdLabel = _data["rrtdLabel"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientPmhView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPmhView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["isPmh"] = this.isPmh;
        data["dhaa"] = this.dhaa;
        data["isRrt"] = this.isRrt;
        data["rrtd"] = this.rrtd;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["dhaaLabel"] = this.dhaaLabel;
        data["rrtdLabel"] = this.rrtdLabel;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IPatientPmhView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 有无既往史0,1 */
    isPmh: number;
    /** 否有以下系统疾病史或者异常 `DIC.PATIENT.DHAA` *多选 DiseaseHistoryAndAbnormalities* */
    dhaa?: string | undefined;
    /** 既往肾脏替代治疗史0,1 *RenalReplacementTherapy* */
    isRrt?: number | undefined;
    /** 既往肾脏替代治疗史详情 `DIC.PATIENT.RRTD` *多选 RenalReplacementTherapyDetails* */
    rrtd?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 否有以下系统疾病史或者异常 `DIC.PATIENT.DHAA` *多选 DiseaseHistoryAndAbnormalities* */
    dhaaLabel?: string | undefined;
    /** 既往肾脏替代治疗史详情 `DIC.PATIENT.RRTD` *多选 RenalReplacementTherapyDetails* */
    rrtdLabel?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientPmhViewResult implements IPatientPmhViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientPmhView[] | undefined;

    constructor(data?: IPatientPmhViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientPmhView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientPmhViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPmhViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientPmhViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientPmhView[] | undefined;
}

/** 患者血管通路 */
export class PatientVascularAccess implements IPatientVascularAccess {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 是否改变通路0,1 */
    change?: number | undefined;
    /** 改变日期 */
    changeDate?: dayjs.Dayjs | undefined;
    /** 改变原因 `DIC.VASCULAR.ACCESS.CHANGECAUSE` *可以多选,使用`;`分隔* */
    changeCause?: string | undefined;
    /** 其它改变原因 */
    changeCauseOther?: string | undefined;
    /** 位置(左-右) `DIC.VASCULAR.ACCESS.LOCATION` *左侧,右侧* */
    location?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type?: string | undefined;
    /** 位置 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 中心静脉置管方法 `DIC.VASCULAR.ACCESS.WAY.CVC` */
    way?: string | undefined;
    /** 其他描述 */
    remarkOther?: string | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 默认在处方应用0,1 */
    default?: number | undefined;
    /** 停用时间 */
    disableDate?: dayjs.Dayjs | undefined;
    /** 停用原因 */
    disableReason?: string | undefined;
    /** 已用天数 */
    lifetime?: number | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;

    constructor(data?: IPatientVascularAccess) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.change = _data["change"];
            this.changeDate = _data["changeDate"] ? dayjs(_data["changeDate"].toString()) : <any>undefined;
            this.changeCause = _data["changeCause"];
            this.changeCauseOther = _data["changeCauseOther"];
            this.location = _data["location"];
            this.type = _data["type"];
            this.position = _data["position"];
            this.way = _data["way"];
            this.remarkOther = _data["remarkOther"];
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.default = _data["default"];
            this.disableDate = _data["disableDate"] ? dayjs(_data["disableDate"].toString()) : <any>undefined;
            this.disableReason = _data["disableReason"];
            this.lifetime = _data["lifetime"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientVascularAccess {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccess();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["change"] = this.change;
        data["changeDate"] = this.changeDate ? this.changeDate.toISOString() : <any>undefined;
        data["changeCause"] = this.changeCause;
        data["changeCauseOther"] = this.changeCauseOther;
        data["location"] = this.location;
        data["type"] = this.type;
        data["position"] = this.position;
        data["way"] = this.way;
        data["remarkOther"] = this.remarkOther;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["default"] = this.default;
        data["disableDate"] = this.disableDate ? this.disableDate.toISOString() : <any>undefined;
        data["disableReason"] = this.disableReason;
        data["lifetime"] = this.lifetime;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        return data;
    }
}

/** 患者血管通路 */
export interface IPatientVascularAccess {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 是否改变通路0,1 */
    change?: number | undefined;
    /** 改变日期 */
    changeDate?: dayjs.Dayjs | undefined;
    /** 改变原因 `DIC.VASCULAR.ACCESS.CHANGECAUSE` *可以多选,使用`;`分隔* */
    changeCause?: string | undefined;
    /** 其它改变原因 */
    changeCauseOther?: string | undefined;
    /** 位置(左-右) `DIC.VASCULAR.ACCESS.LOCATION` *左侧,右侧* */
    location?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type?: string | undefined;
    /** 位置 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 中心静脉置管方法 `DIC.VASCULAR.ACCESS.WAY.CVC` */
    way?: string | undefined;
    /** 其他描述 */
    remarkOther?: string | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 默认在处方应用0,1 */
    default?: number | undefined;
    /** 停用时间 */
    disableDate?: dayjs.Dayjs | undefined;
    /** 停用原因 */
    disableReason?: string | undefined;
    /** 已用天数 */
    lifetime?: number | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
}

/** 患者血管通路照片 */
export class PatientVascularAccessFile implements IPatientVascularAccessFile {
    /** 标识 */
    id?: string | undefined;
    /** [血管通路标识](患者血管通路) */
    patientVascularAccessId?: string | undefined;
    /** [文件标识](文件列表) */
    hfsFilesId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    patientVascularAccesss?: PatientVascularAccess;
    hfsFiless?: HfsFiles;

    constructor(data?: IPatientVascularAccessFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.hfsFilesId = _data["hfsFilesId"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.patientVascularAccesss = _data["patientVascularAccesss"] ? PatientVascularAccess.fromJS(_data["patientVascularAccesss"]) : <any>undefined;
            this.hfsFiless = _data["hfsFiless"] ? HfsFiles.fromJS(_data["hfsFiless"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientVascularAccessFile {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["hfsFilesId"] = this.hfsFilesId;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["patientVascularAccesss"] = this.patientVascularAccesss ? this.patientVascularAccesss.toJSON() : <any>undefined;
        data["hfsFiless"] = this.hfsFiless ? this.hfsFiless.toJSON() : <any>undefined;
        return data;
    }
}

/** 患者血管通路照片 */
export interface IPatientVascularAccessFile {
    /** 标识 */
    id?: string | undefined;
    /** [血管通路标识](患者血管通路) */
    patientVascularAccessId?: string | undefined;
    /** [文件标识](文件列表) */
    hfsFilesId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    patientVascularAccesss?: PatientVascularAccess;
    hfsFiless?: HfsFiles;
}

/** 患者血管通路 */
export class PatientVascularAccessView implements IPatientVascularAccessView {
    /** 标识 */
    id?: string | undefined;
    /** 照片列表 */
    files?: PatientVascularAccessFile[] | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 患者别称 */
    patientName2?: string | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 部位 `DIC.VASCULAR.ACCESS.LOCATION` *左侧,右侧* */
    location?: string | undefined;
    /** 部位值 */
    locationName?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *静脉直穿,动脉直穿* */
    type?: string | undefined;
    /** 通路类型值 */
    typeName?: string | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 默认在处方应用0,1 */
    default?: number | undefined;
    /** 停用时间 */
    disableDate?: dayjs.Dayjs | undefined;
    /** 停用原因 */
    disableReason?: string | undefined;
    /** 已用天数 */
    lifetime?: number | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 是否改变通路0,1 */
    change?: number | undefined;
    /** 改变原因 `DIC.VASCULAR.ACCESS.CHANGECAUSE` *可以多选,使用`;`分隔* */
    changeCause?: string | undefined;
    /** 改变原因名称 */
    changeCauseName?: string | undefined;
    /** 其它改变原因 */
    changeCauseOther?: string | undefined;
    /** 位置 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 位置名称 */
    positionName?: string | undefined;
    /** 中心静脉置管方法 `DIC.VASCULAR.ACCESS.WAY.CVC` */
    way?: string | undefined;
    /** 中心静脉置管方法名称 */
    wayName?: string | undefined;
    /** 其他描述 */
    remarkOther?: string | undefined;

    constructor(data?: IPatientVascularAccessView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["files"])) {
                this.files = [] as any;
                for (let item of _data["files"])
                    this.files!.push(PatientVascularAccessFile.fromJS(item));
            }
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.location = _data["location"];
            this.locationName = _data["locationName"];
            this.type = _data["type"];
            this.typeName = _data["typeName"];
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.default = _data["default"];
            this.disableDate = _data["disableDate"] ? dayjs(_data["disableDate"].toString()) : <any>undefined;
            this.disableReason = _data["disableReason"];
            this.lifetime = _data["lifetime"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.change = _data["change"];
            this.changeCause = _data["changeCause"];
            this.changeCauseName = _data["changeCauseName"];
            this.changeCauseOther = _data["changeCauseOther"];
            this.position = _data["position"];
            this.positionName = _data["positionName"];
            this.way = _data["way"];
            this.wayName = _data["wayName"];
            this.remarkOther = _data["remarkOther"];
        }
    }

    static fromJS(data: any): PatientVascularAccessView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.files)) {
            data["files"] = [];
            for (let item of this.files)
                data["files"].push(item.toJSON());
        }
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["location"] = this.location;
        data["locationName"] = this.locationName;
        data["type"] = this.type;
        data["typeName"] = this.typeName;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["default"] = this.default;
        data["disableDate"] = this.disableDate ? this.disableDate.toISOString() : <any>undefined;
        data["disableReason"] = this.disableReason;
        data["lifetime"] = this.lifetime;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["change"] = this.change;
        data["changeCause"] = this.changeCause;
        data["changeCauseName"] = this.changeCauseName;
        data["changeCauseOther"] = this.changeCauseOther;
        data["position"] = this.position;
        data["positionName"] = this.positionName;
        data["way"] = this.way;
        data["wayName"] = this.wayName;
        data["remarkOther"] = this.remarkOther;
        return data;
    }
}

/** 患者血管通路 */
export interface IPatientVascularAccessView {
    /** 标识 */
    id?: string | undefined;
    /** 照片列表 */
    files?: PatientVascularAccessFile[] | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 患者别称 */
    patientName2?: string | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 部位 `DIC.VASCULAR.ACCESS.LOCATION` *左侧,右侧* */
    location?: string | undefined;
    /** 部位值 */
    locationName?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *静脉直穿,动脉直穿* */
    type?: string | undefined;
    /** 通路类型值 */
    typeName?: string | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 默认在处方应用0,1 */
    default?: number | undefined;
    /** 停用时间 */
    disableDate?: dayjs.Dayjs | undefined;
    /** 停用原因 */
    disableReason?: string | undefined;
    /** 已用天数 */
    lifetime?: number | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 是否改变通路0,1 */
    change?: number | undefined;
    /** 改变原因 `DIC.VASCULAR.ACCESS.CHANGECAUSE` *可以多选,使用`;`分隔* */
    changeCause?: string | undefined;
    /** 改变原因名称 */
    changeCauseName?: string | undefined;
    /** 其它改变原因 */
    changeCauseOther?: string | undefined;
    /** 位置 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 位置名称 */
    positionName?: string | undefined;
    /** 中心静脉置管方法 `DIC.VASCULAR.ACCESS.WAY.CVC` */
    way?: string | undefined;
    /** 中心静脉置管方法名称 */
    wayName?: string | undefined;
    /** 其他描述 */
    remarkOther?: string | undefined;
}

/** Reponse */
export class PatientVascularAccessViewResult implements IPatientVascularAccessViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientVascularAccessView[] | undefined;

    constructor(data?: IPatientVascularAccessViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientVascularAccessView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientVascularAccessViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientVascularAccessViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientVascularAccessView[] | undefined;
}

/** 干体重记录 */
export class PatientWeightBest implements IPatientWeightBest {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 干体重 *kg* */
    bestWeight?: number;
    /** 测量时间 */
    measureTime?: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;

    constructor(data?: IPatientWeightBest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.bestWeight = _data["bestWeight"];
            this.measureTime = _data["measureTime"] ? dayjs(_data["measureTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientWeightBest {
        data = typeof data === 'object' ? data : {};
        let result = new PatientWeightBest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["bestWeight"] = this.bestWeight;
        data["measureTime"] = this.measureTime ? this.measureTime.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        return data;
    }
}

/** 干体重记录 */
export interface IPatientWeightBest {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 干体重 *kg* */
    bestWeight?: number;
    /** 测量时间 */
    measureTime?: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
}

/** Reponse */
export class PatientWeightBestResult implements IPatientWeightBestResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientWeightBest[] | undefined;

    constructor(data?: IPatientWeightBestResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientWeightBest.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientWeightBestResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientWeightBestResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientWeightBestResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientWeightBest[] | undefined;
}

/** 干体重记录 (ViewModel) */
export class PatientWeightBestViewModel implements IPatientWeightBestViewModel {
    /** [患者标识](患者信息Id) */
    patientId!: string;
    /** 干体重 *kg* */
    bestWeight!: number;
    /** 测量时间 */
    measureTime!: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IPatientWeightBestViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.bestWeight = _data["bestWeight"];
            this.measureTime = _data["measureTime"] ? dayjs(_data["measureTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): PatientWeightBestViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientWeightBestViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["bestWeight"] = this.bestWeight;
        data["measureTime"] = this.measureTime ? this.measureTime.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        return data;
    }
}

/** 干体重记录 (ViewModel) */
export interface IPatientWeightBestViewModel {
    /** [患者标识](患者信息Id) */
    patientId: string;
    /** 干体重 *kg* */
    bestWeight: number;
    /** 测量时间 */
    measureTime: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
}

export class PatientWeightView implements IPatientWeightView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 体重 *kg* */
    weight!: number;
    /** 测量时间 */
    measureTime!: dayjs.Dayjs;
    /** 方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    mode?: string | undefined;
    /** 称重标签 `DIC.PATIENT.MEASURE.TAG` *透前,透后,非透析日* */
    tag?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 方式显示值 */
    modeLabel?: string | undefined;
    /** 称重标签显示值 */
    tagLabel?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientWeightView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.weight = _data["weight"];
            this.measureTime = _data["measureTime"] ? dayjs(_data["measureTime"].toString()) : <any>undefined;
            this.mode = _data["mode"];
            this.tag = _data["tag"];
            this.remark = _data["remark"];
            this.modeLabel = _data["modeLabel"];
            this.tagLabel = _data["tagLabel"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientWeightView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientWeightView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["weight"] = this.weight;
        data["measureTime"] = this.measureTime ? this.measureTime.toISOString() : <any>undefined;
        data["mode"] = this.mode;
        data["tag"] = this.tag;
        data["remark"] = this.remark;
        data["modeLabel"] = this.modeLabel;
        data["tagLabel"] = this.tagLabel;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IPatientWeightView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 体重 *kg* */
    weight: number;
    /** 测量时间 */
    measureTime: dayjs.Dayjs;
    /** 方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    mode?: string | undefined;
    /** 称重标签 `DIC.PATIENT.MEASURE.TAG` *透前,透后,非透析日* */
    tag?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 方式显示值 */
    modeLabel?: string | undefined;
    /** 称重标签显示值 */
    tagLabel?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 体重记录 (ViewModel) */
export class PatientWeightViewModel implements IPatientWeightViewModel {
    /** [患者标识](患者信息Id) */
    patientId!: string;
    /** 体重 *kg* */
    weight!: number;
    /** 测量时间 */
    measureTime!: dayjs.Dayjs;
    /** 方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    mode?: string | undefined;
    /** 称重标签 `DIC.PATIENT.MEASURE.TAG` *透前,透后,非透析日* */
    tag?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IPatientWeightViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.weight = _data["weight"];
            this.measureTime = _data["measureTime"] ? dayjs(_data["measureTime"].toString()) : <any>undefined;
            this.mode = _data["mode"];
            this.tag = _data["tag"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): PatientWeightViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientWeightViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["weight"] = this.weight;
        data["measureTime"] = this.measureTime ? this.measureTime.toISOString() : <any>undefined;
        data["mode"] = this.mode;
        data["tag"] = this.tag;
        data["remark"] = this.remark;
        return data;
    }
}

/** 体重记录 (ViewModel) */
export interface IPatientWeightViewModel {
    /** [患者标识](患者信息Id) */
    patientId: string;
    /** 体重 *kg* */
    weight: number;
    /** 测量时间 */
    measureTime: dayjs.Dayjs;
    /** 方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    mode?: string | undefined;
    /** 称重标签 `DIC.PATIENT.MEASURE.TAG` *透前,透后,非透析日* */
    tag?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class PatientWeightViewResult implements IPatientWeightViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientWeightView[] | undefined;

    constructor(data?: IPatientWeightViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientWeightView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientWeightViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientWeightViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientWeightViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientWeightView[] | undefined;
}

export class RepositoryHealtheducationDetailView implements IRepositoryHealtheducationDetailView {
    /** [分类标识](#宣教内容分类) */
    repositoryHealtheducationTypeId!: string;
    /** 名称 *○同一个`repository_healtheducation_type_id`下不允许重复* */
    name!: string;
    /** 封面 *文件路径* */
    cover?: string | undefined;
    /** 类型 *视频,音频,PDF,图片,文本* */
    type!: string;
    /** 内容 *文本类型是时使用* */
    content?: string | undefined;
    /** 时长 *单位：秒，视频/音频类型是时使用* */
    duration?: number | undefined;
    /** 来源 */
    source?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 宣教类型名称 */
    repositoryHealtheducationTypeName?: string | undefined;
    /** 宣教类型序列 */
    repositoryHealtheducationTypeSequence?: number;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 附件信息 */
    files?: RepositoryHealtheducationDetailViewItem[] | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRepositoryHealtheducationDetailView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.repositoryHealtheducationTypeId = _data["repositoryHealtheducationTypeId"];
            this.name = _data["name"];
            this.cover = _data["cover"];
            this.type = _data["type"];
            this.content = _data["content"];
            this.duration = _data["duration"];
            this.source = _data["source"];
            this.remark = _data["remark"];
            this.repositoryHealtheducationTypeName = _data["repositoryHealtheducationTypeName"];
            this.repositoryHealtheducationTypeSequence = _data["repositoryHealtheducationTypeSequence"];
            this.id = _data["id"];
            this.sequence = _data["sequence"];
            if (Array.isArray(_data["files"])) {
                this.files = [] as any;
                for (let item of _data["files"])
                    this.files!.push(RepositoryHealtheducationDetailViewItem.fromJS(item));
            }
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RepositoryHealtheducationDetailView {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationDetailView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["repositoryHealtheducationTypeId"] = this.repositoryHealtheducationTypeId;
        data["name"] = this.name;
        data["cover"] = this.cover;
        data["type"] = this.type;
        data["content"] = this.content;
        data["duration"] = this.duration;
        data["source"] = this.source;
        data["remark"] = this.remark;
        data["repositoryHealtheducationTypeName"] = this.repositoryHealtheducationTypeName;
        data["repositoryHealtheducationTypeSequence"] = this.repositoryHealtheducationTypeSequence;
        data["id"] = this.id;
        data["sequence"] = this.sequence;
        if (Array.isArray(this.files)) {
            data["files"] = [];
            for (let item of this.files)
                data["files"].push(item.toJSON());
        }
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IRepositoryHealtheducationDetailView {
    /** [分类标识](#宣教内容分类) */
    repositoryHealtheducationTypeId: string;
    /** 名称 *○同一个`repository_healtheducation_type_id`下不允许重复* */
    name: string;
    /** 封面 *文件路径* */
    cover?: string | undefined;
    /** 类型 *视频,音频,PDF,图片,文本* */
    type: string;
    /** 内容 *文本类型是时使用* */
    content?: string | undefined;
    /** 时长 *单位：秒，视频/音频类型是时使用* */
    duration?: number | undefined;
    /** 来源 */
    source?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 宣教类型名称 */
    repositoryHealtheducationTypeName?: string | undefined;
    /** 宣教类型序列 */
    repositoryHealtheducationTypeSequence?: number;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 附件信息 */
    files?: RepositoryHealtheducationDetailViewItem[] | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

export class RepositoryHealtheducationDetailViewItem implements IRepositoryHealtheducationDetailViewItem {
    /** 标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
    /** 文件路径 */
    path?: string | undefined;
    /** url */
    url?: string | undefined;
    /** 序列 */
    sequence?: number;

    constructor(data?: IRepositoryHealtheducationDetailViewItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.extension = _data["extension"];
            this.length = _data["length"];
            this.path = _data["path"];
            this.url = _data["url"];
            this.sequence = _data["sequence"];
        }
    }

    static fromJS(data: any): RepositoryHealtheducationDetailViewItem {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationDetailViewItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["extension"] = this.extension;
        data["length"] = this.length;
        data["path"] = this.path;
        data["url"] = this.url;
        data["sequence"] = this.sequence;
        return data;
    }
}

export interface IRepositoryHealtheducationDetailViewItem {
    /** 标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
    /** 文件路径 */
    path?: string | undefined;
    /** url */
    url?: string | undefined;
    /** 序列 */
    sequence?: number;
}

/** Reponse */
export class Result implements IResult {
    /** 返回结果(true,false) */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 相关的链接地址 */
    url?: string | undefined;
    count?: number;
    /** 数据 */
    data?: any | undefined;

    constructor(data?: IResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.url = _data["url"];
            this.count = _data["count"];
            this.data = _data["data"];
        }
    }

    static fromJS(data: any): Result {
        data = typeof data === 'object' ? data : {};
        let result = new Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["url"] = this.url;
        data["count"] = this.count;
        data["data"] = this.data;
        return data;
    }
}

/** Reponse */
export interface IResult {
    /** 返回结果(true,false) */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 相关的链接地址 */
    url?: string | undefined;
    count?: number;
    /** 数据 */
    data?: any | undefined;
}

/** 字典明细 */
export class SysDicItemView implements ISysDicItemView {
    /** 记录标识 */
    id?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 值 */
    value?: string | undefined;
    /** 自定义名称 */
    customLabel?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 系统内置 *0,1* */
    system?: number;
    /** 是否启用 *0,1* */
    enabled?: number;
    /** 扩展或保留字段 */
    extended1?: string | undefined;
    /** [父节点标识](字典分类表) */
    sysDicTypeId?: string | undefined;
    /** [父节点名称](字典分类表) */
    sysDicTypeName?: string | undefined;
    /** [父节点Code](字典分类表) */
    sysDicTypeCode?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysDicItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.value = _data["value"];
            this.customLabel = _data["customLabel"];
            this.remark = _data["remark"];
            this.system = _data["system"];
            this.enabled = _data["enabled"];
            this.extended1 = _data["extended1"];
            this.sysDicTypeId = _data["sysDicTypeId"];
            this.sysDicTypeName = _data["sysDicTypeName"];
            this.sysDicTypeCode = _data["sysDicTypeCode"];
            this.sequence = _data["sequence"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysDicItemView {
        data = typeof data === 'object' ? data : {};
        let result = new SysDicItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["value"] = this.value;
        data["customLabel"] = this.customLabel;
        data["remark"] = this.remark;
        data["system"] = this.system;
        data["enabled"] = this.enabled;
        data["extended1"] = this.extended1;
        data["sysDicTypeId"] = this.sysDicTypeId;
        data["sysDicTypeName"] = this.sysDicTypeName;
        data["sysDicTypeCode"] = this.sysDicTypeCode;
        data["sequence"] = this.sequence;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 字典明细 */
export interface ISysDicItemView {
    /** 记录标识 */
    id?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 值 */
    value?: string | undefined;
    /** 自定义名称 */
    customLabel?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 系统内置 *0,1* */
    system?: number;
    /** 是否启用 *0,1* */
    enabled?: number;
    /** 扩展或保留字段 */
    extended1?: string | undefined;
    /** [父节点标识](字典分类表) */
    sysDicTypeId?: string | undefined;
    /** [父节点名称](字典分类表) */
    sysDicTypeName?: string | undefined;
    /** [父节点Code](字典分类表) */
    sysDicTypeCode?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class SysDicItemViewResult implements ISysDicItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysDicItemView[] | undefined;

    constructor(data?: ISysDicItemViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysDicItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysDicItemViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysDicItemViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysDicItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysDicItemView[] | undefined;
}

/** 自定义表单数据 */
export class SysFormValueView implements ISysFormValueView {
    /** 名称 */
    name?: string | undefined;
    /** 键 */
    key?: string | undefined;
    /** 值 */
    value?: any | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 是否在透析记录单显示0,1 *只在透析记录单中评估内容自动生成场景下生效* */
    cureRecordShow?: number;

    constructor(data?: ISysFormValueView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.key = _data["key"];
            this.value = _data["value"];
            this.unit = _data["unit"];
            this.cureRecordShow = _data["cureRecordShow"];
        }
    }

    static fromJS(data: any): SysFormValueView {
        data = typeof data === 'object' ? data : {};
        let result = new SysFormValueView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["key"] = this.key;
        data["value"] = this.value;
        data["unit"] = this.unit;
        data["cureRecordShow"] = this.cureRecordShow;
        return data;
    }
}

/** 自定义表单数据 */
export interface ISysFormValueView {
    /** 名称 */
    name?: string | undefined;
    /** 键 */
    key?: string | undefined;
    /** 值 */
    value?: any | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 是否在透析记录单显示0,1 *只在透析记录单中评估内容自动生成场景下生效* */
    cureRecordShow?: number;
}

/** 医院信息 */
export class SysHospital implements ISysHospital {
    /** 标识 */
    id?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 名称字体 */
    nameFont?: string | undefined;
    /** 名称颜色 */
    nameColor?: string | undefined;
    /** LOGO类型 */
    logoType?: number;
    /** LOGO路径 */
    logo?: string | undefined;
    /** 反馈二维码 */
    feedbackQr?: string | undefined;
    /** 类型 `DIC.HOSPITAL.TYPE` *综合医院,中医医院,中西医结合医院,民族医院,专科医院,康复医院* */
    type?: string | undefined;
    /** 性质 `DIC.HOSPITAL.NATURE` *公立,民营* */
    nature?: string | undefined;
    /** 级别 `DIC.HOSPITAL.LEVEL` *三级甲等,三级乙等,三级丙等,二级甲等,二级乙等* */
    level?: string | undefined;
    /** 编码 *医院编码属性* */
    code?: string | undefined;
    /** 开展透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 地址 */
    address?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysHospital) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.nameFont = _data["nameFont"];
            this.nameColor = _data["nameColor"];
            this.logoType = _data["logoType"];
            this.logo = _data["logo"];
            this.feedbackQr = _data["feedbackQr"];
            this.type = _data["type"];
            this.nature = _data["nature"];
            this.level = _data["level"];
            this.code = _data["code"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.province = _data["province"];
            this.city = _data["city"];
            this.area = _data["area"];
            this.address = _data["address"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysHospital {
        data = typeof data === 'object' ? data : {};
        let result = new SysHospital();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["nameFont"] = this.nameFont;
        data["nameColor"] = this.nameColor;
        data["logoType"] = this.logoType;
        data["logo"] = this.logo;
        data["feedbackQr"] = this.feedbackQr;
        data["type"] = this.type;
        data["nature"] = this.nature;
        data["level"] = this.level;
        data["code"] = this.code;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["province"] = this.province;
        data["city"] = this.city;
        data["area"] = this.area;
        data["address"] = this.address;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 医院信息 */
export interface ISysHospital {
    /** 标识 */
    id?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 名称字体 */
    nameFont?: string | undefined;
    /** 名称颜色 */
    nameColor?: string | undefined;
    /** LOGO类型 */
    logoType?: number;
    /** LOGO路径 */
    logo?: string | undefined;
    /** 反馈二维码 */
    feedbackQr?: string | undefined;
    /** 类型 `DIC.HOSPITAL.TYPE` *综合医院,中医医院,中西医结合医院,民族医院,专科医院,康复医院* */
    type?: string | undefined;
    /** 性质 `DIC.HOSPITAL.NATURE` *公立,民营* */
    nature?: string | undefined;
    /** 级别 `DIC.HOSPITAL.LEVEL` *三级甲等,三级乙等,三级丙等,二级甲等,二级乙等* */
    level?: string | undefined;
    /** 编码 *医院编码属性* */
    code?: string | undefined;
    /** 开展透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 地址 */
    address?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 透析室 */
export class SysHospitalArea implements ISysHospitalArea {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysHospitalArea) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.parentId = _data["parentId"];
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysHospitalArea {
        data = typeof data === 'object' ? data : {};
        let result = new SysHospitalArea();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["parentId"] = this.parentId;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析室 */
export interface ISysHospitalArea {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class SysHospitalResult implements ISysHospitalResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysHospital[] | undefined;

    constructor(data?: ISysHospitalResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysHospital.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysHospitalResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysHospitalResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysHospitalResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysHospital[] | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}