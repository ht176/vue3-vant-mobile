/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import {ServiceProxyBase} from './ServiceProxyBase'
import axios, { AxiosError, type AxiosInstance, type AxiosRequestConfig, type AxiosResponse, type CancelToken } from 'axios';

import dayjs from 'dayjs';

export class PatientServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param filter (optional)
     * @param tags (optional)
     * @param infes (optional)
     * @param key (optional)
     * @param dialysis (optional)
     * @return Success
     */
    patientList(filter: string | undefined, tags: string | undefined, infes: string | undefined, key: string | undefined, dialysis: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientListViewResult> {
        let url_ = this.baseUrl + "/api/Patient/PatientList?";
        if (tags === null)
            throw new Error("The parameter 'tags' cannot be null.");
        else if (tags !== undefined)
            url_ += "tags=" + encodeURIComponent("" + tags) + "&";
        if (infes === null)
            throw new Error("The parameter 'infes' cannot be null.");
        else if (infes !== undefined)
            url_ += "infes=" + encodeURIComponent("" + infes) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (dialysis === null)
            throw new Error("The parameter 'dialysis' cannot be null.");
        else if (dialysis !== undefined)
            url_ += "dialysis=" + encodeURIComponent("" + dialysis) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientList(_response));
        });
    }

    protected processPatientList(response: AxiosResponse): Promise<PatientListViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientListViewResult.fromJS(resultData200);
            return Promise.resolve<PatientListViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientListViewResult>(null as any);
    }

    /**
     * 患者信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientResultEntry> {
        let url_ = this.baseUrl + "/api/Patient/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientGET(_response));
        });
    }

    protected processPatientGET(response: AxiosResponse): Promise<PatientResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientResultEntry>(null as any);
    }

    /**
     * 患者信息 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientPOST(id: string, body: PatientEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Patient/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientPOST(_response));
        });
    }

    protected processPatientPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/别名/五笔码/拼音码/透析卡号/住院号/门诊号/证件号 *选填
     * @param today (optional) 是否本日透析患者
     * @param mine (optional) 是否我的患者
     * @param tmplId (optional)
     * @param order (optional)
     * @return Success
     */
    filterGET(filter: string | undefined, key: string | undefined, today: string | undefined, mine: string | undefined, tmplId: string | undefined, order: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientViewResult> {
        let url_ = this.baseUrl + "/api/Patient/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (today === null)
            throw new Error("The parameter 'today' cannot be null.");
        else if (today !== undefined)
            url_ += "today=" + encodeURIComponent("" + today) + "&";
        if (mine === null)
            throw new Error("The parameter 'mine' cannot be null.");
        else if (mine !== undefined)
            url_ += "mine=" + encodeURIComponent("" + mine) + "&";
        if (tmplId === null)
            throw new Error("The parameter 'tmplId' cannot be null.");
        else if (tmplId !== undefined)
            url_ += "tmplId=" + encodeURIComponent("" + tmplId) + "&";
        if (order === null)
            throw new Error("The parameter 'order' cannot be null.");
        else if (order !== undefined)
            url_ += "order=" + encodeURIComponent("" + order) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET(_response));
        });
    }

    protected processFilterGET(response: AxiosResponse): Promise<PatientViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientViewResult.fromJS(resultData200);
            return Promise.resolve<PatientViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientViewResult>(null as any);
    }

    /**
     * @param filter (optional)
     * @param date (optional)
     * @return Success
     */
    getAdequacy(filter: string | undefined, id: string, date: dayjs.Dayjs | undefined , cancelToken?: CancelToken | undefined): Promise<PatientAdequacyViewResultEntry> {
        let url_ = this.baseUrl + "/api/Patient/GetAdequacy/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent(date ? "" + date.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAdequacy(_response));
        });
    }

    protected processGetAdequacy(response: AxiosResponse): Promise<PatientAdequacyViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientAdequacyViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientAdequacyViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientAdequacyViewResultEntry>(null as any);
    }

    /**
     * 患者信息 -- 患者数量汇总
     * @return Success
     */
    getPatientCount(  cancelToken?: CancelToken | undefined): Promise<PatientCountViewResultEntry> {
        let url_ = this.baseUrl + "/api/Patient/GetPatientCount";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetPatientCount(_response));
        });
    }

    protected processGetPatientCount(response: AxiosResponse): Promise<PatientCountViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientCountViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientCountViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientCountViewResultEntry>(null as any);
    }

    /**
     * 患者信息 -- 检验项提醒
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/别名/五笔码/拼音码/透析卡号/住院号/门诊号/证件号 *选填
     * @param today (optional) 是否本日透析患者
     * @param mine (optional) 是否我的患者
     * @return Success
     */
    remind(filter: string | undefined, key: string | undefined, today: string | undefined, mine: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientViewResult> {
        let url_ = this.baseUrl + "/api/Patient/Remind?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (today === null)
            throw new Error("The parameter 'today' cannot be null.");
        else if (today !== undefined)
            url_ += "today=" + encodeURIComponent("" + today) + "&";
        if (mine === null)
            throw new Error("The parameter 'mine' cannot be null.");
        else if (mine !== undefined)
            url_ += "mine=" + encodeURIComponent("" + mine) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRemind(_response));
        });
    }

    protected processRemind(response: AxiosResponse): Promise<PatientViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientViewResult.fromJS(resultData200);
            return Promise.resolve<PatientViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientViewResult>(null as any);
    }

    /**
     * 患者信息 -- 电子病历列表也新增批量打印透析卡号二维码（使用最新的卡号）
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/别名/五笔码/拼音码/透析卡号/住院号/门诊号/证件号 *选填
     * @param today (optional) 是否本日透析患者
     * @param mine (optional) 是否我的患者
     * @param body (optional) 患者集合
     * @return Success
     */
    filterPOST(filter: string | undefined, key: string | undefined, today: string | undefined, mine: string | undefined, body: string[] | undefined , cancelToken?: CancelToken | undefined): Promise<PatientCardPrintViewResult> {
        let url_ = this.baseUrl + "/api/Patient/Print/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (today === null)
            throw new Error("The parameter 'today' cannot be null.");
        else if (today !== undefined)
            url_ += "today=" + encodeURIComponent("" + today) + "&";
        if (mine === null)
            throw new Error("The parameter 'mine' cannot be null.");
        else if (mine !== undefined)
            url_ += "mine=" + encodeURIComponent("" + mine) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterPOST(_response));
        });
    }

    protected processFilterPOST(response: AxiosResponse): Promise<PatientCardPrintViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientCardPrintViewResult.fromJS(resultData200);
            return Promise.resolve<PatientCardPrintViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientCardPrintViewResult>(null as any);
    }

    /**
     * 患者信息 -- 患者导出
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/别名/五笔码/拼音码/透析卡号/住院号/门诊号/证件号 *选填
     * @param today (optional) 是否本日透析患者
     * @param mine (optional) 是否我的患者
     * @param order (optional)
     * @param body (optional) 患者集合
     * @return Success
     */
    exportPOST(filter: string | undefined, key: string | undefined, today: string | undefined, mine: string | undefined, order: string | undefined, body: string[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Patient/All/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (today === null)
            throw new Error("The parameter 'today' cannot be null.");
        else if (today !== undefined)
            url_ += "today=" + encodeURIComponent("" + today) + "&";
        if (mine === null)
            throw new Error("The parameter 'mine' cannot be null.");
        else if (mine !== undefined)
            url_ += "mine=" + encodeURIComponent("" + mine) + "&";
        if (order === null)
            throw new Error("The parameter 'order' cannot be null.");
        else if (order !== undefined)
            url_ += "order=" + encodeURIComponent("" + order) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportPOST(_response));
        });
    }

    protected processExportPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者信息 -- 排床，获取可以排床的患者(根据阴阳属性获取本日未排床的患者)
     * @param dialysisDate (optional) 透析日期
     * @param positive (optional) 阴阳属性
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/别名/五笔码/拼音码/透析卡号/就诊卡号 *选填
     * @return Success
     */
    cureSchedule(dialysisDate: dayjs.Dayjs | undefined, positive: number | undefined, filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientViewResult> {
        let url_ = this.baseUrl + "/api/Patient/CureSchedule?";
        if (dialysisDate === null)
            throw new Error("The parameter 'dialysisDate' cannot be null.");
        else if (dialysisDate !== undefined)
            url_ += "dialysisDate=" + encodeURIComponent(dialysisDate ? "" + dialysisDate.toISOString() : "") + "&";
        if (positive === null)
            throw new Error("The parameter 'positive' cannot be null.");
        else if (positive !== undefined)
            url_ += "positive=" + encodeURIComponent("" + positive) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureSchedule(_response));
        });
    }

    protected processCureSchedule(response: AxiosResponse): Promise<PatientViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientViewResult.fromJS(resultData200);
            return Promise.resolve<PatientViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientViewResult>(null as any);
    }

    /**
     * 患者信息 -- 排床模板，获取可以排床的患者(根据阴阳属性获取本日未排床的患者)
     * @param tmplCureScheduleId (optional) 排床模板标识
     * @param weekday (optional) 透析日 `DIC.DIALYSIS.WEEKDAY`
     * @param positive (optional) 阴阳属性
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/别名/五笔码/拼音码/透析卡号/就诊卡号 *选填
     * @return Success
     */
    tmplCureSchedule(tmplCureScheduleId: string | undefined, weekday: number | undefined, positive: number | undefined, filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientViewResult> {
        let url_ = this.baseUrl + "/api/Patient/TmplCureSchedule?";
        if (tmplCureScheduleId === null)
            throw new Error("The parameter 'tmplCureScheduleId' cannot be null.");
        else if (tmplCureScheduleId !== undefined)
            url_ += "tmplCureScheduleId=" + encodeURIComponent("" + tmplCureScheduleId) + "&";
        if (weekday === null)
            throw new Error("The parameter 'weekday' cannot be null.");
        else if (weekday !== undefined)
            url_ += "weekday=" + encodeURIComponent("" + weekday) + "&";
        if (positive === null)
            throw new Error("The parameter 'positive' cannot be null.");
        else if (positive !== undefined)
            url_ += "positive=" + encodeURIComponent("" + positive) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTmplCureSchedule(_response));
        });
    }

    protected processTmplCureSchedule(response: AxiosResponse): Promise<PatientViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientViewResult.fromJS(resultData200);
            return Promise.resolve<PatientViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientViewResult>(null as any);
    }

    /**
     * 患者信息 -- 排床模板，获取可以排床的患者(根据阴阳属性获取本日未排床的患者)
     * @param tmplCureShiftId (optional) 排班模板标识
     * @param weekday (optional) 透析日 `DIC.DIALYSIS.WEEKDAY`
     * @param shiftId (optional) 班次 `DIC.DIALYSIS.SHIFT`
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/别名/五笔码/拼音码/透析卡号/就诊卡号 *选填
     * @return Success
     */
    tmplCureShift(tmplCureShiftId: string | undefined, weekday: number | undefined, shiftId: string | undefined, filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientViewResult> {
        let url_ = this.baseUrl + "/api/Patient/TmplCureShift?";
        if (tmplCureShiftId === null)
            throw new Error("The parameter 'tmplCureShiftId' cannot be null.");
        else if (tmplCureShiftId !== undefined)
            url_ += "tmplCureShiftId=" + encodeURIComponent("" + tmplCureShiftId) + "&";
        if (weekday === null)
            throw new Error("The parameter 'weekday' cannot be null.");
        else if (weekday !== undefined)
            url_ += "weekday=" + encodeURIComponent("" + weekday) + "&";
        if (shiftId === null)
            throw new Error("The parameter 'shiftId' cannot be null.");
        else if (shiftId !== undefined)
            url_ += "shiftId=" + encodeURIComponent("" + shiftId) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTmplCureShift(_response));
        });
    }

    protected processTmplCureShift(response: AxiosResponse): Promise<PatientViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientViewResult.fromJS(resultData200);
            return Promise.resolve<PatientViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientViewResult>(null as any);
    }

    /**
     * 患者信息 -- 干体重、血管通路、抗凝剂汇总
     * @param id 查询条件
     * @return Success
     */
    summary(id: string , cancelToken?: CancelToken | undefined): Promise<PatientSummaryViewResult> {
        let url_ = this.baseUrl + "/api/Patient/Summary/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSummary(_response));
        });
    }

    protected processSummary(response: AxiosResponse): Promise<PatientSummaryViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientSummaryViewResult.fromJS(resultData200);
            return Promise.resolve<PatientSummaryViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientSummaryViewResult>(null as any);
    }

    /**
     * 患者信息 -- 病史记录
     * @param id 查询条件
     * @return Success
     */
    history(id: string , cancelToken?: CancelToken | undefined): Promise<PatientDiagnosisViewResult> {
        let url_ = this.baseUrl + "/api/Patient/History/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHistory(_response));
        });
    }

    protected processHistory(response: AxiosResponse): Promise<PatientDiagnosisViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDiagnosisViewResult.fromJS(resultData200);
            return Promise.resolve<PatientDiagnosisViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDiagnosisViewResult>(null as any);
    }

    /**
     * 患者信息 -- 评估信息
     * @param id 患者标识
     * @param filter (optional) 查询条件
     * @return Success
     */
    assement(id: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientAssementViewResult> {
        let url_ = this.baseUrl + "/api/Patient/Assement/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAssement(_response));
        });
    }

    protected processAssement(response: AxiosResponse): Promise<PatientAssementViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientAssementViewResult.fromJS(resultData200);
            return Promise.resolve<PatientAssementViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientAssementViewResult>(null as any);
    }

    /**
     * 患者信息 -- 评估内容
     * @param assementId 评估标识
     * @return Success
     */
    detail(assementId: string , cancelToken?: CancelToken | undefined): Promise<PatientAssementViewResultEntry> {
        let url_ = this.baseUrl + "/api/Patient/Assement/Detail/{assementId}";
        if (assementId === undefined || assementId === null)
            throw new Error("The parameter 'assementId' must be defined.");
        url_ = url_.replace("{assementId}", encodeURIComponent("" + assementId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetail(_response));
        });
    }

    protected processDetail(response: AxiosResponse): Promise<PatientAssementViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientAssementViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientAssementViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientAssementViewResultEntry>(null as any);
    }

    /**
     * 患者信息 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientPOST2(body: PatientEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Patient";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientPOST2(_response));
        });
    }

    protected processPatientPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者信息 -- 根据Id删除数据
     * @return Success
     */
    delete(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Patient/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete(_response));
        });
    }

    protected processDelete(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 从 Excel 读取患者信息
     * @param fileId Excel 文件 Id
     * @return Success
     */
    readFromExcel(fileId: string , cancelToken?: CancelToken | undefined): Promise<PatientExcelViewResult> {
        let url_ = this.baseUrl + "/api/Patient/ReadFromExcel/{fileId}";
        if (fileId === undefined || fileId === null)
            throw new Error("The parameter 'fileId' must be defined.");
        url_ = url_.replace("{fileId}", encodeURIComponent("" + fileId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processReadFromExcel(_response));
        });
    }

    protected processReadFromExcel(response: AxiosResponse): Promise<PatientExcelViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientExcelViewResult.fromJS(resultData200);
            return Promise.resolve<PatientExcelViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientExcelViewResult>(null as any);
    }

    /**
     * 从 Excel 读取的数据 导入/更新 患者信息
     * @param body (optional) 从 Excel 读取到的患者信息
     * @return Success
     */
    convertFromExcel(body: PatientExcelView[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Patient/ConvertFromExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processConvertFromExcel(_response));
        });
    }

    protected processConvertFromExcel(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者信息 -- 透析医嘱信息 -- 查询
     * @param filter (optional)
     * @param key (optional)
     * @return Success
     */
    cureDa(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientBatchCureDaViewResult> {
        let url_ = this.baseUrl + "/api/Patient/CureDa?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureDa(_response));
        });
    }

    protected processCureDa(response: AxiosResponse): Promise<PatientBatchCureDaViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientBatchCureDaViewResult.fromJS(resultData200);
            return Promise.resolve<PatientBatchCureDaViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientBatchCureDaViewResult>(null as any);
    }

    /**
     * 患者信息 -- 透析医嘱信息 -- 导出
     * @param filter (optional)
     * @param key (optional)
     * @return Success
     */
    exportGET(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Patient/CureDa/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET(_response));
        });
    }

    protected processExportGET(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者信息 -- 透中监测 -- 查询
     * @param filter (optional)
     * @param key (optional)
     * @return Success
     */
    cureMonitor(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientBatchCureMonitorViewResult> {
        let url_ = this.baseUrl + "/api/Patient/CureMonitor?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureMonitor(_response));
        });
    }

    protected processCureMonitor(response: AxiosResponse): Promise<PatientBatchCureMonitorViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientBatchCureMonitorViewResult.fromJS(resultData200);
            return Promise.resolve<PatientBatchCureMonitorViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientBatchCureMonitorViewResult>(null as any);
    }

    /**
     * 患者信息 -- 透中监测 -- 导出
     * @param filter (optional)
     * @param key (optional)
     * @return Success
     */
    exportGET2(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Patient/CureMonitor/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET2(_response));
        });
    }

    protected processExportGET2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者信息 -- 透析测量 -- 查询
     * @param filter (optional)
     * @param key (optional)
     * @return Success
     */
    cureMeasure(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientBatchCureMeasureViewResult> {
        let url_ = this.baseUrl + "/api/Patient/CureMeasure?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureMeasure(_response));
        });
    }

    protected processCureMeasure(response: AxiosResponse): Promise<PatientBatchCureMeasureViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientBatchCureMeasureViewResult.fromJS(resultData200);
            return Promise.resolve<PatientBatchCureMeasureViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientBatchCureMeasureViewResult>(null as any);
    }

    /**
     * 患者信息 -- 透析测量 -- 导出
     * @param filter (optional)
     * @param key (optional)
     * @return Success
     */
    exportGET3(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Patient/CureMeasure/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET3(_response));
        });
    }

    protected processExportGET3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者信息 -- 透析充分性 -- 查询
     * @param filter (optional)
     * @param key (optional)
     * @return Success
     */
    hemodialysisAdequacy(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientBatchHemodialysisAdequacyViewResult> {
        let url_ = this.baseUrl + "/api/Patient/HemodialysisAdequacy?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHemodialysisAdequacy(_response));
        });
    }

    protected processHemodialysisAdequacy(response: AxiosResponse): Promise<PatientBatchHemodialysisAdequacyViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientBatchHemodialysisAdequacyViewResult.fromJS(resultData200);
            return Promise.resolve<PatientBatchHemodialysisAdequacyViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientBatchHemodialysisAdequacyViewResult>(null as any);
    }

    /**
     * 患者信息 -- 透析充分性 -- 导出
     * @param filter (optional)
     * @param key (optional)
     * @return Success
     */
    exportGET4(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Patient/HemodialysisAdequacy/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET4(_response));
        });
    }

    protected processExportGET4(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者信息 -- 检验信息 -- 查询
     * @param filter (optional)
     * @param key (optional)
     * @return Success
     */
    lisReport(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientBatchLisReportViewResult> {
        let url_ = this.baseUrl + "/api/Patient/LisReport?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processLisReport(_response));
        });
    }

    protected processLisReport(response: AxiosResponse): Promise<PatientBatchLisReportViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientBatchLisReportViewResult.fromJS(resultData200);
            return Promise.resolve<PatientBatchLisReportViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientBatchLisReportViewResult>(null as any);
    }

    /**
     * 患者信息 -- 检验信息 -- 导出
     * @param filter (optional)
     * @param key (optional)
     * @return Success
     */
    exportGET5(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Patient/LisReport/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET5(_response));
        });
    }

    protected processExportGET5(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者信息 -- 干体重 -- 查询
     * @param filter (optional)
     * @param key (optional)
     * @return Success
     */
    weightBest(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientBatchWeightBestViewResult> {
        let url_ = this.baseUrl + "/api/Patient/WeightBest?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processWeightBest(_response));
        });
    }

    protected processWeightBest(response: AxiosResponse): Promise<PatientBatchWeightBestViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientBatchWeightBestViewResult.fromJS(resultData200);
            return Promise.resolve<PatientBatchWeightBestViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientBatchWeightBestViewResult>(null as any);
    }

    /**
     * 患者信息 -- 干体重 -- 导出
     * @param filter (optional)
     * @param key (optional)
     * @return Success
     */
    exportGET6(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Patient/WeightBest/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET6(_response));
        });
    }

    protected processExportGET6(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者信息 -- 体重 -- 查询
     * @param filter (optional)
     * @param key (optional)
     * @return Success
     */
    weight(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientBatchWeightViewResult> {
        let url_ = this.baseUrl + "/api/Patient/Weight?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processWeight(_response));
        });
    }

    protected processWeight(response: AxiosResponse): Promise<PatientBatchWeightViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientBatchWeightViewResult.fromJS(resultData200);
            return Promise.resolve<PatientBatchWeightViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientBatchWeightViewResult>(null as any);
    }

    /**
     * 患者信息 -- 体重 -- 导出
     * @param filter (optional)
     * @param key (optional)
     * @return Success
     */
    exportGET7(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Patient/Weight/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET7(_response));
        });
    }

    protected processExportGET7(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者信息 -- 血压 -- 查询
     * @param filter (optional)
     * @param key (optional)
     * @return Success
     */
    bloodPressure(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientBatchBloodPressureViewResult> {
        let url_ = this.baseUrl + "/api/Patient/BloodPressure?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBloodPressure(_response));
        });
    }

    protected processBloodPressure(response: AxiosResponse): Promise<PatientBatchBloodPressureViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientBatchBloodPressureViewResult.fromJS(resultData200);
            return Promise.resolve<PatientBatchBloodPressureViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientBatchBloodPressureViewResult>(null as any);
    }

    /**
     * 患者信息 -- 血压 -- 导出
     * @param filter (optional)
     * @param key (optional)
     * @return Success
     */
    exportGET8(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Patient/BloodPressure/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET8(_response));
        });
    }

    protected processExportGET8(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者信息 -- 透析记录单 -- 查询
     * @param filter (optional)
     * @param key (optional)
     * @param desc (optional)
     * @return Success
     */
    cureRecord(filter: string | undefined, key: string | undefined, desc: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<PatientBatchCureRecordViewResult> {
        let url_ = this.baseUrl + "/api/Patient/CureRecord?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (desc === null)
            throw new Error("The parameter 'desc' cannot be null.");
        else if (desc !== undefined)
            url_ += "desc=" + encodeURIComponent("" + desc) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecord(_response));
        });
    }

    protected processCureRecord(response: AxiosResponse): Promise<PatientBatchCureRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientBatchCureRecordViewResult.fromJS(resultData200);
            return Promise.resolve<PatientBatchCureRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientBatchCureRecordViewResult>(null as any);
    }

    /**
     * 患者信息 -- 透析记录单 -- 导出
     * @param filter (optional)
     * @param key (optional)
     * @param desc (optional)
     * @return Success
     */
    exportGET9(filter: string | undefined, key: string | undefined, desc: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Patient/CureRecord/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (desc === null)
            throw new Error("The parameter 'desc' cannot be null.");
        else if (desc !== undefined)
            url_ += "desc=" + encodeURIComponent("" + desc) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET9(_response));
        });
    }

    protected processExportGET9(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 通过患者ID编辑证件号，医保号，就诊卡号
     * @param body (optional)
     * @return Success
     */
    updatePatientNumber(id: string, body: PatientCardNumberEdit | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Patient/UpdatePatientNumber/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdatePatientNumber(_response));
        });
    }

    protected processUpdatePatientNumber(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者指纹采集
     * @param patientId (optional)
     * @param body (optional)
     * @return Success
     */
    fingerRegister(patientId: string | undefined, body: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Patient/FingerRegister?";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFingerRegister(_response));
        });
    }

    protected processFingerRegister(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者人脸更新
     * @param patientId (optional)
     * @return Success
     */
    faceUpdate(patientId: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Patient/FaceUpdate?";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFaceUpdate(_response));
        });
    }

    protected processFaceUpdate(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者体重血压导出
     * @param startDate (optional)
     * @param endDate (optional)
     * @param patientid (optional)
     * @param filter (optional)
     * @return Success
     */
    exportGET10(startDate: string | undefined, endDate: string | undefined, patientid: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Patient/WeightPressure/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (patientid === null)
            throw new Error("The parameter 'patientid' cannot be null.");
        else if (patientid !== undefined)
            url_ += "patientid=" + encodeURIComponent("" + patientid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET10(_response));
        });
    }

    protected processExportGET10(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者体重血压打印
     * @param startDate (optional)
     * @param endDate (optional)
     * @param patientid (optional)
     * @param filter (optional)
     * @return Success
     */
    search(startDate: string | undefined, endDate: string | undefined, patientid: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<ExportPatientWeightAndPressureViewResult> {
        let url_ = this.baseUrl + "/api/Patient/WeightPressure/Search?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (patientid === null)
            throw new Error("The parameter 'patientid' cannot be null.");
        else if (patientid !== undefined)
            url_ += "patientid=" + encodeURIComponent("" + patientid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSearch(_response));
        });
    }

    protected processSearch(response: AxiosResponse): Promise<ExportPatientWeightAndPressureViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ExportPatientWeightAndPressureViewResult.fromJS(resultData200);
            return Promise.resolve<ExportPatientWeightAndPressureViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ExportPatientWeightAndPressureViewResult>(null as any);
    }
}

export class PatientArchiveServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 档案管理 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientArchiveGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientArchiveViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientArchive/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientArchiveGET(_response));
        });
    }

    protected processPatientArchiveGET(response: AxiosResponse): Promise<PatientArchiveViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientArchiveViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientArchiveViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientArchiveViewResultEntry>(null as any);
    }

    /**
     * 档案管理 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientArchivePOST(id: string, body: PatientArchiveEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientArchive/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientArchivePOST(_response));
        });
    }

    protected processPatientArchivePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 档案管理 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET2(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientArchiveViewResult> {
        let url_ = this.baseUrl + "/api/PatientArchive/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET2(_response));
        });
    }

    protected processFilterGET2(response: AxiosResponse): Promise<PatientArchiveViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientArchiveViewResult.fromJS(resultData200);
            return Promise.resolve<PatientArchiveViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientArchiveViewResult>(null as any);
    }

    /**
     * 档案管理 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientArchivePOST2(body: PatientArchiveEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientArchive";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientArchivePOST2(_response));
        });
    }

    protected processPatientArchivePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 档案管理 -- 根据Id删除数据
     * @return Success
     */
    delete2(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientArchive/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete2(_response));
        });
    }

    protected processDelete2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientArchiveFileServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 档案管理附件 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientArchiveFileGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientArchiveFileResultEntry> {
        let url_ = this.baseUrl + "/api/PatientArchiveFile/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientArchiveFileGET(_response));
        });
    }

    protected processPatientArchiveFileGET(response: AxiosResponse): Promise<PatientArchiveFileResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientArchiveFileResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientArchiveFileResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientArchiveFileResultEntry>(null as any);
    }

    /**
     * 档案管理附件 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientArchiveFilePOST(id: string, body: PatientArchiveFileViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientArchiveFile/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientArchiveFilePOST(_response));
        });
    }

    protected processPatientArchiveFilePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 档案管理附件 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET3(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientArchiveFileResult> {
        let url_ = this.baseUrl + "/api/PatientArchiveFile/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET3(_response));
        });
    }

    protected processFilterGET3(response: AxiosResponse): Promise<PatientArchiveFileResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientArchiveFileResult.fromJS(resultData200);
            return Promise.resolve<PatientArchiveFileResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientArchiveFileResult>(null as any);
    }

    /**
     * 档案管理附件 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientArchiveFilePOST2(body: PatientArchiveFileViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientArchiveFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientArchiveFilePOST2(_response));
        });
    }

    protected processPatientArchiveFilePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 档案管理附件 -- 根据Id删除数据
     * @return Success
     */
    delete3(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientArchiveFile/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete3(_response));
        });
    }

    protected processDelete3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientAssementServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 评估 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientAssementGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientAssementResultEntry> {
        let url_ = this.baseUrl + "/api/PatientAssement/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientAssementGET(_response));
        });
    }

    protected processPatientAssementGET(response: AxiosResponse): Promise<PatientAssementResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientAssementResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientAssementResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientAssementResultEntry>(null as any);
    }

    /**
     * 评估 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientAssementPOST(id: string, body: PatientAssementViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientAssement/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientAssementPOST(_response));
        });
    }

    protected processPatientAssementPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 评估 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET4(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientAssementResult> {
        let url_ = this.baseUrl + "/api/PatientAssement/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET4(_response));
        });
    }

    protected processFilterGET4(response: AxiosResponse): Promise<PatientAssementResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientAssementResult.fromJS(resultData200);
            return Promise.resolve<PatientAssementResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientAssementResult>(null as any);
    }

    /**
     * 评估 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientAssementPOST2(body: PatientAssementViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientAssement";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientAssementPOST2(_response));
        });
    }

    protected processPatientAssementPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 评估 -- 根据Id删除数据
     * @return Success
     */
    delete4(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientAssement/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete4(_response));
        });
    }

    protected processDelete4(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientAuxiliaryInspectionServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 辅助检查上报 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientAuxiliaryInspectionGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientAuxiliaryInspectionViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientAuxiliaryInspection/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientAuxiliaryInspectionGET(_response));
        });
    }

    protected processPatientAuxiliaryInspectionGET(response: AxiosResponse): Promise<PatientAuxiliaryInspectionViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientAuxiliaryInspectionViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientAuxiliaryInspectionViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientAuxiliaryInspectionViewResultEntry>(null as any);
    }

    /**
     * 辅助检查上报 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientAuxiliaryInspectionPOST(id: string, body: PatientAuxiliaryInspectionEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientAuxiliaryInspection/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientAuxiliaryInspectionPOST(_response));
        });
    }

    protected processPatientAuxiliaryInspectionPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 辅助检查上报 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET5(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientAuxiliaryInspectionViewResult> {
        let url_ = this.baseUrl + "/api/PatientAuxiliaryInspection/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET5(_response));
        });
    }

    protected processFilterGET5(response: AxiosResponse): Promise<PatientAuxiliaryInspectionViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientAuxiliaryInspectionViewResult.fromJS(resultData200);
            return Promise.resolve<PatientAuxiliaryInspectionViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientAuxiliaryInspectionViewResult>(null as any);
    }

    /**
     * 辅助检查上报 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientAuxiliaryInspectionPOST2(body: PatientAuxiliaryInspectionEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientAuxiliaryInspection";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientAuxiliaryInspectionPOST2(_response));
        });
    }

    protected processPatientAuxiliaryInspectionPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 辅助检查上报 -- 根据Id删除数据
     * @return Success
     */
    delete5(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientAuxiliaryInspection/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete5(_response));
        });
    }

    protected processDelete5(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者辅助检查
     * @param filter (optional)
     * @return Success
     */
    groupView(patientId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientAuxiliaryInspectionGroupViewResult> {
        let url_ = this.baseUrl + "/api/PatientAuxiliaryInspection/GroupView/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGroupView(_response));
        });
    }

    protected processGroupView(response: AxiosResponse): Promise<PatientAuxiliaryInspectionGroupViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientAuxiliaryInspectionGroupViewResult.fromJS(resultData200);
            return Promise.resolve<PatientAuxiliaryInspectionGroupViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientAuxiliaryInspectionGroupViewResult>(null as any);
    }
}

export class PatientBloodPressureServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 血压记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientBloodPressureGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientBloodPressureViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientBloodPressure/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientBloodPressureGET(_response));
        });
    }

    protected processPatientBloodPressureGET(response: AxiosResponse): Promise<PatientBloodPressureViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientBloodPressureViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientBloodPressureViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientBloodPressureViewResultEntry>(null as any);
    }

    /**
     * 血压记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientBloodPressurePOST(id: string, body: PatientBloodPressureViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientBloodPressure/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientBloodPressurePOST(_response));
        });
    }

    protected processPatientBloodPressurePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 血压记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param patientId (optional) 患者标识
     * @return Success
     */
    filterGET6(filter: string | undefined, patientId: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientBloodPressureViewResult> {
        let url_ = this.baseUrl + "/api/PatientBloodPressure/Filter?";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET6(_response));
        });
    }

    protected processFilterGET6(response: AxiosResponse): Promise<PatientBloodPressureViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientBloodPressureViewResult.fromJS(resultData200);
            return Promise.resolve<PatientBloodPressureViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientBloodPressureViewResult>(null as any);
    }

    /**
     * 血压记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientBloodPressurePOST2(body: PatientBloodPressureViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientBloodPressure";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientBloodPressurePOST2(_response));
        });
    }

    protected processPatientBloodPressurePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 血压记录 -- 根据Id删除数据
     * @return Success
     */
    delete6(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientBloodPressure/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete6(_response));
        });
    }

    protected processDelete6(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientCardsServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者透析卡 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientCardsGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientCardsResultEntry> {
        let url_ = this.baseUrl + "/api/PatientCards/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientCardsGET(_response));
        });
    }

    protected processPatientCardsGET(response: AxiosResponse): Promise<PatientCardsResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientCardsResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientCardsResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientCardsResultEntry>(null as any);
    }

    /**
     * 患者透析卡 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientCardsPOST(id: string, body: PatientCardsViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientCards/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientCardsPOST(_response));
        });
    }

    protected processPatientCardsPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者透析卡 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    getPatientCardsByFilter(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientCardsResult> {
        let url_ = this.baseUrl + "/api/PatientCards/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetPatientCardsByFilter(_response));
        });
    }

    protected processGetPatientCardsByFilter(response: AxiosResponse): Promise<PatientCardsResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientCardsResult.fromJS(resultData200);
            return Promise.resolve<PatientCardsResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientCardsResult>(null as any);
    }

    /**
     * 患者透析卡 -- 根据患者ID查询
     * @return Success
     */
    byPatientId(patientId: string , cancelToken?: CancelToken | undefined): Promise<PatientCardsViewResult> {
        let url_ = this.baseUrl + "/api/PatientCards/ByPatientId/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processByPatientId(_response));
        });
    }

    protected processByPatientId(response: AxiosResponse): Promise<PatientCardsViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientCardsViewResult.fromJS(resultData200);
            return Promise.resolve<PatientCardsViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientCardsViewResult>(null as any);
    }

    /**
     * 患者透析卡 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientCardsPOST2(body: PatientCardsViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientCards";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientCardsPOST2(_response));
        });
    }

    protected processPatientCardsPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者透析卡 -- 禁用/启用
     * @return Success
     */
    switch(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientCards/{id}/Switch";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSwitch(_response));
        });
    }

    protected processSwitch(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者透析卡 -- 根据Id删除数据
     * @return Success
     */
    delete7(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientCards/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete7(_response));
        });
    }

    protected processDelete7(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientContactsServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 联系人 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientContactsGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientContactsResultEntry> {
        let url_ = this.baseUrl + "/api/PatientContacts/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientContactsGET(_response));
        });
    }

    protected processPatientContactsGET(response: AxiosResponse): Promise<PatientContactsResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientContactsResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientContactsResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientContactsResultEntry>(null as any);
    }

    /**
     * 联系人 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientContactsPOST(id: string, body: PatientContactsViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientContacts/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientContactsPOST(_response));
        });
    }

    protected processPatientContactsPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 联系人 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET7(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientContactsResult> {
        let url_ = this.baseUrl + "/api/PatientContacts/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET7(_response));
        });
    }

    protected processFilterGET7(response: AxiosResponse): Promise<PatientContactsResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientContactsResult.fromJS(resultData200);
            return Promise.resolve<PatientContactsResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientContactsResult>(null as any);
    }

    /**
     * 联系人 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientContactsPOST2(body: PatientContactsViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientContacts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientContactsPOST2(_response));
        });
    }

    protected processPatientContactsPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 联系人 -- 根据Id删除数据
     * @return Success
     */
    delete8(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientContacts/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete8(_response));
        });
    }

    protected processDelete8(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientCourseRecordServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 病程记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientCourseRecordGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientCourseRecordViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientCourseRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientCourseRecordGET(_response));
        });
    }

    protected processPatientCourseRecordGET(response: AxiosResponse): Promise<PatientCourseRecordViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientCourseRecordViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientCourseRecordViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientCourseRecordViewResultEntry>(null as any);
    }

    /**
     * 病程记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientCourseRecordPOST(id: string, body: PatientCourseRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientCourseRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientCourseRecordPOST(_response));
        });
    }

    protected processPatientCourseRecordPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 病程记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET8(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientCourseRecordViewResult> {
        let url_ = this.baseUrl + "/api/PatientCourseRecord/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET8(_response));
        });
    }

    protected processFilterGET8(response: AxiosResponse): Promise<PatientCourseRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientCourseRecordViewResult.fromJS(resultData200);
            return Promise.resolve<PatientCourseRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientCourseRecordViewResult>(null as any);
    }

    /**
     * 根据透析记录单查询
     * @param filter (optional)
     * @return Success
     */
    cureRecordId(cureRecordId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientCourseRecordViewResult> {
        let url_ = this.baseUrl + "/api/PatientCourseRecord/cureRecordId/{cureRecordId}";
        if (cureRecordId === undefined || cureRecordId === null)
            throw new Error("The parameter 'cureRecordId' must be defined.");
        url_ = url_.replace("{cureRecordId}", encodeURIComponent("" + cureRecordId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordId(_response));
        });
    }

    protected processCureRecordId(response: AxiosResponse): Promise<PatientCourseRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientCourseRecordViewResult.fromJS(resultData200);
            return Promise.resolve<PatientCourseRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientCourseRecordViewResult>(null as any);
    }

    /**
     * 病程记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientCourseRecordPOST2(body: PatientCourseRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientCourseRecord";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientCourseRecordPOST2(_response));
        });
    }

    protected processPatientCourseRecordPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 病程记录 -- 根据Id删除数据
     * @return Success
     */
    delete9(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientCourseRecord/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete9(_response));
        });
    }

    protected processDelete9(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientDaHisServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * HIS医嘱 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientDaHisGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientDaHisViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientDaHis/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDaHisGET(_response));
        });
    }

    protected processPatientDaHisGET(response: AxiosResponse): Promise<PatientDaHisViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDaHisViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientDaHisViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDaHisViewResultEntry>(null as any);
    }

    /**
     * HIS医嘱 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientDaHisPOST(id: string, body: PatientDaHisEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDaHis/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDaHisPOST(_response));
        });
    }

    protected processPatientDaHisPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * HIS医嘱 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET9(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientDaHisViewResult> {
        let url_ = this.baseUrl + "/api/PatientDaHis/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET9(_response));
        });
    }

    protected processFilterGET9(response: AxiosResponse): Promise<PatientDaHisViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDaHisViewResult.fromJS(resultData200);
            return Promise.resolve<PatientDaHisViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDaHisViewResult>(null as any);
    }

    /**
     * HIS医嘱 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientDaHisPOST2(body: PatientDaHisEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDaHis";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDaHisPOST2(_response));
        });
    }

    protected processPatientDaHisPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * HIS医嘱 -- 根据Id删除数据
     * @return Success
     */
    delete10(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDaHis/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete10(_response));
        });
    }

    protected processDelete10(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientDaLongtermServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 长期医嘱 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientDaLongtermGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientDaLongtermResultEntry> {
        let url_ = this.baseUrl + "/api/PatientDaLongterm/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDaLongtermGET(_response));
        });
    }

    protected processPatientDaLongtermGET(response: AxiosResponse): Promise<PatientDaLongtermResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDaLongtermResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientDaLongtermResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDaLongtermResultEntry>(null as any);
    }

    /**
     * 长期医嘱 -- 根据 名称/拼音码/五笔码/id 条件查询数据，用于快速定位项目
     * @param key 名称/拼音码/五笔码/id
     * @return Success
     */
    getByKey(key: string , cancelToken?: CancelToken | undefined): Promise<PatientDaLongtermViewResult> {
        let url_ = this.baseUrl + "/api/PatientDaLongterm/GetByKey/{key}";
        if (key === undefined || key === null)
            throw new Error("The parameter 'key' must be defined.");
        url_ = url_.replace("{key}", encodeURIComponent("" + key));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetByKey(_response));
        });
    }

    protected processGetByKey(response: AxiosResponse): Promise<PatientDaLongtermViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDaLongtermViewResult.fromJS(resultData200);
            return Promise.resolve<PatientDaLongtermViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDaLongtermViewResult>(null as any);
    }

    /**
     * 长期医嘱 -- 根据患者ID查询数据
     * @param filter (optional)
     * @param key (optional) 名称/拼音码/五笔码
     * @return Success
     */
    filterGET10(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientDaLongtermViewResult> {
        let url_ = this.baseUrl + "/api/PatientDaLongterm/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET10(_response));
        });
    }

    protected processFilterGET10(response: AxiosResponse): Promise<PatientDaLongtermViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDaLongtermViewResult.fromJS(resultData200);
            return Promise.resolve<PatientDaLongtermViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDaLongtermViewResult>(null as any);
    }

    /**
     * 长期医嘱 -- 根据患者ID查询数据
     * @param filter (optional)
     * @param key (optional) 名称/拼音码/五笔码
     * @return Success
     */
    exportGET11(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDaLongterm/Filter/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET11(_response));
        });
    }

    protected processExportGET11(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 长期医嘱 -- 根据患者ID查询数据
     * @param filter (optional)
     * @param key (optional) 名称/拼音码/五笔码
     * @return Success
     */
    byPatientId2(filter: string | undefined, patientId: string, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientDaLongtermViewResult> {
        let url_ = this.baseUrl + "/api/PatientDaLongterm/ByPatientId/{patientId}?";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processByPatientId2(_response));
        });
    }

    protected processByPatientId2(response: AxiosResponse): Promise<PatientDaLongtermViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDaLongtermViewResult.fromJS(resultData200);
            return Promise.resolve<PatientDaLongtermViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDaLongtermViewResult>(null as any);
    }

    /**
     * 长期医嘱 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientDaLongtermPOST(body: PatientDaLongtermEditModel[][] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDaLongterm";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDaLongtermPOST(_response));
        });
    }

    protected processPatientDaLongtermPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 长期医嘱 -- 根据组合ID分解
     * @param body (optional) 组合ID
     * @return Success
     */
    resolve(body: string[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDaLongterm/Resolve";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processResolve(_response));
        });
    }

    protected processResolve(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 长期医嘱 -- 根据组合ID停药
     * @param groupId 组合ID
     * @return Success
     */
    batch(groupId: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDaLongterm/Batch/{groupId}";
        if (groupId === undefined || groupId === null)
            throw new Error("The parameter 'groupId' must be defined.");
        url_ = url_.replace("{groupId}", encodeURIComponent("" + groupId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatch(_response));
        });
    }

    protected processBatch(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 长期医嘱 -- 根据Id删除数据
     * @return Success
     */
    delete11(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDaLongterm/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete11(_response));
        });
    }

    protected processDelete11(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientDaTemporaryServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 临时医嘱 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientDaTemporaryGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientDaTemporaryResultEntry> {
        let url_ = this.baseUrl + "/api/PatientDaTemporary/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDaTemporaryGET(_response));
        });
    }

    protected processPatientDaTemporaryGET(response: AxiosResponse): Promise<PatientDaTemporaryResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDaTemporaryResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientDaTemporaryResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDaTemporaryResultEntry>(null as any);
    }

    /**
     * 临时医嘱 -- 撤销
     * @return Success
     */
    patientDaTemporaryPOST(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDaTemporary/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDaTemporaryPOST(_response));
        });
    }

    protected processPatientDaTemporaryPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 临时医嘱 -- 根据 名称/拼音码/五笔码/id 条件查询数据，用于快速定位项目
     * @param key 名称/拼音码/五笔码/id
     * @return Success
     */
    getByKey2(key: string , cancelToken?: CancelToken | undefined): Promise<PatientDaTemporaryViewResult> {
        let url_ = this.baseUrl + "/api/PatientDaTemporary/GetByKey/{key}";
        if (key === undefined || key === null)
            throw new Error("The parameter 'key' must be defined.");
        url_ = url_.replace("{key}", encodeURIComponent("" + key));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetByKey2(_response));
        });
    }

    protected processGetByKey2(response: AxiosResponse): Promise<PatientDaTemporaryViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDaTemporaryViewResult.fromJS(resultData200);
            return Promise.resolve<PatientDaTemporaryViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDaTemporaryViewResult>(null as any);
    }

    /**
     * 临时医嘱 -- 根据项目信息模糊查询数据
     * @param filter (optional)
     * @param key (optional) 项目 - 名称/拼音码/五笔码
     * @return Success
     */
    filterGET11(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientDaTemporaryViewResult> {
        let url_ = this.baseUrl + "/api/PatientDaTemporary/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET11(_response));
        });
    }

    protected processFilterGET11(response: AxiosResponse): Promise<PatientDaTemporaryViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDaTemporaryViewResult.fromJS(resultData200);
            return Promise.resolve<PatientDaTemporaryViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDaTemporaryViewResult>(null as any);
    }

    /**
     * 临时医嘱 -- 根据项目信息模糊查询数据
     * @param filter (optional)
     * @param key (optional) 项目 - 名称/拼音码/五笔码
     * @return Success
     */
    exportGET12(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDaTemporary/Filter/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET12(_response));
        });
    }

    protected processExportGET12(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 临时医嘱 -- 根据患者ID查询数据
     * @param filter (optional)
     * @param key (optional) 名称/拼音码/五笔码
     * @return Success
     */
    byPatientId3(filter: string | undefined, patientId: string, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientDaTemporaryViewResult> {
        let url_ = this.baseUrl + "/api/PatientDaTemporary/ByPatientId/{patientId}?";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processByPatientId3(_response));
        });
    }

    protected processByPatientId3(response: AxiosResponse): Promise<PatientDaTemporaryViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDaTemporaryViewResult.fromJS(resultData200);
            return Promise.resolve<PatientDaTemporaryViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDaTemporaryViewResult>(null as any);
    }

    /**
     * 临时医嘱 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientDaTemporaryPOST2(body: PatientDaTemporaryEditModel[][] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDaTemporary";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDaTemporaryPOST2(_response));
        });
    }

    protected processPatientDaTemporaryPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 临时医嘱 -- 根据组合ID撤销
     * @param groupId 组合ID
     * @return Success
     */
    batch2(groupId: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDaTemporary/Batch/{groupId}";
        if (groupId === undefined || groupId === null)
            throw new Error("The parameter 'groupId' must be defined.");
        url_ = url_.replace("{groupId}", encodeURIComponent("" + groupId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatch2(_response));
        });
    }

    protected processBatch2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 临时医嘱 -- 生成透析医嘱
     * @param body (optional)
     * @return Success
     */
    ids(body: string[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDaTemporary/ids";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processIds(_response));
        });
    }

    protected processIds(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 临时医嘱 -- 根据Id删除数据
     * @return Success
     */
    delete12(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDaTemporary/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete12(_response));
        });
    }

    protected processDelete12(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientDiagnosisAllergyServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 过敏诊断 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientDiagnosisAllergyGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientDiagnosisAllergyViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientDiagnosisAllergy/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDiagnosisAllergyGET(_response));
        });
    }

    protected processPatientDiagnosisAllergyGET(response: AxiosResponse): Promise<PatientDiagnosisAllergyViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDiagnosisAllergyViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientDiagnosisAllergyViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDiagnosisAllergyViewResultEntry>(null as any);
    }

    /**
     * 过敏诊断 -- 根据患者标识更新数据
     * @param id 患者标识
     * @param body (optional)
     * @return Success
     */
    patientDiagnosisAllergyPOST(id: string, body: PatientDiagnosisAllergyEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDiagnosisAllergy/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDiagnosisAllergyPOST(_response));
        });
    }

    protected processPatientDiagnosisAllergyPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 过敏诊断 -- 根据患者ID查询数据
     * @param patientId 患者ID
     * @return Success
     */
    byPatientId4(patientId: string , cancelToken?: CancelToken | undefined): Promise<PatientDiagnosisAllergyViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientDiagnosisAllergy/ByPatientId/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processByPatientId4(_response));
        });
    }

    protected processByPatientId4(response: AxiosResponse): Promise<PatientDiagnosisAllergyViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDiagnosisAllergyViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientDiagnosisAllergyViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDiagnosisAllergyViewResultEntry>(null as any);
    }

    /**
     * 过敏诊断 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientDiagnosisAllergyPOST2(body: PatientDiagnosisAllergyEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDiagnosisAllergy";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDiagnosisAllergyPOST2(_response));
        });
    }

    protected processPatientDiagnosisAllergyPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 过敏诊断 -- 更新患者状态
     * @param patientId 患者标识
     * @param body (optional)
     * @return Success
     */
    updatePatientDiagnosisAllergy(patientId: string, body: PatientDiagnosisEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDiagnosisAllergy/UpdatePatientDiagnosisAllergy/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdatePatientDiagnosisAllergy(_response));
        });
    }

    protected processUpdatePatientDiagnosisAllergy(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 过敏诊断 -- 根据Id删除数据
     * @return Success
     */
    delete13(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDiagnosisAllergy/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete13(_response));
        });
    }

    protected processDelete13(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientDiagnosisComplicationServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 并发症诊断 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientDiagnosisComplicationGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientDiagnosisComplicationViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientDiagnosisComplication/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDiagnosisComplicationGET(_response));
        });
    }

    protected processPatientDiagnosisComplicationGET(response: AxiosResponse): Promise<PatientDiagnosisComplicationViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDiagnosisComplicationViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientDiagnosisComplicationViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDiagnosisComplicationViewResultEntry>(null as any);
    }

    /**
     * 并发症诊断 -- 根据患者标识更新数据
     * @param id 患者标识
     * @param body (optional)
     * @return Success
     */
    patientDiagnosisComplicationPOST(id: string, body: PatientDiagnosisComplicationEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDiagnosisComplication/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDiagnosisComplicationPOST(_response));
        });
    }

    protected processPatientDiagnosisComplicationPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 并发症诊断 -- 根据患者ID查询数据
     * @param patientId 患者ID
     * @return Success
     */
    byPatientId5(patientId: string , cancelToken?: CancelToken | undefined): Promise<PatientDiagnosisComplicationViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientDiagnosisComplication/ByPatientId/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processByPatientId5(_response));
        });
    }

    protected processByPatientId5(response: AxiosResponse): Promise<PatientDiagnosisComplicationViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDiagnosisComplicationViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientDiagnosisComplicationViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDiagnosisComplicationViewResultEntry>(null as any);
    }

    /**
     * 并发症诊断 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientDiagnosisComplicationPOST2(body: PatientDiagnosisComplicationEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDiagnosisComplication";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDiagnosisComplicationPOST2(_response));
        });
    }

    protected processPatientDiagnosisComplicationPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 并发症诊断 -- 更新患者状态
     * @param patientId 患者标识
     * @param body (optional)
     * @return Success
     */
    updatePatientDiagnosisComplication(patientId: string, body: PatientDiagnosisEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDiagnosisComplication/UpdatePatientDiagnosisComplication/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdatePatientDiagnosisComplication(_response));
        });
    }

    protected processUpdatePatientDiagnosisComplication(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 并发症诊断 -- 根据Id删除数据
     * @return Success
     */
    delete14(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDiagnosisComplication/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete14(_response));
        });
    }

    protected processDelete14(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientDiagnosisInfectiousDiseasesServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 传染病诊断 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientDiagnosisInfectiousDiseasesGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientDiagnosisInfectiousDiseasesViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientDiagnosisInfectiousDiseases/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDiagnosisInfectiousDiseasesGET(_response));
        });
    }

    protected processPatientDiagnosisInfectiousDiseasesGET(response: AxiosResponse): Promise<PatientDiagnosisInfectiousDiseasesViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDiagnosisInfectiousDiseasesViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientDiagnosisInfectiousDiseasesViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDiagnosisInfectiousDiseasesViewResultEntry>(null as any);
    }

    /**
     * 传染病诊断 -- 根据患者标识更新数据
     * @param id 患者标识
     * @param body (optional)
     * @return Success
     */
    patientDiagnosisInfectiousDiseasesPOST(id: string, body: PatientDiagnosisInfectiousDiseasesEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDiagnosisInfectiousDiseases/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDiagnosisInfectiousDiseasesPOST(_response));
        });
    }

    protected processPatientDiagnosisInfectiousDiseasesPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 传染病诊断 -- 根据患者ID查询数据
     * @param patientId 患者ID
     * @return Success
     */
    byPatientId6(patientId: string , cancelToken?: CancelToken | undefined): Promise<PatientDiagnosisInfectiousDiseasesViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientDiagnosisInfectiousDiseases/ByPatientId/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processByPatientId6(_response));
        });
    }

    protected processByPatientId6(response: AxiosResponse): Promise<PatientDiagnosisInfectiousDiseasesViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDiagnosisInfectiousDiseasesViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientDiagnosisInfectiousDiseasesViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDiagnosisInfectiousDiseasesViewResultEntry>(null as any);
    }

    /**
     * 传染病诊断 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientDiagnosisInfectiousDiseasesPOST2(body: PatientDiagnosisInfectiousDiseasesEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDiagnosisInfectiousDiseases";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDiagnosisInfectiousDiseasesPOST2(_response));
        });
    }

    protected processPatientDiagnosisInfectiousDiseasesPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 传染病诊断 -- 更新患者状态
     * @param patientId 患者标识
     * @param body (optional)
     * @return Success
     */
    updatePatientDiagnosisInfectiousDiseases(patientId: string, body: PatientDiagnosisEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDiagnosisInfectiousDiseases/UpdatePatientDiagnosisInfectiousDiseases/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdatePatientDiagnosisInfectiousDiseases(_response));
        });
    }

    protected processUpdatePatientDiagnosisInfectiousDiseases(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 传染病诊断 -- 根据Id删除数据
     * @return Success
     */
    delete15(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDiagnosisInfectiousDiseases/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete15(_response));
        });
    }

    protected processDelete15(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientDiagnosisPathologicalServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 病理诊断 -- 根据患者Id查询数据
     * @return Success
     */
    patientDiagnosisPathologicalGET(patientId: string , cancelToken?: CancelToken | undefined): Promise<PatientDiagnosisPathologicalViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientDiagnosisPathological/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDiagnosisPathologicalGET(_response));
        });
    }

    protected processPatientDiagnosisPathologicalGET(response: AxiosResponse): Promise<PatientDiagnosisPathologicalViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDiagnosisPathologicalViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientDiagnosisPathologicalViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDiagnosisPathologicalViewResultEntry>(null as any);
    }

    /**
     * 病理诊断 -- 无则新增，有则编辑
     * @param body (optional)
     * @return Success
     */
    patientDiagnosisPathologicalPOST(patientId: string, body: PatientDiagnosisPathologicalEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDiagnosisPathological/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDiagnosisPathologicalPOST(_response));
        });
    }

    protected processPatientDiagnosisPathologicalPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientDiagnosisPrimaryDiseaseServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 原发病诊断 -- 根据患者Id查询数据
     * @return Success
     */
    patientDiagnosisPrimaryDiseaseGET(patientId: string , cancelToken?: CancelToken | undefined): Promise<PatientDiagnosisPrimaryDiseaseViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientDiagnosisPrimaryDisease/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDiagnosisPrimaryDiseaseGET(_response));
        });
    }

    protected processPatientDiagnosisPrimaryDiseaseGET(response: AxiosResponse): Promise<PatientDiagnosisPrimaryDiseaseViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDiagnosisPrimaryDiseaseViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientDiagnosisPrimaryDiseaseViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDiagnosisPrimaryDiseaseViewResultEntry>(null as any);
    }

    /**
     * 原发病诊断 -- 无则新增，有则编辑
     * @param body (optional)
     * @return Success
     */
    patientDiagnosisPrimaryDiseasePOST(patientId: string, body: PatientDiagnosisPrimaryDiseaseEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDiagnosisPrimaryDisease/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDiagnosisPrimaryDiseasePOST(_response));
        });
    }

    protected processPatientDiagnosisPrimaryDiseasePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientDiagnosisTumorServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 肿瘤诊断 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientDiagnosisTumorGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientDiagnosisTumorViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientDiagnosisTumor/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDiagnosisTumorGET(_response));
        });
    }

    protected processPatientDiagnosisTumorGET(response: AxiosResponse): Promise<PatientDiagnosisTumorViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDiagnosisTumorViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientDiagnosisTumorViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDiagnosisTumorViewResultEntry>(null as any);
    }

    /**
     * 肿瘤诊断 -- 根据患者标识更新数据
     * @param id 患者标识
     * @param body (optional)
     * @return Success
     */
    patientDiagnosisTumorPOST(id: string, body: PatientDiagnosisTumorEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDiagnosisTumor/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDiagnosisTumorPOST(_response));
        });
    }

    protected processPatientDiagnosisTumorPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 肿瘤诊断 -- 根据患者ID查询数据
     * @param patientId 患者ID
     * @return Success
     */
    byPatientId7(patientId: string , cancelToken?: CancelToken | undefined): Promise<PatientDiagnosisTumorViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientDiagnosisTumor/ByPatientId/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processByPatientId7(_response));
        });
    }

    protected processByPatientId7(response: AxiosResponse): Promise<PatientDiagnosisTumorViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDiagnosisTumorViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientDiagnosisTumorViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDiagnosisTumorViewResultEntry>(null as any);
    }

    /**
     * 肿瘤诊断 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientDiagnosisTumorPOST2(body: PatientDiagnosisTumorEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDiagnosisTumor";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDiagnosisTumorPOST2(_response));
        });
    }

    protected processPatientDiagnosisTumorPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 肿瘤诊断 -- 更新患者状态
     * @param patientId 患者标识
     * @param body (optional)
     * @return Success
     */
    updatePatientDiagnosisTumor(patientId: string, body: PatientDiagnosisEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDiagnosisTumor/UpdatePatientDiagnosisTumor/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdatePatientDiagnosisTumor(_response));
        });
    }

    protected processUpdatePatientDiagnosisTumor(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 肿瘤诊断 -- 根据Id删除数据
     * @return Success
     */
    delete16(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDiagnosisTumor/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete16(_response));
        });
    }

    protected processDelete16(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientDialysisPlanServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析计划 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientDialysisPlan(id: string , cancelToken?: CancelToken | undefined): Promise<PatientDialysisPlanViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientDialysisPlan/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientDialysisPlan(_response));
        });
    }

    protected processPatientDialysisPlan(response: AxiosResponse): Promise<PatientDialysisPlanViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDialysisPlanViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientDialysisPlanViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDialysisPlanViewResultEntry>(null as any);
    }

    /**
     * 透析计划 -- 根据患者标识查询数据
     * @return Success
     */
    patientGET2(patientId: string , cancelToken?: CancelToken | undefined): Promise<PatientDialysisPlanViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientDialysisPlan/Patient/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientGET2(_response));
        });
    }

    protected processPatientGET2(response: AxiosResponse): Promise<PatientDialysisPlanViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientDialysisPlanViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientDialysisPlanViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientDialysisPlanViewResultEntry>(null as any);
    }

    /**
     * 透析计划 -- 更新数据
     * @param patientId 患者标识
     * @param body (optional)
     * @return Success
     */
    patientPOST3(patientId: string, body: PatientDialysisPlanEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDialysisPlan/Patient/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientPOST3(_response));
        });
    }

    protected processPatientPOST3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析计划 -- 根据Id删除数据
     * @return Success
     */
    delete17(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientDialysisPlan/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete17(_response));
        });
    }

    protected processDelete17(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientExtraServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者扩展信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientExtraGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientExtraViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientExtra/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientExtraGET(_response));
        });
    }

    protected processPatientExtraGET(response: AxiosResponse): Promise<PatientExtraViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientExtraViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientExtraViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientExtraViewResultEntry>(null as any);
    }

    /**
     * 患者扩展信息 -- 根据扩展属性ID更新数据
     * @param body (optional)
     * @return Success
     */
    patientExtraPOST(id: string, body: PatientExtraEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientExtra/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientExtraPOST(_response));
        });
    }

    protected processPatientExtraPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者扩展信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET12(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientExtraViewResult> {
        let url_ = this.baseUrl + "/api/PatientExtra/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET12(_response));
        });
    }

    protected processFilterGET12(response: AxiosResponse): Promise<PatientExtraViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientExtraViewResult.fromJS(resultData200);
            return Promise.resolve<PatientExtraViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientExtraViewResult>(null as any);
    }

    /**
     * 患者扩展信息 -- 根据患者标识查询数据
     * @param patientId 患者标识
     * @param filter (optional) 查询条件
     * @return Success
     */
    patientGET3(patientId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientExtraViewResult> {
        let url_ = this.baseUrl + "/api/PatientExtra/Patient/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientGET3(_response));
        });
    }

    protected processPatientGET3(response: AxiosResponse): Promise<PatientExtraViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientExtraViewResult.fromJS(resultData200);
            return Promise.resolve<PatientExtraViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientExtraViewResult>(null as any);
    }

    /**
     * 患者扩展信息 -- 根据患者ID新增数据
     * @param body (optional)
     * @return Success
     */
    patientPOST4(patientId: string, body: PatientExtraEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientExtra/Patient/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientPOST4(_response));
        });
    }

    protected processPatientPOST4(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者扩展信息 -- 根据Id删除数据
     * @return Success
     */
    delete18(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientExtra/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete18(_response));
        });
    }

    protected processDelete18(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientFirstProgressServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 首次病程 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientFirstProgressGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientFirstProgressViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientFirstProgress/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientFirstProgressGET(_response));
        });
    }

    protected processPatientFirstProgressGET(response: AxiosResponse): Promise<PatientFirstProgressViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientFirstProgressViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientFirstProgressViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientFirstProgressViewResultEntry>(null as any);
    }

    /**
     * 首次病程 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientFirstProgressPOST(id: string, body: PatientFirstProgressEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientFirstProgress/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientFirstProgressPOST(_response));
        });
    }

    protected processPatientFirstProgressPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 首次病程 -- 根据患者Id查询最新一条数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    byPatientId8(patientId: string , cancelToken?: CancelToken | undefined): Promise<PatientFirstProgressViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientFirstProgress/ByPatientId/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processByPatientId8(_response));
        });
    }

    protected processByPatientId8(response: AxiosResponse): Promise<PatientFirstProgressViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientFirstProgressViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientFirstProgressViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientFirstProgressViewResultEntry>(null as any);
    }

    /**
     * 首次病程 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET13(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientFirstProgressViewResult> {
        let url_ = this.baseUrl + "/api/PatientFirstProgress/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET13(_response));
        });
    }

    protected processFilterGET13(response: AxiosResponse): Promise<PatientFirstProgressViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientFirstProgressViewResult.fromJS(resultData200);
            return Promise.resolve<PatientFirstProgressViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientFirstProgressViewResult>(null as any);
    }

    /**
     * 首次病程 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientFirstProgressPOST2(body: PatientFirstProgressEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientFirstProgress";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientFirstProgressPOST2(_response));
        });
    }

    protected processPatientFirstProgressPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 首次病程 -- 根据Id删除数据
     * @return Success
     */
    delete19(patientId: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientFirstProgress/Delete/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete19(_response));
        });
    }

    protected processDelete19(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientHealtheducationLessonServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者健康宣教记录课程 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientHealtheducationLessonGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientHealtheducationLessonViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientHealtheducationLesson/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientHealtheducationLessonGET(_response));
        });
    }

    protected processPatientHealtheducationLessonGET(response: AxiosResponse): Promise<PatientHealtheducationLessonViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientHealtheducationLessonViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientHealtheducationLessonViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientHealtheducationLessonViewResultEntry>(null as any);
    }

    /**
     * 患者健康宣教记录课程 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientHealtheducationLessonPOST(id: string, body: PatientHealtheducationLessonEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientHealtheducationLesson/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientHealtheducationLessonPOST(_response));
        });
    }

    protected processPatientHealtheducationLessonPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者健康宣教记录课程 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET14(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientHealtheducationLessonViewResult> {
        let url_ = this.baseUrl + "/api/PatientHealtheducationLesson/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET14(_response));
        });
    }

    protected processFilterGET14(response: AxiosResponse): Promise<PatientHealtheducationLessonViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientHealtheducationLessonViewResult.fromJS(resultData200);
            return Promise.resolve<PatientHealtheducationLessonViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientHealtheducationLessonViewResult>(null as any);
    }

    /**
     * 患者健康宣教记录课程 -- 根据患者标识查询数据
     * @param patientId (optional) 患者标识
     * @param filter (optional) 查询条件
     * @return Success
     */
    patientId(patientId: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientHealtheducationLessonViewResult> {
        let url_ = this.baseUrl + "/api/PatientHealtheducationLesson/Patient/patientId?";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientId(_response));
        });
    }

    protected processPatientId(response: AxiosResponse): Promise<PatientHealtheducationLessonViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientHealtheducationLessonViewResult.fromJS(resultData200);
            return Promise.resolve<PatientHealtheducationLessonViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientHealtheducationLessonViewResult>(null as any);
    }

    /**
     * 患者健康宣教记录课程 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientHealtheducationLessonPOST2(body: PatientHealtheducationLessonEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientHealtheducationLesson";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientHealtheducationLessonPOST2(_response));
        });
    }

    protected processPatientHealtheducationLessonPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者健康宣教记录课程 -- 根据Id删除数据
     * @return Success
     */
    delete20(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientHealtheducationLesson/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete20(_response));
        });
    }

    protected processDelete20(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientHealtheducationLessonItemServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者健康宣教记录课程列表 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientHealtheducationLessonItemGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientHealtheducationLessonItemViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientHealtheducationLessonItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientHealtheducationLessonItemGET(_response));
        });
    }

    protected processPatientHealtheducationLessonItemGET(response: AxiosResponse): Promise<PatientHealtheducationLessonItemViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientHealtheducationLessonItemViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientHealtheducationLessonItemViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientHealtheducationLessonItemViewResultEntry>(null as any);
    }

    /**
     * 患者健康宣教记录课程列表 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientHealtheducationLessonItemPOST(id: string, body: PatientHealtheducationLessonItemEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientHealtheducationLessonItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientHealtheducationLessonItemPOST(_response));
        });
    }

    protected processPatientHealtheducationLessonItemPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者健康宣教记录课程列表 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET15(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientHealtheducationLessonItemViewResult> {
        let url_ = this.baseUrl + "/api/PatientHealtheducationLessonItem/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET15(_response));
        });
    }

    protected processFilterGET15(response: AxiosResponse): Promise<PatientHealtheducationLessonItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientHealtheducationLessonItemViewResult.fromJS(resultData200);
            return Promise.resolve<PatientHealtheducationLessonItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientHealtheducationLessonItemViewResult>(null as any);
    }

    /**
     * 患者健康宣教记录课程列表 -- 根据患者健康宣教记录课程标识查询数据
     * @param patientHealtheducationLessonId 患者健康宣教记录课程标识
     * @param filter (optional) 查询条件
     * @return Success
     */
    lesson(patientHealtheducationLessonId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientHealtheducationLessonItemViewResult> {
        let url_ = this.baseUrl + "/api/PatientHealtheducationLessonItem/Lesson/{patientHealtheducationLessonId}";
        if (patientHealtheducationLessonId === undefined || patientHealtheducationLessonId === null)
            throw new Error("The parameter 'patientHealtheducationLessonId' must be defined.");
        url_ = url_.replace("{patientHealtheducationLessonId}", encodeURIComponent("" + patientHealtheducationLessonId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processLesson(_response));
        });
    }

    protected processLesson(response: AxiosResponse): Promise<PatientHealtheducationLessonItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientHealtheducationLessonItemViewResult.fromJS(resultData200);
            return Promise.resolve<PatientHealtheducationLessonItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientHealtheducationLessonItemViewResult>(null as any);
    }

    /**
     * 患者健康宣教记录课程列表 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientHealtheducationLessonItemPOST2(body: PatientHealtheducationLessonItemEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientHealtheducationLessonItem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientHealtheducationLessonItemPOST2(_response));
        });
    }

    protected processPatientHealtheducationLessonItemPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者健康宣教记录课程列表 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForPatientHealtheducationLessonItem(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientHealtheducationLessonItem/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForPatientHealtheducationLessonItem(_response));
        });
    }

    protected processMoveNodeForPatientHealtheducationLessonItem(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者健康宣教记录课程列表 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForPatientHealtheducationLessonItem(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientHealtheducationLessonItem/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForPatientHealtheducationLessonItem(_response));
        });
    }

    protected processUpNodeForPatientHealtheducationLessonItem(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者健康宣教记录课程列表 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForPatientHealtheducationLessonItem(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientHealtheducationLessonItem/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForPatientHealtheducationLessonItem(_response));
        });
    }

    protected processDownNodeForPatientHealtheducationLessonItem(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者健康宣教记录课程列表 -- 更新宣教时长/标记为已学习
     * @param complete 是否已完成(0,1)
     * @param duration (optional) 视频/音频，必填
     * @return Success
     */
    read(id: string, complete: number, duration: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientHealtheducationLessonItem/Read/{id}/{complete}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (complete === undefined || complete === null)
            throw new Error("The parameter 'complete' must be defined.");
        url_ = url_.replace("{complete}", encodeURIComponent("" + complete));
        if (duration === null)
            throw new Error("The parameter 'duration' cannot be null.");
        else if (duration !== undefined)
            url_ += "duration=" + encodeURIComponent("" + duration) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRead(_response));
        });
    }

    protected processRead(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者健康宣教记录课程列表 -- 根据Id删除数据
     * @return Success
     */
    delete21(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientHealtheducationLessonItem/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete21(_response));
        });
    }

    protected processDelete21(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientHealtheducationRecordServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者健康宣教记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientHealtheducationRecord(id: string , cancelToken?: CancelToken | undefined): Promise<PatientHealtheducationRecordViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientHealtheducationRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientHealtheducationRecord(_response));
        });
    }

    protected processPatientHealtheducationRecord(response: AxiosResponse): Promise<PatientHealtheducationRecordViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientHealtheducationRecordViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientHealtheducationRecordViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientHealtheducationRecordViewResultEntry>(null as any);
    }

    /**
     * 患者健康宣教记录 -- 继续学习(有数据返回TRUE，无数据返回FALSE)
     * @param patientId 患者标识
     * @return Success
     */
    continue(patientId: string , cancelToken?: CancelToken | undefined): Promise<PatientHealtheducationRecordViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientHealtheducationRecord/Continue/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processContinue(_response));
        });
    }

    protected processContinue(response: AxiosResponse): Promise<PatientHealtheducationRecordViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientHealtheducationRecordViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientHealtheducationRecordViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientHealtheducationRecordViewResultEntry>(null as any);
    }

    /**
     * 患者健康宣教记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET16(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientHealtheducationRecordViewResult> {
        let url_ = this.baseUrl + "/api/PatientHealtheducationRecord/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET16(_response));
        });
    }

    protected processFilterGET16(response: AxiosResponse): Promise<PatientHealtheducationRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientHealtheducationRecordViewResult.fromJS(resultData200);
            return Promise.resolve<PatientHealtheducationRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientHealtheducationRecordViewResult>(null as any);
    }

    /**
     * 患者健康宣教记录
     * @param filter (optional)
     * @param complete (optional)
     * @return Success
     */
    searchHealtheducationRecord(filter: string | undefined, complete: number | undefined , cancelToken?: CancelToken | undefined): Promise<PatientHealtheducationRecordViewResult> {
        let url_ = this.baseUrl + "/api/PatientHealtheducationRecord/SearchHealtheducationRecord?";
        if (complete === null)
            throw new Error("The parameter 'complete' cannot be null.");
        else if (complete !== undefined)
            url_ += "Complete=" + encodeURIComponent("" + complete) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSearchHealtheducationRecord(_response));
        });
    }

    protected processSearchHealtheducationRecord(response: AxiosResponse): Promise<PatientHealtheducationRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientHealtheducationRecordViewResult.fromJS(resultData200);
            return Promise.resolve<PatientHealtheducationRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientHealtheducationRecordViewResult>(null as any);
    }

    /**
     * 患者健康宣教记录 -- 根据患者标识查询数据
     * @param patientId 患者标识
     * @param filter (optional) 查询条件
     * @return Success
     */
    patientGET4(patientId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientHealtheducationRecordViewResult> {
        let url_ = this.baseUrl + "/api/PatientHealtheducationRecord/Patient/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientGET4(_response));
        });
    }

    protected processPatientGET4(response: AxiosResponse): Promise<PatientHealtheducationRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientHealtheducationRecordViewResult.fromJS(resultData200);
            return Promise.resolve<PatientHealtheducationRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientHealtheducationRecordViewResult>(null as any);
    }

    /**
     * 患者健康宣教记录
     * @param filter (optional) 查询条件
     * @param name (optional) 课程名称
     * @return Success
     */
    searchLessonsByName(filter: string | undefined, name: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientHealtheducationRecordViewResult> {
        let url_ = this.baseUrl + "/api/PatientHealtheducationRecord/SearchLessonsByName?";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSearchLessonsByName(_response));
        });
    }

    protected processSearchLessonsByName(response: AxiosResponse): Promise<PatientHealtheducationRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientHealtheducationRecordViewResult.fromJS(resultData200);
            return Promise.resolve<PatientHealtheducationRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientHealtheducationRecordViewResult>(null as any);
    }

    /**
     * 患者健康宣教记录 -- 新增
     * @param body (optional)
     * @return Success
     */
    addPatientHealtheducationRecord(body: PatientHealtheducationRecordAddModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientHealtheducationRecord/AddPatientHealtheducationRecord";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAddPatientHealtheducationRecord(_response));
        });
    }

    protected processAddPatientHealtheducationRecord(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者健康宣教记录 -- 无则新增，有则更新
     * @param body (optional)
     * @return Success
     */
    edit(body: PatientHealtheducationRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientHealtheducationRecord/Edit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processEdit(_response));
        });
    }

    protected processEdit(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者健康宣教记录 -- 根据Id删除数据
     * @return Success
     */
    delete22(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientHealtheducationRecord/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete22(_response));
        });
    }

    protected processDelete22(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientHemodialysisAdequacyServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析充分性 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientHemodialysisAdequacyGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientHemodialysisAdequacyResultEntry> {
        let url_ = this.baseUrl + "/api/PatientHemodialysisAdequacy/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientHemodialysisAdequacyGET(_response));
        });
    }

    protected processPatientHemodialysisAdequacyGET(response: AxiosResponse): Promise<PatientHemodialysisAdequacyResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientHemodialysisAdequacyResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientHemodialysisAdequacyResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientHemodialysisAdequacyResultEntry>(null as any);
    }

    /**
     * 透析充分性 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientHemodialysisAdequacyPOST(id: string, body: PatientHemodialysisAdequacyEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientHemodialysisAdequacy/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientHemodialysisAdequacyPOST(_response));
        });
    }

    protected processPatientHemodialysisAdequacyPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析充分性 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET17(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientHemodialysisAdequacyViewResult> {
        let url_ = this.baseUrl + "/api/PatientHemodialysisAdequacy/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET17(_response));
        });
    }

    protected processFilterGET17(response: AxiosResponse): Promise<PatientHemodialysisAdequacyViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientHemodialysisAdequacyViewResult.fromJS(resultData200);
            return Promise.resolve<PatientHemodialysisAdequacyViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientHemodialysisAdequacyViewResult>(null as any);
    }

    /**
     * 透析充分性 -- 根据条件查询数据
     * @param patientId 患者标识
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET18(patientId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientHemodialysisAdequacyViewResult> {
        let url_ = this.baseUrl + "/api/PatientHemodialysisAdequacy/Filter/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET18(_response));
        });
    }

    protected processFilterGET18(response: AxiosResponse): Promise<PatientHemodialysisAdequacyViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientHemodialysisAdequacyViewResult.fromJS(resultData200);
            return Promise.resolve<PatientHemodialysisAdequacyViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientHemodialysisAdequacyViewResult>(null as any);
    }

    /**
     * 透析充分性 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientHemodialysisAdequacyPOST2(body: PatientHemodialysisAdequacyEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientHemodialysisAdequacy";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientHemodialysisAdequacyPOST2(_response));
        });
    }

    protected processPatientHemodialysisAdequacyPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析充分性 -- 根据Id删除数据
     * @return Success
     */
    delete23(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientHemodialysisAdequacy/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete23(_response));
        });
    }

    protected processDelete23(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientHospitalServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者院区 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientHospitalGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientHospitalViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientHospital/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientHospitalGET(_response));
        });
    }

    protected processPatientHospitalGET(response: AxiosResponse): Promise<PatientHospitalViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientHospitalViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientHospitalViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientHospitalViewResultEntry>(null as any);
    }

    /**
     * 患者院区 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientHospitalPOST(id: string, body: PatientHospitalEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientHospital/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientHospitalPOST(_response));
        });
    }

    protected processPatientHospitalPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者院区 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET19(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientHospitalViewResult> {
        let url_ = this.baseUrl + "/api/PatientHospital/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET19(_response));
        });
    }

    protected processFilterGET19(response: AxiosResponse): Promise<PatientHospitalViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientHospitalViewResult.fromJS(resultData200);
            return Promise.resolve<PatientHospitalViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientHospitalViewResult>(null as any);
    }

    /**
     * 患者院区 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientHospitalPOST2(body: PatientHospitalEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientHospital";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientHospitalPOST2(_response));
        });
    }

    protected processPatientHospitalPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者院区 -- 根据Id删除数据
     * @return Success
     */
    delete24(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientHospital/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete24(_response));
        });
    }

    protected processDelete24(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientHospitalNumberInServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者住院号 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientHospitalNumberInGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientHospitalNumberInViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientHospitalNumberIn/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientHospitalNumberInGET(_response));
        });
    }

    protected processPatientHospitalNumberInGET(response: AxiosResponse): Promise<PatientHospitalNumberInViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientHospitalNumberInViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientHospitalNumberInViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientHospitalNumberInViewResultEntry>(null as any);
    }

    /**
     * 患者住院号 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientHospitalNumberInPOST(id: string, body: PatientHospitalNumberInEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientHospitalNumberIn/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientHospitalNumberInPOST(_response));
        });
    }

    protected processPatientHospitalNumberInPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者住院号 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET20(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientHospitalNumberInViewResult> {
        let url_ = this.baseUrl + "/api/PatientHospitalNumberIn/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET20(_response));
        });
    }

    protected processFilterGET20(response: AxiosResponse): Promise<PatientHospitalNumberInViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientHospitalNumberInViewResult.fromJS(resultData200);
            return Promise.resolve<PatientHospitalNumberInViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientHospitalNumberInViewResult>(null as any);
    }

    /**
     * 患者住院号 -- 根据患者标识查询数据
     * @param patientId 患者标识
     * @param filter (optional) 查询条件
     * @return Success
     */
    patientGET5(patientId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientHospitalNumberInViewResult> {
        let url_ = this.baseUrl + "/api/PatientHospitalNumberIn/Patient/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientGET5(_response));
        });
    }

    protected processPatientGET5(response: AxiosResponse): Promise<PatientHospitalNumberInViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientHospitalNumberInViewResult.fromJS(resultData200);
            return Promise.resolve<PatientHospitalNumberInViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientHospitalNumberInViewResult>(null as any);
    }

    /**
     * 患者住院号 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientHospitalNumberInPOST2(body: PatientHospitalNumberInEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientHospitalNumberIn";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientHospitalNumberInPOST2(_response));
        });
    }

    protected processPatientHospitalNumberInPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者住院号 -- 禁用/启用
     * @return Success
     */
    switch2(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientHospitalNumberIn/{id}/Switch";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSwitch2(_response));
        });
    }

    protected processSwitch2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者住院号 -- 根据Id删除数据
     * @return Success
     */
    delete25(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientHospitalNumberIn/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete25(_response));
        });
    }

    protected processDelete25(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientHospitalNumberOutServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者门诊号 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientHospitalNumberOutGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientHospitalNumberOutViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientHospitalNumberOut/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientHospitalNumberOutGET(_response));
        });
    }

    protected processPatientHospitalNumberOutGET(response: AxiosResponse): Promise<PatientHospitalNumberOutViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientHospitalNumberOutViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientHospitalNumberOutViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientHospitalNumberOutViewResultEntry>(null as any);
    }

    /**
     * 患者门诊号 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientHospitalNumberOutPOST(id: string, body: PatientHospitalNumberOutEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientHospitalNumberOut/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientHospitalNumberOutPOST(_response));
        });
    }

    protected processPatientHospitalNumberOutPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者门诊号 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET21(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientHospitalNumberOutViewResult> {
        let url_ = this.baseUrl + "/api/PatientHospitalNumberOut/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET21(_response));
        });
    }

    protected processFilterGET21(response: AxiosResponse): Promise<PatientHospitalNumberOutViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientHospitalNumberOutViewResult.fromJS(resultData200);
            return Promise.resolve<PatientHospitalNumberOutViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientHospitalNumberOutViewResult>(null as any);
    }

    /**
     * 患者门诊号 -- 根据患者标识查询数据
     * @param patientId 患者标识
     * @param filter (optional) 查询条件
     * @return Success
     */
    patientGET6(patientId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientHospitalNumberOutViewResult> {
        let url_ = this.baseUrl + "/api/PatientHospitalNumberOut/Patient/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientGET6(_response));
        });
    }

    protected processPatientGET6(response: AxiosResponse): Promise<PatientHospitalNumberOutViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientHospitalNumberOutViewResult.fromJS(resultData200);
            return Promise.resolve<PatientHospitalNumberOutViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientHospitalNumberOutViewResult>(null as any);
    }

    /**
     * 患者门诊号 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientHospitalNumberOutPOST2(body: PatientHospitalNumberOutEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientHospitalNumberOut";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientHospitalNumberOutPOST2(_response));
        });
    }

    protected processPatientHospitalNumberOutPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者门诊号 -- 禁用/启用
     * @return Success
     */
    switch3(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientHospitalNumberOut/{id}/Switch";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSwitch3(_response));
        });
    }

    protected processSwitch3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者门诊号 -- 根据Id删除数据
     * @return Success
     */
    delete26(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientHospitalNumberOut/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete26(_response));
        });
    }

    protected processDelete26(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientInfectEventMonitorServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者感染事件监测表 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientInfectEventMonitorGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientInfectEventMonitorViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientInfectEventMonitor/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientInfectEventMonitorGET(_response));
        });
    }

    protected processPatientInfectEventMonitorGET(response: AxiosResponse): Promise<PatientInfectEventMonitorViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientInfectEventMonitorViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientInfectEventMonitorViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientInfectEventMonitorViewResultEntry>(null as any);
    }

    /**
     * 患者感染事件监测表 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientInfectEventMonitorPOST(id: string, body: PatientInfectEventMonitorEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientInfectEventMonitor/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientInfectEventMonitorPOST(_response));
        });
    }

    protected processPatientInfectEventMonitorPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者感染事件监测表 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET22(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientInfectEventMonitorViewResult> {
        let url_ = this.baseUrl + "/api/PatientInfectEventMonitor/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET22(_response));
        });
    }

    protected processFilterGET22(response: AxiosResponse): Promise<PatientInfectEventMonitorViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientInfectEventMonitorViewResult.fromJS(resultData200);
            return Promise.resolve<PatientInfectEventMonitorViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientInfectEventMonitorViewResult>(null as any);
    }

    /**
     * 患者感染事件监测表 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientInfectEventMonitorPOST2(body: PatientInfectEventMonitorEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientInfectEventMonitor";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientInfectEventMonitorPOST2(_response));
        });
    }

    protected processPatientInfectEventMonitorPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者感染事件监测表 -- 根据Id删除数据
     * @return Success
     */
    delete27(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientInfectEventMonitor/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete27(_response));
        });
    }

    protected processDelete27(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientInfectLisReportItemServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 检验感染筛查数据 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientInfectLisReportItemGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientInfectLisReportItemViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientInfectLisReportItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientInfectLisReportItemGET(_response));
        });
    }

    protected processPatientInfectLisReportItemGET(response: AxiosResponse): Promise<PatientInfectLisReportItemViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientInfectLisReportItemViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientInfectLisReportItemViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientInfectLisReportItemViewResultEntry>(null as any);
    }

    /**
     * 检验感染筛查数据 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientInfectLisReportItemPOST(id: string, body: PatientInfectLisReportItemEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientInfectLisReportItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientInfectLisReportItemPOST(_response));
        });
    }

    protected processPatientInfectLisReportItemPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 检验感染筛查数据 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET23(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientInfectLisReportItemViewResult> {
        let url_ = this.baseUrl + "/api/PatientInfectLisReportItem/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET23(_response));
        });
    }

    protected processFilterGET23(response: AxiosResponse): Promise<PatientInfectLisReportItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientInfectLisReportItemViewResult.fromJS(resultData200);
            return Promise.resolve<PatientInfectLisReportItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientInfectLisReportItemViewResult>(null as any);
    }

    /**
     * 检验感染筛查数据 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientInfectLisReportItemPOST2(body: PatientInfectLisReportItemEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientInfectLisReportItem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientInfectLisReportItemPOST2(_response));
        });
    }

    protected processPatientInfectLisReportItemPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 检验感染筛查数据 -- 根据Id删除数据
     * @return Success
     */
    delete28(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientInfectLisReportItem/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete28(_response));
        });
    }

    protected processDelete28(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientLisAbnormalRemindServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 检验项异常提醒 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientLisAbnormalRemindGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientLisAbnormalRemindViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientLisAbnormalRemind/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientLisAbnormalRemindGET(_response));
        });
    }

    protected processPatientLisAbnormalRemindGET(response: AxiosResponse): Promise<PatientLisAbnormalRemindViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientLisAbnormalRemindViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientLisAbnormalRemindViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientLisAbnormalRemindViewResultEntry>(null as any);
    }

    /**
     * 检验项异常提醒 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientLisAbnormalRemindPOST(id: string, body: PatientLisAbnormalRemindEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientLisAbnormalRemind/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientLisAbnormalRemindPOST(_response));
        });
    }

    protected processPatientLisAbnormalRemindPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 检验项异常提醒 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET24(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientLisAbnormalRemindViewResult> {
        let url_ = this.baseUrl + "/api/PatientLisAbnormalRemind/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET24(_response));
        });
    }

    protected processFilterGET24(response: AxiosResponse): Promise<PatientLisAbnormalRemindViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientLisAbnormalRemindViewResult.fromJS(resultData200);
            return Promise.resolve<PatientLisAbnormalRemindViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientLisAbnormalRemindViewResult>(null as any);
    }

    /**
     * 检验项异常提醒 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientLisAbnormalRemindPOST2(body: PatientLisAbnormalRemindEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientLisAbnormalRemind";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientLisAbnormalRemindPOST2(_response));
        });
    }

    protected processPatientLisAbnormalRemindPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 检验项异常提醒 -- 根据Id删除数据
     * @return Success
     */
    delete29(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientLisAbnormalRemind/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete29(_response));
        });
    }

    protected processDelete29(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientLisReportServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 检验报告单信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientLisReportGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientLisReportViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientLisReport/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientLisReportGET(_response));
        });
    }

    protected processPatientLisReportGET(response: AxiosResponse): Promise<PatientLisReportViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientLisReportViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientLisReportViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientLisReportViewResultEntry>(null as any);
    }

    /**
     * 检验报告单信息 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientLisReportPOST(id: string, body: PatientLisReportEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientLisReport/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientLisReportPOST(_response));
        });
    }

    protected processPatientLisReportPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 检验报告单信息 -- 根据检验子项编码，查询图表
     * @param patientId 患者标识
     * @param itemCode (optional) 检验子项编码
     * @param itemValueMin (optional) 达标范围最小值
     * @param itemValueMax (optional) 达标范围最大值
     * @param reportTime (optional) 检查时间
     * @param top (optional) 离检查时间最近的检查次数
     * @return Success
     */
    chart(patientId: string, itemCode: string | undefined, itemValueMin: string | undefined, itemValueMax: string | undefined, reportTime: string | undefined, top: number | undefined , cancelToken?: CancelToken | undefined): Promise<PatientLisReportChatViewResult> {
        let url_ = this.baseUrl + "/api/PatientLisReport/Chart/{patientId}?";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        if (itemCode === null)
            throw new Error("The parameter 'itemCode' cannot be null.");
        else if (itemCode !== undefined)
            url_ += "itemCode=" + encodeURIComponent("" + itemCode) + "&";
        if (itemValueMin === null)
            throw new Error("The parameter 'itemValueMin' cannot be null.");
        else if (itemValueMin !== undefined)
            url_ += "itemValueMin=" + encodeURIComponent("" + itemValueMin) + "&";
        if (itemValueMax === null)
            throw new Error("The parameter 'itemValueMax' cannot be null.");
        else if (itemValueMax !== undefined)
            url_ += "itemValueMax=" + encodeURIComponent("" + itemValueMax) + "&";
        if (reportTime === null)
            throw new Error("The parameter 'reportTime' cannot be null.");
        else if (reportTime !== undefined)
            url_ += "reportTime=" + encodeURIComponent("" + reportTime) + "&";
        if (top === null)
            throw new Error("The parameter 'top' cannot be null.");
        else if (top !== undefined)
            url_ += "top=" + encodeURIComponent("" + top) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processChart(_response));
        });
    }

    protected processChart(response: AxiosResponse): Promise<PatientLisReportChatViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientLisReportChatViewResult.fromJS(resultData200);
            return Promise.resolve<PatientLisReportChatViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientLisReportChatViewResult>(null as any);
    }

    /**
     * 检验报告单信息 -- 根据检验子项编码，查询图表(Pad)
     * @param patientId 患者标识
     * @param itemCode (optional) 检验子项编码
     * @param itemValueMin (optional) 达标范围最小值
     * @param itemValueMax (optional) 达标范围最大值
     * @param reportTime (optional) 检查时间
     * @param top (optional) 离检查时间最近的检查次数
     * @return Success
     */
    chartPad(patientId: string, itemCode: string | undefined, itemValueMin: string | undefined, itemValueMax: string | undefined, reportTime: string | undefined, top: number | undefined , cancelToken?: CancelToken | undefined): Promise<PatientLisReportChatPadViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientLisReport/ChartPad/{patientId}?";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        if (itemCode === null)
            throw new Error("The parameter 'itemCode' cannot be null.");
        else if (itemCode !== undefined)
            url_ += "itemCode=" + encodeURIComponent("" + itemCode) + "&";
        if (itemValueMin === null)
            throw new Error("The parameter 'itemValueMin' cannot be null.");
        else if (itemValueMin !== undefined)
            url_ += "itemValueMin=" + encodeURIComponent("" + itemValueMin) + "&";
        if (itemValueMax === null)
            throw new Error("The parameter 'itemValueMax' cannot be null.");
        else if (itemValueMax !== undefined)
            url_ += "itemValueMax=" + encodeURIComponent("" + itemValueMax) + "&";
        if (reportTime === null)
            throw new Error("The parameter 'reportTime' cannot be null.");
        else if (reportTime !== undefined)
            url_ += "reportTime=" + encodeURIComponent("" + reportTime) + "&";
        if (top === null)
            throw new Error("The parameter 'top' cannot be null.");
        else if (top !== undefined)
            url_ += "top=" + encodeURIComponent("" + top) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processChartPad(_response));
        });
    }

    protected processChartPad(response: AxiosResponse): Promise<PatientLisReportChatPadViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientLisReportChatPadViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientLisReportChatPadViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientLisReportChatPadViewResultEntry>(null as any);
    }

    /**
     * 检验报告单信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET25(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientLisReportViewResult> {
        let url_ = this.baseUrl + "/api/PatientLisReport/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET25(_response));
        });
    }

    protected processFilterGET25(response: AxiosResponse): Promise<PatientLisReportViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientLisReportViewResult.fromJS(resultData200);
            return Promise.resolve<PatientLisReportViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientLisReportViewResult>(null as any);
    }

    /**
     * 检验报告单信息 -- 日期范围
     * @param patientId (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param testCategory (optional)
     * @param filter (optional)
     * @return Success
     */
    period(patientId: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, testCategory: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientLisReportViewResult> {
        let url_ = this.baseUrl + "/api/PatientLisReport/Filter/Period?";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (testCategory === null)
            throw new Error("The parameter 'testCategory' cannot be null.");
        else if (testCategory !== undefined)
            url_ += "testCategory=" + encodeURIComponent("" + testCategory) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPeriod(_response));
        });
    }

    protected processPeriod(response: AxiosResponse): Promise<PatientLisReportViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientLisReportViewResult.fromJS(resultData200);
            return Promise.resolve<PatientLisReportViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientLisReportViewResult>(null as any);
    }

    /**
     * 检验报告单信息 -- 根据条件查询数据（查询设置：达标范围为数值型，可以为空）
     * @param patientId 患者标识
     * @param filter (optional) 查询条件
     * @param itemText (optional) 检验子项全称(模糊查询)
     * @return Success
     */
    filterGET26(patientId: string, filter: string | undefined, itemText: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientLisReportViewResult> {
        let url_ = this.baseUrl + "/api/PatientLisReport/Filter/{patientId}?";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        if (itemText === null)
            throw new Error("The parameter 'itemText' cannot be null.");
        else if (itemText !== undefined)
            url_ += "itemText=" + encodeURIComponent("" + itemText) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET26(_response));
        });
    }

    protected processFilterGET26(response: AxiosResponse): Promise<PatientLisReportViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientLisReportViewResult.fromJS(resultData200);
            return Promise.resolve<PatientLisReportViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientLisReportViewResult>(null as any);
    }

    /**
     * 检验报告单信息 -- 查询检验项明细
     * @param patientId (optional) 患者标识
     * @param itemText (optional) 检验子项全称(模糊查询)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional)
     * @return Success
     */
    period2(patientId: string | undefined, itemText: string | undefined, startDate: string | undefined, endDate: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientLisReportItemViewResult> {
        let url_ = this.baseUrl + "/api/PatientLisReport/ReportItems/Period?";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        if (itemText === null)
            throw new Error("The parameter 'itemText' cannot be null.");
        else if (itemText !== undefined)
            url_ += "itemText=" + encodeURIComponent("" + itemText) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPeriod2(_response));
        });
    }

    protected processPeriod2(response: AxiosResponse): Promise<PatientLisReportItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientLisReportItemViewResult.fromJS(resultData200);
            return Promise.resolve<PatientLisReportItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientLisReportItemViewResult>(null as any);
    }

    /**
     * 检验报告单信息 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientLisReportPOST2(body: PatientLisReportEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientLisReport";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientLisReportPOST2(_response));
        });
    }

    protected processPatientLisReportPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 检验报告单信息 -- 根据Id删除数据
     * @return Success
     */
    delete30(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientLisReport/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete30(_response));
        });
    }

    protected processDelete30(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientLisReportItemServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 检验报告条目信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientLisReportItemGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientLisReportItemResultEntry> {
        let url_ = this.baseUrl + "/api/PatientLisReportItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientLisReportItemGET(_response));
        });
    }

    protected processPatientLisReportItemGET(response: AxiosResponse): Promise<PatientLisReportItemResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientLisReportItemResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientLisReportItemResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientLisReportItemResultEntry>(null as any);
    }

    /**
     * 检验报告条目信息 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientLisReportItemPOST(id: string, body: PatientLisReportItemEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientLisReportItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientLisReportItemPOST(_response));
        });
    }

    protected processPatientLisReportItemPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 检验报告条目信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET27(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientLisReportItemResult> {
        let url_ = this.baseUrl + "/api/PatientLisReportItem/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET27(_response));
        });
    }

    protected processFilterGET27(response: AxiosResponse): Promise<PatientLisReportItemResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientLisReportItemResult.fromJS(resultData200);
            return Promise.resolve<PatientLisReportItemResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientLisReportItemResult>(null as any);
    }

    /**
     * 检验报告条目信息 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientLisReportItemPOST2(body: PatientLisReportItemEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientLisReportItem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientLisReportItemPOST2(_response));
        });
    }

    protected processPatientLisReportItemPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 检验报告条目信息 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    batch3(body: PatientLisReportItemEditModel[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientLisReportItem/Batch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatch3(_response));
        });
    }

    protected processBatch3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 检验报告条目信息 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForPatientLisReportItem(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientLisReportItem/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForPatientLisReportItem(_response));
        });
    }

    protected processMoveNodeForPatientLisReportItem(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 检验报告条目信息 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForPatientLisReportItem(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientLisReportItem/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForPatientLisReportItem(_response));
        });
    }

    protected processUpNodeForPatientLisReportItem(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 检验报告条目信息 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForPatientLisReportItem(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientLisReportItem/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForPatientLisReportItem(_response));
        });
    }

    protected processDownNodeForPatientLisReportItem(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 检验报告条目信息 -- 根据Id删除数据
     * @return Success
     */
    delete31(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientLisReportItem/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete31(_response));
        });
    }

    protected processDelete31(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientMedicalHistoryServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 病案首页记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientMedicalHistoryGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientMedicalHistoryViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientMedicalHistory/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientMedicalHistoryGET(_response));
        });
    }

    protected processPatientMedicalHistoryGET(response: AxiosResponse): Promise<PatientMedicalHistoryViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientMedicalHistoryViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientMedicalHistoryViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientMedicalHistoryViewResultEntry>(null as any);
    }

    /**
     * 病案首页记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientMedicalHistoryPOST(id: string, body: PatientMedicalHistoryEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientMedicalHistory/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientMedicalHistoryPOST(_response));
        });
    }

    protected processPatientMedicalHistoryPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 病案首页记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET28(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientMedicalHistoryViewResult> {
        let url_ = this.baseUrl + "/api/PatientMedicalHistory/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET28(_response));
        });
    }

    protected processFilterGET28(response: AxiosResponse): Promise<PatientMedicalHistoryViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientMedicalHistoryViewResult.fromJS(resultData200);
            return Promise.resolve<PatientMedicalHistoryViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientMedicalHistoryViewResult>(null as any);
    }

    /**
     * 病案首页记录 -- 根据患者查询数据
     * @param patientId (optional) 查询条件
     * @return Success
     */
    byPatientId9(patientId: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientMedicalHistoryCustomResult> {
        let url_ = this.baseUrl + "/api/PatientMedicalHistory/ByPatientId?";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processByPatientId9(_response));
        });
    }

    protected processByPatientId9(response: AxiosResponse): Promise<PatientMedicalHistoryCustomResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientMedicalHistoryCustomResult.fromJS(resultData200);
            return Promise.resolve<PatientMedicalHistoryCustomResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientMedicalHistoryCustomResult>(null as any);
    }

    /**
     * 病案首页记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientMedicalHistoryPOST2(body: PatientMedicalHistoryEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientMedicalHistory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientMedicalHistoryPOST2(_response));
        });
    }

    protected processPatientMedicalHistoryPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 病案首页记录 -- 根据Id删除数据
     * @return Success
     */
    delete32(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientMedicalHistory/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete32(_response));
        });
    }

    protected processDelete32(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientOtherDialysisServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 合并其他血液净化模式 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientOtherDialysisGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientOtherDialysisViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientOtherDialysis/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientOtherDialysisGET(_response));
        });
    }

    protected processPatientOtherDialysisGET(response: AxiosResponse): Promise<PatientOtherDialysisViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientOtherDialysisViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientOtherDialysisViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientOtherDialysisViewResultEntry>(null as any);
    }

    /**
     * 合并其他血液净化模式 -- 更新数据
     * @param id 记录ID
     * @param body (optional)
     * @return Success
     */
    patientOtherDialysisPOST(id: string, body: PatientOtherDialysisEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientOtherDialysis/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientOtherDialysisPOST(_response));
        });
    }

    protected processPatientOtherDialysisPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 合并其他血液净化模式 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET29(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientOtherDialysisViewResult> {
        let url_ = this.baseUrl + "/api/PatientOtherDialysis/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET29(_response));
        });
    }

    protected processFilterGET29(response: AxiosResponse): Promise<PatientOtherDialysisViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientOtherDialysisViewResult.fromJS(resultData200);
            return Promise.resolve<PatientOtherDialysisViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientOtherDialysisViewResult>(null as any);
    }

    /**
     * 合并其他血液净化模式 -- 根据患者ID查询数据
     * @param patientId 患者ID
     * @param filter (optional) 查询条件
     * @return Success
     */
    patientGET7(patientId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientOtherDialysisViewResult> {
        let url_ = this.baseUrl + "/api/PatientOtherDialysis/Patient/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientGET7(_response));
        });
    }

    protected processPatientGET7(response: AxiosResponse): Promise<PatientOtherDialysisViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientOtherDialysisViewResult.fromJS(resultData200);
            return Promise.resolve<PatientOtherDialysisViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientOtherDialysisViewResult>(null as any);
    }

    /**
     * 合并其他血液净化模式 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientOtherDialysisPOST2(body: PatientOtherDialysisEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientOtherDialysis";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientOtherDialysisPOST2(_response));
        });
    }

    protected processPatientOtherDialysisPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 合并其他血液净化模式 -- 根据Id删除数据
     * @return Success
     */
    delete33(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientOtherDialysis/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete33(_response));
        });
    }

    protected processDelete33(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientOtherDialysisImagesServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 合并其他血液净化模式附件 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientOtherDialysisImagesGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientOtherDialysisImagesResultEntry> {
        let url_ = this.baseUrl + "/api/PatientOtherDialysisImages/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientOtherDialysisImagesGET(_response));
        });
    }

    protected processPatientOtherDialysisImagesGET(response: AxiosResponse): Promise<PatientOtherDialysisImagesResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientOtherDialysisImagesResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientOtherDialysisImagesResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientOtherDialysisImagesResultEntry>(null as any);
    }

    /**
     * 合并其他血液净化模式附件 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientOtherDialysisImagesPOST(id: string, body: PatientOtherDialysisImagesViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientOtherDialysisImages/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientOtherDialysisImagesPOST(_response));
        });
    }

    protected processPatientOtherDialysisImagesPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 合并其他血液净化模式附件 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET30(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientOtherDialysisImagesResult> {
        let url_ = this.baseUrl + "/api/PatientOtherDialysisImages/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET30(_response));
        });
    }

    protected processFilterGET30(response: AxiosResponse): Promise<PatientOtherDialysisImagesResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientOtherDialysisImagesResult.fromJS(resultData200);
            return Promise.resolve<PatientOtherDialysisImagesResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientOtherDialysisImagesResult>(null as any);
    }

    /**
     * 合并其他血液净化模式附件 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientOtherDialysisImagesPOST2(body: PatientOtherDialysisImagesViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientOtherDialysisImages";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientOtherDialysisImagesPOST2(_response));
        });
    }

    protected processPatientOtherDialysisImagesPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 合并其他血液净化模式附件 -- 根据Id删除数据
     * @return Success
     */
    delete34(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientOtherDialysisImages/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete34(_response));
        });
    }

    protected processDelete34(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientPacsReportServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 检查报告信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientPacsReportGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientPacsReportResultEntry> {
        let url_ = this.baseUrl + "/api/PatientPacsReport/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientPacsReportGET(_response));
        });
    }

    protected processPatientPacsReportGET(response: AxiosResponse): Promise<PatientPacsReportResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientPacsReportResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientPacsReportResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientPacsReportResultEntry>(null as any);
    }

    /**
     * 检查报告信息 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientPacsReportPOST(id: string, body: PatientPacsReportViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientPacsReport/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientPacsReportPOST(_response));
        });
    }

    protected processPatientPacsReportPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 检查报告信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET31(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientPacsReportViewResult> {
        let url_ = this.baseUrl + "/api/PatientPacsReport/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET31(_response));
        });
    }

    protected processFilterGET31(response: AxiosResponse): Promise<PatientPacsReportViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientPacsReportViewResult.fromJS(resultData200);
            return Promise.resolve<PatientPacsReportViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientPacsReportViewResult>(null as any);
    }

    /**
     * 检查报告信息 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientPacsReportPOST2(body: PatientPacsReportViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientPacsReport";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientPacsReportPOST2(_response));
        });
    }

    protected processPatientPacsReportPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 检查报告信息 -- 根据Id删除数据
     * @return Success
     */
    delete35(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientPacsReport/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete35(_response));
        });
    }

    protected processDelete35(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientPathogenMonitorServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 血源性病原体监测表 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientPathogenMonitorGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientPathogenMonitorViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientPathogenMonitor/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientPathogenMonitorGET(_response));
        });
    }

    protected processPatientPathogenMonitorGET(response: AxiosResponse): Promise<PatientPathogenMonitorViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientPathogenMonitorViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientPathogenMonitorViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientPathogenMonitorViewResultEntry>(null as any);
    }

    /**
     * 血源性病原体监测表 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientPathogenMonitorPOST(id: string, body: PatientPathogenMonitorEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientPathogenMonitor/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientPathogenMonitorPOST(_response));
        });
    }

    protected processPatientPathogenMonitorPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 血源性病原体监测表 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET32(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientPathogenMonitorViewResult> {
        let url_ = this.baseUrl + "/api/PatientPathogenMonitor/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET32(_response));
        });
    }

    protected processFilterGET32(response: AxiosResponse): Promise<PatientPathogenMonitorViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientPathogenMonitorViewResult.fromJS(resultData200);
            return Promise.resolve<PatientPathogenMonitorViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientPathogenMonitorViewResult>(null as any);
    }

    /**
     * 血源性病原体监测表 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientPathogenMonitorPOST2(body: PatientPathogenMonitorEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientPathogenMonitor";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientPathogenMonitorPOST2(_response));
        });
    }

    protected processPatientPathogenMonitorPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 血源性病原体监测表 -- 根据Id删除数据
     * @return Success
     */
    delete36(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientPathogenMonitor/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete36(_response));
        });
    }

    protected processDelete36(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientPathogenMonitorScreenServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 血源性病原体监测筛查 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientPathogenMonitorScreenGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientPathogenMonitorScreenViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientPathogenMonitorScreen/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientPathogenMonitorScreenGET(_response));
        });
    }

    protected processPatientPathogenMonitorScreenGET(response: AxiosResponse): Promise<PatientPathogenMonitorScreenViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientPathogenMonitorScreenViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientPathogenMonitorScreenViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientPathogenMonitorScreenViewResultEntry>(null as any);
    }

    /**
     * 血源性病原体监测筛查 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientPathogenMonitorScreenPOST(id: string, body: PatientPathogenMonitorScreenEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientPathogenMonitorScreen/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientPathogenMonitorScreenPOST(_response));
        });
    }

    protected processPatientPathogenMonitorScreenPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 血源性病原体监测筛查 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET33(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientPathogenMonitorScreenViewResult> {
        let url_ = this.baseUrl + "/api/PatientPathogenMonitorScreen/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET33(_response));
        });
    }

    protected processFilterGET33(response: AxiosResponse): Promise<PatientPathogenMonitorScreenViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientPathogenMonitorScreenViewResult.fromJS(resultData200);
            return Promise.resolve<PatientPathogenMonitorScreenViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientPathogenMonitorScreenViewResult>(null as any);
    }

    /**
     * 血源性病原体监测筛查 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientPathogenMonitorScreenPOST2(body: PatientPathogenMonitorScreenEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientPathogenMonitorScreen";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientPathogenMonitorScreenPOST2(_response));
        });
    }

    protected processPatientPathogenMonitorScreenPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 血源性病原体监测筛查 -- 根据Id删除数据
     * @return Success
     */
    delete37(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientPathogenMonitorScreen/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete37(_response));
        });
    }

    protected processDelete37(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientPmhServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 既往病史 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientPmhGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientPmhResultEntry> {
        let url_ = this.baseUrl + "/api/PatientPmh/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientPmhGET(_response));
        });
    }

    protected processPatientPmhGET(response: AxiosResponse): Promise<PatientPmhResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientPmhResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientPmhResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientPmhResultEntry>(null as any);
    }

    /**
     * 既往病史 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientPmhPOST(id: string, body: PatientPmhViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientPmh/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientPmhPOST(_response));
        });
    }

    protected processPatientPmhPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 既往病史 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET34(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientPmhViewResult> {
        let url_ = this.baseUrl + "/api/PatientPmh/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET34(_response));
        });
    }

    protected processFilterGET34(response: AxiosResponse): Promise<PatientPmhViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientPmhViewResult.fromJS(resultData200);
            return Promise.resolve<PatientPmhViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientPmhViewResult>(null as any);
    }

    /**
     * 既往病史 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientPmhPOST2(body: PatientPmhViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientPmh";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientPmhPOST2(_response));
        });
    }

    protected processPatientPmhPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 既往病史 -- 根据Id删除数据
     * @return Success
     */
    delete38(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientPmh/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete38(_response));
        });
    }

    protected processDelete38(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientPrognosisServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者转归 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientPrognosisGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientPrognosisViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientPrognosis/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientPrognosisGET(_response));
        });
    }

    protected processPatientPrognosisGET(response: AxiosResponse): Promise<PatientPrognosisViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientPrognosisViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientPrognosisViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientPrognosisViewResultEntry>(null as any);
    }

    /**
     * 患者转归 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientPrognosisPOST(id: string, body: PatientPrognosisViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientPrognosis/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientPrognosisPOST(_response));
        });
    }

    protected processPatientPrognosisPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者转归 -- 根据条件查询数据(只显示患者最后一次的转归状态)
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/拼音码/五笔码/id *选填
     * @return Success
     */
    filterGET35(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientPrognosisViewResult> {
        let url_ = this.baseUrl + "/api/PatientPrognosis/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET35(_response));
        });
    }

    protected processFilterGET35(response: AxiosResponse): Promise<PatientPrognosisViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientPrognosisViewResult.fromJS(resultData200);
            return Promise.resolve<PatientPrognosisViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientPrognosisViewResult>(null as any);
    }

    /**
     * 患者转归 -- 根据条件查询数据(只显示患者最后一次的转归状态)
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/拼音码/五笔码/id *选填
     * @return Success
     */
    exportGET13(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientPrognosis/Filter/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportGET13(_response));
        });
    }

    protected processExportGET13(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者转归 -- 根据患者标识查询数据
     * @param patientId 患者标识
     * @param filter (optional) 查询条件
     * @return Success
     */
    patientGET8(patientId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientPrognosisViewResult> {
        let url_ = this.baseUrl + "/api/PatientPrognosis/Patient/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientGET8(_response));
        });
    }

    protected processPatientGET8(response: AxiosResponse): Promise<PatientPrognosisViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientPrognosisViewResult.fromJS(resultData200);
            return Promise.resolve<PatientPrognosisViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientPrognosisViewResult>(null as any);
    }

    /**
     * 患者转归 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientPrognosisPOST2(body: PatientPrognosisViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientPrognosis";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientPrognosisPOST2(_response));
        });
    }

    protected processPatientPrognosisPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者转归 -- 根据Id删除数据
     * @return Success
     */
    delete39(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientPrognosis/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete39(_response));
        });
    }

    protected processDelete39(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientPrognosisReportServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者转归报告 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientPrognosisReportGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientPrognosisReportViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientPrognosisReport/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientPrognosisReportGET(_response));
        });
    }

    protected processPatientPrognosisReportGET(response: AxiosResponse): Promise<PatientPrognosisReportViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientPrognosisReportViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientPrognosisReportViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientPrognosisReportViewResultEntry>(null as any);
    }

    /**
     * 患者转归报告 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientPrognosisReportPOST(id: string, body: PatientPrognosisReportEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientPrognosisReport/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientPrognosisReportPOST(_response));
        });
    }

    protected processPatientPrognosisReportPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者转归报告 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET36(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientPrognosisReportViewResult> {
        let url_ = this.baseUrl + "/api/PatientPrognosisReport/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET36(_response));
        });
    }

    protected processFilterGET36(response: AxiosResponse): Promise<PatientPrognosisReportViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientPrognosisReportViewResult.fromJS(resultData200);
            return Promise.resolve<PatientPrognosisReportViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientPrognosisReportViewResult>(null as any);
    }

    /**
     * 患者转归报告 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientPrognosisReportPOST2(body: PatientPrognosisReportEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientPrognosisReport";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientPrognosisReportPOST2(_response));
        });
    }

    protected processPatientPrognosisReportPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者转归报告 -- 根据Id删除数据
     * @return Success
     */
    delete40(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientPrognosisReport/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete40(_response));
        });
    }

    protected processDelete40(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientPunctureRecordServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者透析穿刺记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientPunctureRecordGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientPunctureRecordViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientPunctureRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientPunctureRecordGET(_response));
        });
    }

    protected processPatientPunctureRecordGET(response: AxiosResponse): Promise<PatientPunctureRecordViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientPunctureRecordViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientPunctureRecordViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientPunctureRecordViewResultEntry>(null as any);
    }

    /**
     * 患者透析穿刺记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientPunctureRecordPOST(id: string, body: PatientPunctureRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientPunctureRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientPunctureRecordPOST(_response));
        });
    }

    protected processPatientPunctureRecordPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者透析穿刺记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET37(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientPunctureRecordViewResult> {
        let url_ = this.baseUrl + "/api/PatientPunctureRecord/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET37(_response));
        });
    }

    protected processFilterGET37(response: AxiosResponse): Promise<PatientPunctureRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientPunctureRecordViewResult.fromJS(resultData200);
            return Promise.resolve<PatientPunctureRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientPunctureRecordViewResult>(null as any);
    }

    /**
     * 患者透析穿刺记录 -- 根据cureid条件查询数据
     * @param filter (optional)
     * @return Success
     */
    getByCureId(filter: string | undefined, cureId: string , cancelToken?: CancelToken | undefined): Promise<PatientPunctureRecordViewResult> {
        let url_ = this.baseUrl + "/api/PatientPunctureRecord/GetByCureId/{cureId}";
        if (cureId === undefined || cureId === null)
            throw new Error("The parameter 'cureId' must be defined.");
        url_ = url_.replace("{cureId}", encodeURIComponent("" + cureId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetByCureId(_response));
        });
    }

    protected processGetByCureId(response: AxiosResponse): Promise<PatientPunctureRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientPunctureRecordViewResult.fromJS(resultData200);
            return Promise.resolve<PatientPunctureRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientPunctureRecordViewResult>(null as any);
    }

    /**
     * 患者透析穿刺记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientPunctureRecordPOST2(body: PatientPunctureRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientPunctureRecord";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientPunctureRecordPOST2(_response));
        });
    }

    protected processPatientPunctureRecordPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者透析穿刺记录 -- 批量新增数据
     * @param body (optional)
     * @return Success
     */
    batch4(body: PatientPunctureRecordEditModel[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientPunctureRecord/Batch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatch4(_response));
        });
    }

    protected processBatch4(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者透析穿刺记录 -- 根据Id删除数据
     * @return Success
     */
    delete41(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientPunctureRecord/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete41(_response));
        });
    }

    protected processDelete41(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientPunctureRecordNodeServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者透析穿刺记录节点 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientPunctureRecordNodeGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientPunctureRecordNodeViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientPunctureRecordNode/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientPunctureRecordNodeGET(_response));
        });
    }

    protected processPatientPunctureRecordNodeGET(response: AxiosResponse): Promise<PatientPunctureRecordNodeViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientPunctureRecordNodeViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientPunctureRecordNodeViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientPunctureRecordNodeViewResultEntry>(null as any);
    }

    /**
     * 患者透析穿刺记录节点 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientPunctureRecordNodePOST(id: string, body: PatientPunctureRecordNodeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientPunctureRecordNode/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientPunctureRecordNodePOST(_response));
        });
    }

    protected processPatientPunctureRecordNodePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者透析穿刺记录节点 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET38(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientPunctureRecordNodeViewResult> {
        let url_ = this.baseUrl + "/api/PatientPunctureRecordNode/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET38(_response));
        });
    }

    protected processFilterGET38(response: AxiosResponse): Promise<PatientPunctureRecordNodeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientPunctureRecordNodeViewResult.fromJS(resultData200);
            return Promise.resolve<PatientPunctureRecordNodeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientPunctureRecordNodeViewResult>(null as any);
    }

    /**
     * 患者透析穿刺记录节点 -- 根据穿刺记录id条件查询数据
     * @param filter (optional)
     * @return Success
     */
    getByPuncId(filter: string | undefined, puncId: string , cancelToken?: CancelToken | undefined): Promise<PatientPunctureRecordNodeViewResult> {
        let url_ = this.baseUrl + "/api/PatientPunctureRecordNode/GetByPuncId/{puncId}";
        if (puncId === undefined || puncId === null)
            throw new Error("The parameter 'puncId' must be defined.");
        url_ = url_.replace("{puncId}", encodeURIComponent("" + puncId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetByPuncId(_response));
        });
    }

    protected processGetByPuncId(response: AxiosResponse): Promise<PatientPunctureRecordNodeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientPunctureRecordNodeViewResult.fromJS(resultData200);
            return Promise.resolve<PatientPunctureRecordNodeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientPunctureRecordNodeViewResult>(null as any);
    }

    /**
     * 患者透析穿刺记录节点 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientPunctureRecordNodePOST2(body: PatientPunctureRecordNodeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientPunctureRecordNode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientPunctureRecordNodePOST2(_response));
        });
    }

    protected processPatientPunctureRecordNodePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者透析穿刺记录节点 -- 批量新增数据
     * @param body (optional)
     * @return Success
     */
    batch5(body: PatientPunctureRecordNodeEditModel[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientPunctureRecordNode/Batch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatch5(_response));
        });
    }

    protected processBatch5(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者透析穿刺记录节点 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    batchUpdate(body: PatientPunctureRecordNodeBatchEditModel[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientPunctureRecordNode/BatchUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatchUpdate(_response));
        });
    }

    protected processBatchUpdate(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者透析穿刺记录节点 -- 根据Id删除数据
     * @return Success
     */
    delete42(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientPunctureRecordNode/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete42(_response));
        });
    }

    protected processDelete42(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientQuestionnaireServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 问卷调查 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientQuestionnaireGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientQuestionnaireViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientQuestionnaire/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientQuestionnaireGET(_response));
        });
    }

    protected processPatientQuestionnaireGET(response: AxiosResponse): Promise<PatientQuestionnaireViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientQuestionnaireViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientQuestionnaireViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientQuestionnaireViewResultEntry>(null as any);
    }

    /**
     * 问卷调查 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientQuestionnairePOST(id: string, body: PatientQuestionnaireEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientQuestionnaire/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientQuestionnairePOST(_response));
        });
    }

    protected processPatientQuestionnairePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 问卷调查 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET39(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientQuestionnaireViewResult> {
        let url_ = this.baseUrl + "/api/PatientQuestionnaire/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET39(_response));
        });
    }

    protected processFilterGET39(response: AxiosResponse): Promise<PatientQuestionnaireViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientQuestionnaireViewResult.fromJS(resultData200);
            return Promise.resolve<PatientQuestionnaireViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientQuestionnaireViewResult>(null as any);
    }

    /**
     * 问卷调查 -- 根据问卷模板ID查询数据
     * @param tmplId 问卷模板ID
     * @param id (optional) 问卷调查ID
     * @return Success
     */
    byTmplId(tmplId: string, id: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientQuestionnaireEditModelResultEntry> {
        let url_ = this.baseUrl + "/api/PatientQuestionnaire/ByTmplId/{tmplId}?";
        if (tmplId === undefined || tmplId === null)
            throw new Error("The parameter 'tmplId' must be defined.");
        url_ = url_.replace("{tmplId}", encodeURIComponent("" + tmplId));
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processByTmplId(_response));
        });
    }

    protected processByTmplId(response: AxiosResponse): Promise<PatientQuestionnaireEditModelResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientQuestionnaireEditModelResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientQuestionnaireEditModelResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientQuestionnaireEditModelResultEntry>(null as any);
    }

    /**
     * 问卷调查 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientQuestionnairePOST2(body: PatientQuestionnaireEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientQuestionnaire";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientQuestionnairePOST2(_response));
        });
    }

    protected processPatientQuestionnairePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 问卷调查 -- 根据Id删除数据
     * @return Success
     */
    delete43(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientQuestionnaire/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete43(_response));
        });
    }

    protected processDelete43(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientQuestionnaireDetailServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 问卷调查明细 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientQuestionnaireDetailGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientQuestionnaireDetailResultEntry> {
        let url_ = this.baseUrl + "/api/PatientQuestionnaireDetail/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientQuestionnaireDetailGET(_response));
        });
    }

    protected processPatientQuestionnaireDetailGET(response: AxiosResponse): Promise<PatientQuestionnaireDetailResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientQuestionnaireDetailResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientQuestionnaireDetailResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientQuestionnaireDetailResultEntry>(null as any);
    }

    /**
     * 问卷调查明细 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientQuestionnaireDetailPOST(id: string, body: PatientQuestionnaireDetailViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientQuestionnaireDetail/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientQuestionnaireDetailPOST(_response));
        });
    }

    protected processPatientQuestionnaireDetailPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 问卷调查明细 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET40(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientQuestionnaireDetailResult> {
        let url_ = this.baseUrl + "/api/PatientQuestionnaireDetail/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET40(_response));
        });
    }

    protected processFilterGET40(response: AxiosResponse): Promise<PatientQuestionnaireDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientQuestionnaireDetailResult.fromJS(resultData200);
            return Promise.resolve<PatientQuestionnaireDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientQuestionnaireDetailResult>(null as any);
    }

    /**
     * 问卷调查明细 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientQuestionnaireDetailPOST2(body: PatientQuestionnaireDetailViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientQuestionnaireDetail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientQuestionnaireDetailPOST2(_response));
        });
    }

    protected processPatientQuestionnaireDetailPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 问卷调查明细 -- 根据Id删除数据
     * @return Success
     */
    delete44(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientQuestionnaireDetail/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete44(_response));
        });
    }

    protected processDelete44(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientScriptRecordServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者自定义话术模板类记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientScriptRecordGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientScriptRecordViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientScriptRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientScriptRecordGET(_response));
        });
    }

    protected processPatientScriptRecordGET(response: AxiosResponse): Promise<PatientScriptRecordViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientScriptRecordViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientScriptRecordViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientScriptRecordViewResultEntry>(null as any);
    }

    /**
     * 患者自定义话术模板类记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientScriptRecordPOST(id: string, body: PatientScriptRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientScriptRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientScriptRecordPOST(_response));
        });
    }

    protected processPatientScriptRecordPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者自定义话术模板类记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET41(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientScriptRecordViewResult> {
        let url_ = this.baseUrl + "/api/PatientScriptRecord/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET41(_response));
        });
    }

    protected processFilterGET41(response: AxiosResponse): Promise<PatientScriptRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientScriptRecordViewResult.fromJS(resultData200);
            return Promise.resolve<PatientScriptRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientScriptRecordViewResult>(null as any);
    }

    /**
     * 患者自定义话术模板类记录 -- 根据条件查询数据
     * @param ids (optional) 查询条件
     * @return Success
     */
    getByIds(ids: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientScriptRecordViewResult> {
        let url_ = this.baseUrl + "/api/PatientScriptRecord/GetByIds?";
        if (ids === null)
            throw new Error("The parameter 'ids' cannot be null.");
        else if (ids !== undefined)
            url_ += "ids=" + encodeURIComponent("" + ids) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetByIds(_response));
        });
    }

    protected processGetByIds(response: AxiosResponse): Promise<PatientScriptRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientScriptRecordViewResult.fromJS(resultData200);
            return Promise.resolve<PatientScriptRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientScriptRecordViewResult>(null as any);
    }

    /**
     * 患者自定义话术模板类记录 -- 根据条件查询数据
     * @param start (optional)
     * @param end (optional)
     * @param patientId (optional)
     * @return Success
     */
    group(start: string | undefined, end: string | undefined, patientId: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientScriptRecordGroupViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientScriptRecord/Group?";
        if (start === null)
            throw new Error("The parameter 'start' cannot be null.");
        else if (start !== undefined)
            url_ += "start=" + encodeURIComponent("" + start) + "&";
        if (end === null)
            throw new Error("The parameter 'end' cannot be null.");
        else if (end !== undefined)
            url_ += "end=" + encodeURIComponent("" + end) + "&";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGroup(_response));
        });
    }

    protected processGroup(response: AxiosResponse): Promise<PatientScriptRecordGroupViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientScriptRecordGroupViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientScriptRecordGroupViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientScriptRecordGroupViewResultEntry>(null as any);
    }

    /**
     * 患者自定义话术模板类记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientScriptRecordPOST2(body: PatientScriptRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientScriptRecord";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientScriptRecordPOST2(_response));
        });
    }

    protected processPatientScriptRecordPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者自定义话术模板类记录 -- 根据Id删除数据
     * @return Success
     */
    delete45(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientScriptRecord/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete45(_response));
        });
    }

    protected processDelete45(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientSignatureServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者签名 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientSignatureGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientSignatureViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientSignature/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientSignatureGET(_response));
        });
    }

    protected processPatientSignatureGET(response: AxiosResponse): Promise<PatientSignatureViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientSignatureViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientSignatureViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientSignatureViewResultEntry>(null as any);
    }

    /**
     * 患者签名 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientSignaturePOST(id: string, body: PatientSignatureEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientSignature/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientSignaturePOST(_response));
        });
    }

    protected processPatientSignaturePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者签名 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET42(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientSignatureViewResult> {
        let url_ = this.baseUrl + "/api/PatientSignature/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET42(_response));
        });
    }

    protected processFilterGET42(response: AxiosResponse): Promise<PatientSignatureViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientSignatureViewResult.fromJS(resultData200);
            return Promise.resolve<PatientSignatureViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientSignatureViewResult>(null as any);
    }

    /**
     * 患者签名 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientSignaturePOST2(body: PatientSignatureEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientSignature";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientSignaturePOST2(_response));
        });
    }

    protected processPatientSignaturePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者签名 -- 根据Id删除数据
     * @return Success
     */
    delete46(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientSignature/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete46(_response));
        });
    }

    protected processDelete46(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientStageSummaryServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 阶段小结 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientStageSummaryGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientStageSummaryViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientStageSummary/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientStageSummaryGET(_response));
        });
    }

    protected processPatientStageSummaryGET(response: AxiosResponse): Promise<PatientStageSummaryViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientStageSummaryViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientStageSummaryViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientStageSummaryViewResultEntry>(null as any);
    }

    /**
     * 阶段小结 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientStageSummaryPOST(id: string, body: PatientStageSummaryEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientStageSummary/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientStageSummaryPOST(_response));
        });
    }

    protected processPatientStageSummaryPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 阶段小结 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET43(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientStageSummaryViewResult> {
        let url_ = this.baseUrl + "/api/PatientStageSummary/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET43(_response));
        });
    }

    protected processFilterGET43(response: AxiosResponse): Promise<PatientStageSummaryViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientStageSummaryViewResult.fromJS(resultData200);
            return Promise.resolve<PatientStageSummaryViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientStageSummaryViewResult>(null as any);
    }

    /**
     * 阶段小结 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientStageSummaryPOST2(body: PatientStageSummaryEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientStageSummary";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientStageSummaryPOST2(_response));
        });
    }

    protected processPatientStageSummaryPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 阶段小结 -- 根据Id删除数据
     * @return Success
     */
    delete47(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientStageSummary/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete47(_response));
        });
    }

    protected processDelete47(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientTagsServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者标签 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientTagsGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientTagsResultEntry> {
        let url_ = this.baseUrl + "/api/PatientTags/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientTagsGET(_response));
        });
    }

    protected processPatientTagsGET(response: AxiosResponse): Promise<PatientTagsResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientTagsResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientTagsResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientTagsResultEntry>(null as any);
    }

    /**
     * 患者标签 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientTagsPOST(id: string, body: PatientTagsViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientTags/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientTagsPOST(_response));
        });
    }

    protected processPatientTagsPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者标签 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET44(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientTagsResult> {
        let url_ = this.baseUrl + "/api/PatientTags/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET44(_response));
        });
    }

    protected processFilterGET44(response: AxiosResponse): Promise<PatientTagsResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientTagsResult.fromJS(resultData200);
            return Promise.resolve<PatientTagsResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientTagsResult>(null as any);
    }

    /**
     * 患者标签 -- 根据患者ID查询
     * @return Success
     */
    byPatientId10(patientId: string , cancelToken?: CancelToken | undefined): Promise<PatientTagsViewResult> {
        let url_ = this.baseUrl + "/api/PatientTags/ByPatientId/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processByPatientId10(_response));
        });
    }

    protected processByPatientId10(response: AxiosResponse): Promise<PatientTagsViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientTagsViewResult.fromJS(resultData200);
            return Promise.resolve<PatientTagsViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientTagsViewResult>(null as any);
    }

    /**
     * 患者标签 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientTagsPOST2(body: PatientTagsViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientTags";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientTagsPOST2(_response));
        });
    }

    protected processPatientTagsPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者标签 -- 根据Id删除数据
     * @return Success
     */
    delete48(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientTags/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete48(_response));
        });
    }

    protected processDelete48(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientThresholdSettingServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者门限配置表 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientThresholdSettingGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientThresholdSettingViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientThresholdSetting/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientThresholdSettingGET(_response));
        });
    }

    protected processPatientThresholdSettingGET(response: AxiosResponse): Promise<PatientThresholdSettingViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientThresholdSettingViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientThresholdSettingViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientThresholdSettingViewResultEntry>(null as any);
    }

    /**
     * 患者门限配置表 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientThresholdSettingPOST(id: string, body: PatientThresholdSettingEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientThresholdSetting/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientThresholdSettingPOST(_response));
        });
    }

    protected processPatientThresholdSettingPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者门限配置表 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET45(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientThresholdSettingViewResult> {
        let url_ = this.baseUrl + "/api/PatientThresholdSetting/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET45(_response));
        });
    }

    protected processFilterGET45(response: AxiosResponse): Promise<PatientThresholdSettingViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientThresholdSettingViewResult.fromJS(resultData200);
            return Promise.resolve<PatientThresholdSettingViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientThresholdSettingViewResult>(null as any);
    }

    /**
     * 患者门限配置表 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientThresholdSettingPOST2(body: PatientThresholdSettingEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientThresholdSetting";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientThresholdSettingPOST2(_response));
        });
    }

    protected processPatientThresholdSettingPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者门限配置表 -- 根据Id删除数据
     * @return Success
     */
    delete49(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientThresholdSetting/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete49(_response));
        });
    }

    protected processDelete49(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientTmplArchiveServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者档案文件模板 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientTmplArchiveGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientTmplArchiveViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientTmplArchive/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientTmplArchiveGET(_response));
        });
    }

    protected processPatientTmplArchiveGET(response: AxiosResponse): Promise<PatientTmplArchiveViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientTmplArchiveViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientTmplArchiveViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientTmplArchiveViewResultEntry>(null as any);
    }

    /**
     * 患者档案文件模板 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientTmplArchivePOST(id: string, body: PatientTmplArchiveEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientTmplArchive/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientTmplArchivePOST(_response));
        });
    }

    protected processPatientTmplArchivePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @param filter (optional)
     * @param patientId (optional)
     * @return Success
     */
    getByPatientId(filter: string | undefined, patientId: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientTmplArchiveResult> {
        let url_ = this.baseUrl + "/api/PatientTmplArchive/GetByPatientId?";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetByPatientId(_response));
        });
    }

    protected processGetByPatientId(response: AxiosResponse): Promise<PatientTmplArchiveResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientTmplArchiveResult.fromJS(resultData200);
            return Promise.resolve<PatientTmplArchiveResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientTmplArchiveResult>(null as any);
    }

    /**
     * @param filter (optional)
     * @param patientId (optional)
     * @return Success
     */
    getByPatientIdForAll(filter: string | undefined, patientId: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientTmplArchiveResult> {
        let url_ = this.baseUrl + "/api/PatientTmplArchive/GetByPatientIdForAll?";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetByPatientIdForAll(_response));
        });
    }

    protected processGetByPatientIdForAll(response: AxiosResponse): Promise<PatientTmplArchiveResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientTmplArchiveResult.fromJS(resultData200);
            return Promise.resolve<PatientTmplArchiveResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientTmplArchiveResult>(null as any);
    }

    /**
     * 患者档案文件模板 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET46(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientTmplArchiveViewResult> {
        let url_ = this.baseUrl + "/api/PatientTmplArchive/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET46(_response));
        });
    }

    protected processFilterGET46(response: AxiosResponse): Promise<PatientTmplArchiveViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientTmplArchiveViewResult.fromJS(resultData200);
            return Promise.resolve<PatientTmplArchiveViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientTmplArchiveViewResult>(null as any);
    }

    /**
     * 患者档案文件模板 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientTmplArchivePOST2(body: PatientTmplArchiveEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientTmplArchive";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientTmplArchivePOST2(_response));
        });
    }

    protected processPatientTmplArchivePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者档案文件模板 -- 根据Id删除数据
     * @return Success
     */
    delete50(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientTmplArchive/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete50(_response));
        });
    }

    protected processDelete50(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientTmplRecordServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者自定义表单记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientTmplRecordGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientTmplRecordViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientTmplRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientTmplRecordGET(_response));
        });
    }

    protected processPatientTmplRecordGET(response: AxiosResponse): Promise<PatientTmplRecordViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientTmplRecordViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientTmplRecordViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientTmplRecordViewResultEntry>(null as any);
    }

    /**
     * 患者自定义表单记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientTmplRecordPOST(id: string, body: PatientTmplRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientTmplRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientTmplRecordPOST(_response));
        });
    }

    protected processPatientTmplRecordPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者自定义表单记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET47(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientTmplRecordViewResult> {
        let url_ = this.baseUrl + "/api/PatientTmplRecord/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET47(_response));
        });
    }

    protected processFilterGET47(response: AxiosResponse): Promise<PatientTmplRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientTmplRecordViewResult.fromJS(resultData200);
            return Promise.resolve<PatientTmplRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientTmplRecordViewResult>(null as any);
    }

    /**
     * 患者自定义表单记录 -- 根据患者及code查询数据
     * @param patientId (optional) 患者编号
     * @param code (optional) 自定义表单code
     * @return Success
     */
    patientByCode(patientId: string | undefined, code: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientTmplRecordViewResult> {
        let url_ = this.baseUrl + "/api/PatientTmplRecord/PatientByCode?";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientByCode(_response));
        });
    }

    protected processPatientByCode(response: AxiosResponse): Promise<PatientTmplRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientTmplRecordViewResult.fromJS(resultData200);
            return Promise.resolve<PatientTmplRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientTmplRecordViewResult>(null as any);
    }

    /**
     * 患者自定义表单记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientTmplRecordPOST2(body: PatientTmplRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientTmplRecord";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientTmplRecordPOST2(_response));
        });
    }

    protected processPatientTmplRecordPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者自定义表单记录 -- 根据Id删除数据
     * @return Success
     */
    delete51(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientTmplRecord/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete51(_response));
        });
    }

    protected processDelete51(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientVascularAccessServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者血管通路 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientVascularAccessGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientVascularAccessVoResultEntry> {
        let url_ = this.baseUrl + "/api/PatientVascularAccess/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccessGET(_response));
        });
    }

    protected processPatientVascularAccessGET(response: AxiosResponse): Promise<PatientVascularAccessVoResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientVascularAccessVoResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientVascularAccessVoResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientVascularAccessVoResultEntry>(null as any);
    }

    /**
     * 患者血管通路 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientVascularAccessPOST(id: string, body: PatientVascularAccessEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccess/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccessPOST(_response));
        });
    }

    protected processPatientVascularAccessPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者血管通路 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/拼音码/五笔码/id *选填
     * @return Success
     */
    filterGET48(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientVascularAccessViewResult> {
        let url_ = this.baseUrl + "/api/PatientVascularAccess/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET48(_response));
        });
    }

    protected processFilterGET48(response: AxiosResponse): Promise<PatientVascularAccessViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientVascularAccessViewResult.fromJS(resultData200);
            return Promise.resolve<PatientVascularAccessViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientVascularAccessViewResult>(null as any);
    }

    /**
     * 患者血管通路 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientVascularAccessPOST2(body: PatientVascularAccessViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccess";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccessPOST2(_response));
        });
    }

    protected processPatientVascularAccessPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者血管通路 -- 根据Id删除数据
     * @return Success
     */
    delete52(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccess/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete52(_response));
        });
    }

    protected processDelete52(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientVascularAccessAssessmentServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者血管通路评估 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientVascularAccessAssessmentGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientVascularAccessAssessmentViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessAssessment/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccessAssessmentGET(_response));
        });
    }

    protected processPatientVascularAccessAssessmentGET(response: AxiosResponse): Promise<PatientVascularAccessAssessmentViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientVascularAccessAssessmentViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientVascularAccessAssessmentViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientVascularAccessAssessmentViewResultEntry>(null as any);
    }

    /**
     * 患者血管通路评估 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientVascularAccessAssessmentPOST(id: string, body: PatientVascularAccessAssessmentEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessAssessment/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccessAssessmentPOST(_response));
        });
    }

    protected processPatientVascularAccessAssessmentPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者血管通路评估 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET49(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientVascularAccessAssessmentViewResult> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessAssessment/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET49(_response));
        });
    }

    protected processFilterGET49(response: AxiosResponse): Promise<PatientVascularAccessAssessmentViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientVascularAccessAssessmentViewResult.fromJS(resultData200);
            return Promise.resolve<PatientVascularAccessAssessmentViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientVascularAccessAssessmentViewResult>(null as any);
    }

    /**
     * 患者血管通路评估 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientVascularAccessAssessmentPOST2(body: PatientVascularAccessAssessmentEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessAssessment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccessAssessmentPOST2(_response));
        });
    }

    protected processPatientVascularAccessAssessmentPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者血管通路评估 -- 根据Id删除数据
     * @return Success
     */
    delete53(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessAssessment/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete53(_response));
        });
    }

    protected processDelete53(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientVascularAccessChangeServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者血管通路改变 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientVascularAccessChangeGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientVascularAccessChangeViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessChange/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccessChangeGET(_response));
        });
    }

    protected processPatientVascularAccessChangeGET(response: AxiosResponse): Promise<PatientVascularAccessChangeViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientVascularAccessChangeViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientVascularAccessChangeViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientVascularAccessChangeViewResultEntry>(null as any);
    }

    /**
     * 患者血管通路改变 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientVascularAccessChangePOST(id: string, body: PatientVascularAccessChangeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessChange/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccessChangePOST(_response));
        });
    }

    protected processPatientVascularAccessChangePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者血管通路改变 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET50(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientVascularAccessChangeViewResult> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessChange/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET50(_response));
        });
    }

    protected processFilterGET50(response: AxiosResponse): Promise<PatientVascularAccessChangeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientVascularAccessChangeViewResult.fromJS(resultData200);
            return Promise.resolve<PatientVascularAccessChangeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientVascularAccessChangeViewResult>(null as any);
    }

    /**
     * 患者血管通路改变 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientVascularAccessChangePOST2(body: PatientVascularAccessChangeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessChange";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccessChangePOST2(_response));
        });
    }

    protected processPatientVascularAccessChangePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者血管通路改变 -- 根据Id删除数据
     * @return Success
     */
    delete54(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessChange/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete54(_response));
        });
    }

    protected processDelete54(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientVascularAccessDiagnosisResultServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者血管通路诊断结果 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientVascularAccessDiagnosisResultGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientVascularAccessDiagnosisResultViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessDiagnosisResult/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccessDiagnosisResultGET(_response));
        });
    }

    protected processPatientVascularAccessDiagnosisResultGET(response: AxiosResponse): Promise<PatientVascularAccessDiagnosisResultViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientVascularAccessDiagnosisResultViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientVascularAccessDiagnosisResultViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientVascularAccessDiagnosisResultViewResultEntry>(null as any);
    }

    /**
     * 患者血管通路诊断结果 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientVascularAccessDiagnosisResultPOST(id: string, body: PatientVascularAccessDiagnosisResultEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessDiagnosisResult/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccessDiagnosisResultPOST(_response));
        });
    }

    protected processPatientVascularAccessDiagnosisResultPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者血管通路诊断结果 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET51(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientVascularAccessDiagnosisResultViewResult> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessDiagnosisResult/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET51(_response));
        });
    }

    protected processFilterGET51(response: AxiosResponse): Promise<PatientVascularAccessDiagnosisResultViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientVascularAccessDiagnosisResultViewResult.fromJS(resultData200);
            return Promise.resolve<PatientVascularAccessDiagnosisResultViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientVascularAccessDiagnosisResultViewResult>(null as any);
    }

    /**
     * 患者血管通路诊断结果 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientVascularAccessDiagnosisResultPOST2(body: PatientVascularAccessDiagnosisResultEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessDiagnosisResult";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccessDiagnosisResultPOST2(_response));
        });
    }

    protected processPatientVascularAccessDiagnosisResultPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者血管通路诊断结果 -- 根据Id删除数据
     * @return Success
     */
    delete55(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessDiagnosisResult/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete55(_response));
        });
    }

    protected processDelete55(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientVascularAccessExamineServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者血管通路检查信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientVascularAccessExamineGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientVascularAccessExamineViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessExamine/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccessExamineGET(_response));
        });
    }

    protected processPatientVascularAccessExamineGET(response: AxiosResponse): Promise<PatientVascularAccessExamineViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientVascularAccessExamineViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientVascularAccessExamineViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientVascularAccessExamineViewResultEntry>(null as any);
    }

    /**
     * 患者血管通路检查信息 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientVascularAccessExaminePOST(id: string, body: PatientVascularAccessExamineEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessExamine/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccessExaminePOST(_response));
        });
    }

    protected processPatientVascularAccessExaminePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者血管通路检查信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET52(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientVascularAccessExamineViewResult> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessExamine/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET52(_response));
        });
    }

    protected processFilterGET52(response: AxiosResponse): Promise<PatientVascularAccessExamineViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientVascularAccessExamineViewResult.fromJS(resultData200);
            return Promise.resolve<PatientVascularAccessExamineViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientVascularAccessExamineViewResult>(null as any);
    }

    /**
     * 患者血管通路检查信息 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientVascularAccessExaminePOST2(body: PatientVascularAccessExamineEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessExamine";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccessExaminePOST2(_response));
        });
    }

    protected processPatientVascularAccessExaminePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者血管通路检查信息 -- 根据Id删除数据
     * @return Success
     */
    delete56(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessExamine/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete56(_response));
        });
    }

    protected processDelete56(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientVascularAccessFileServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者血管通路照片 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientVascularAccessFileGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientVascularAccessFileResultEntry> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessFile/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccessFileGET(_response));
        });
    }

    protected processPatientVascularAccessFileGET(response: AxiosResponse): Promise<PatientVascularAccessFileResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientVascularAccessFileResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientVascularAccessFileResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientVascularAccessFileResultEntry>(null as any);
    }

    /**
     * 患者血管通路照片 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientVascularAccessFilePOST(id: string, body: PatientVascularAccessFileView | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessFile/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccessFilePOST(_response));
        });
    }

    protected processPatientVascularAccessFilePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者血管通路照片 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET53(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientVascularAccessFileResult> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessFile/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET53(_response));
        });
    }

    protected processFilterGET53(response: AxiosResponse): Promise<PatientVascularAccessFileResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientVascularAccessFileResult.fromJS(resultData200);
            return Promise.resolve<PatientVascularAccessFileResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientVascularAccessFileResult>(null as any);
    }

    /**
     * 患者血管通路照片 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientVascularAccessFilePOST2(body: PatientVascularAccessFileView | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccessFilePOST2(_response));
        });
    }

    protected processPatientVascularAccessFilePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者血管通路照片 -- 根据Id删除数据
     * @return Success
     */
    delete57(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessFile/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete57(_response));
        });
    }

    protected processDelete57(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientVascularAccessInterveneServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者血管通路干预 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientVascularAccessInterveneGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientVascularAccessInterveneViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessIntervene/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccessInterveneGET(_response));
        });
    }

    protected processPatientVascularAccessInterveneGET(response: AxiosResponse): Promise<PatientVascularAccessInterveneViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientVascularAccessInterveneViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientVascularAccessInterveneViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientVascularAccessInterveneViewResultEntry>(null as any);
    }

    /**
     * 患者血管通路干预 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientVascularAccessIntervenePOST(id: string, body: PatientVascularAccessInterveneEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessIntervene/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccessIntervenePOST(_response));
        });
    }

    protected processPatientVascularAccessIntervenePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者血管通路干预 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET54(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientVascularAccessInterveneViewResult> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessIntervene/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET54(_response));
        });
    }

    protected processFilterGET54(response: AxiosResponse): Promise<PatientVascularAccessInterveneViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientVascularAccessInterveneViewResult.fromJS(resultData200);
            return Promise.resolve<PatientVascularAccessInterveneViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientVascularAccessInterveneViewResult>(null as any);
    }

    /**
     * 患者血管通路干预 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientVascularAccessIntervenePOST2(body: PatientVascularAccessInterveneEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessIntervene";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccessIntervenePOST2(_response));
        });
    }

    protected processPatientVascularAccessIntervenePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者血管通路干预 -- 根据Id删除数据
     * @return Success
     */
    delete58(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessIntervene/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete58(_response));
        });
    }

    protected processDelete58(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientVascularAccessPlanServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者血管通路计划 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientVascularAccessPlanGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientVascularAccessPlanViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessPlan/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccessPlanGET(_response));
        });
    }

    protected processPatientVascularAccessPlanGET(response: AxiosResponse): Promise<PatientVascularAccessPlanViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientVascularAccessPlanViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientVascularAccessPlanViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientVascularAccessPlanViewResultEntry>(null as any);
    }

    /**
     * 患者血管通路计划 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientVascularAccessPlanPOST(id: string, body: PatientVascularAccessPlanEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessPlan/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccessPlanPOST(_response));
        });
    }

    protected processPatientVascularAccessPlanPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者血管通路计划 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET55(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientVascularAccessPlanViewResult> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessPlan/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET55(_response));
        });
    }

    protected processFilterGET55(response: AxiosResponse): Promise<PatientVascularAccessPlanViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientVascularAccessPlanViewResult.fromJS(resultData200);
            return Promise.resolve<PatientVascularAccessPlanViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientVascularAccessPlanViewResult>(null as any);
    }

    /**
     * 患者血管通路计划 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientVascularAccessPlanPOST2(body: PatientVascularAccessPlanEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessPlan";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccessPlanPOST2(_response));
        });
    }

    protected processPatientVascularAccessPlanPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者血管通路计划 -- 根据Id删除数据
     * @return Success
     */
    delete59(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessPlan/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete59(_response));
        });
    }

    protected processDelete59(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientVascularAccessPunctureServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者血管通路穿刺标记 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientVascularAccessPunctureGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientVascularAccessPunctureViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessPuncture/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccessPunctureGET(_response));
        });
    }

    protected processPatientVascularAccessPunctureGET(response: AxiosResponse): Promise<PatientVascularAccessPunctureViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientVascularAccessPunctureViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientVascularAccessPunctureViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientVascularAccessPunctureViewResultEntry>(null as any);
    }

    /**
     * 患者血管通路穿刺标记 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET56(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientVascularAccessPunctureViewResult> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessPuncture/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET56(_response));
        });
    }

    protected processFilterGET56(response: AxiosResponse): Promise<PatientVascularAccessPunctureViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientVascularAccessPunctureViewResult.fromJS(resultData200);
            return Promise.resolve<PatientVascularAccessPunctureViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientVascularAccessPunctureViewResult>(null as any);
    }

    /**
     * 患者血管通路穿刺标记
     * @return Success
     */
    views(patientId: string , cancelToken?: CancelToken | undefined): Promise<PatientVascularAccessPunctureViewResult> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessPuncture/{patientId}/Views";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processViews(_response));
        });
    }

    protected processViews(response: AxiosResponse): Promise<PatientVascularAccessPunctureViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientVascularAccessPunctureViewResult.fromJS(resultData200);
            return Promise.resolve<PatientVascularAccessPunctureViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientVascularAccessPunctureViewResult>(null as any);
    }

    /**
     * 患者血管通路穿刺标记 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientVascularAccessPuncturePOST(body: PatientVascularAccessPunctureEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessPuncture";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccessPuncturePOST(_response));
        });
    }

    protected processPatientVascularAccessPuncturePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者血管通路穿刺标记 -- 批量新增数据
     * @param body (optional)
     * @return Success
     */
    patientVascularAccessPuncturePOST2(patientId: string, body: PatientVascularAccessPunctureEditModel[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessPuncture/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccessPuncturePOST2(_response));
        });
    }

    protected processPatientVascularAccessPuncturePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者血管通路穿刺标记 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    update(id: string, body: PatientVascularAccessPunctureEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessPuncture/Update/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdate(_response));
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者血管通路穿刺标记 -- 根据Id删除数据
     * @return Success
     */
    delete60(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessPuncture/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete60(_response));
        });
    }

    protected processDelete60(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientVascularAccessPunctureSiteServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者血管通路穿刺标记点位 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientVascularAccessPunctureSiteGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientVascularAccessPunctureSiteViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessPunctureSite/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccessPunctureSiteGET(_response));
        });
    }

    protected processPatientVascularAccessPunctureSiteGET(response: AxiosResponse): Promise<PatientVascularAccessPunctureSiteViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientVascularAccessPunctureSiteViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientVascularAccessPunctureSiteViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientVascularAccessPunctureSiteViewResultEntry>(null as any);
    }

    /**
     * 患者血管通路穿刺标记点位 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientVascularAccessPunctureSitePOST(id: string, body: PatientVascularAccessPunctureSiteEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessPunctureSite/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccessPunctureSitePOST(_response));
        });
    }

    protected processPatientVascularAccessPunctureSitePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者血管通路穿刺标记点位 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET57(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientVascularAccessPunctureSiteViewResult> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessPunctureSite/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET57(_response));
        });
    }

    protected processFilterGET57(response: AxiosResponse): Promise<PatientVascularAccessPunctureSiteViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientVascularAccessPunctureSiteViewResult.fromJS(resultData200);
            return Promise.resolve<PatientVascularAccessPunctureSiteViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientVascularAccessPunctureSiteViewResult>(null as any);
    }

    /**
     * 患者血管通路穿刺标记点位 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientVascularAccessPunctureSitePOST2(body: PatientVascularAccessPunctureSiteEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessPunctureSite";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccessPunctureSitePOST2(_response));
        });
    }

    protected processPatientVascularAccessPunctureSitePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者血管通路穿刺标记点位 -- 根据Id删除数据
     * @return Success
     */
    delete61(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessPunctureSite/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete61(_response));
        });
    }

    protected processDelete61(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientVascularAccessSurgeryServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者血管通路手术 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientVascularAccessSurgeryGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientVascularAccessSurgeryViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessSurgery/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccessSurgeryGET(_response));
        });
    }

    protected processPatientVascularAccessSurgeryGET(response: AxiosResponse): Promise<PatientVascularAccessSurgeryViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientVascularAccessSurgeryViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientVascularAccessSurgeryViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientVascularAccessSurgeryViewResultEntry>(null as any);
    }

    /**
     * 患者血管通路手术 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientVascularAccessSurgeryPOST(id: string, body: PatientVascularAccessSurgeryEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessSurgery/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccessSurgeryPOST(_response));
        });
    }

    protected processPatientVascularAccessSurgeryPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者血管通路手术 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET58(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientVascularAccessSurgeryViewResult> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessSurgery/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET58(_response));
        });
    }

    protected processFilterGET58(response: AxiosResponse): Promise<PatientVascularAccessSurgeryViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientVascularAccessSurgeryViewResult.fromJS(resultData200);
            return Promise.resolve<PatientVascularAccessSurgeryViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientVascularAccessSurgeryViewResult>(null as any);
    }

    /**
     * 患者血管通路手术 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientVascularAccessSurgeryPOST2(body: PatientVascularAccessSurgeryEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessSurgery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientVascularAccessSurgeryPOST2(_response));
        });
    }

    protected processPatientVascularAccessSurgeryPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者血管通路手术 -- 根据Id删除数据
     * @return Success
     */
    delete62(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientVascularAccessSurgery/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete62(_response));
        });
    }

    protected processDelete62(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientWeightServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 体重记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientWeightGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientWeightViewResultEntry> {
        let url_ = this.baseUrl + "/api/PatientWeight/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientWeightGET(_response));
        });
    }

    protected processPatientWeightGET(response: AxiosResponse): Promise<PatientWeightViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientWeightViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientWeightViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientWeightViewResultEntry>(null as any);
    }

    /**
     * 体重记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientWeightPOST(id: string, body: PatientWeightViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientWeight/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientWeightPOST(_response));
        });
    }

    protected processPatientWeightPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 体重记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param patientId (optional) 患者标识
     * @return Success
     */
    filterGET59(filter: string | undefined, patientId: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientWeightViewResult> {
        let url_ = this.baseUrl + "/api/PatientWeight/Filter?";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET59(_response));
        });
    }

    protected processFilterGET59(response: AxiosResponse): Promise<PatientWeightViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientWeightViewResult.fromJS(resultData200);
            return Promise.resolve<PatientWeightViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientWeightViewResult>(null as any);
    }

    /**
     * 体重记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientWeightPOST2(body: PatientWeightViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientWeight";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientWeightPOST2(_response));
        });
    }

    protected processPatientWeightPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 体重记录 -- 根据Id删除数据
     * @return Success
     */
    delete63(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientWeight/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete63(_response));
        });
    }

    protected processDelete63(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PatientWeightBestServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 干体重记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    patientWeightBestGET(id: string , cancelToken?: CancelToken | undefined): Promise<PatientWeightBestResultEntry> {
        let url_ = this.baseUrl + "/api/PatientWeightBest/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientWeightBestGET(_response));
        });
    }

    protected processPatientWeightBestGET(response: AxiosResponse): Promise<PatientWeightBestResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientWeightBestResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientWeightBestResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientWeightBestResultEntry>(null as any);
    }

    /**
     * 干体重记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    patientWeightBestPOST(id: string, body: PatientWeightBestViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientWeightBest/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientWeightBestPOST(_response));
        });
    }

    protected processPatientWeightBestPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 干体重记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filterGET60(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientWeightBestResult> {
        let url_ = this.baseUrl + "/api/PatientWeightBest/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilterGET60(_response));
        });
    }

    protected processFilterGET60(response: AxiosResponse): Promise<PatientWeightBestResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientWeightBestResult.fromJS(resultData200);
            return Promise.resolve<PatientWeightBestResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientWeightBestResult>(null as any);
    }

    /**
     * 干体重记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    patientWeightBestPOST2(body: PatientWeightBestViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientWeightBest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientWeightBestPOST2(_response));
        });
    }

    protected processPatientWeightBestPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 干体重记录 -- 根据Id删除数据
     * @return Success
     */
    delete64(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PatientWeightBest/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete64(_response));
        });
    }

    protected processDelete64(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

/** 今日就诊显示患者标签视图 */
export class CureTodayPatientTagsView implements ICureTodayPatientTagsView {
    /** ID */
    id?: string | undefined;
    /** 级别 `DIC.PATIENT.TAG.LEVEL` */
    level?: string | undefined;
    /** 级别 `DIC.PATIENT.TAG.LEVEL` - 显示值 */
    levelLabel?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;

    constructor(data?: ICureTodayPatientTagsView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.level = _data["level"];
            this.levelLabel = _data["levelLabel"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.color = _data["color"];
        }
    }

    static fromJS(data: any): CureTodayPatientTagsView {
        data = typeof data === 'object' ? data : {};
        let result = new CureTodayPatientTagsView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["level"] = this.level;
        data["levelLabel"] = this.levelLabel;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["color"] = this.color;
        return data;
    }
}

/** 今日就诊显示患者标签视图 */
export interface ICureTodayPatientTagsView {
    /** ID */
    id?: string | undefined;
    /** 级别 `DIC.PATIENT.TAG.LEVEL` */
    level?: string | undefined;
    /** 级别 `DIC.PATIENT.TAG.LEVEL` - 显示值 */
    levelLabel?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
}

/** 导出电子病历体格检查 */
export class ExportPatientWeightAndPressureView implements IExportPatientWeightAndPressureView {
    /** 测量时间 */
    measureTime?: string | undefined;
    /** 收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 干体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透后体重 */
    afterWeight?: number | undefined;

    constructor(data?: IExportPatientWeightAndPressureView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.measureTime = _data["measureTime"];
            this.beforeSbp = _data["beforeSbp"];
            this.beforeDbp = _data["beforeDbp"];
            this.beforePulse = _data["beforePulse"];
            this.afterSbp = _data["afterSbp"];
            this.afterDbp = _data["afterDbp"];
            this.afterPulse = _data["afterPulse"];
            this.beforeWeight = _data["beforeWeight"];
            this.afterWeight = _data["afterWeight"];
        }
    }

    static fromJS(data: any): ExportPatientWeightAndPressureView {
        data = typeof data === 'object' ? data : {};
        let result = new ExportPatientWeightAndPressureView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["measureTime"] = this.measureTime;
        data["beforeSbp"] = this.beforeSbp;
        data["beforeDbp"] = this.beforeDbp;
        data["beforePulse"] = this.beforePulse;
        data["afterSbp"] = this.afterSbp;
        data["afterDbp"] = this.afterDbp;
        data["afterPulse"] = this.afterPulse;
        data["beforeWeight"] = this.beforeWeight;
        data["afterWeight"] = this.afterWeight;
        return data;
    }
}

/** 导出电子病历体格检查 */
export interface IExportPatientWeightAndPressureView {
    /** 测量时间 */
    measureTime?: string | undefined;
    /** 收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 干体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透后体重 */
    afterWeight?: number | undefined;
}

/** Reponse */
export class ExportPatientWeightAndPressureViewResult implements IExportPatientWeightAndPressureViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ExportPatientWeightAndPressureView[] | undefined;

    constructor(data?: IExportPatientWeightAndPressureViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ExportPatientWeightAndPressureView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExportPatientWeightAndPressureViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new ExportPatientWeightAndPressureViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IExportPatientWeightAndPressureViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ExportPatientWeightAndPressureView[] | undefined;
}

/** 文件列表 */
export class HfsFiles implements IHfsFiles {
    /** 标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
    /** 文件路径 */
    path?: string | undefined;
    /** url */
    url?: string | undefined;
    /** 状态0,1 *0：临时 1：正式* */
    status?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IHfsFiles) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.extension = _data["extension"];
            this.length = _data["length"];
            this.path = _data["path"];
            this.url = _data["url"];
            this.status = _data["status"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HfsFiles {
        data = typeof data === 'object' ? data : {};
        let result = new HfsFiles();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["extension"] = this.extension;
        data["length"] = this.length;
        data["path"] = this.path;
        data["url"] = this.url;
        data["status"] = this.status;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 文件列表 */
export interface IHfsFiles {
    /** 标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
    /** 文件路径 */
    path?: string | undefined;
    /** url */
    url?: string | undefined;
    /** 状态0,1 *0：临时 1：正式* */
    status?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 患者信息 */
export class Patient implements IPatient {
    /** 标识 */
    id?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 姓首字母 */
    surnameCode?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 *用于患者重名,默认填姓名,系统内默认显示别名,打印单据使用姓名* */
    name2?: string | undefined;
    /** 照片路径 */
    photo?: string | undefined;
    /** 人脸识别图像 */
    face?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 档案号 *XT{Year}{Month}{Sequence}* */
    archiveNumber?: string | undefined;
    /** 医保类型 `DIC.PEOPLE.MEDICARETYPE` *城镇职工,城镇居民* */
    medicareType?: string | undefined;
    /** 医保号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 血型 `DIC.PEOPLE.BLOODTYPE` *字典:A,B,O,未知* */
    bloodType?: string | undefined;
    /** RH `DIC.PEOPLE.RH` */
    rh?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 本人电话 */
    telephone?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 职业 `DIC.PEOPLE.PROFESSION` *个体,工人,农民,学生* */
    profession?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 家庭住址 */
    address?: string | undefined;
    /** 工作单位 */
    workUnit?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: dayjs.Dayjs | undefined;
    /** 透析状态 `DIC.PATIENT.DIALYSIS.STATE` *长期,临时* */
    dialysisState?: string | undefined;
    /** 透析状态是否转换 `DIC.PATIENT.DIALYSIS.STATE.TRANSITION` *0:未转换,1:已转换 编辑诊断-状态自动转换时管理这个状态* */
    dialysisStateTransition?: number;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 转归状态 `DIC.PROGNOSIS.TYPE` *患者编辑界面不做维护,自动管理* */
    prognosisState?: string | undefined;
    /** 传染病 `DIC.PATIENT.POSITIVE` *0:阴性,1:阳性 编辑诊断-传染病时管理这个状态* */
    positive?: number;
    /** 并发症 `DIC.PATIENT.COMPLICATION` *多选* */
    complication?: string | undefined;
    /** 主治医生 */
    doctor?: string | undefined;
    /** 主管护士 */
    nurse?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 病理诊断 *0:无,1:有* */
    diagnosisPathological?: number | undefined;
    /** 并发症诊断 *0:无,1:有* */
    diagnosisComplication?: number | undefined;
    /** 传染病诊断 *0:无,1:有* */
    diagnosisInfectiousDiseases?: number | undefined;
    /** 肿瘤诊断 *0:无,1:有* */
    diagnosisTumor?: number | undefined;
    /** 过敏诊断 *0:无,1:有* */
    diagnosisAllergy?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 患者数据初始化来源 *ihdis,his* */
    initialSource?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 指纹 */
    finger?: string | undefined;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 病历夹号 `DIC.PATIENT.CONDITION` *一般,病重,病危* */
    medicareCondition?: string | undefined;
    /** 下次感筛检验日期 */
    nextDate?: dayjs.Dayjs | undefined;
    /** 首次透析时采用的通路类型 */
    firstDialysisVascularAccess?: string | undefined;
    /** 首次透析时采取的方式 */
    firstDialysisMode?: string | undefined;
    /** 首次肾脏代替治疗时肾功能 */
    firstGfr?: string | undefined;
    /** 首次肾脏代替治疗时血肌酐水平 */
    firstScr?: string | undefined;
    /** 附加照片路径 */
    photoAuxiliary?: string | undefined;

    constructor(data?: IPatient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.surnameCode = _data["surnameCode"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.photo = _data["photo"];
            this.face = _data["face"];
            this.gender = _data["gender"];
            this.source = _data["source"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.department = _data["department"];
            this.ward = _data["ward"];
            this.bed = _data["bed"];
            this.archiveNumber = _data["archiveNumber"];
            this.medicareType = _data["medicareType"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.nationality = _data["nationality"];
            this.idType = _data["idType"];
            this.idNumber = _data["idNumber"];
            this.birthdate = _data["birthdate"] ? dayjs(_data["birthdate"].toString()) : <any>undefined;
            this.bloodType = _data["bloodType"];
            this.rh = _data["rh"];
            this.height = _data["height"];
            this.telephone = _data["telephone"];
            this.marital = _data["marital"];
            this.educationalLevel = _data["educationalLevel"];
            this.profession = _data["profession"];
            this.province = _data["province"];
            this.city = _data["city"];
            this.area = _data["area"];
            this.address = _data["address"];
            this.workUnit = _data["workUnit"];
            this.receiptDate = _data["receiptDate"] ? dayjs(_data["receiptDate"].toString()) : <any>undefined;
            this.dialysisState = _data["dialysisState"];
            this.dialysisStateTransition = _data["dialysisStateTransition"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.dialysisCountInit = _data["dialysisCountInit"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            this.prognosisState = _data["prognosisState"];
            this.positive = _data["positive"];
            this.complication = _data["complication"];
            this.doctor = _data["doctor"];
            this.nurse = _data["nurse"];
            this.diagnosis = _data["diagnosis"];
            this.diagnosisPathological = _data["diagnosisPathological"];
            this.diagnosisComplication = _data["diagnosisComplication"];
            this.diagnosisInfectiousDiseases = _data["diagnosisInfectiousDiseases"];
            this.diagnosisTumor = _data["diagnosisTumor"];
            this.diagnosisAllergy = _data["diagnosisAllergy"];
            this.remark = _data["remark"];
            this.initialSource = _data["initialSource"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.finger = _data["finger"];
            this.dossierNumber = _data["dossierNumber"];
            this.medicareCondition = _data["medicareCondition"];
            this.nextDate = _data["nextDate"] ? dayjs(_data["nextDate"].toString()) : <any>undefined;
            this.firstDialysisVascularAccess = _data["firstDialysisVascularAccess"];
            this.firstDialysisMode = _data["firstDialysisMode"];
            this.firstGfr = _data["firstGfr"];
            this.firstScr = _data["firstScr"];
            this.photoAuxiliary = _data["photoAuxiliary"];
        }
    }

    static fromJS(data: any): Patient {
        data = typeof data === 'object' ? data : {};
        let result = new Patient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["surnameCode"] = this.surnameCode;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["photo"] = this.photo;
        data["face"] = this.face;
        data["gender"] = this.gender;
        data["source"] = this.source;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["department"] = this.department;
        data["ward"] = this.ward;
        data["bed"] = this.bed;
        data["archiveNumber"] = this.archiveNumber;
        data["medicareType"] = this.medicareType;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["dialysisNumber"] = this.dialysisNumber;
        data["nationality"] = this.nationality;
        data["idType"] = this.idType;
        data["idNumber"] = this.idNumber;
        data["birthdate"] = this.birthdate ? this.birthdate.toLocaleString() : <any>undefined;
        data["bloodType"] = this.bloodType;
        data["rh"] = this.rh;
        data["height"] = this.height;
        data["telephone"] = this.telephone;
        data["marital"] = this.marital;
        data["educationalLevel"] = this.educationalLevel;
        data["profession"] = this.profession;
        data["province"] = this.province;
        data["city"] = this.city;
        data["area"] = this.area;
        data["address"] = this.address;
        data["workUnit"] = this.workUnit;
        data["receiptDate"] = this.receiptDate ? this.receiptDate.toLocaleString() : <any>undefined;
        data["dialysisState"] = this.dialysisState;
        data["dialysisStateTransition"] = this.dialysisStateTransition;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toLocaleString() : <any>undefined;
        data["dialysisCountInit"] = this.dialysisCountInit;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        data["prognosisState"] = this.prognosisState;
        data["positive"] = this.positive;
        data["complication"] = this.complication;
        data["doctor"] = this.doctor;
        data["nurse"] = this.nurse;
        data["diagnosis"] = this.diagnosis;
        data["diagnosisPathological"] = this.diagnosisPathological;
        data["diagnosisComplication"] = this.diagnosisComplication;
        data["diagnosisInfectiousDiseases"] = this.diagnosisInfectiousDiseases;
        data["diagnosisTumor"] = this.diagnosisTumor;
        data["diagnosisAllergy"] = this.diagnosisAllergy;
        data["remark"] = this.remark;
        data["initialSource"] = this.initialSource;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["finger"] = this.finger;
        data["dossierNumber"] = this.dossierNumber;
        data["medicareCondition"] = this.medicareCondition;
        data["nextDate"] = this.nextDate ? this.nextDate.toLocaleString() : <any>undefined;
        data["firstDialysisVascularAccess"] = this.firstDialysisVascularAccess;
        data["firstDialysisMode"] = this.firstDialysisMode;
        data["firstGfr"] = this.firstGfr;
        data["firstScr"] = this.firstScr;
        data["photoAuxiliary"] = this.photoAuxiliary;
        return data;
    }
}

/** 患者信息 */
export interface IPatient {
    /** 标识 */
    id?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 姓首字母 */
    surnameCode?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 *用于患者重名,默认填姓名,系统内默认显示别名,打印单据使用姓名* */
    name2?: string | undefined;
    /** 照片路径 */
    photo?: string | undefined;
    /** 人脸识别图像 */
    face?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 档案号 *XT{Year}{Month}{Sequence}* */
    archiveNumber?: string | undefined;
    /** 医保类型 `DIC.PEOPLE.MEDICARETYPE` *城镇职工,城镇居民* */
    medicareType?: string | undefined;
    /** 医保号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 血型 `DIC.PEOPLE.BLOODTYPE` *字典:A,B,O,未知* */
    bloodType?: string | undefined;
    /** RH `DIC.PEOPLE.RH` */
    rh?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 本人电话 */
    telephone?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 职业 `DIC.PEOPLE.PROFESSION` *个体,工人,农民,学生* */
    profession?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 家庭住址 */
    address?: string | undefined;
    /** 工作单位 */
    workUnit?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: dayjs.Dayjs | undefined;
    /** 透析状态 `DIC.PATIENT.DIALYSIS.STATE` *长期,临时* */
    dialysisState?: string | undefined;
    /** 透析状态是否转换 `DIC.PATIENT.DIALYSIS.STATE.TRANSITION` *0:未转换,1:已转换 编辑诊断-状态自动转换时管理这个状态* */
    dialysisStateTransition?: number;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 转归状态 `DIC.PROGNOSIS.TYPE` *患者编辑界面不做维护,自动管理* */
    prognosisState?: string | undefined;
    /** 传染病 `DIC.PATIENT.POSITIVE` *0:阴性,1:阳性 编辑诊断-传染病时管理这个状态* */
    positive?: number;
    /** 并发症 `DIC.PATIENT.COMPLICATION` *多选* */
    complication?: string | undefined;
    /** 主治医生 */
    doctor?: string | undefined;
    /** 主管护士 */
    nurse?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 病理诊断 *0:无,1:有* */
    diagnosisPathological?: number | undefined;
    /** 并发症诊断 *0:无,1:有* */
    diagnosisComplication?: number | undefined;
    /** 传染病诊断 *0:无,1:有* */
    diagnosisInfectiousDiseases?: number | undefined;
    /** 肿瘤诊断 *0:无,1:有* */
    diagnosisTumor?: number | undefined;
    /** 过敏诊断 *0:无,1:有* */
    diagnosisAllergy?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 患者数据初始化来源 *ihdis,his* */
    initialSource?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 指纹 */
    finger?: string | undefined;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 病历夹号 `DIC.PATIENT.CONDITION` *一般,病重,病危* */
    medicareCondition?: string | undefined;
    /** 下次感筛检验日期 */
    nextDate?: dayjs.Dayjs | undefined;
    /** 首次透析时采用的通路类型 */
    firstDialysisVascularAccess?: string | undefined;
    /** 首次透析时采取的方式 */
    firstDialysisMode?: string | undefined;
    /** 首次肾脏代替治疗时肾功能 */
    firstGfr?: string | undefined;
    /** 首次肾脏代替治疗时血肌酐水平 */
    firstScr?: string | undefined;
    /** 附加照片路径 */
    photoAuxiliary?: string | undefined;
}

export class PatientAdequacyView implements IPatientAdequacyView {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 检查日期 */
    date?: dayjs.Dayjs;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 透后体重 *kg* */
    weight?: number;
    /** BMI *自动计算* */
    bmi?: number | undefined;
    /** 透前尿素 *mmol/L Blood Urea Nitrogen* */
    bunBefore?: number;
    /** 透后尿素 *mmol/L Blood Urea Nitrogen* */
    bunAfter?: number;
    /** 每次透析时间 *分钟/次* */
    dialysisTime?: number;
    /** 每次透析超滤量 *L* */
    ufv?: number;
    /** spKt/V *自动计算* */
    ktv?: number | undefined;
    /** URR *% 自动计算* */
    urr?: number | undefined;
    /** 患者情况 */
    patientCondition?: string | undefined;
    /** 干体重 *kg* */
    bestWeight?: number | undefined;
    /** 干体重是否达标0,1 */
    bestWeightCompliance?: number | undefined;
    /** 是否手工录入0,1 */
    manualFlag?: number | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;

    constructor(data?: IPatientAdequacyView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.height = _data["height"];
            this.weight = _data["weight"];
            this.bmi = _data["bmi"];
            this.bunBefore = _data["bunBefore"];
            this.bunAfter = _data["bunAfter"];
            this.dialysisTime = _data["dialysisTime"];
            this.ufv = _data["ufv"];
            this.ktv = _data["ktv"];
            this.urr = _data["urr"];
            this.patientCondition = _data["patientCondition"];
            this.bestWeight = _data["bestWeight"];
            this.bestWeightCompliance = _data["bestWeightCompliance"];
            this.manualFlag = _data["manualFlag"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientAdequacyView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientAdequacyView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["height"] = this.height;
        data["weight"] = this.weight;
        data["bmi"] = this.bmi;
        data["bunBefore"] = this.bunBefore;
        data["bunAfter"] = this.bunAfter;
        data["dialysisTime"] = this.dialysisTime;
        data["ufv"] = this.ufv;
        data["ktv"] = this.ktv;
        data["urr"] = this.urr;
        data["patientCondition"] = this.patientCondition;
        data["bestWeight"] = this.bestWeight;
        data["bestWeightCompliance"] = this.bestWeightCompliance;
        data["manualFlag"] = this.manualFlag;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPatientAdequacyView {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 检查日期 */
    date?: dayjs.Dayjs;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 透后体重 *kg* */
    weight?: number;
    /** BMI *自动计算* */
    bmi?: number | undefined;
    /** 透前尿素 *mmol/L Blood Urea Nitrogen* */
    bunBefore?: number;
    /** 透后尿素 *mmol/L Blood Urea Nitrogen* */
    bunAfter?: number;
    /** 每次透析时间 *分钟/次* */
    dialysisTime?: number;
    /** 每次透析超滤量 *L* */
    ufv?: number;
    /** spKt/V *自动计算* */
    ktv?: number | undefined;
    /** URR *% 自动计算* */
    urr?: number | undefined;
    /** 患者情况 */
    patientCondition?: string | undefined;
    /** 干体重 *kg* */
    bestWeight?: number | undefined;
    /** 干体重是否达标0,1 */
    bestWeightCompliance?: number | undefined;
    /** 是否手工录入0,1 */
    manualFlag?: number | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
}

/** Reponse */
export class PatientAdequacyViewResultEntry implements IPatientAdequacyViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientAdequacyView;

    constructor(data?: IPatientAdequacyViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientAdequacyView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientAdequacyViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientAdequacyViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientAdequacyViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientAdequacyView;
}

/** 档案管理 */
export class PatientArchive implements IPatientArchive {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 标签 `DIC.SYS.ARCHIVE.TAG` */
    tag?: string | undefined;
    /** 分类 `DIC.SYS.ARCHIVE.TYPE` */
    type?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 档案日期 */
    date?: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;

    constructor(data?: IPatientArchive) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.tag = _data["tag"];
            this.type = _data["type"];
            this.name = _data["name"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientArchive {
        data = typeof data === 'object' ? data : {};
        let result = new PatientArchive();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["tag"] = this.tag;
        data["type"] = this.type;
        data["name"] = this.name;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        return data;
    }
}

/** 档案管理 */
export interface IPatientArchive {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 标签 `DIC.SYS.ARCHIVE.TAG` */
    tag?: string | undefined;
    /** 分类 `DIC.SYS.ARCHIVE.TYPE` */
    type?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 档案日期 */
    date?: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
}

export class PatientArchiveEditModel implements IPatientArchiveEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 标签 `DIC.SYS.ARCHIVE.TAG` */
    tag!: string;
    /** 分类 `DIC.SYS.ARCHIVE.TYPE` */
    type!: string;
    /** 名称 */
    name!: string;
    /** 档案日期 */
    date!: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 文件列表 */
    archiveFiles?: PatientArchiveFileItem[] | undefined;

    constructor(data?: IPatientArchiveEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.tag = _data["tag"];
            this.type = _data["type"];
            this.name = _data["name"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            if (Array.isArray(_data["archiveFiles"])) {
                this.archiveFiles = [] as any;
                for (let item of _data["archiveFiles"])
                    this.archiveFiles!.push(PatientArchiveFileItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientArchiveEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientArchiveEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["tag"] = this.tag;
        data["type"] = this.type;
        data["name"] = this.name;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        if (Array.isArray(this.archiveFiles)) {
            data["archiveFiles"] = [];
            for (let item of this.archiveFiles)
                data["archiveFiles"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPatientArchiveEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 标签 `DIC.SYS.ARCHIVE.TAG` */
    tag: string;
    /** 分类 `DIC.SYS.ARCHIVE.TYPE` */
    type: string;
    /** 名称 */
    name: string;
    /** 档案日期 */
    date: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 文件列表 */
    archiveFiles?: PatientArchiveFileItem[] | undefined;
}

/** 档案管理附件 */
export class PatientArchiveFile implements IPatientArchiveFile {
    /** 标识 */
    id?: string | undefined;
    /** [档案管理标识](档案管理) */
    patientArchiveId?: string | undefined;
    /** [文件标识](文件列表) */
    hfsFilesId?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    patientArchives?: PatientArchive;
    hfsFiless?: HfsFiles;

    constructor(data?: IPatientArchiveFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientArchiveId = _data["patientArchiveId"];
            this.hfsFilesId = _data["hfsFilesId"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.patientArchives = _data["patientArchives"] ? PatientArchive.fromJS(_data["patientArchives"]) : <any>undefined;
            this.hfsFiless = _data["hfsFiless"] ? HfsFiles.fromJS(_data["hfsFiless"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientArchiveFile {
        data = typeof data === 'object' ? data : {};
        let result = new PatientArchiveFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientArchiveId"] = this.patientArchiveId;
        data["hfsFilesId"] = this.hfsFilesId;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["patientArchives"] = this.patientArchives ? this.patientArchives.toJSON() : <any>undefined;
        data["hfsFiless"] = this.hfsFiless ? this.hfsFiless.toJSON() : <any>undefined;
        return data;
    }
}

/** 档案管理附件 */
export interface IPatientArchiveFile {
    /** 标识 */
    id?: string | undefined;
    /** [档案管理标识](档案管理) */
    patientArchiveId?: string | undefined;
    /** [文件标识](文件列表) */
    hfsFilesId?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    patientArchives?: PatientArchive;
    hfsFiless?: HfsFiles;
}

export class PatientArchiveFileItem implements IPatientArchiveFileItem {
    /** 文件标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 文件路径 */
    url?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;

    constructor(data?: IPatientArchiveFileItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.url = _data["url"];
            this.extension = _data["extension"];
            this.length = _data["length"];
        }
    }

    static fromJS(data: any): PatientArchiveFileItem {
        data = typeof data === 'object' ? data : {};
        let result = new PatientArchiveFileItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["url"] = this.url;
        data["extension"] = this.extension;
        data["length"] = this.length;
        return data;
    }
}

export interface IPatientArchiveFileItem {
    /** 文件标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 文件路径 */
    url?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
}

/** Reponse */
export class PatientArchiveFileResult implements IPatientArchiveFileResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientArchiveFile[] | undefined;

    constructor(data?: IPatientArchiveFileResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientArchiveFile.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientArchiveFileResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientArchiveFileResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientArchiveFileResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientArchiveFile[] | undefined;
}

/** Reponse */
export class PatientArchiveFileResultEntry implements IPatientArchiveFileResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientArchiveFile;

    constructor(data?: IPatientArchiveFileResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientArchiveFile.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientArchiveFileResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientArchiveFileResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientArchiveFileResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientArchiveFile;
}

/** 档案管理附件 (ViewModel) */
export class PatientArchiveFileViewModel implements IPatientArchiveFileViewModel {
    /** [档案管理标识](档案管理Id) */
    patientArchiveId!: string;
    /** [文件标识](文件列表Id) */
    hfsFilesId!: string;

    constructor(data?: IPatientArchiveFileViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientArchiveId = _data["patientArchiveId"];
            this.hfsFilesId = _data["hfsFilesId"];
        }
    }

    static fromJS(data: any): PatientArchiveFileViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientArchiveFileViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientArchiveId"] = this.patientArchiveId;
        data["hfsFilesId"] = this.hfsFilesId;
        return data;
    }
}

/** 档案管理附件 (ViewModel) */
export interface IPatientArchiveFileViewModel {
    /** [档案管理标识](档案管理Id) */
    patientArchiveId: string;
    /** [文件标识](文件列表Id) */
    hfsFilesId: string;
}

/** 档案管理 */
export class PatientArchiveView implements IPatientArchiveView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 标签 `DIC.SYS.ARCHIVE.TAG` */
    tag!: string;
    /** 分类 `DIC.SYS.ARCHIVE.TYPE` */
    type!: string;
    /** 名称 */
    name!: string;
    /** 档案日期 */
    date!: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 文件列表 */
    archiveFiles?: PatientArchiveFileItem[] | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 标签名称 */
    tagName?: string | undefined;
    /** 分类名称 */
    typeName?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientArchiveView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.tag = _data["tag"];
            this.type = _data["type"];
            this.name = _data["name"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            if (Array.isArray(_data["archiveFiles"])) {
                this.archiveFiles = [] as any;
                for (let item of _data["archiveFiles"])
                    this.archiveFiles!.push(PatientArchiveFileItem.fromJS(item));
            }
            this.id = _data["id"];
            this.patientName = _data["patientName"];
            this.tagName = _data["tagName"];
            this.typeName = _data["typeName"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientArchiveView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientArchiveView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["tag"] = this.tag;
        data["type"] = this.type;
        data["name"] = this.name;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        if (Array.isArray(this.archiveFiles)) {
            data["archiveFiles"] = [];
            for (let item of this.archiveFiles)
                data["archiveFiles"].push(item.toJSON());
        }
        data["id"] = this.id;
        data["patientName"] = this.patientName;
        data["tagName"] = this.tagName;
        data["typeName"] = this.typeName;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 档案管理 */
export interface IPatientArchiveView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 标签 `DIC.SYS.ARCHIVE.TAG` */
    tag: string;
    /** 分类 `DIC.SYS.ARCHIVE.TYPE` */
    type: string;
    /** 名称 */
    name: string;
    /** 档案日期 */
    date: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 文件列表 */
    archiveFiles?: PatientArchiveFileItem[] | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 标签名称 */
    tagName?: string | undefined;
    /** 分类名称 */
    typeName?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientArchiveViewResult implements IPatientArchiveViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientArchiveView[] | undefined;

    constructor(data?: IPatientArchiveViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientArchiveView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientArchiveViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientArchiveViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientArchiveViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientArchiveView[] | undefined;
}

/** Reponse */
export class PatientArchiveViewResultEntry implements IPatientArchiveViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientArchiveView;

    constructor(data?: IPatientArchiveViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientArchiveView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientArchiveViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientArchiveViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientArchiveViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientArchiveView;
}

/** 评估 */
export class PatientAssement implements IPatientAssement {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;

    constructor(data?: IPatientAssement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientAssement {
        data = typeof data === 'object' ? data : {};
        let result = new PatientAssement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        return data;
    }
}

/** 评估 */
export interface IPatientAssement {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
}

/** Reponse */
export class PatientAssementResult implements IPatientAssementResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientAssement[] | undefined;

    constructor(data?: IPatientAssementResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientAssement.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientAssementResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientAssementResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientAssementResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientAssement[] | undefined;
}

/** Reponse */
export class PatientAssementResultEntry implements IPatientAssementResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientAssement;

    constructor(data?: IPatientAssementResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientAssement.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientAssementResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientAssementResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientAssementResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientAssement;
}

/** 透析评估 */
export class PatientAssementView implements IPatientAssementView {
    /** 标识 */
    id?: string | undefined;
    /** 评估时间 */
    date?: dayjs.Dayjs;
    /** 评估类型 */
    type?: string | undefined;
    /** 评估类型显示值 */
    typeLabel?: string | undefined;
    /** 表单结构 */
    data?: { [key: string]: string; } | undefined;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 填表人 */
    preparer?: string | undefined;
    /** 创建人 */
    creater?: string | undefined;

    constructor(data?: IPatientAssementView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.typeLabel = _data["typeLabel"];
            if (_data["data"]) {
                this.data = {} as any;
                for (let key in _data["data"]) {
                    if (_data["data"].hasOwnProperty(key))
                        (<any>this.data)![key] = _data["data"][key];
                }
            }
            if (_data["dataValue"]) {
                this.dataValue = {} as any;
                for (let key in _data["dataValue"]) {
                    if (_data["dataValue"].hasOwnProperty(key))
                        (<any>this.dataValue)![key] = _data["dataValue"][key];
                }
            }
            this.preparer = _data["preparer"];
            this.creater = _data["creater"];
        }
    }

    static fromJS(data: any): PatientAssementView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientAssementView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["type"] = this.type;
        data["typeLabel"] = this.typeLabel;
        if (this.data) {
            data["data"] = {};
            for (let key in this.data) {
                if (this.data.hasOwnProperty(key))
                    (<any>data["data"])[key] = (<any>this.data)[key];
            }
        }
        if (this.dataValue) {
            data["dataValue"] = {};
            for (let key in this.dataValue) {
                if (this.dataValue.hasOwnProperty(key))
                    (<any>data["dataValue"])[key] = (<any>this.dataValue)[key];
            }
        }
        data["preparer"] = this.preparer;
        data["creater"] = this.creater;
        return data;
    }
}

/** 透析评估 */
export interface IPatientAssementView {
    /** 标识 */
    id?: string | undefined;
    /** 评估时间 */
    date?: dayjs.Dayjs;
    /** 评估类型 */
    type?: string | undefined;
    /** 评估类型显示值 */
    typeLabel?: string | undefined;
    /** 表单结构 */
    data?: { [key: string]: string; } | undefined;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 填表人 */
    preparer?: string | undefined;
    /** 创建人 */
    creater?: string | undefined;
}

/** 评估 (ViewModel) */
export class PatientAssementViewModel implements IPatientAssementViewModel {
    /** [患者标识](患者信息Id) */
    patientId!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;

    constructor(data?: IPatientAssementViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): PatientAssementViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientAssementViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        return data;
    }
}

/** 评估 (ViewModel) */
export interface IPatientAssementViewModel {
    /** [患者标识](患者信息Id) */
    patientId: string;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
}

/** Reponse */
export class PatientAssementViewResult implements IPatientAssementViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientAssementView[] | undefined;

    constructor(data?: IPatientAssementViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientAssementView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientAssementViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientAssementViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientAssementViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientAssementView[] | undefined;
}

/** Reponse */
export class PatientAssementViewResultEntry implements IPatientAssementViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientAssementView;

    constructor(data?: IPatientAssementViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientAssementView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientAssementViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientAssementViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientAssementViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientAssementView;
}

/** 辅助检查上报 */
export class PatientAuxiliaryInspectionEditModel implements IPatientAuxiliaryInspectionEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 检查类型 */
    type!: string;
    /** 检测日期 */
    date!: dayjs.Dayjs;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 描述 */
    description?: string | undefined;

    constructor(data?: IPatientAuxiliaryInspectionEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.type = _data["type"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            if (_data["dataValue"]) {
                this.dataValue = {} as any;
                for (let key in _data["dataValue"]) {
                    if (_data["dataValue"].hasOwnProperty(key))
                        (<any>this.dataValue)![key] = _data["dataValue"][key];
                }
            }
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): PatientAuxiliaryInspectionEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientAuxiliaryInspectionEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["type"] = this.type;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        if (this.dataValue) {
            data["dataValue"] = {};
            for (let key in this.dataValue) {
                if (this.dataValue.hasOwnProperty(key))
                    (<any>data["dataValue"])[key] = (<any>this.dataValue)[key];
            }
        }
        data["description"] = this.description;
        return data;
    }
}

/** 辅助检查上报 */
export interface IPatientAuxiliaryInspectionEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 检查类型 */
    type: string;
    /** 检测日期 */
    date: dayjs.Dayjs;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 描述 */
    description?: string | undefined;
}

/** 辅助检查上报分组明细 */
export class PatientAuxiliaryInspectionGroupDetail implements IPatientAuxiliaryInspectionGroupDetail {
    /** 检测日期 */
    date?: dayjs.Dayjs;
    /** 标识 */
    id?: string | undefined;

    constructor(data?: IPatientAuxiliaryInspectionGroupDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): PatientAuxiliaryInspectionGroupDetail {
        data = typeof data === 'object' ? data : {};
        let result = new PatientAuxiliaryInspectionGroupDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

/** 辅助检查上报分组明细 */
export interface IPatientAuxiliaryInspectionGroupDetail {
    /** 检测日期 */
    date?: dayjs.Dayjs;
    /** 标识 */
    id?: string | undefined;
}

/** 辅助检查上报分组 */
export class PatientAuxiliaryInspectionGroupView implements IPatientAuxiliaryInspectionGroupView {
    /** 检查类型 */
    type?: string | undefined;
    /** 检查类型说明 */
    readonly typeThs?: string | undefined;
    /** 辅助检查上报分组明细 */
    patientAuxiliaryInspectionGroupDetails?: PatientAuxiliaryInspectionGroupDetail[] | undefined;

    constructor(data?: IPatientAuxiliaryInspectionGroupView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            (<any>this).typeThs = _data["typeThs"];
            if (Array.isArray(_data["patientAuxiliaryInspectionGroupDetails"])) {
                this.patientAuxiliaryInspectionGroupDetails = [] as any;
                for (let item of _data["patientAuxiliaryInspectionGroupDetails"])
                    this.patientAuxiliaryInspectionGroupDetails!.push(PatientAuxiliaryInspectionGroupDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientAuxiliaryInspectionGroupView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientAuxiliaryInspectionGroupView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["typeThs"] = this.typeThs;
        if (Array.isArray(this.patientAuxiliaryInspectionGroupDetails)) {
            data["patientAuxiliaryInspectionGroupDetails"] = [];
            for (let item of this.patientAuxiliaryInspectionGroupDetails)
                data["patientAuxiliaryInspectionGroupDetails"].push(item.toJSON());
        }
        return data;
    }
}

/** 辅助检查上报分组 */
export interface IPatientAuxiliaryInspectionGroupView {
    /** 检查类型 */
    type?: string | undefined;
    /** 检查类型说明 */
    typeThs?: string | undefined;
    /** 辅助检查上报分组明细 */
    patientAuxiliaryInspectionGroupDetails?: PatientAuxiliaryInspectionGroupDetail[] | undefined;
}

/** Reponse */
export class PatientAuxiliaryInspectionGroupViewResult implements IPatientAuxiliaryInspectionGroupViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientAuxiliaryInspectionGroupView[] | undefined;

    constructor(data?: IPatientAuxiliaryInspectionGroupViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientAuxiliaryInspectionGroupView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientAuxiliaryInspectionGroupViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientAuxiliaryInspectionGroupViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientAuxiliaryInspectionGroupViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientAuxiliaryInspectionGroupView[] | undefined;
}

/** 辅助检查上报 */
export class PatientAuxiliaryInspectionView implements IPatientAuxiliaryInspectionView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 检查类型 */
    type!: string;
    /** 检测日期 */
    date!: dayjs.Dayjs;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 描述 */
    description?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientAuxiliaryInspectionView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.type = _data["type"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            if (_data["dataValue"]) {
                this.dataValue = {} as any;
                for (let key in _data["dataValue"]) {
                    if (_data["dataValue"].hasOwnProperty(key))
                        (<any>this.dataValue)![key] = _data["dataValue"][key];
                }
            }
            this.description = _data["description"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientAuxiliaryInspectionView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientAuxiliaryInspectionView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["type"] = this.type;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        if (this.dataValue) {
            data["dataValue"] = {};
            for (let key in this.dataValue) {
                if (this.dataValue.hasOwnProperty(key))
                    (<any>data["dataValue"])[key] = (<any>this.dataValue)[key];
            }
        }
        data["description"] = this.description;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 辅助检查上报 */
export interface IPatientAuxiliaryInspectionView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 检查类型 */
    type: string;
    /** 检测日期 */
    date: dayjs.Dayjs;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 描述 */
    description?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientAuxiliaryInspectionViewResult implements IPatientAuxiliaryInspectionViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientAuxiliaryInspectionView[] | undefined;

    constructor(data?: IPatientAuxiliaryInspectionViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientAuxiliaryInspectionView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientAuxiliaryInspectionViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientAuxiliaryInspectionViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientAuxiliaryInspectionViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientAuxiliaryInspectionView[] | undefined;
}

/** Reponse */
export class PatientAuxiliaryInspectionViewResultEntry implements IPatientAuxiliaryInspectionViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientAuxiliaryInspectionView;

    constructor(data?: IPatientAuxiliaryInspectionViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientAuxiliaryInspectionView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientAuxiliaryInspectionViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientAuxiliaryInspectionViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientAuxiliaryInspectionViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientAuxiliaryInspectionView;
}

/** 生命体征 - 血压view */
export class PatientBatchBloodPressureView implements IPatientBatchBloodPressureView {
    /** [患者姓名] */
    name?: string | undefined;
    /** [患者别名] */
    name2?: string | undefined;
    /** [患者全名] */
    patientName?: string | undefined;
    /** 证件类型 */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 测量时间 */
    measureTime?: dayjs.Dayjs;
    /** 测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢* */
    position?: string | undefined;
    /** 测量阶段 `DIC.PATIENT.MEASURE.TAG` *透前,透后,非透析日* */
    tag?: string | undefined;
    /** 收缩压 *mmHg* */
    sbp?: number;
    /** 舒张压 *mmHg* */
    dbp?: number;
    /** 脉搏 *次/分* */
    pulse?: number;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IPatientBatchBloodPressureView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.patientName = _data["patientName"];
            this.idType = _data["idType"];
            this.idNumber = _data["idNumber"];
            this.measureTime = _data["measureTime"] ? dayjs(_data["measureTime"].toString()) : <any>undefined;
            this.position = _data["position"];
            this.tag = _data["tag"];
            this.sbp = _data["sbp"];
            this.dbp = _data["dbp"];
            this.pulse = _data["pulse"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): PatientBatchBloodPressureView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBatchBloodPressureView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["patientName"] = this.patientName;
        data["idType"] = this.idType;
        data["idNumber"] = this.idNumber;
        data["measureTime"] = this.measureTime ? this.measureTime.toLocaleString() : <any>undefined;
        data["position"] = this.position;
        data["tag"] = this.tag;
        data["sbp"] = this.sbp;
        data["dbp"] = this.dbp;
        data["pulse"] = this.pulse;
        data["remark"] = this.remark;
        return data;
    }
}

/** 生命体征 - 血压view */
export interface IPatientBatchBloodPressureView {
    /** [患者姓名] */
    name?: string | undefined;
    /** [患者别名] */
    name2?: string | undefined;
    /** [患者全名] */
    patientName?: string | undefined;
    /** 证件类型 */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 测量时间 */
    measureTime?: dayjs.Dayjs;
    /** 测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢* */
    position?: string | undefined;
    /** 测量阶段 `DIC.PATIENT.MEASURE.TAG` *透前,透后,非透析日* */
    tag?: string | undefined;
    /** 收缩压 *mmHg* */
    sbp?: number;
    /** 舒张压 *mmHg* */
    dbp?: number;
    /** 脉搏 *次/分* */
    pulse?: number;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class PatientBatchBloodPressureViewResult implements IPatientBatchBloodPressureViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBatchBloodPressureView[] | undefined;

    constructor(data?: IPatientBatchBloodPressureViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientBatchBloodPressureView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientBatchBloodPressureViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBatchBloodPressureViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientBatchBloodPressureViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBatchBloodPressureView[] | undefined;
}

/** 患者信息批量查询/导出、打印 - 透析医嘱 */
export class PatientBatchCureDaView implements IPatientBatchCureDaView {
    /** 标识 */
    id?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 开立医生 */
    doctorName?: string | undefined;
    /** 核对护士 */
    checkNurseName?: string | undefined;
    /** 执行护士 */
    nurseName?: string | undefined;
    /** 核对时间 */
    checkTime?: dayjs.Dayjs | undefined;
    /** 执行时间 */
    execTime?: dayjs.Dayjs | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 执行状态 `DIC.DIALYSIS.DA.STATUS` *待核对,已核对(待执行),已撤销,待调整,已执行* */
    status?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    patientAge?: string | undefined;
    patientGender?: string | undefined;
    patientDept?: string | undefined;
    patientInNo?: string | undefined;
    patientBed?: string | undefined;
    hospName?: string | undefined;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 分组 */
    group?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    openTimeHH?: string | undefined;
    openTimeDate?: string | undefined;
    execNurseName?: string | undefined;
    execNurseTime?: string | undefined;

    constructor(data?: IPatientBatchCureDaView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.idNumber = _data["idNumber"];
            this.idType = _data["idType"];
            this.enabled = _data["enabled"];
            this.usage = _data["usage"];
            this.doctorName = _data["doctorName"];
            this.checkNurseName = _data["checkNurseName"];
            this.nurseName = _data["nurseName"];
            this.checkTime = _data["checkTime"] ? dayjs(_data["checkTime"].toString()) : <any>undefined;
            this.execTime = _data["execTime"] ? dayjs(_data["execTime"].toString()) : <any>undefined;
            this.doctorCreateTime = _data["doctorCreateTime"] ? dayjs(_data["doctorCreateTime"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.patientName = _data["patientName"];
            this.patientAge = _data["patientAge"];
            this.patientGender = _data["patientGender"];
            this.patientDept = _data["patientDept"];
            this.patientInNo = _data["patientInNo"];
            this.patientBed = _data["patientBed"];
            this.hospName = _data["hospName"];
            this.cureDaContent = _data["cureDaContent"];
            this.group = _data["group"];
            this.groupId = _data["groupId"];
            this.type = _data["type"];
            this.typeName = _data["typeName"];
            this.content = _data["content"];
            this.openTimeHH = _data["openTimeHH"];
            this.openTimeDate = _data["openTimeDate"];
            this.execNurseName = _data["execNurseName"];
            this.execNurseTime = _data["execNurseTime"];
        }
    }

    static fromJS(data: any): PatientBatchCureDaView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBatchCureDaView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["idNumber"] = this.idNumber;
        data["idType"] = this.idType;
        data["enabled"] = this.enabled;
        data["usage"] = this.usage;
        data["doctorName"] = this.doctorName;
        data["checkNurseName"] = this.checkNurseName;
        data["nurseName"] = this.nurseName;
        data["checkTime"] = this.checkTime ? this.checkTime.toLocaleString() : <any>undefined;
        data["execTime"] = this.execTime ? this.execTime.toLocaleString() : <any>undefined;
        data["doctorCreateTime"] = this.doctorCreateTime ? this.doctorCreateTime.toLocaleString() : <any>undefined;
        data["status"] = this.status;
        data["patientName"] = this.patientName;
        data["patientAge"] = this.patientAge;
        data["patientGender"] = this.patientGender;
        data["patientDept"] = this.patientDept;
        data["patientInNo"] = this.patientInNo;
        data["patientBed"] = this.patientBed;
        data["hospName"] = this.hospName;
        data["cureDaContent"] = this.cureDaContent;
        data["group"] = this.group;
        data["groupId"] = this.groupId;
        data["type"] = this.type;
        data["typeName"] = this.typeName;
        data["content"] = this.content;
        data["openTimeHH"] = this.openTimeHH;
        data["openTimeDate"] = this.openTimeDate;
        data["execNurseName"] = this.execNurseName;
        data["execNurseTime"] = this.execNurseTime;
        return data;
    }
}

/** 患者信息批量查询/导出、打印 - 透析医嘱 */
export interface IPatientBatchCureDaView {
    /** 标识 */
    id?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 开立医生 */
    doctorName?: string | undefined;
    /** 核对护士 */
    checkNurseName?: string | undefined;
    /** 执行护士 */
    nurseName?: string | undefined;
    /** 核对时间 */
    checkTime?: dayjs.Dayjs | undefined;
    /** 执行时间 */
    execTime?: dayjs.Dayjs | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 执行状态 `DIC.DIALYSIS.DA.STATUS` *待核对,已核对(待执行),已撤销,待调整,已执行* */
    status?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    patientAge?: string | undefined;
    patientGender?: string | undefined;
    patientDept?: string | undefined;
    patientInNo?: string | undefined;
    patientBed?: string | undefined;
    hospName?: string | undefined;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 分组 */
    group?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    openTimeHH?: string | undefined;
    openTimeDate?: string | undefined;
    execNurseName?: string | undefined;
    execNurseTime?: string | undefined;
}

/** Reponse */
export class PatientBatchCureDaViewResult implements IPatientBatchCureDaViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBatchCureDaView[] | undefined;

    constructor(data?: IPatientBatchCureDaViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientBatchCureDaView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientBatchCureDaViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBatchCureDaViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientBatchCureDaViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBatchCureDaView[] | undefined;
}

/** 患者信息批量查询/导出 - 透析测量数据 */
export class PatientBatchCureMeasureView implements IPatientBatchCureMeasureView {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析方式 */
    dialysisMode?: string | undefined;
    /** 透析方式显示值 */
    dialysisModeLabel?: string | undefined;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** 治疗流程状态 `DIC.DIALYSIS.STATUS` *已签到,上机准备,治疗中,已下机,已结束* */
    status?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前体重方式显示值 */
    beforeWeightModeLabel?: string | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后体重方式显示值 */
    afterWeightModeLabel?: string | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 称重脱水量 *ml* */
    ufvWeight?: number | undefined;
    /** 血管通路名称 */
    patientVascularAccessName?: string | undefined;
    patientVascularAccessType?: string | undefined;
    /** 血管通路标识 */
    patientVascularAccessId?: string | undefined;
    patientOtherVascularAccessName?: string | undefined;
    patientOtherVascularAccessType?: string | undefined;
    /** 血管通路标识 */
    patientOtherVascularAccessId?: string | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    beforeBpPosition?: string | undefined;
    /** 透前血压测量位置显示值 */
    beforeBpPositionLabel?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透后血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    afterBpPosition?: string | undefined;
    /** 透后血压测量位置显示值 */
    afterBpPositionLabel?: string | undefined;
    /** 透后收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 透后舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 透后脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 透前体重时间 */
    timeBeforeWeight?: dayjs.Dayjs | undefined;
    /** 透前血压时间 */
    timeBeforeBp?: dayjs.Dayjs | undefined;
    /** 制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 方案是否制定0,1 */
    enact?: number | undefined;
    /** 护士确认方案时间 */
    timeCheckNurse?: dayjs.Dayjs | undefined;
    /** 方案是否通过0,1 */
    check?: number | undefined;
    /** 透前评估时间 */
    timeAssementBefore?: dayjs.Dayjs | undefined;
    /** 首次监测时间 */
    timeFirstMonitor?: dayjs.Dayjs | undefined;
    /** 透后体重时间 */
    timeAfterWeight?: dayjs.Dayjs | undefined;
    /** 透后血压时间 */
    timeAfterBp?: dayjs.Dayjs | undefined;
    /** 透后小结时间 */
    timeAfterSummary?: dayjs.Dayjs | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者姓名拼音码 */
    patientPinyinCode?: string | undefined;
    /** 患者姓名五笔码 */
    patientWubiCode?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 性别显示值 */
    genderLabel?: string | undefined;
    /** 治疗状态名称 */
    statusLabel?: string | undefined;
    /** 透析龄 */
    dialysisAge?: string | undefined;

    constructor(data?: IPatientBatchCureMeasureView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.bestWeight = _data["bestWeight"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.status = _data["status"];
            this.beforeWeight = _data["beforeWeight"];
            this.beforeWeightMode = _data["beforeWeightMode"];
            this.beforeWeightModeLabel = _data["beforeWeightModeLabel"];
            this.ufg = _data["ufg"];
            this.afterWeight = _data["afterWeight"];
            this.afterWeightMode = _data["afterWeightMode"];
            this.afterWeightModeLabel = _data["afterWeightModeLabel"];
            this.ufv = _data["ufv"];
            this.ufvWeight = _data["ufvWeight"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.patientVascularAccessType = _data["patientVascularAccessType"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.patientOtherVascularAccessName = _data["patientOtherVascularAccessName"];
            this.patientOtherVascularAccessType = _data["patientOtherVascularAccessType"];
            this.patientOtherVascularAccessId = _data["patientOtherVascularAccessId"];
            this.beforeBpPosition = _data["beforeBpPosition"];
            this.beforeBpPositionLabel = _data["beforeBpPositionLabel"];
            this.beforeSbp = _data["beforeSbp"];
            this.beforeDbp = _data["beforeDbp"];
            this.beforePulse = _data["beforePulse"];
            this.afterBpPosition = _data["afterBpPosition"];
            this.afterBpPositionLabel = _data["afterBpPositionLabel"];
            this.afterSbp = _data["afterSbp"];
            this.afterDbp = _data["afterDbp"];
            this.afterPulse = _data["afterPulse"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeBeforeWeight = _data["timeBeforeWeight"] ? dayjs(_data["timeBeforeWeight"].toString()) : <any>undefined;
            this.timeBeforeBp = _data["timeBeforeBp"] ? dayjs(_data["timeBeforeBp"].toString()) : <any>undefined;
            this.timeEnactDoctor = _data["timeEnactDoctor"] ? dayjs(_data["timeEnactDoctor"].toString()) : <any>undefined;
            this.enact = _data["enact"];
            this.timeCheckNurse = _data["timeCheckNurse"] ? dayjs(_data["timeCheckNurse"].toString()) : <any>undefined;
            this.check = _data["check"];
            this.timeAssementBefore = _data["timeAssementBefore"] ? dayjs(_data["timeAssementBefore"].toString()) : <any>undefined;
            this.timeFirstMonitor = _data["timeFirstMonitor"] ? dayjs(_data["timeFirstMonitor"].toString()) : <any>undefined;
            this.timeAfterWeight = _data["timeAfterWeight"] ? dayjs(_data["timeAfterWeight"].toString()) : <any>undefined;
            this.timeAfterBp = _data["timeAfterBp"] ? dayjs(_data["timeAfterBp"].toString()) : <any>undefined;
            this.timeAfterSummary = _data["timeAfterSummary"] ? dayjs(_data["timeAfterSummary"].toString()) : <any>undefined;
            this.dialysisDurationFact = _data["dialysisDurationFact"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.patientName = _data["patientName"];
            this.idNumber = _data["idNumber"];
            this.idType = _data["idType"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.patientPinyinCode = _data["patientPinyinCode"];
            this.patientWubiCode = _data["patientWubiCode"];
            this.gender = _data["gender"];
            this.genderLabel = _data["genderLabel"];
            this.statusLabel = _data["statusLabel"];
            this.dialysisAge = _data["dialysisAge"];
        }
    }

    static fromJS(data: any): PatientBatchCureMeasureView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBatchCureMeasureView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toLocaleString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["bestWeight"] = this.bestWeight;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["status"] = this.status;
        data["beforeWeight"] = this.beforeWeight;
        data["beforeWeightMode"] = this.beforeWeightMode;
        data["beforeWeightModeLabel"] = this.beforeWeightModeLabel;
        data["ufg"] = this.ufg;
        data["afterWeight"] = this.afterWeight;
        data["afterWeightMode"] = this.afterWeightMode;
        data["afterWeightModeLabel"] = this.afterWeightModeLabel;
        data["ufv"] = this.ufv;
        data["ufvWeight"] = this.ufvWeight;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["patientVascularAccessType"] = this.patientVascularAccessType;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["patientOtherVascularAccessName"] = this.patientOtherVascularAccessName;
        data["patientOtherVascularAccessType"] = this.patientOtherVascularAccessType;
        data["patientOtherVascularAccessId"] = this.patientOtherVascularAccessId;
        data["beforeBpPosition"] = this.beforeBpPosition;
        data["beforeBpPositionLabel"] = this.beforeBpPositionLabel;
        data["beforeSbp"] = this.beforeSbp;
        data["beforeDbp"] = this.beforeDbp;
        data["beforePulse"] = this.beforePulse;
        data["afterBpPosition"] = this.afterBpPosition;
        data["afterBpPositionLabel"] = this.afterBpPositionLabel;
        data["afterSbp"] = this.afterSbp;
        data["afterDbp"] = this.afterDbp;
        data["afterPulse"] = this.afterPulse;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toLocaleString() : <any>undefined;
        data["timeBeforeWeight"] = this.timeBeforeWeight ? this.timeBeforeWeight.toLocaleString() : <any>undefined;
        data["timeBeforeBp"] = this.timeBeforeBp ? this.timeBeforeBp.toLocaleString() : <any>undefined;
        data["timeEnactDoctor"] = this.timeEnactDoctor ? this.timeEnactDoctor.toLocaleString() : <any>undefined;
        data["enact"] = this.enact;
        data["timeCheckNurse"] = this.timeCheckNurse ? this.timeCheckNurse.toLocaleString() : <any>undefined;
        data["check"] = this.check;
        data["timeAssementBefore"] = this.timeAssementBefore ? this.timeAssementBefore.toLocaleString() : <any>undefined;
        data["timeFirstMonitor"] = this.timeFirstMonitor ? this.timeFirstMonitor.toLocaleString() : <any>undefined;
        data["timeAfterWeight"] = this.timeAfterWeight ? this.timeAfterWeight.toLocaleString() : <any>undefined;
        data["timeAfterBp"] = this.timeAfterBp ? this.timeAfterBp.toLocaleString() : <any>undefined;
        data["timeAfterSummary"] = this.timeAfterSummary ? this.timeAfterSummary.toLocaleString() : <any>undefined;
        data["dialysisDurationFact"] = this.dialysisDurationFact;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["patientName"] = this.patientName;
        data["idNumber"] = this.idNumber;
        data["idType"] = this.idType;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["patientPinyinCode"] = this.patientPinyinCode;
        data["patientWubiCode"] = this.patientWubiCode;
        data["gender"] = this.gender;
        data["genderLabel"] = this.genderLabel;
        data["statusLabel"] = this.statusLabel;
        data["dialysisAge"] = this.dialysisAge;
        return data;
    }
}

/** 患者信息批量查询/导出 - 透析测量数据 */
export interface IPatientBatchCureMeasureView {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析方式 */
    dialysisMode?: string | undefined;
    /** 透析方式显示值 */
    dialysisModeLabel?: string | undefined;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** 治疗流程状态 `DIC.DIALYSIS.STATUS` *已签到,上机准备,治疗中,已下机,已结束* */
    status?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前体重方式显示值 */
    beforeWeightModeLabel?: string | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后体重方式显示值 */
    afterWeightModeLabel?: string | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 称重脱水量 *ml* */
    ufvWeight?: number | undefined;
    /** 血管通路名称 */
    patientVascularAccessName?: string | undefined;
    patientVascularAccessType?: string | undefined;
    /** 血管通路标识 */
    patientVascularAccessId?: string | undefined;
    patientOtherVascularAccessName?: string | undefined;
    patientOtherVascularAccessType?: string | undefined;
    /** 血管通路标识 */
    patientOtherVascularAccessId?: string | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    beforeBpPosition?: string | undefined;
    /** 透前血压测量位置显示值 */
    beforeBpPositionLabel?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透后血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    afterBpPosition?: string | undefined;
    /** 透后血压测量位置显示值 */
    afterBpPositionLabel?: string | undefined;
    /** 透后收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 透后舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 透后脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 透前体重时间 */
    timeBeforeWeight?: dayjs.Dayjs | undefined;
    /** 透前血压时间 */
    timeBeforeBp?: dayjs.Dayjs | undefined;
    /** 制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 方案是否制定0,1 */
    enact?: number | undefined;
    /** 护士确认方案时间 */
    timeCheckNurse?: dayjs.Dayjs | undefined;
    /** 方案是否通过0,1 */
    check?: number | undefined;
    /** 透前评估时间 */
    timeAssementBefore?: dayjs.Dayjs | undefined;
    /** 首次监测时间 */
    timeFirstMonitor?: dayjs.Dayjs | undefined;
    /** 透后体重时间 */
    timeAfterWeight?: dayjs.Dayjs | undefined;
    /** 透后血压时间 */
    timeAfterBp?: dayjs.Dayjs | undefined;
    /** 透后小结时间 */
    timeAfterSummary?: dayjs.Dayjs | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者姓名拼音码 */
    patientPinyinCode?: string | undefined;
    /** 患者姓名五笔码 */
    patientWubiCode?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 性别显示值 */
    genderLabel?: string | undefined;
    /** 治疗状态名称 */
    statusLabel?: string | undefined;
    /** 透析龄 */
    dialysisAge?: string | undefined;
}

/** Reponse */
export class PatientBatchCureMeasureViewResult implements IPatientBatchCureMeasureViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBatchCureMeasureView[] | undefined;

    constructor(data?: IPatientBatchCureMeasureViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientBatchCureMeasureView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientBatchCureMeasureViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBatchCureMeasureViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientBatchCureMeasureViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBatchCureMeasureView[] | undefined;
}

/** 透中监测View */
export class PatientBatchCureMonitorView implements IPatientBatchCureMonitorView {
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** 患者姓名 *○如果有重名需要填写别名* */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 证件类型 */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 透析区间 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 监测时间 */
    monitorTime?: dayjs.Dayjs;
    /** 静脉压 *mmHg* */
    venousPressure?: number | undefined;
    /** 动脉压 *mmHg* *可以为负数* */
    arterialPressure?: number | undefined;
    /** 跨膜压 *mmHg Transmembrane Pressure* *可以为负数* */
    tmp?: number | undefined;
    /** 收缩压 *mmHg* */
    sbp?: number | undefined;
    /** 舒张压 *mmHg* */
    dbp?: number | undefined;
    /** 脉搏 *次/分* */
    pulse?: number | undefined;
    /** 呼吸 *次/分* */
    breathe?: number | undefined;
    /** 体温 *℃* */
    temp?: number | undefined;
    /** 透析液流量 *ml/min* */
    dialysateFlowRate?: number | undefined;
    /** 透析液温度 *℃* */
    dialysateTemp?: number | undefined;
    /** 透析液电导度 *mS/cm dialysate conductivity* */
    dialysateCond?: number | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 超滤率 *ml/h Ultrafiltration Rate* */
    ufr?: number | undefined;
    /** 超滤量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** 监测人 */
    creater?: string | undefined;
    /** 字段1 *预留字段用于使用* */
    ext1?: string | undefined;
    /** 字段2 *预留字段用于使用* */
    ext2?: string | undefined;
    /** 字段3 *预留字段用于使用* */
    ext3?: string | undefined;
    /** 字段4 *预留字段用于使用* */
    ext4?: string | undefined;
    /** 字段5 *预留字段用于使用* */
    ext5?: string | undefined;
    /** 字段6 *预留字段用于使用* */
    ext6?: string | undefined;
    /** 字段7 *预留字段用于使用* */
    ext7?: string | undefined;
    /** 字段8 *预留字段用于使用* */
    ext8?: string | undefined;
    /** 字段9 *预留字段用于使用* */
    ext9?: string | undefined;
    /** 字段10 *预留字段用于使用* */
    ext10?: string | undefined;

    constructor(data?: IPatientBatchCureMonitorView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sn = _data["sn"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.idType = _data["idType"];
            this.idNumber = _data["idNumber"];
            this.shiftName = _data["shiftName"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.bedName = _data["bedName"];
            this.monitorTime = _data["monitorTime"] ? dayjs(_data["monitorTime"].toString()) : <any>undefined;
            this.venousPressure = _data["venousPressure"];
            this.arterialPressure = _data["arterialPressure"];
            this.tmp = _data["tmp"];
            this.sbp = _data["sbp"];
            this.dbp = _data["dbp"];
            this.pulse = _data["pulse"];
            this.breathe = _data["breathe"];
            this.temp = _data["temp"];
            this.dialysateFlowRate = _data["dialysateFlowRate"];
            this.dialysateTemp = _data["dialysateTemp"];
            this.dialysateCond = _data["dialysateCond"];
            this.rfr = _data["rfr"];
            this.rfv = _data["rfv"];
            this.ufr = _data["ufr"];
            this.ufv = _data["ufv"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.creater = _data["creater"];
            this.ext1 = _data["ext1"];
            this.ext2 = _data["ext2"];
            this.ext3 = _data["ext3"];
            this.ext4 = _data["ext4"];
            this.ext5 = _data["ext5"];
            this.ext6 = _data["ext6"];
            this.ext7 = _data["ext7"];
            this.ext8 = _data["ext8"];
            this.ext9 = _data["ext9"];
            this.ext10 = _data["ext10"];
        }
    }

    static fromJS(data: any): PatientBatchCureMonitorView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBatchCureMonitorView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sn"] = this.sn;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["idType"] = this.idType;
        data["idNumber"] = this.idNumber;
        data["shiftName"] = this.shiftName;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["bedName"] = this.bedName;
        data["monitorTime"] = this.monitorTime ? this.monitorTime.toLocaleString() : <any>undefined;
        data["venousPressure"] = this.venousPressure;
        data["arterialPressure"] = this.arterialPressure;
        data["tmp"] = this.tmp;
        data["sbp"] = this.sbp;
        data["dbp"] = this.dbp;
        data["pulse"] = this.pulse;
        data["breathe"] = this.breathe;
        data["temp"] = this.temp;
        data["dialysateFlowRate"] = this.dialysateFlowRate;
        data["dialysateTemp"] = this.dialysateTemp;
        data["dialysateCond"] = this.dialysateCond;
        data["rfr"] = this.rfr;
        data["rfv"] = this.rfv;
        data["ufr"] = this.ufr;
        data["ufv"] = this.ufv;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["creater"] = this.creater;
        data["ext1"] = this.ext1;
        data["ext2"] = this.ext2;
        data["ext3"] = this.ext3;
        data["ext4"] = this.ext4;
        data["ext5"] = this.ext5;
        data["ext6"] = this.ext6;
        data["ext7"] = this.ext7;
        data["ext8"] = this.ext8;
        data["ext9"] = this.ext9;
        data["ext10"] = this.ext10;
        return data;
    }
}

/** 透中监测View */
export interface IPatientBatchCureMonitorView {
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** 患者姓名 *○如果有重名需要填写别名* */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 证件类型 */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 透析区间 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 监测时间 */
    monitorTime?: dayjs.Dayjs;
    /** 静脉压 *mmHg* */
    venousPressure?: number | undefined;
    /** 动脉压 *mmHg* *可以为负数* */
    arterialPressure?: number | undefined;
    /** 跨膜压 *mmHg Transmembrane Pressure* *可以为负数* */
    tmp?: number | undefined;
    /** 收缩压 *mmHg* */
    sbp?: number | undefined;
    /** 舒张压 *mmHg* */
    dbp?: number | undefined;
    /** 脉搏 *次/分* */
    pulse?: number | undefined;
    /** 呼吸 *次/分* */
    breathe?: number | undefined;
    /** 体温 *℃* */
    temp?: number | undefined;
    /** 透析液流量 *ml/min* */
    dialysateFlowRate?: number | undefined;
    /** 透析液温度 *℃* */
    dialysateTemp?: number | undefined;
    /** 透析液电导度 *mS/cm dialysate conductivity* */
    dialysateCond?: number | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 超滤率 *ml/h Ultrafiltration Rate* */
    ufr?: number | undefined;
    /** 超滤量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** 监测人 */
    creater?: string | undefined;
    /** 字段1 *预留字段用于使用* */
    ext1?: string | undefined;
    /** 字段2 *预留字段用于使用* */
    ext2?: string | undefined;
    /** 字段3 *预留字段用于使用* */
    ext3?: string | undefined;
    /** 字段4 *预留字段用于使用* */
    ext4?: string | undefined;
    /** 字段5 *预留字段用于使用* */
    ext5?: string | undefined;
    /** 字段6 *预留字段用于使用* */
    ext6?: string | undefined;
    /** 字段7 *预留字段用于使用* */
    ext7?: string | undefined;
    /** 字段8 *预留字段用于使用* */
    ext8?: string | undefined;
    /** 字段9 *预留字段用于使用* */
    ext9?: string | undefined;
    /** 字段10 *预留字段用于使用* */
    ext10?: string | undefined;
}

/** Reponse */
export class PatientBatchCureMonitorViewResult implements IPatientBatchCureMonitorViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBatchCureMonitorView[] | undefined;

    constructor(data?: IPatientBatchCureMonitorViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientBatchCureMonitorView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientBatchCureMonitorViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBatchCureMonitorViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientBatchCureMonitorViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBatchCureMonitorView[] | undefined;
}

/** 患者信息批量查询/导出/打印 - 透析记录单 */
export class PatientBatchCureRecordView implements IPatientBatchCureRecordView {
    /** 标识 */
    id?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式显示值 */
    dialysisModeLabel?: string | undefined;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet?: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路)标识 */
    patientVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    patientVascularAccessType?: string | undefined;
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessName?: string | undefined;
    patientOtherVascularAccessType?: string | undefined;
    /** 治疗状态 */
    status?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前体重方式显示值 */
    beforeWeightModeLabel?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后体重方式显示值 */
    afterWeightModeLabel?: string | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 称重脱水量 *ml* */
    ufvWeight?: number | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    source?: string | undefined;
    /** 来源显示值 */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 诊断显示值 */
    diagnosisLabel?: string | undefined;
    /** 病区 *住院的* */
    ward?: string | undefined;
    /** 床位 *住院的* */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者姓名拼音码 */
    patientPinyinCode?: string | undefined;
    /** 患者姓名五笔码 */
    patientWubiCode?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 性别显示值 */
    genderLabel?: string | undefined;
    /** 治疗状态 */
    statusLabel?: string | undefined;
    /** 透析龄 */
    dialysisAge?: string | undefined;
    /** 透析器;灌流器 */
    txqNames?: string | undefined;
    /** 抗凝剂(抗凝剂+剂量) */
    knjNames?: string | undefined;
    /** 抗凝剂(剂量) */
    knjTotal?: string | undefined;
    /** ;
            血压 (透前,透后) */
    blutdruck?: string | undefined;
    /** ;
            血压 (透前,透后) */
    afterBlood?: string | undefined;
    /** 取消原因 */
    cancelReason?: string | undefined;
    /** ;
            透中事件 (时间:名称,处理内容) */
    tzEvents?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 上一次透析标识 */
    lastId?: string | undefined;
    /** 下一次透析标识 */
    nextId?: string | undefined;

    constructor(data?: IPatientBatchCureRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sn = _data["sn"];
            this.patientId = _data["patientId"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.dialysisDurationSet = _data["dialysisDurationSet"];
            this.bestWeight = _data["bestWeight"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.patientVascularAccessType = _data["patientVascularAccessType"];
            this.patientOtherVascularAccessId = _data["patientOtherVascularAccessId"];
            this.patientOtherVascularAccessName = _data["patientOtherVascularAccessName"];
            this.patientOtherVascularAccessType = _data["patientOtherVascularAccessType"];
            this.status = _data["status"];
            this.beforeWeight = _data["beforeWeight"];
            this.beforeWeightMode = _data["beforeWeightMode"];
            this.beforeWeightModeLabel = _data["beforeWeightModeLabel"];
            this.deductionWeight = _data["deductionWeight"];
            this.ufg = _data["ufg"];
            this.afterWeight = _data["afterWeight"];
            this.afterWeightMode = _data["afterWeightMode"];
            this.afterWeightModeLabel = _data["afterWeightModeLabel"];
            this.ufv = _data["ufv"];
            this.ufvWeight = _data["ufvWeight"];
            this.dialysisDurationFact = _data["dialysisDurationFact"];
            this.age = _data["age"];
            this.source = _data["source"];
            this.sourceLabel = _data["sourceLabel"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.diagnosis = _data["diagnosis"];
            this.diagnosisLabel = _data["diagnosisLabel"];
            this.ward = _data["ward"];
            this.bed = _data["bed"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            this.remark = _data["remark"];
            this.patientName = _data["patientName"];
            this.idNumber = _data["idNumber"];
            this.idType = _data["idType"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.patientPinyinCode = _data["patientPinyinCode"];
            this.patientWubiCode = _data["patientWubiCode"];
            this.gender = _data["gender"];
            this.genderLabel = _data["genderLabel"];
            this.statusLabel = _data["statusLabel"];
            this.dialysisAge = _data["dialysisAge"];
            this.txqNames = _data["txqNames"];
            this.knjNames = _data["knjNames"];
            this.knjTotal = _data["knjTotal"];
            this.blutdruck = _data["blutdruck"];
            this.afterBlood = _data["afterBlood"];
            this.cancelReason = _data["cancelReason"];
            this.tzEvents = _data["tzEvents"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.lastId = _data["lastId"];
            this.nextId = _data["nextId"];
        }
    }

    static fromJS(data: any): PatientBatchCureRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBatchCureRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sn"] = this.sn;
        data["patientId"] = this.patientId;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toLocaleString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["dialysisDurationSet"] = this.dialysisDurationSet;
        data["bestWeight"] = this.bestWeight;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["patientVascularAccessType"] = this.patientVascularAccessType;
        data["patientOtherVascularAccessId"] = this.patientOtherVascularAccessId;
        data["patientOtherVascularAccessName"] = this.patientOtherVascularAccessName;
        data["patientOtherVascularAccessType"] = this.patientOtherVascularAccessType;
        data["status"] = this.status;
        data["beforeWeight"] = this.beforeWeight;
        data["beforeWeightMode"] = this.beforeWeightMode;
        data["beforeWeightModeLabel"] = this.beforeWeightModeLabel;
        data["deductionWeight"] = this.deductionWeight;
        data["ufg"] = this.ufg;
        data["afterWeight"] = this.afterWeight;
        data["afterWeightMode"] = this.afterWeightMode;
        data["afterWeightModeLabel"] = this.afterWeightModeLabel;
        data["ufv"] = this.ufv;
        data["ufvWeight"] = this.ufvWeight;
        data["dialysisDurationFact"] = this.dialysisDurationFact;
        data["age"] = this.age;
        data["source"] = this.source;
        data["sourceLabel"] = this.sourceLabel;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["diagnosis"] = this.diagnosis;
        data["diagnosisLabel"] = this.diagnosisLabel;
        data["ward"] = this.ward;
        data["bed"] = this.bed;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        data["remark"] = this.remark;
        data["patientName"] = this.patientName;
        data["idNumber"] = this.idNumber;
        data["idType"] = this.idType;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["patientPinyinCode"] = this.patientPinyinCode;
        data["patientWubiCode"] = this.patientWubiCode;
        data["gender"] = this.gender;
        data["genderLabel"] = this.genderLabel;
        data["statusLabel"] = this.statusLabel;
        data["dialysisAge"] = this.dialysisAge;
        data["txqNames"] = this.txqNames;
        data["knjNames"] = this.knjNames;
        data["knjTotal"] = this.knjTotal;
        data["blutdruck"] = this.blutdruck;
        data["afterBlood"] = this.afterBlood;
        data["cancelReason"] = this.cancelReason;
        data["tzEvents"] = this.tzEvents;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["lastId"] = this.lastId;
        data["nextId"] = this.nextId;
        return data;
    }
}

/** 患者信息批量查询/导出/打印 - 透析记录单 */
export interface IPatientBatchCureRecordView {
    /** 标识 */
    id?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式显示值 */
    dialysisModeLabel?: string | undefined;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet?: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路)标识 */
    patientVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    patientVascularAccessType?: string | undefined;
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessName?: string | undefined;
    patientOtherVascularAccessType?: string | undefined;
    /** 治疗状态 */
    status?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前体重方式显示值 */
    beforeWeightModeLabel?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后体重方式显示值 */
    afterWeightModeLabel?: string | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 称重脱水量 *ml* */
    ufvWeight?: number | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    source?: string | undefined;
    /** 来源显示值 */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 诊断显示值 */
    diagnosisLabel?: string | undefined;
    /** 病区 *住院的* */
    ward?: string | undefined;
    /** 床位 *住院的* */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者姓名拼音码 */
    patientPinyinCode?: string | undefined;
    /** 患者姓名五笔码 */
    patientWubiCode?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 性别显示值 */
    genderLabel?: string | undefined;
    /** 治疗状态 */
    statusLabel?: string | undefined;
    /** 透析龄 */
    dialysisAge?: string | undefined;
    /** 透析器;灌流器 */
    txqNames?: string | undefined;
    /** 抗凝剂(抗凝剂+剂量) */
    knjNames?: string | undefined;
    /** 抗凝剂(剂量) */
    knjTotal?: string | undefined;
    /** ;
            血压 (透前,透后) */
    blutdruck?: string | undefined;
    /** ;
            血压 (透前,透后) */
    afterBlood?: string | undefined;
    /** 取消原因 */
    cancelReason?: string | undefined;
    /** ;
            透中事件 (时间:名称,处理内容) */
    tzEvents?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 上一次透析标识 */
    lastId?: string | undefined;
    /** 下一次透析标识 */
    nextId?: string | undefined;
}

/** Reponse */
export class PatientBatchCureRecordViewResult implements IPatientBatchCureRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBatchCureRecordView[] | undefined;

    constructor(data?: IPatientBatchCureRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientBatchCureRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientBatchCureRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBatchCureRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientBatchCureRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBatchCureRecordView[] | undefined;
}

/** 透析充分性view */
export class PatientBatchHemodialysisAdequacyView implements IPatientBatchHemodialysisAdequacyView {
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 证件类型 */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 检查日期 */
    date?: dayjs.Dayjs;
    /** 透析区间 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 透后体重 *kg* */
    weight?: number;
    /** BMI *自动计算* */
    bmi?: number | undefined;
    /** 透前尿素 *mmol/L Blood Urea Nitrogen* */
    bunBefore?: number;
    /** 透后尿素 *mmol/L Blood Urea Nitrogen* */
    bunAfter?: number;
    /** 每次透析超滤量 *L* */
    ufv?: number;
    /** spKt/V *自动计算* */
    ktv?: number | undefined;
    /** URR *% 自动计算* */
    urr?: number | undefined;
    /** 患者情况 */
    patientCondition?: string | undefined;
    /** 干体重 *kg* */
    bestWeight?: number | undefined;
    /** 干体重是否达标0,1 */
    bestWeightCompliance?: number | undefined;
    /** 是否手工录入0,1 */
    manualFlag?: number | undefined;

    constructor(data?: IPatientBatchHemodialysisAdequacyView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.idType = _data["idType"];
            this.idNumber = _data["idNumber"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.bedName = _data["bedName"];
            this.height = _data["height"];
            this.weight = _data["weight"];
            this.bmi = _data["bmi"];
            this.bunBefore = _data["bunBefore"];
            this.bunAfter = _data["bunAfter"];
            this.ufv = _data["ufv"];
            this.ktv = _data["ktv"];
            this.urr = _data["urr"];
            this.patientCondition = _data["patientCondition"];
            this.bestWeight = _data["bestWeight"];
            this.bestWeightCompliance = _data["bestWeightCompliance"];
            this.manualFlag = _data["manualFlag"];
        }
    }

    static fromJS(data: any): PatientBatchHemodialysisAdequacyView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBatchHemodialysisAdequacyView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["idType"] = this.idType;
        data["idNumber"] = this.idNumber;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["bedName"] = this.bedName;
        data["height"] = this.height;
        data["weight"] = this.weight;
        data["bmi"] = this.bmi;
        data["bunBefore"] = this.bunBefore;
        data["bunAfter"] = this.bunAfter;
        data["ufv"] = this.ufv;
        data["ktv"] = this.ktv;
        data["urr"] = this.urr;
        data["patientCondition"] = this.patientCondition;
        data["bestWeight"] = this.bestWeight;
        data["bestWeightCompliance"] = this.bestWeightCompliance;
        data["manualFlag"] = this.manualFlag;
        return data;
    }
}

/** 透析充分性view */
export interface IPatientBatchHemodialysisAdequacyView {
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 证件类型 */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 检查日期 */
    date?: dayjs.Dayjs;
    /** 透析区间 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 透后体重 *kg* */
    weight?: number;
    /** BMI *自动计算* */
    bmi?: number | undefined;
    /** 透前尿素 *mmol/L Blood Urea Nitrogen* */
    bunBefore?: number;
    /** 透后尿素 *mmol/L Blood Urea Nitrogen* */
    bunAfter?: number;
    /** 每次透析超滤量 *L* */
    ufv?: number;
    /** spKt/V *自动计算* */
    ktv?: number | undefined;
    /** URR *% 自动计算* */
    urr?: number | undefined;
    /** 患者情况 */
    patientCondition?: string | undefined;
    /** 干体重 *kg* */
    bestWeight?: number | undefined;
    /** 干体重是否达标0,1 */
    bestWeightCompliance?: number | undefined;
    /** 是否手工录入0,1 */
    manualFlag?: number | undefined;
}

/** Reponse */
export class PatientBatchHemodialysisAdequacyViewResult implements IPatientBatchHemodialysisAdequacyViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBatchHemodialysisAdequacyView[] | undefined;

    constructor(data?: IPatientBatchHemodialysisAdequacyViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientBatchHemodialysisAdequacyView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientBatchHemodialysisAdequacyViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBatchHemodialysisAdequacyViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientBatchHemodialysisAdequacyViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBatchHemodialysisAdequacyView[] | undefined;
}

/** 检验子项明细 */
export class PatientBatchLisReportItemView implements IPatientBatchLisReportItemView {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** [检验报告单标识](检验报告单信息Id) */
    patientLisReportId?: string | undefined;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 编码 */
    itemCode?: string | undefined;
    /** 名称 */
    itemName?: string | undefined;
    /** 检验结果 */
    itemValue?: string | undefined;
    /** 单位 */
    itemValueUnit?: string | undefined;
    /** 数值标识 *1 */
    itemValueMark1?: string | undefined;
    /** 危险标识 */
    itemValueMark2?: string | undefined;
    /** 参考范围 */
    itemValueReference?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 检验子项全称 */
    itemTextLabel?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientBatchLisReportItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.patientLisReportId = _data["patientLisReportId"];
            this.reportNo = _data["reportNo"];
            this.itemCode = _data["itemCode"];
            this.itemName = _data["itemName"];
            this.itemValue = _data["itemValue"];
            this.itemValueUnit = _data["itemValueUnit"];
            this.itemValueMark1 = _data["itemValueMark1"];
            this.itemValueMark2 = _data["itemValueMark2"];
            this.itemValueReference = _data["itemValueReference"];
            this.remark = _data["remark"];
            this.itemTextLabel = _data["itemTextLabel"];
            this.patientName = _data["patientName"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientBatchLisReportItemView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBatchLisReportItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["patientLisReportId"] = this.patientLisReportId;
        data["reportNo"] = this.reportNo;
        data["itemCode"] = this.itemCode;
        data["itemName"] = this.itemName;
        data["itemValue"] = this.itemValue;
        data["itemValueUnit"] = this.itemValueUnit;
        data["itemValueMark1"] = this.itemValueMark1;
        data["itemValueMark2"] = this.itemValueMark2;
        data["itemValueReference"] = this.itemValueReference;
        data["remark"] = this.remark;
        data["itemTextLabel"] = this.itemTextLabel;
        data["patientName"] = this.patientName;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 检验子项明细 */
export interface IPatientBatchLisReportItemView {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** [检验报告单标识](检验报告单信息Id) */
    patientLisReportId?: string | undefined;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 编码 */
    itemCode?: string | undefined;
    /** 名称 */
    itemName?: string | undefined;
    /** 检验结果 */
    itemValue?: string | undefined;
    /** 单位 */
    itemValueUnit?: string | undefined;
    /** 数值标识 *1 */
    itemValueMark1?: string | undefined;
    /** 危险标识 */
    itemValueMark2?: string | undefined;
    /** 参考范围 */
    itemValueReference?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 检验子项全称 */
    itemTextLabel?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 患者信息批量查询/导出 - 检验信息 */
export class PatientBatchLisReportView implements IPatientBatchLisReportView {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 数据来源 `DIC.EXAMINE.DATASOURCE` */
    dataSource?: string | undefined;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 样本编号 */
    sampleNo?: string | undefined;
    /** 样本类型 `DIC.TEST.SAMPLETYPE` *血清,全血* */
    sampleType?: string | undefined;
    /** 检验大类 */
    testCategory?: string | undefined;
    /** 是否透后血0,1 */
    cureAfterBlood?: string | undefined;
    /** 检验项目 */
    testItem?: string | undefined;
    /** 检验项目名称 */
    testItemLabel?: string | undefined;
    /** 临床诊断 */
    diagnosis?: string | undefined;
    /** 申请时间 */
    applicationTime?: dayjs.Dayjs | undefined;
    /** 申请科室 */
    applicationDepartment?: string | undefined;
    /** 申请人编码 */
    proposerId?: string | undefined;
    /** 申请人姓名 */
    proposerName?: string | undefined;
    /** 报告时间 */
    reportTime?: dayjs.Dayjs;
    /** 报告人编码 */
    reportId?: string | undefined;
    /** 报告人姓名 */
    reportName?: string | undefined;
    /** 审核时间 */
    auditTime?: dayjs.Dayjs | undefined;
    /** 审核人编码 */
    auditId?: string | undefined;
    /** 审核人姓名 */
    auditName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 数据来源 */
    dataSourceLable?: string | undefined;
    /** 样本类型 */
    sampleTypeLabel?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 检验报告条目信息 */
    patientBatchLisReportItems?: PatientBatchLisReportItemView[] | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientBatchLisReportView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.dataSource = _data["dataSource"];
            this.reportNo = _data["reportNo"];
            this.sampleNo = _data["sampleNo"];
            this.sampleType = _data["sampleType"];
            this.testCategory = _data["testCategory"];
            this.cureAfterBlood = _data["cureAfterBlood"];
            this.testItem = _data["testItem"];
            this.testItemLabel = _data["testItemLabel"];
            this.diagnosis = _data["diagnosis"];
            this.applicationTime = _data["applicationTime"] ? dayjs(_data["applicationTime"].toString()) : <any>undefined;
            this.applicationDepartment = _data["applicationDepartment"];
            this.proposerId = _data["proposerId"];
            this.proposerName = _data["proposerName"];
            this.reportTime = _data["reportTime"] ? dayjs(_data["reportTime"].toString()) : <any>undefined;
            this.reportId = _data["reportId"];
            this.reportName = _data["reportName"];
            this.auditTime = _data["auditTime"] ? dayjs(_data["auditTime"].toString()) : <any>undefined;
            this.auditId = _data["auditId"];
            this.auditName = _data["auditName"];
            this.remark = _data["remark"];
            this.dataSourceLable = _data["dataSourceLable"];
            this.sampleTypeLabel = _data["sampleTypeLabel"];
            this.patientName = _data["patientName"];
            this.idNumber = _data["idNumber"];
            this.idType = _data["idType"];
            if (Array.isArray(_data["patientBatchLisReportItems"])) {
                this.patientBatchLisReportItems = [] as any;
                for (let item of _data["patientBatchLisReportItems"])
                    this.patientBatchLisReportItems!.push(PatientBatchLisReportItemView.fromJS(item));
            }
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientBatchLisReportView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBatchLisReportView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["dataSource"] = this.dataSource;
        data["reportNo"] = this.reportNo;
        data["sampleNo"] = this.sampleNo;
        data["sampleType"] = this.sampleType;
        data["testCategory"] = this.testCategory;
        data["cureAfterBlood"] = this.cureAfterBlood;
        data["testItem"] = this.testItem;
        data["testItemLabel"] = this.testItemLabel;
        data["diagnosis"] = this.diagnosis;
        data["applicationTime"] = this.applicationTime ? this.applicationTime.toLocaleString() : <any>undefined;
        data["applicationDepartment"] = this.applicationDepartment;
        data["proposerId"] = this.proposerId;
        data["proposerName"] = this.proposerName;
        data["reportTime"] = this.reportTime ? this.reportTime.toLocaleString() : <any>undefined;
        data["reportId"] = this.reportId;
        data["reportName"] = this.reportName;
        data["auditTime"] = this.auditTime ? this.auditTime.toLocaleString() : <any>undefined;
        data["auditId"] = this.auditId;
        data["auditName"] = this.auditName;
        data["remark"] = this.remark;
        data["dataSourceLable"] = this.dataSourceLable;
        data["sampleTypeLabel"] = this.sampleTypeLabel;
        data["patientName"] = this.patientName;
        data["idNumber"] = this.idNumber;
        data["idType"] = this.idType;
        if (Array.isArray(this.patientBatchLisReportItems)) {
            data["patientBatchLisReportItems"] = [];
            for (let item of this.patientBatchLisReportItems)
                data["patientBatchLisReportItems"].push(item.toJSON());
        }
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 患者信息批量查询/导出 - 检验信息 */
export interface IPatientBatchLisReportView {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 数据来源 `DIC.EXAMINE.DATASOURCE` */
    dataSource?: string | undefined;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 样本编号 */
    sampleNo?: string | undefined;
    /** 样本类型 `DIC.TEST.SAMPLETYPE` *血清,全血* */
    sampleType?: string | undefined;
    /** 检验大类 */
    testCategory?: string | undefined;
    /** 是否透后血0,1 */
    cureAfterBlood?: string | undefined;
    /** 检验项目 */
    testItem?: string | undefined;
    /** 检验项目名称 */
    testItemLabel?: string | undefined;
    /** 临床诊断 */
    diagnosis?: string | undefined;
    /** 申请时间 */
    applicationTime?: dayjs.Dayjs | undefined;
    /** 申请科室 */
    applicationDepartment?: string | undefined;
    /** 申请人编码 */
    proposerId?: string | undefined;
    /** 申请人姓名 */
    proposerName?: string | undefined;
    /** 报告时间 */
    reportTime?: dayjs.Dayjs;
    /** 报告人编码 */
    reportId?: string | undefined;
    /** 报告人姓名 */
    reportName?: string | undefined;
    /** 审核时间 */
    auditTime?: dayjs.Dayjs | undefined;
    /** 审核人编码 */
    auditId?: string | undefined;
    /** 审核人姓名 */
    auditName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 数据来源 */
    dataSourceLable?: string | undefined;
    /** 样本类型 */
    sampleTypeLabel?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 检验报告条目信息 */
    patientBatchLisReportItems?: PatientBatchLisReportItemView[] | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientBatchLisReportViewResult implements IPatientBatchLisReportViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBatchLisReportView[] | undefined;

    constructor(data?: IPatientBatchLisReportViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientBatchLisReportView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientBatchLisReportViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBatchLisReportViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientBatchLisReportViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBatchLisReportView[] | undefined;
}

/** 生命体征 - 干体重view */
export class PatientBatchWeightBestView implements IPatientBatchWeightBestView {
    /** [患者姓名] */
    patientName?: string | undefined;
    /** [患者别名] */
    patientName2?: string | undefined;
    /** 证件类型 */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 干体重 *kg* */
    bestWeight?: number;
    /** 测量时间 */
    measureTime?: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IPatientBatchWeightBestView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.idType = _data["idType"];
            this.idNumber = _data["idNumber"];
            this.bestWeight = _data["bestWeight"];
            this.measureTime = _data["measureTime"] ? dayjs(_data["measureTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): PatientBatchWeightBestView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBatchWeightBestView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["idType"] = this.idType;
        data["idNumber"] = this.idNumber;
        data["bestWeight"] = this.bestWeight;
        data["measureTime"] = this.measureTime ? this.measureTime.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        return data;
    }
}

/** 生命体征 - 干体重view */
export interface IPatientBatchWeightBestView {
    /** [患者姓名] */
    patientName?: string | undefined;
    /** [患者别名] */
    patientName2?: string | undefined;
    /** 证件类型 */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 干体重 *kg* */
    bestWeight?: number;
    /** 测量时间 */
    measureTime?: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class PatientBatchWeightBestViewResult implements IPatientBatchWeightBestViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBatchWeightBestView[] | undefined;

    constructor(data?: IPatientBatchWeightBestViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientBatchWeightBestView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientBatchWeightBestViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBatchWeightBestViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientBatchWeightBestViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBatchWeightBestView[] | undefined;
}

/** 生命体征 - 体重view */
export class PatientBatchWeightView implements IPatientBatchWeightView {
    /** [患者姓名] */
    patientName?: string | undefined;
    /** [患者别名] */
    patientName2?: string | undefined;
    /** 证件类型 */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 干体重 *kg* */
    weight?: number;
    /** 测量时间 */
    measureTime?: dayjs.Dayjs;
    /** 测量方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    mode?: string | undefined;
    /** 测量阶段 `DIC.PATIENT.MEASURE.TAG` *透前,透后,非透析日* */
    tag?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IPatientBatchWeightView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.idType = _data["idType"];
            this.idNumber = _data["idNumber"];
            this.weight = _data["weight"];
            this.measureTime = _data["measureTime"] ? dayjs(_data["measureTime"].toString()) : <any>undefined;
            this.mode = _data["mode"];
            this.tag = _data["tag"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): PatientBatchWeightView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBatchWeightView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["idType"] = this.idType;
        data["idNumber"] = this.idNumber;
        data["weight"] = this.weight;
        data["measureTime"] = this.measureTime ? this.measureTime.toLocaleString() : <any>undefined;
        data["mode"] = this.mode;
        data["tag"] = this.tag;
        data["remark"] = this.remark;
        return data;
    }
}

/** 生命体征 - 体重view */
export interface IPatientBatchWeightView {
    /** [患者姓名] */
    patientName?: string | undefined;
    /** [患者别名] */
    patientName2?: string | undefined;
    /** 证件类型 */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 干体重 *kg* */
    weight?: number;
    /** 测量时间 */
    measureTime?: dayjs.Dayjs;
    /** 测量方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    mode?: string | undefined;
    /** 测量阶段 `DIC.PATIENT.MEASURE.TAG` *透前,透后,非透析日* */
    tag?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class PatientBatchWeightViewResult implements IPatientBatchWeightViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBatchWeightView[] | undefined;

    constructor(data?: IPatientBatchWeightViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientBatchWeightView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientBatchWeightViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBatchWeightViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientBatchWeightViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBatchWeightView[] | undefined;
}

export class PatientBloodPressureView implements IPatientBloodPressureView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 收缩压 *mmHg* */
    sbp!: number;
    /** 舒张压 *mmHg* */
    dbp!: number;
    /** 脉搏 *次/分* */
    pulse!: number;
    /** 测量时间 */
    measureTime!: dayjs.Dayjs;
    /** 测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢* */
    position?: string | undefined;
    /** 测量标签 `DIC.PATIENT.MEASURE.TAG` *透前,透中,透后,非透析日* */
    tag?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 测量位置显示值 */
    positionLabel?: string | undefined;
    /** 测量标签显示值 */
    tagLabel?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientBloodPressureView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.sbp = _data["sbp"];
            this.dbp = _data["dbp"];
            this.pulse = _data["pulse"];
            this.measureTime = _data["measureTime"] ? dayjs(_data["measureTime"].toString()) : <any>undefined;
            this.position = _data["position"];
            this.tag = _data["tag"];
            this.remark = _data["remark"];
            this.positionLabel = _data["positionLabel"];
            this.tagLabel = _data["tagLabel"];
            this.id = _data["id"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientBloodPressureView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBloodPressureView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["sbp"] = this.sbp;
        data["dbp"] = this.dbp;
        data["pulse"] = this.pulse;
        data["measureTime"] = this.measureTime ? this.measureTime.toLocaleString() : <any>undefined;
        data["position"] = this.position;
        data["tag"] = this.tag;
        data["remark"] = this.remark;
        data["positionLabel"] = this.positionLabel;
        data["tagLabel"] = this.tagLabel;
        data["id"] = this.id;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface IPatientBloodPressureView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 收缩压 *mmHg* */
    sbp: number;
    /** 舒张压 *mmHg* */
    dbp: number;
    /** 脉搏 *次/分* */
    pulse: number;
    /** 测量时间 */
    measureTime: dayjs.Dayjs;
    /** 测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢* */
    position?: string | undefined;
    /** 测量标签 `DIC.PATIENT.MEASURE.TAG` *透前,透中,透后,非透析日* */
    tag?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 测量位置显示值 */
    positionLabel?: string | undefined;
    /** 测量标签显示值 */
    tagLabel?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 血压记录 (ViewModel) */
export class PatientBloodPressureViewModel implements IPatientBloodPressureViewModel {
    /** [患者标识](患者信息Id) */
    patientId!: string;
    /** 收缩压 *mmHg* */
    sbp!: number;
    /** 舒张压 *mmHg* */
    dbp!: number;
    /** 脉搏 *次/分* */
    pulse!: number;
    /** 测量时间 */
    measureTime!: dayjs.Dayjs;
    /** 测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢* */
    position?: string | undefined;
    /** 测量标签 `DIC.PATIENT.MEASURE.TAG` *透前,透中,透后,非透析日* */
    tag?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IPatientBloodPressureViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.sbp = _data["sbp"];
            this.dbp = _data["dbp"];
            this.pulse = _data["pulse"];
            this.measureTime = _data["measureTime"] ? dayjs(_data["measureTime"].toString()) : <any>undefined;
            this.position = _data["position"];
            this.tag = _data["tag"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): PatientBloodPressureViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBloodPressureViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["sbp"] = this.sbp;
        data["dbp"] = this.dbp;
        data["pulse"] = this.pulse;
        data["measureTime"] = this.measureTime ? this.measureTime.toLocaleString() : <any>undefined;
        data["position"] = this.position;
        data["tag"] = this.tag;
        data["remark"] = this.remark;
        return data;
    }
}

/** 血压记录 (ViewModel) */
export interface IPatientBloodPressureViewModel {
    /** [患者标识](患者信息Id) */
    patientId: string;
    /** 收缩压 *mmHg* */
    sbp: number;
    /** 舒张压 *mmHg* */
    dbp: number;
    /** 脉搏 *次/分* */
    pulse: number;
    /** 测量时间 */
    measureTime: dayjs.Dayjs;
    /** 测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢* */
    position?: string | undefined;
    /** 测量标签 `DIC.PATIENT.MEASURE.TAG` *透前,透中,透后,非透析日* */
    tag?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class PatientBloodPressureViewResult implements IPatientBloodPressureViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBloodPressureView[] | undefined;

    constructor(data?: IPatientBloodPressureViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientBloodPressureView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientBloodPressureViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBloodPressureViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientBloodPressureViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBloodPressureView[] | undefined;
}

/** Reponse */
export class PatientBloodPressureViewResultEntry implements IPatientBloodPressureViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientBloodPressureView;

    constructor(data?: IPatientBloodPressureViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientBloodPressureView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientBloodPressureViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBloodPressureViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientBloodPressureViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientBloodPressureView;
}

export class PatientCardNumberEdit implements IPatientCardNumberEdit {
    /** 医保类型 `DIC.PEOPLE.MEDICARETYPE` *城镇职工,城镇居民* */
    medicareType?: string | undefined;
    /** 医保号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;

    constructor(data?: IPatientCardNumberEdit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.medicareType = _data["medicareType"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.idType = _data["idType"];
            this.idNumber = _data["idNumber"];
        }
    }

    static fromJS(data: any): PatientCardNumberEdit {
        data = typeof data === 'object' ? data : {};
        let result = new PatientCardNumberEdit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["medicareType"] = this.medicareType;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["idType"] = this.idType;
        data["idNumber"] = this.idNumber;
        return data;
    }
}

export interface IPatientCardNumberEdit {
    /** 医保类型 `DIC.PEOPLE.MEDICARETYPE` *城镇职工,城镇居民* */
    medicareType?: string | undefined;
    /** 医保号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
}

/** 打印患者透析卡号 */
export class PatientCardPrintView implements IPatientCardPrintView {
    /** 患者Id */
    patientId?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 透析卡号 */
    patientCardNumber?: string | undefined;

    constructor(data?: IPatientCardPrintView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.patientCardNumber = _data["patientCardNumber"];
        }
    }

    static fromJS(data: any): PatientCardPrintView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientCardPrintView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["patientCardNumber"] = this.patientCardNumber;
        return data;
    }
}

/** 打印患者透析卡号 */
export interface IPatientCardPrintView {
    /** 患者Id */
    patientId?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 透析卡号 */
    patientCardNumber?: string | undefined;
}

/** Reponse */
export class PatientCardPrintViewResult implements IPatientCardPrintViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientCardPrintView[] | undefined;

    constructor(data?: IPatientCardPrintViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientCardPrintView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientCardPrintViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientCardPrintViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientCardPrintViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientCardPrintView[] | undefined;
}

/** 患者透析卡 */
export class PatientCards implements IPatientCards {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析卡号 */
    cardNumber?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;

    constructor(data?: IPatientCards) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.cardNumber = _data["cardNumber"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientCards {
        data = typeof data === 'object' ? data : {};
        let result = new PatientCards();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["cardNumber"] = this.cardNumber;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        return data;
    }
}

/** 患者透析卡 */
export interface IPatientCards {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析卡号 */
    cardNumber?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
}

/** Reponse */
export class PatientCardsResult implements IPatientCardsResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientCards[] | undefined;

    constructor(data?: IPatientCardsResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientCards.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientCardsResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientCardsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientCardsResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientCards[] | undefined;
}

/** Reponse */
export class PatientCardsResultEntry implements IPatientCardsResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientCards;

    constructor(data?: IPatientCardsResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientCards.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientCardsResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientCardsResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientCardsResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientCards;
}

export class PatientCardsView implements IPatientCardsView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 透析卡号 */
    cardNumber!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientCardsView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.cardNumber = _data["cardNumber"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientCardsView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientCardsView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["cardNumber"] = this.cardNumber;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface IPatientCardsView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 透析卡号 */
    cardNumber: string;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 患者透析卡 (ViewModel) */
export class PatientCardsViewModel implements IPatientCardsViewModel {
    /** [患者标识](患者信息Id) */
    patientId!: string;
    /** 透析卡号 */
    cardNumber!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;

    constructor(data?: IPatientCardsViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.cardNumber = _data["cardNumber"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): PatientCardsViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientCardsViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["cardNumber"] = this.cardNumber;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        return data;
    }
}

/** 患者透析卡 (ViewModel) */
export interface IPatientCardsViewModel {
    /** [患者标识](患者信息Id) */
    patientId: string;
    /** 透析卡号 */
    cardNumber: string;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
}

/** Reponse */
export class PatientCardsViewResult implements IPatientCardsViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientCardsView[] | undefined;

    constructor(data?: IPatientCardsViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientCardsView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientCardsViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientCardsViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientCardsViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientCardsView[] | undefined;
}

/** 联系人 */
export class PatientContacts implements IPatientContacts {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 与患者关系 */
    relation?: string | undefined;
    /** 联系人姓名 */
    name?: string | undefined;
    /** 移动电话 */
    phone?: string | undefined;
    /** 座机 */
    tel?: string | undefined;
    /** 邮箱 */
    email?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 地址 */
    address?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;

    constructor(data?: IPatientContacts) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.relation = _data["relation"];
            this.name = _data["name"];
            this.phone = _data["phone"];
            this.tel = _data["tel"];
            this.email = _data["email"];
            this.province = _data["province"];
            this.city = _data["city"];
            this.area = _data["area"];
            this.address = _data["address"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientContacts {
        data = typeof data === 'object' ? data : {};
        let result = new PatientContacts();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["relation"] = this.relation;
        data["name"] = this.name;
        data["phone"] = this.phone;
        data["tel"] = this.tel;
        data["email"] = this.email;
        data["province"] = this.province;
        data["city"] = this.city;
        data["area"] = this.area;
        data["address"] = this.address;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        return data;
    }
}

/** 联系人 */
export interface IPatientContacts {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 与患者关系 */
    relation?: string | undefined;
    /** 联系人姓名 */
    name?: string | undefined;
    /** 移动电话 */
    phone?: string | undefined;
    /** 座机 */
    tel?: string | undefined;
    /** 邮箱 */
    email?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 地址 */
    address?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
}

/** Reponse */
export class PatientContactsResult implements IPatientContactsResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientContacts[] | undefined;

    constructor(data?: IPatientContactsResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientContacts.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientContactsResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientContactsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientContactsResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientContacts[] | undefined;
}

/** Reponse */
export class PatientContactsResultEntry implements IPatientContactsResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientContacts;

    constructor(data?: IPatientContactsResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientContacts.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientContactsResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientContactsResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientContactsResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientContacts;
}

/** 联系人 (ViewModel) */
export class PatientContactsViewModel implements IPatientContactsViewModel {
    /** [患者标识](患者信息Id) */
    patientId!: string;
    /** 与患者关系 */
    relation!: string;
    /** 联系人姓名 */
    name!: string;
    /** 移动电话 */
    phone?: string | undefined;
    /** 座机 */
    tel?: string | undefined;
    /** 邮箱 */
    email?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 地址 */
    address?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IPatientContactsViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.relation = _data["relation"];
            this.name = _data["name"];
            this.phone = _data["phone"];
            this.tel = _data["tel"];
            this.email = _data["email"];
            this.province = _data["province"];
            this.city = _data["city"];
            this.area = _data["area"];
            this.address = _data["address"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): PatientContactsViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientContactsViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["relation"] = this.relation;
        data["name"] = this.name;
        data["phone"] = this.phone;
        data["tel"] = this.tel;
        data["email"] = this.email;
        data["province"] = this.province;
        data["city"] = this.city;
        data["area"] = this.area;
        data["address"] = this.address;
        data["remark"] = this.remark;
        return data;
    }
}

/** 联系人 (ViewModel) */
export interface IPatientContactsViewModel {
    /** [患者标识](患者信息Id) */
    patientId: string;
    /** 与患者关系 */
    relation: string;
    /** 联系人姓名 */
    name: string;
    /** 移动电话 */
    phone?: string | undefined;
    /** 座机 */
    tel?: string | undefined;
    /** 邮箱 */
    email?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 地址 */
    address?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 患者人数统计 */
export class PatientCountView implements IPatientCountView {
    /** 今日就诊患者 */
    today?: number;
    /** 我的患者 */
    mine?: number;
    /** 临时透析患者 */
    temporary?: number;
    /** 长期透析患者 */
    longTerm?: number;
    /** 在透患者 */
    inTreatment?: number;
    /** 转出患者 */
    transferOut?: number;
    /** 退出患者 */
    signOut?: number;
    /** 所有患者 */
    all?: number;

    constructor(data?: IPatientCountView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.today = _data["today"];
            this.mine = _data["mine"];
            this.temporary = _data["temporary"];
            this.longTerm = _data["longTerm"];
            this.inTreatment = _data["inTreatment"];
            this.transferOut = _data["transferOut"];
            this.signOut = _data["signOut"];
            this.all = _data["all"];
        }
    }

    static fromJS(data: any): PatientCountView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientCountView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["today"] = this.today;
        data["mine"] = this.mine;
        data["temporary"] = this.temporary;
        data["longTerm"] = this.longTerm;
        data["inTreatment"] = this.inTreatment;
        data["transferOut"] = this.transferOut;
        data["signOut"] = this.signOut;
        data["all"] = this.all;
        return data;
    }
}

/** 患者人数统计 */
export interface IPatientCountView {
    /** 今日就诊患者 */
    today?: number;
    /** 我的患者 */
    mine?: number;
    /** 临时透析患者 */
    temporary?: number;
    /** 长期透析患者 */
    longTerm?: number;
    /** 在透患者 */
    inTreatment?: number;
    /** 转出患者 */
    transferOut?: number;
    /** 退出患者 */
    signOut?: number;
    /** 所有患者 */
    all?: number;
}

/** Reponse */
export class PatientCountViewResultEntry implements IPatientCountViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientCountView;

    constructor(data?: IPatientCountViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientCountView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientCountViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientCountViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientCountViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientCountView;
}

export class PatientCourseRecordEditModel implements IPatientCourseRecordEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 日期 */
    recordDate!: dayjs.Dayjs;
    /** [医生标识](#用户信息) */
    doctorId?: string | undefined;
    /** 病程内容 */
    content!: string;
    /** 内容描述 */
    contentText!: string;
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;

    constructor(data?: IPatientCourseRecordEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.recordDate = _data["recordDate"] ? dayjs(_data["recordDate"].toString()) : <any>undefined;
            this.doctorId = _data["doctorId"];
            this.content = _data["content"];
            this.contentText = _data["contentText"];
            this.cureRecordId = _data["cureRecordId"];
        }
    }

    static fromJS(data: any): PatientCourseRecordEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientCourseRecordEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["recordDate"] = this.recordDate ? this.recordDate.toLocaleString() : <any>undefined;
        data["doctorId"] = this.doctorId;
        data["content"] = this.content;
        data["contentText"] = this.contentText;
        data["cureRecordId"] = this.cureRecordId;
        return data;
    }
}

export interface IPatientCourseRecordEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 日期 */
    recordDate: dayjs.Dayjs;
    /** [医生标识](#用户信息) */
    doctorId?: string | undefined;
    /** 病程内容 */
    content: string;
    /** 内容描述 */
    contentText: string;
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
}

export class PatientCourseRecordView implements IPatientCourseRecordView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 日期 */
    recordDate!: dayjs.Dayjs;
    /** [医生标识](#用户信息) */
    doctorId?: string | undefined;
    /** 病程内容 */
    content!: string;
    /** 内容描述 */
    contentText!: string;
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 医生姓名 */
    doctorName?: string | undefined;
    /** 医生别名 */
    doctorName2?: string | undefined;
    /** 医生全名 */
    doctorNameFull?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientCourseRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.recordDate = _data["recordDate"] ? dayjs(_data["recordDate"].toString()) : <any>undefined;
            this.doctorId = _data["doctorId"];
            this.content = _data["content"];
            this.contentText = _data["contentText"];
            this.cureRecordId = _data["cureRecordId"];
            this.id = _data["id"];
            this.doctorName = _data["doctorName"];
            this.doctorName2 = _data["doctorName2"];
            this.doctorNameFull = _data["doctorNameFull"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientCourseRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientCourseRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["recordDate"] = this.recordDate ? this.recordDate.toLocaleString() : <any>undefined;
        data["doctorId"] = this.doctorId;
        data["content"] = this.content;
        data["contentText"] = this.contentText;
        data["cureRecordId"] = this.cureRecordId;
        data["id"] = this.id;
        data["doctorName"] = this.doctorName;
        data["doctorName2"] = this.doctorName2;
        data["doctorNameFull"] = this.doctorNameFull;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface IPatientCourseRecordView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 日期 */
    recordDate: dayjs.Dayjs;
    /** [医生标识](#用户信息) */
    doctorId?: string | undefined;
    /** 病程内容 */
    content: string;
    /** 内容描述 */
    contentText: string;
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 医生姓名 */
    doctorName?: string | undefined;
    /** 医生别名 */
    doctorName2?: string | undefined;
    /** 医生全名 */
    doctorNameFull?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientCourseRecordViewResult implements IPatientCourseRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientCourseRecordView[] | undefined;

    constructor(data?: IPatientCourseRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientCourseRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientCourseRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientCourseRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientCourseRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientCourseRecordView[] | undefined;
}

/** Reponse */
export class PatientCourseRecordViewResultEntry implements IPatientCourseRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientCourseRecordView;

    constructor(data?: IPatientCourseRecordViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientCourseRecordView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientCourseRecordViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientCourseRecordViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientCourseRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientCourseRecordView;
}

/** HIS医嘱 */
export class PatientDaHisEditModel implements IPatientDaHisEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立医生标识 */
    doctorId!: string;
    /** 开立医生姓名 */
    doctorName!: string;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量 */
    unitPrice?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` *默认带出项目基本单位* */
    unit?: string | undefined;
    /** 执行日期 */
    execDate!: dayjs.Dayjs;
    /** 状态 `DIC.DA.TEMP.STATUS` *新医嘱,已使用,已撤销* */
    status!: string;
    /** 最近更新时间 */
    remark?: string | undefined;
    /** 透析记录单标识 */
    cureId?: string | undefined;
    /** 删除状态0,1 */
    deleted!: number;
    /** 核对护士标识 */
    checkNurseId?: string | undefined;
    /** 核对护士姓名 */
    checkNurseName?: string | undefined;
    /** 执行护士标识 */
    nurseId?: string | undefined;
    /** 执行护士姓名 */
    nurseName?: string | undefined;
    /** 核对时间 */
    checkTime?: dayjs.Dayjs | undefined;
    /** 执行时间 */
    execTime?: dayjs.Dayjs | undefined;
    /** 自备药0,1 */
    owned!: number;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 医嘱类型 */
    orderType?: string | undefined;
    /** 医嘱号 */
    orderNo?: string | undefined;

    constructor(data?: IPatientDaHisEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.type = _data["type"];
            this.content = _data["content"];
            this.groupId = _data["groupId"];
            this.doctorId = _data["doctorId"];
            this.doctorName = _data["doctorName"];
            this.doctorCreateTime = _data["doctorCreateTime"] ? dayjs(_data["doctorCreateTime"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.spec = _data["spec"];
            this.usage = _data["usage"];
            this.singleDosage = _data["singleDosage"];
            this.singleUnit = _data["singleUnit"];
            this.dosage = _data["dosage"];
            this.unitPrice = _data["unitPrice"];
            this.unit = _data["unit"];
            this.execDate = _data["execDate"] ? dayjs(_data["execDate"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.remark = _data["remark"];
            this.cureId = _data["cureId"];
            this.deleted = _data["deleted"];
            this.checkNurseId = _data["checkNurseId"];
            this.checkNurseName = _data["checkNurseName"];
            this.nurseId = _data["nurseId"];
            this.nurseName = _data["nurseName"];
            this.checkTime = _data["checkTime"] ? dayjs(_data["checkTime"].toString()) : <any>undefined;
            this.execTime = _data["execTime"] ? dayjs(_data["execTime"].toString()) : <any>undefined;
            this.owned = _data["owned"];
            this.orally = _data["orally"];
            this.orderType = _data["orderType"];
            this.orderNo = _data["orderNo"];
        }
    }

    static fromJS(data: any): PatientDaHisEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDaHisEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["type"] = this.type;
        data["content"] = this.content;
        data["groupId"] = this.groupId;
        data["doctorId"] = this.doctorId;
        data["doctorName"] = this.doctorName;
        data["doctorCreateTime"] = this.doctorCreateTime ? this.doctorCreateTime.toLocaleString() : <any>undefined;
        data["name"] = this.name;
        data["spec"] = this.spec;
        data["usage"] = this.usage;
        data["singleDosage"] = this.singleDosage;
        data["singleUnit"] = this.singleUnit;
        data["dosage"] = this.dosage;
        data["unitPrice"] = this.unitPrice;
        data["unit"] = this.unit;
        data["execDate"] = this.execDate ? this.execDate.toLocaleString() : <any>undefined;
        data["status"] = this.status;
        data["remark"] = this.remark;
        data["cureId"] = this.cureId;
        data["deleted"] = this.deleted;
        data["checkNurseId"] = this.checkNurseId;
        data["checkNurseName"] = this.checkNurseName;
        data["nurseId"] = this.nurseId;
        data["nurseName"] = this.nurseName;
        data["checkTime"] = this.checkTime ? this.checkTime.toLocaleString() : <any>undefined;
        data["execTime"] = this.execTime ? this.execTime.toLocaleString() : <any>undefined;
        data["owned"] = this.owned;
        data["orally"] = this.orally;
        data["orderType"] = this.orderType;
        data["orderNo"] = this.orderNo;
        return data;
    }
}

/** HIS医嘱 */
export interface IPatientDaHisEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立医生标识 */
    doctorId: string;
    /** 开立医生姓名 */
    doctorName: string;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量 */
    unitPrice?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` *默认带出项目基本单位* */
    unit?: string | undefined;
    /** 执行日期 */
    execDate: dayjs.Dayjs;
    /** 状态 `DIC.DA.TEMP.STATUS` *新医嘱,已使用,已撤销* */
    status: string;
    /** 最近更新时间 */
    remark?: string | undefined;
    /** 透析记录单标识 */
    cureId?: string | undefined;
    /** 删除状态0,1 */
    deleted: number;
    /** 核对护士标识 */
    checkNurseId?: string | undefined;
    /** 核对护士姓名 */
    checkNurseName?: string | undefined;
    /** 执行护士标识 */
    nurseId?: string | undefined;
    /** 执行护士姓名 */
    nurseName?: string | undefined;
    /** 核对时间 */
    checkTime?: dayjs.Dayjs | undefined;
    /** 执行时间 */
    execTime?: dayjs.Dayjs | undefined;
    /** 自备药0,1 */
    owned: number;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 医嘱类型 */
    orderType?: string | undefined;
    /** 医嘱号 */
    orderNo?: string | undefined;
}

/** HIS医嘱 */
export class PatientDaHisView implements IPatientDaHisView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立医生标识 */
    doctorId!: string;
    /** 开立医生姓名 */
    doctorName!: string;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量 */
    unitPrice?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` *默认带出项目基本单位* */
    unit?: string | undefined;
    /** 执行日期 */
    execDate!: dayjs.Dayjs;
    /** 状态 `DIC.DA.TEMP.STATUS` *新医嘱,已使用,已撤销* */
    status!: string;
    /** 最近更新时间 */
    remark?: string | undefined;
    /** 透析记录单标识 */
    cureId?: string | undefined;
    /** 核对护士标识 */
    checkNurseId?: string | undefined;
    /** 执行护士标识 */
    nurseId?: string | undefined;
    /** 自备药0,1 */
    owned!: number;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 医嘱类型 */
    orderType?: string | undefined;
    /** 医嘱号 */
    orderNo?: string | undefined;
    /** 标识 */
    group?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 核对护士 */
    checkNurseName?: string | undefined;
    /** 核对时间 */
    checkTime?: dayjs.Dayjs | undefined;
    /** 执行护士 */
    nurseName?: string | undefined;
    /** 执行时间 */
    execTime?: dayjs.Dayjs | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 状态显示值 */
    statusLabel?: string | undefined;
    /** 总价 */
    totalPrice?: number | undefined;

    constructor(data?: IPatientDaHisView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.type = _data["type"];
            this.content = _data["content"];
            this.groupId = _data["groupId"];
            this.doctorId = _data["doctorId"];
            this.doctorName = _data["doctorName"];
            this.doctorCreateTime = _data["doctorCreateTime"] ? dayjs(_data["doctorCreateTime"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.spec = _data["spec"];
            this.usage = _data["usage"];
            this.singleDosage = _data["singleDosage"];
            this.singleUnit = _data["singleUnit"];
            this.dosage = _data["dosage"];
            this.unitPrice = _data["unitPrice"];
            this.unit = _data["unit"];
            this.execDate = _data["execDate"] ? dayjs(_data["execDate"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.remark = _data["remark"];
            this.cureId = _data["cureId"];
            this.checkNurseId = _data["checkNurseId"];
            this.nurseId = _data["nurseId"];
            this.owned = _data["owned"];
            this.orally = _data["orally"];
            this.orderType = _data["orderType"];
            this.orderNo = _data["orderNo"];
            this.group = _data["group"];
            this.id = _data["id"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.checkNurseName = _data["checkNurseName"];
            this.checkTime = _data["checkTime"] ? dayjs(_data["checkTime"].toString()) : <any>undefined;
            this.nurseName = _data["nurseName"];
            this.execTime = _data["execTime"] ? dayjs(_data["execTime"].toString()) : <any>undefined;
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.statusLabel = _data["statusLabel"];
            this.totalPrice = _data["totalPrice"];
        }
    }

    static fromJS(data: any): PatientDaHisView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDaHisView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["type"] = this.type;
        data["content"] = this.content;
        data["groupId"] = this.groupId;
        data["doctorId"] = this.doctorId;
        data["doctorName"] = this.doctorName;
        data["doctorCreateTime"] = this.doctorCreateTime ? this.doctorCreateTime.toLocaleString() : <any>undefined;
        data["name"] = this.name;
        data["spec"] = this.spec;
        data["usage"] = this.usage;
        data["singleDosage"] = this.singleDosage;
        data["singleUnit"] = this.singleUnit;
        data["dosage"] = this.dosage;
        data["unitPrice"] = this.unitPrice;
        data["unit"] = this.unit;
        data["execDate"] = this.execDate ? this.execDate.toLocaleString() : <any>undefined;
        data["status"] = this.status;
        data["remark"] = this.remark;
        data["cureId"] = this.cureId;
        data["checkNurseId"] = this.checkNurseId;
        data["nurseId"] = this.nurseId;
        data["owned"] = this.owned;
        data["orally"] = this.orally;
        data["orderType"] = this.orderType;
        data["orderNo"] = this.orderNo;
        data["group"] = this.group;
        data["id"] = this.id;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["checkNurseName"] = this.checkNurseName;
        data["checkTime"] = this.checkTime ? this.checkTime.toLocaleString() : <any>undefined;
        data["nurseName"] = this.nurseName;
        data["execTime"] = this.execTime ? this.execTime.toLocaleString() : <any>undefined;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["statusLabel"] = this.statusLabel;
        data["totalPrice"] = this.totalPrice;
        return data;
    }
}

/** HIS医嘱 */
export interface IPatientDaHisView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立医生标识 */
    doctorId: string;
    /** 开立医生姓名 */
    doctorName: string;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量 */
    unitPrice?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` *默认带出项目基本单位* */
    unit?: string | undefined;
    /** 执行日期 */
    execDate: dayjs.Dayjs;
    /** 状态 `DIC.DA.TEMP.STATUS` *新医嘱,已使用,已撤销* */
    status: string;
    /** 最近更新时间 */
    remark?: string | undefined;
    /** 透析记录单标识 */
    cureId?: string | undefined;
    /** 核对护士标识 */
    checkNurseId?: string | undefined;
    /** 执行护士标识 */
    nurseId?: string | undefined;
    /** 自备药0,1 */
    owned: number;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 医嘱类型 */
    orderType?: string | undefined;
    /** 医嘱号 */
    orderNo?: string | undefined;
    /** 标识 */
    group?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 核对护士 */
    checkNurseName?: string | undefined;
    /** 核对时间 */
    checkTime?: dayjs.Dayjs | undefined;
    /** 执行护士 */
    nurseName?: string | undefined;
    /** 执行时间 */
    execTime?: dayjs.Dayjs | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 状态显示值 */
    statusLabel?: string | undefined;
    /** 总价 */
    totalPrice?: number | undefined;
}

/** Reponse */
export class PatientDaHisViewResult implements IPatientDaHisViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDaHisView[] | undefined;

    constructor(data?: IPatientDaHisViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientDaHisView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientDaHisViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDaHisViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientDaHisViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDaHisView[] | undefined;
}

/** Reponse */
export class PatientDaHisViewResultEntry implements IPatientDaHisViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDaHisView;

    constructor(data?: IPatientDaHisViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientDaHisView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDaHisViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDaHisViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientDaHisViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDaHisView;
}

/** 长期医嘱 */
export class PatientDaLongterm implements IPatientDaLongterm {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立医生标识 */
    doctorId?: string | undefined;
    /** 开立医生姓名 */
    doctorName?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` *默认带出项目基本单位* */
    unit?: string | undefined;
    /** 频次 `DIC.DA.INTERVAL` */
    interval?: string | undefined;
    /** 自备药0,1 */
    owned?: number;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 透中医嘱0,1 */
    dialysis?: number;
    /** 停止日期 */
    endDate?: dayjs.Dayjs | undefined;
    /** 周执行 `DIC.DA.WEEKDAY` *多个用`;`分隔* */
    weekday?: string | undefined;
    /** 已分解次数 */
    resolveCount?: number | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 停止人 */
    stoper?: string | undefined;
    /** 停止人id */
    stoperId?: string | undefined;
    /** 停止时间 */
    stopTime?: string | undefined;
    /** 开立时间 */
    openTime?: string | undefined;
    /** 排序 */
    order?: number;
    patients?: Patient;
    roomItemLists?: RoomItemList;

    constructor(data?: IPatientDaLongterm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.type = _data["type"];
            this.content = _data["content"];
            this.groupId = _data["groupId"];
            this.doctorId = _data["doctorId"];
            this.doctorName = _data["doctorName"];
            this.doctorCreateTime = _data["doctorCreateTime"] ? dayjs(_data["doctorCreateTime"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.roomItemListId = _data["roomItemListId"];
            this.usage = _data["usage"];
            this.singleDosage = _data["singleDosage"];
            this.singleUnit = _data["singleUnit"];
            this.dosage = _data["dosage"];
            this.unit = _data["unit"];
            this.interval = _data["interval"];
            this.owned = _data["owned"];
            this.orally = _data["orally"];
            this.dialysis = _data["dialysis"];
            this.endDate = _data["endDate"] ? dayjs(_data["endDate"].toString()) : <any>undefined;
            this.weekday = _data["weekday"];
            this.resolveCount = _data["resolveCount"];
            this.enabled = _data["enabled"];
            this.deleted = _data["deleted"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.stoper = _data["stoper"];
            this.stoperId = _data["stoperId"];
            this.stopTime = _data["stopTime"];
            this.openTime = _data["openTime"];
            this.order = _data["order"];
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
            this.roomItemLists = _data["roomItemLists"] ? RoomItemList.fromJS(_data["roomItemLists"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDaLongterm {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDaLongterm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["type"] = this.type;
        data["content"] = this.content;
        data["groupId"] = this.groupId;
        data["doctorId"] = this.doctorId;
        data["doctorName"] = this.doctorName;
        data["doctorCreateTime"] = this.doctorCreateTime ? this.doctorCreateTime.toLocaleString() : <any>undefined;
        data["name"] = this.name;
        data["roomItemListId"] = this.roomItemListId;
        data["usage"] = this.usage;
        data["singleDosage"] = this.singleDosage;
        data["singleUnit"] = this.singleUnit;
        data["dosage"] = this.dosage;
        data["unit"] = this.unit;
        data["interval"] = this.interval;
        data["owned"] = this.owned;
        data["orally"] = this.orally;
        data["dialysis"] = this.dialysis;
        data["endDate"] = this.endDate ? this.endDate.toLocaleString() : <any>undefined;
        data["weekday"] = this.weekday;
        data["resolveCount"] = this.resolveCount;
        data["enabled"] = this.enabled;
        data["deleted"] = this.deleted;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["stoper"] = this.stoper;
        data["stoperId"] = this.stoperId;
        data["stopTime"] = this.stopTime;
        data["openTime"] = this.openTime;
        data["order"] = this.order;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        data["roomItemLists"] = this.roomItemLists ? this.roomItemLists.toJSON() : <any>undefined;
        return data;
    }
}

/** 长期医嘱 */
export interface IPatientDaLongterm {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立医生标识 */
    doctorId?: string | undefined;
    /** 开立医生姓名 */
    doctorName?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` *默认带出项目基本单位* */
    unit?: string | undefined;
    /** 频次 `DIC.DA.INTERVAL` */
    interval?: string | undefined;
    /** 自备药0,1 */
    owned?: number;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 透中医嘱0,1 */
    dialysis?: number;
    /** 停止日期 */
    endDate?: dayjs.Dayjs | undefined;
    /** 周执行 `DIC.DA.WEEKDAY` *多个用`;`分隔* */
    weekday?: string | undefined;
    /** 已分解次数 */
    resolveCount?: number | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 停止人 */
    stoper?: string | undefined;
    /** 停止人id */
    stoperId?: string | undefined;
    /** 停止时间 */
    stopTime?: string | undefined;
    /** 开立时间 */
    openTime?: string | undefined;
    /** 排序 */
    order?: number;
    patients?: Patient;
    roomItemLists?: RoomItemList;
}

export class PatientDaLongtermEditModel implements IPatientDaLongtermEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` *默认带出项目基本单位* */
    unit?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 停止日期 */
    endDate?: dayjs.Dayjs | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 频次 `DIC.DA.INTERVAL` */
    interval?: string | undefined;
    /** 自备药0,1 */
    owned!: number;
    /** 透中医嘱0,1 */
    dialysis!: number;
    /** 周执行 `DIC.DA.WEEKDAY` *多个用`;`分隔* */
    weekday?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 停止人 */
    stoper?: string | undefined;
    /** 停止人id */
    stoperId?: string | undefined;
    /** 停止时间 */
    stopTime?: string | undefined;
    /** 开立时间 */
    openTime?: string | undefined;
    /** 排序 */
    order!: number;

    constructor(data?: IPatientDaLongtermEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.type = _data["type"];
            this.content = _data["content"];
            this.groupId = _data["groupId"];
            this.doctorCreateTime = _data["doctorCreateTime"] ? dayjs(_data["doctorCreateTime"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.roomItemListId = _data["roomItemListId"];
            this.usage = _data["usage"];
            this.dosage = _data["dosage"];
            this.unit = _data["unit"];
            this.singleDosage = _data["singleDosage"];
            this.endDate = _data["endDate"] ? dayjs(_data["endDate"].toString()) : <any>undefined;
            this.singleUnit = _data["singleUnit"];
            this.orally = _data["orally"];
            this.interval = _data["interval"];
            this.owned = _data["owned"];
            this.dialysis = _data["dialysis"];
            this.weekday = _data["weekday"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
            this.stoper = _data["stoper"];
            this.stoperId = _data["stoperId"];
            this.stopTime = _data["stopTime"];
            this.openTime = _data["openTime"];
            this.order = _data["order"];
        }
    }

    static fromJS(data: any): PatientDaLongtermEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDaLongtermEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["type"] = this.type;
        data["content"] = this.content;
        data["groupId"] = this.groupId;
        data["doctorCreateTime"] = this.doctorCreateTime ? this.doctorCreateTime.toLocaleString() : <any>undefined;
        data["name"] = this.name;
        data["roomItemListId"] = this.roomItemListId;
        data["usage"] = this.usage;
        data["dosage"] = this.dosage;
        data["unit"] = this.unit;
        data["singleDosage"] = this.singleDosage;
        data["endDate"] = this.endDate ? this.endDate.toLocaleString() : <any>undefined;
        data["singleUnit"] = this.singleUnit;
        data["orally"] = this.orally;
        data["interval"] = this.interval;
        data["owned"] = this.owned;
        data["dialysis"] = this.dialysis;
        data["weekday"] = this.weekday;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        data["stoper"] = this.stoper;
        data["stoperId"] = this.stoperId;
        data["stopTime"] = this.stopTime;
        data["openTime"] = this.openTime;
        data["order"] = this.order;
        return data;
    }
}

export interface IPatientDaLongtermEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` *默认带出项目基本单位* */
    unit?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 停止日期 */
    endDate?: dayjs.Dayjs | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 频次 `DIC.DA.INTERVAL` */
    interval?: string | undefined;
    /** 自备药0,1 */
    owned: number;
    /** 透中医嘱0,1 */
    dialysis: number;
    /** 周执行 `DIC.DA.WEEKDAY` *多个用`;`分隔* */
    weekday?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
    /** 备注 */
    remark?: string | undefined;
    /** 停止人 */
    stoper?: string | undefined;
    /** 停止人id */
    stoperId?: string | undefined;
    /** 停止时间 */
    stopTime?: string | undefined;
    /** 开立时间 */
    openTime?: string | undefined;
    /** 排序 */
    order: number;
}

/** Reponse */
export class PatientDaLongtermResultEntry implements IPatientDaLongtermResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDaLongterm;

    constructor(data?: IPatientDaLongtermResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientDaLongterm.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDaLongtermResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDaLongtermResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientDaLongtermResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDaLongterm;
}

/** 长期医嘱View */
export class PatientDaLongtermView implements IPatientDaLongtermView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` *默认带出项目基本单位* */
    unit?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 停止日期 */
    endDate?: dayjs.Dayjs | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 频次 `DIC.DA.INTERVAL` */
    interval?: string | undefined;
    /** 自备药0,1 */
    owned!: number;
    /** 透中医嘱0,1 */
    dialysis!: number;
    /** 周执行 `DIC.DA.WEEKDAY` *多个用`;`分隔* */
    weekday?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 停止人 */
    stoper?: string | undefined;
    /** 停止人id */
    stoperId?: string | undefined;
    /** 停止时间 */
    stopTime?: string | undefined;
    /** 开立时间 */
    openTime?: string | undefined;
    /** 排序 */
    order!: number;
    /** 口服药 */
    orallyLabel?: string | undefined;
    /** 透中医嘱 */
    dialysisLabel?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 是否勾选 */
    checked?: boolean;
    /** 患者姓名 */
    patientName?: string | undefined;
    patientAge?: string | undefined;
    patientGender?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    patientDept?: string | undefined;
    patientBed?: string | undefined;
    patientInNo?: string | undefined;
    hospName?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usageName?: string | undefined;
    /** 数量单位 `DIC.SYS.UNIT` *默认带出项目基本单位* */
    unitName?: string | undefined;
    /** 单次用量单位显示值 */
    singleUnitName?: string | undefined;
    /** 分组标识 */
    group?: string | undefined;
    startExecNurseName?: string | undefined;
    stopExecNurseName?: string | undefined;
    /** 种类名称全称 */
    roomItemTypeNameFull?: string | undefined;
    /** 频次 `DIC.DA.INTERVAL` */
    intervalName?: string | undefined;
    /** 周执行 `DIC.DA.WEEKDAY` *多个用`;`分隔* */
    weekdayName?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 项目启用状态 */
    listEnabled?: number;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 患者来源 */
    source?: string | undefined;
    /** 药品库存 */
    inventoryCount?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 医嘱模板标识 */
    tmplGroupDaId?: string | undefined;
    /** 开立医生标识 */
    doctorId!: string;
    /** 开立医生姓名 */
    doctorName!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientDaLongtermView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.type = _data["type"];
            this.content = _data["content"];
            this.groupId = _data["groupId"];
            this.doctorCreateTime = _data["doctorCreateTime"] ? dayjs(_data["doctorCreateTime"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.roomItemListId = _data["roomItemListId"];
            this.usage = _data["usage"];
            this.dosage = _data["dosage"];
            this.unit = _data["unit"];
            this.singleDosage = _data["singleDosage"];
            this.endDate = _data["endDate"] ? dayjs(_data["endDate"].toString()) : <any>undefined;
            this.singleUnit = _data["singleUnit"];
            this.orally = _data["orally"];
            this.interval = _data["interval"];
            this.owned = _data["owned"];
            this.dialysis = _data["dialysis"];
            this.weekday = _data["weekday"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
            this.stoper = _data["stoper"];
            this.stoperId = _data["stoperId"];
            this.stopTime = _data["stopTime"];
            this.openTime = _data["openTime"];
            this.order = _data["order"];
            this.orallyLabel = _data["orallyLabel"];
            this.dialysisLabel = _data["dialysisLabel"];
            this.nameGoods = _data["nameGoods"];
            this.checked = _data["checked"];
            this.patientName = _data["patientName"];
            this.patientAge = _data["patientAge"];
            this.patientGender = _data["patientGender"];
            this.patientName2 = _data["patientName2"];
            this.patientDept = _data["patientDept"];
            this.patientBed = _data["patientBed"];
            this.patientInNo = _data["patientInNo"];
            this.hospName = _data["hospName"];
            this.patientNameFull = _data["patientNameFull"];
            this.usageName = _data["usageName"];
            this.unitName = _data["unitName"];
            this.singleUnitName = _data["singleUnitName"];
            this.group = _data["group"];
            this.startExecNurseName = _data["startExecNurseName"];
            this.stopExecNurseName = _data["stopExecNurseName"];
            this.roomItemTypeNameFull = _data["roomItemTypeNameFull"];
            this.intervalName = _data["intervalName"];
            this.weekdayName = _data["weekdayName"];
            this.specLabel = _data["specLabel"];
            this.listEnabled = _data["listEnabled"];
            this.cureDaContent = _data["cureDaContent"];
            this.typeName = _data["typeName"];
            this.source = _data["source"];
            this.inventoryCount = _data["inventoryCount"];
            this.id = _data["id"];
            this.tmplGroupDaId = _data["tmplGroupDaId"];
            this.doctorId = _data["doctorId"];
            this.doctorName = _data["doctorName"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDaLongtermView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDaLongtermView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["type"] = this.type;
        data["content"] = this.content;
        data["groupId"] = this.groupId;
        data["doctorCreateTime"] = this.doctorCreateTime ? this.doctorCreateTime.toLocaleString() : <any>undefined;
        data["name"] = this.name;
        data["roomItemListId"] = this.roomItemListId;
        data["usage"] = this.usage;
        data["dosage"] = this.dosage;
        data["unit"] = this.unit;
        data["singleDosage"] = this.singleDosage;
        data["endDate"] = this.endDate ? this.endDate.toLocaleString() : <any>undefined;
        data["singleUnit"] = this.singleUnit;
        data["orally"] = this.orally;
        data["interval"] = this.interval;
        data["owned"] = this.owned;
        data["dialysis"] = this.dialysis;
        data["weekday"] = this.weekday;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        data["stoper"] = this.stoper;
        data["stoperId"] = this.stoperId;
        data["stopTime"] = this.stopTime;
        data["openTime"] = this.openTime;
        data["order"] = this.order;
        data["orallyLabel"] = this.orallyLabel;
        data["dialysisLabel"] = this.dialysisLabel;
        data["nameGoods"] = this.nameGoods;
        data["checked"] = this.checked;
        data["patientName"] = this.patientName;
        data["patientAge"] = this.patientAge;
        data["patientGender"] = this.patientGender;
        data["patientName2"] = this.patientName2;
        data["patientDept"] = this.patientDept;
        data["patientBed"] = this.patientBed;
        data["patientInNo"] = this.patientInNo;
        data["hospName"] = this.hospName;
        data["patientNameFull"] = this.patientNameFull;
        data["usageName"] = this.usageName;
        data["unitName"] = this.unitName;
        data["singleUnitName"] = this.singleUnitName;
        data["group"] = this.group;
        data["startExecNurseName"] = this.startExecNurseName;
        data["stopExecNurseName"] = this.stopExecNurseName;
        data["roomItemTypeNameFull"] = this.roomItemTypeNameFull;
        data["intervalName"] = this.intervalName;
        data["weekdayName"] = this.weekdayName;
        data["specLabel"] = this.specLabel;
        data["listEnabled"] = this.listEnabled;
        data["cureDaContent"] = this.cureDaContent;
        data["typeName"] = this.typeName;
        data["source"] = this.source;
        data["inventoryCount"] = this.inventoryCount;
        data["id"] = this.id;
        data["tmplGroupDaId"] = this.tmplGroupDaId;
        data["doctorId"] = this.doctorId;
        data["doctorName"] = this.doctorName;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 长期医嘱View */
export interface IPatientDaLongtermView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` *默认带出项目基本单位* */
    unit?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 停止日期 */
    endDate?: dayjs.Dayjs | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 频次 `DIC.DA.INTERVAL` */
    interval?: string | undefined;
    /** 自备药0,1 */
    owned: number;
    /** 透中医嘱0,1 */
    dialysis: number;
    /** 周执行 `DIC.DA.WEEKDAY` *多个用`;`分隔* */
    weekday?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
    /** 备注 */
    remark?: string | undefined;
    /** 停止人 */
    stoper?: string | undefined;
    /** 停止人id */
    stoperId?: string | undefined;
    /** 停止时间 */
    stopTime?: string | undefined;
    /** 开立时间 */
    openTime?: string | undefined;
    /** 排序 */
    order: number;
    /** 口服药 */
    orallyLabel?: string | undefined;
    /** 透中医嘱 */
    dialysisLabel?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 是否勾选 */
    checked?: boolean;
    /** 患者姓名 */
    patientName?: string | undefined;
    patientAge?: string | undefined;
    patientGender?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    patientDept?: string | undefined;
    patientBed?: string | undefined;
    patientInNo?: string | undefined;
    hospName?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usageName?: string | undefined;
    /** 数量单位 `DIC.SYS.UNIT` *默认带出项目基本单位* */
    unitName?: string | undefined;
    /** 单次用量单位显示值 */
    singleUnitName?: string | undefined;
    /** 分组标识 */
    group?: string | undefined;
    startExecNurseName?: string | undefined;
    stopExecNurseName?: string | undefined;
    /** 种类名称全称 */
    roomItemTypeNameFull?: string | undefined;
    /** 频次 `DIC.DA.INTERVAL` */
    intervalName?: string | undefined;
    /** 周执行 `DIC.DA.WEEKDAY` *多个用`;`分隔* */
    weekdayName?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 项目启用状态 */
    listEnabled?: number;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 患者来源 */
    source?: string | undefined;
    /** 药品库存 */
    inventoryCount?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 医嘱模板标识 */
    tmplGroupDaId?: string | undefined;
    /** 开立医生标识 */
    doctorId: string;
    /** 开立医生姓名 */
    doctorName: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientDaLongtermViewResult implements IPatientDaLongtermViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDaLongtermView[] | undefined;

    constructor(data?: IPatientDaLongtermViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientDaLongtermView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientDaLongtermViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDaLongtermViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientDaLongtermViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDaLongtermView[] | undefined;
}

/** 临时医嘱 */
export class PatientDaTemporary implements IPatientDaTemporary {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立医生标识 */
    doctorId?: string | undefined;
    /** 开立医生姓名 */
    doctorName?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` *默认带出项目基本单位* */
    unit?: string | undefined;
    /** 自备药0,1 */
    owned?: number;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 透中医嘱0,1 */
    dialysis?: number;
    /** 执行日期 */
    execDate?: dayjs.Dayjs;
    /** 状态 `DIC.DA.TEMP.STATUS` *新医嘱,已使用,已撤销* */
    status?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
    roomItemLists?: RoomItemList;

    constructor(data?: IPatientDaTemporary) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.type = _data["type"];
            this.content = _data["content"];
            this.groupId = _data["groupId"];
            this.doctorId = _data["doctorId"];
            this.doctorName = _data["doctorName"];
            this.doctorCreateTime = _data["doctorCreateTime"] ? dayjs(_data["doctorCreateTime"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.roomItemListId = _data["roomItemListId"];
            this.usage = _data["usage"];
            this.singleDosage = _data["singleDosage"];
            this.singleUnit = _data["singleUnit"];
            this.dosage = _data["dosage"];
            this.unit = _data["unit"];
            this.owned = _data["owned"];
            this.orally = _data["orally"];
            this.dialysis = _data["dialysis"];
            this.execDate = _data["execDate"] ? dayjs(_data["execDate"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
            this.roomItemLists = _data["roomItemLists"] ? RoomItemList.fromJS(_data["roomItemLists"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDaTemporary {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDaTemporary();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["type"] = this.type;
        data["content"] = this.content;
        data["groupId"] = this.groupId;
        data["doctorId"] = this.doctorId;
        data["doctorName"] = this.doctorName;
        data["doctorCreateTime"] = this.doctorCreateTime ? this.doctorCreateTime.toLocaleString() : <any>undefined;
        data["name"] = this.name;
        data["roomItemListId"] = this.roomItemListId;
        data["usage"] = this.usage;
        data["singleDosage"] = this.singleDosage;
        data["singleUnit"] = this.singleUnit;
        data["dosage"] = this.dosage;
        data["unit"] = this.unit;
        data["owned"] = this.owned;
        data["orally"] = this.orally;
        data["dialysis"] = this.dialysis;
        data["execDate"] = this.execDate ? this.execDate.toLocaleString() : <any>undefined;
        data["status"] = this.status;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        data["roomItemLists"] = this.roomItemLists ? this.roomItemLists.toJSON() : <any>undefined;
        return data;
    }
}

/** 临时医嘱 */
export interface IPatientDaTemporary {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立医生标识 */
    doctorId?: string | undefined;
    /** 开立医生姓名 */
    doctorName?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` *默认带出项目基本单位* */
    unit?: string | undefined;
    /** 自备药0,1 */
    owned?: number;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 透中医嘱0,1 */
    dialysis?: number;
    /** 执行日期 */
    execDate?: dayjs.Dayjs;
    /** 状态 `DIC.DA.TEMP.STATUS` *新医嘱,已使用,已撤销* */
    status?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
    roomItemLists?: RoomItemList;
}

export class PatientDaTemporaryEditModel implements IPatientDaTemporaryEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` *默认带出项目基本单位* */
    unit?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 自备药0,1 */
    owned!: number;
    /** 透中医嘱0,1 */
    dialysis!: number;
    /** 执行日期 */
    execDate!: dayjs.Dayjs;

    constructor(data?: IPatientDaTemporaryEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.type = _data["type"];
            this.content = _data["content"];
            this.groupId = _data["groupId"];
            this.doctorCreateTime = _data["doctorCreateTime"] ? dayjs(_data["doctorCreateTime"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.roomItemListId = _data["roomItemListId"];
            this.usage = _data["usage"];
            this.dosage = _data["dosage"];
            this.unit = _data["unit"];
            this.singleDosage = _data["singleDosage"];
            this.singleUnit = _data["singleUnit"];
            this.orally = _data["orally"];
            this.owned = _data["owned"];
            this.dialysis = _data["dialysis"];
            this.execDate = _data["execDate"] ? dayjs(_data["execDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDaTemporaryEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDaTemporaryEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["type"] = this.type;
        data["content"] = this.content;
        data["groupId"] = this.groupId;
        data["doctorCreateTime"] = this.doctorCreateTime ? this.doctorCreateTime.toLocaleString() : <any>undefined;
        data["name"] = this.name;
        data["roomItemListId"] = this.roomItemListId;
        data["usage"] = this.usage;
        data["dosage"] = this.dosage;
        data["unit"] = this.unit;
        data["singleDosage"] = this.singleDosage;
        data["singleUnit"] = this.singleUnit;
        data["orally"] = this.orally;
        data["owned"] = this.owned;
        data["dialysis"] = this.dialysis;
        data["execDate"] = this.execDate ? this.execDate.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface IPatientDaTemporaryEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` *默认带出项目基本单位* */
    unit?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 自备药0,1 */
    owned: number;
    /** 透中医嘱0,1 */
    dialysis: number;
    /** 执行日期 */
    execDate: dayjs.Dayjs;
}

/** Reponse */
export class PatientDaTemporaryResultEntry implements IPatientDaTemporaryResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDaTemporary;

    constructor(data?: IPatientDaTemporaryResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientDaTemporary.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDaTemporaryResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDaTemporaryResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientDaTemporaryResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDaTemporary;
}

/** 临时医嘱View */
export class PatientDaTemporaryView implements IPatientDaTemporaryView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` *默认带出项目基本单位* */
    unit?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 自备药0,1 */
    owned!: number;
    /** 透中医嘱0,1 */
    dialysis!: number;
    /** 执行日期 */
    execDate!: dayjs.Dayjs;
    /** 口服药 */
    orallyLabel?: string | undefined;
    /** 透中医嘱 */
    dialysisLabel?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 状态 `DIC.DA.TEMP.STATUS` *新医嘱,已使用,已撤销* */
    status?: string | undefined;
    /** 是否勾选(制定处方与确认处方时使用) */
    checked?: boolean;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usageName?: string | undefined;
    /** 数量单位 `DIC.SYS.UNIT` */
    unitName?: string | undefined;
    /** 单次用量单位名称 */
    singleUnitName?: string | undefined;
    /** 状态显示值 */
    statusLabel?: string | undefined;
    /** 分组标识 */
    group?: string | undefined;
    /** 种类名称全称 */
    roomItemTypeNameFull?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 项目启用状态 */
    listEnabled?: number;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 患者来源 */
    source?: string | undefined;
    /** 药品库存 */
    inventoryCount?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 医嘱模板标识 */
    tmplGroupDaId?: string | undefined;
    /** 开立医生标识 */
    doctorId!: string;
    /** 开立医生姓名 */
    doctorName!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientDaTemporaryView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.type = _data["type"];
            this.content = _data["content"];
            this.groupId = _data["groupId"];
            this.doctorCreateTime = _data["doctorCreateTime"] ? dayjs(_data["doctorCreateTime"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.roomItemListId = _data["roomItemListId"];
            this.usage = _data["usage"];
            this.dosage = _data["dosage"];
            this.unit = _data["unit"];
            this.singleDosage = _data["singleDosage"];
            this.singleUnit = _data["singleUnit"];
            this.orally = _data["orally"];
            this.owned = _data["owned"];
            this.dialysis = _data["dialysis"];
            this.execDate = _data["execDate"] ? dayjs(_data["execDate"].toString()) : <any>undefined;
            this.orallyLabel = _data["orallyLabel"];
            this.dialysisLabel = _data["dialysisLabel"];
            this.nameGoods = _data["nameGoods"];
            this.status = _data["status"];
            this.checked = _data["checked"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.usageName = _data["usageName"];
            this.unitName = _data["unitName"];
            this.singleUnitName = _data["singleUnitName"];
            this.statusLabel = _data["statusLabel"];
            this.group = _data["group"];
            this.roomItemTypeNameFull = _data["roomItemTypeNameFull"];
            this.specLabel = _data["specLabel"];
            this.cureDaContent = _data["cureDaContent"];
            this.listEnabled = _data["listEnabled"];
            this.typeName = _data["typeName"];
            this.source = _data["source"];
            this.inventoryCount = _data["inventoryCount"];
            this.id = _data["id"];
            this.tmplGroupDaId = _data["tmplGroupDaId"];
            this.doctorId = _data["doctorId"];
            this.doctorName = _data["doctorName"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDaTemporaryView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDaTemporaryView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["type"] = this.type;
        data["content"] = this.content;
        data["groupId"] = this.groupId;
        data["doctorCreateTime"] = this.doctorCreateTime ? this.doctorCreateTime.toLocaleString() : <any>undefined;
        data["name"] = this.name;
        data["roomItemListId"] = this.roomItemListId;
        data["usage"] = this.usage;
        data["dosage"] = this.dosage;
        data["unit"] = this.unit;
        data["singleDosage"] = this.singleDosage;
        data["singleUnit"] = this.singleUnit;
        data["orally"] = this.orally;
        data["owned"] = this.owned;
        data["dialysis"] = this.dialysis;
        data["execDate"] = this.execDate ? this.execDate.toLocaleString() : <any>undefined;
        data["orallyLabel"] = this.orallyLabel;
        data["dialysisLabel"] = this.dialysisLabel;
        data["nameGoods"] = this.nameGoods;
        data["status"] = this.status;
        data["checked"] = this.checked;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["usageName"] = this.usageName;
        data["unitName"] = this.unitName;
        data["singleUnitName"] = this.singleUnitName;
        data["statusLabel"] = this.statusLabel;
        data["group"] = this.group;
        data["roomItemTypeNameFull"] = this.roomItemTypeNameFull;
        data["specLabel"] = this.specLabel;
        data["cureDaContent"] = this.cureDaContent;
        data["listEnabled"] = this.listEnabled;
        data["typeName"] = this.typeName;
        data["source"] = this.source;
        data["inventoryCount"] = this.inventoryCount;
        data["id"] = this.id;
        data["tmplGroupDaId"] = this.tmplGroupDaId;
        data["doctorId"] = this.doctorId;
        data["doctorName"] = this.doctorName;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 临时医嘱View */
export interface IPatientDaTemporaryView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` *默认带出项目基本单位* */
    unit?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 自备药0,1 */
    owned: number;
    /** 透中医嘱0,1 */
    dialysis: number;
    /** 执行日期 */
    execDate: dayjs.Dayjs;
    /** 口服药 */
    orallyLabel?: string | undefined;
    /** 透中医嘱 */
    dialysisLabel?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 状态 `DIC.DA.TEMP.STATUS` *新医嘱,已使用,已撤销* */
    status?: string | undefined;
    /** 是否勾选(制定处方与确认处方时使用) */
    checked?: boolean;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usageName?: string | undefined;
    /** 数量单位 `DIC.SYS.UNIT` */
    unitName?: string | undefined;
    /** 单次用量单位名称 */
    singleUnitName?: string | undefined;
    /** 状态显示值 */
    statusLabel?: string | undefined;
    /** 分组标识 */
    group?: string | undefined;
    /** 种类名称全称 */
    roomItemTypeNameFull?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 项目启用状态 */
    listEnabled?: number;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 患者来源 */
    source?: string | undefined;
    /** 药品库存 */
    inventoryCount?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 医嘱模板标识 */
    tmplGroupDaId?: string | undefined;
    /** 开立医生标识 */
    doctorId: string;
    /** 开立医生姓名 */
    doctorName: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientDaTemporaryViewResult implements IPatientDaTemporaryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDaTemporaryView[] | undefined;

    constructor(data?: IPatientDaTemporaryViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientDaTemporaryView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientDaTemporaryViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDaTemporaryViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientDaTemporaryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDaTemporaryView[] | undefined;
}

export class PatientDiagnosisAllergyEditModel implements IPatientDiagnosisAllergyEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 检查日期 */
    date!: dayjs.Dayjs;
    /** 过敏反应 *多选* *透析器材过敏,药物过敏,食物过敏,其它过敏* */
    anaphylaxis!: string;
    /** 透析器材过敏 *多选* *本次使用膜材料,消毒方式* */
    dialysisEquipmentAllergy?: string | undefined;
    /** 本次使用膜材料 *多选* *聚砜膜,聚醚砜膜,聚丙烯晴膜,聚甲基丙烯酸甲酯莫,Polyamix膜,醋酸纤维素膜,其它* */
    useMembraneMaterials?: string | undefined;
    /** 本次使用其它膜材料 */
    ummOther?: string | undefined;
    /** 消毒方式 *多选* *γ射线,环氧乙烷熏蒸,蒸汽高压灭菌,其它* */
    disinfectionMethod?: string | undefined;
    /** 其它消毒方式 */
    dmOther?: string | undefined;
    /** 药物过敏 *多选* *抗生素,静脉铁剂,肝素,其它* */
    drugAllergy?: string | undefined;
    /** 抗生素 *多选* *青霉素类,头孢菌素类,大环内酯类,氨基糖苷类,喹诺酮类,碳青霉烯类,其它* */
    antibiotic?: string | undefined;
    /** 其它抗生素 */
    antibioticOther?: string | undefined;
    /** 静脉铁剂 *多选* *蔗糖铁,右旋糖苷铁,葡萄糖醛酸铁* */
    ferricCarboxymaltose?: string | undefined;
    /** 肝素 *肝素诱导的血小板减少症,其它* */
    heparin?: string | undefined;
    /** 其它肝素 */
    heparinOther?: string | undefined;
    /** 其它药物过敏说明 */
    drugAllergyInstructionsOther?: string | undefined;
    /** 其它过敏反应 */
    allergicReactionsOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number | undefined;

    constructor(data?: IPatientDiagnosisAllergyEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.anaphylaxis = _data["anaphylaxis"];
            this.dialysisEquipmentAllergy = _data["dialysisEquipmentAllergy"];
            this.useMembraneMaterials = _data["useMembraneMaterials"];
            this.ummOther = _data["ummOther"];
            this.disinfectionMethod = _data["disinfectionMethod"];
            this.dmOther = _data["dmOther"];
            this.drugAllergy = _data["drugAllergy"];
            this.antibiotic = _data["antibiotic"];
            this.antibioticOther = _data["antibioticOther"];
            this.ferricCarboxymaltose = _data["ferricCarboxymaltose"];
            this.heparin = _data["heparin"];
            this.heparinOther = _data["heparinOther"];
            this.drugAllergyInstructionsOther = _data["drugAllergyInstructionsOther"];
            this.allergicReactionsOther = _data["allergicReactionsOther"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): PatientDiagnosisAllergyEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisAllergyEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["anaphylaxis"] = this.anaphylaxis;
        data["dialysisEquipmentAllergy"] = this.dialysisEquipmentAllergy;
        data["useMembraneMaterials"] = this.useMembraneMaterials;
        data["ummOther"] = this.ummOther;
        data["disinfectionMethod"] = this.disinfectionMethod;
        data["dmOther"] = this.dmOther;
        data["drugAllergy"] = this.drugAllergy;
        data["antibiotic"] = this.antibiotic;
        data["antibioticOther"] = this.antibioticOther;
        data["ferricCarboxymaltose"] = this.ferricCarboxymaltose;
        data["heparin"] = this.heparin;
        data["heparinOther"] = this.heparinOther;
        data["drugAllergyInstructionsOther"] = this.drugAllergyInstructionsOther;
        data["allergicReactionsOther"] = this.allergicReactionsOther;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        return data;
    }
}

export interface IPatientDiagnosisAllergyEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 检查日期 */
    date: dayjs.Dayjs;
    /** 过敏反应 *多选* *透析器材过敏,药物过敏,食物过敏,其它过敏* */
    anaphylaxis: string;
    /** 透析器材过敏 *多选* *本次使用膜材料,消毒方式* */
    dialysisEquipmentAllergy?: string | undefined;
    /** 本次使用膜材料 *多选* *聚砜膜,聚醚砜膜,聚丙烯晴膜,聚甲基丙烯酸甲酯莫,Polyamix膜,醋酸纤维素膜,其它* */
    useMembraneMaterials?: string | undefined;
    /** 本次使用其它膜材料 */
    ummOther?: string | undefined;
    /** 消毒方式 *多选* *γ射线,环氧乙烷熏蒸,蒸汽高压灭菌,其它* */
    disinfectionMethod?: string | undefined;
    /** 其它消毒方式 */
    dmOther?: string | undefined;
    /** 药物过敏 *多选* *抗生素,静脉铁剂,肝素,其它* */
    drugAllergy?: string | undefined;
    /** 抗生素 *多选* *青霉素类,头孢菌素类,大环内酯类,氨基糖苷类,喹诺酮类,碳青霉烯类,其它* */
    antibiotic?: string | undefined;
    /** 其它抗生素 */
    antibioticOther?: string | undefined;
    /** 静脉铁剂 *多选* *蔗糖铁,右旋糖苷铁,葡萄糖醛酸铁* */
    ferricCarboxymaltose?: string | undefined;
    /** 肝素 *肝素诱导的血小板减少症,其它* */
    heparin?: string | undefined;
    /** 其它肝素 */
    heparinOther?: string | undefined;
    /** 其它药物过敏说明 */
    drugAllergyInstructionsOther?: string | undefined;
    /** 其它过敏反应 */
    allergicReactionsOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number | undefined;
}

/** 过敏诊断 */
export class PatientDiagnosisAllergyItemView implements IPatientDiagnosisAllergyItemView {
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 检查日期 */
    date!: dayjs.Dayjs;
    /** 过敏反应 *多选* *透析器材过敏,药物过敏,食物过敏,其它过敏* */
    anaphylaxis!: string;
    /** 透析器材过敏 *多选* *本次使用膜材料,消毒方式* */
    dialysisEquipmentAllergy?: string | undefined;
    /** 本次使用膜材料 *多选* *聚砜膜,聚醚砜膜,聚丙烯晴膜,聚甲基丙烯酸甲酯莫,Polyamix膜,醋酸纤维素膜,其它* */
    useMembraneMaterials?: string | undefined;
    /** 本次使用其它膜材料 */
    ummOther?: string | undefined;
    /** 消毒方式 *多选* *γ射线,环氧乙烷熏蒸,蒸汽高压灭菌,其它* */
    disinfectionMethod?: string | undefined;
    /** 其它消毒方式 */
    dmOther?: string | undefined;
    /** 药物过敏 *多选* *抗生素,静脉铁剂,肝素,其它* */
    drugAllergy?: string | undefined;
    /** 抗生素 *多选* *青霉素类,头孢菌素类,大环内酯类,氨基糖苷类,喹诺酮类,碳青霉烯类,其它* */
    antibiotic?: string | undefined;
    /** 其它抗生素 */
    antibioticOther?: string | undefined;
    /** 静脉铁剂 *多选* *蔗糖铁,右旋糖苷铁,葡萄糖醛酸铁* */
    ferricCarboxymaltose?: string | undefined;
    /** 肝素 *肝素诱导的血小板减少症,其它* */
    heparin?: string | undefined;
    /** 其它肝素 */
    heparinOther?: string | undefined;
    /** 其它药物过敏说明 */
    drugAllergyInstructionsOther?: string | undefined;
    /** 其它过敏反应 */
    allergicReactionsOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 是否启用 */
    enable?: number | undefined;
    /** 类型 */
    readonly anaphylaxisLabel?: string | undefined;

    constructor(data?: IPatientDiagnosisAllergyItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.anaphylaxis = _data["anaphylaxis"];
            this.dialysisEquipmentAllergy = _data["dialysisEquipmentAllergy"];
            this.useMembraneMaterials = _data["useMembraneMaterials"];
            this.ummOther = _data["ummOther"];
            this.disinfectionMethod = _data["disinfectionMethod"];
            this.dmOther = _data["dmOther"];
            this.drugAllergy = _data["drugAllergy"];
            this.antibiotic = _data["antibiotic"];
            this.antibioticOther = _data["antibioticOther"];
            this.ferricCarboxymaltose = _data["ferricCarboxymaltose"];
            this.heparin = _data["heparin"];
            this.heparinOther = _data["heparinOther"];
            this.drugAllergyInstructionsOther = _data["drugAllergyInstructionsOther"];
            this.allergicReactionsOther = _data["allergicReactionsOther"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.enable = _data["enable"];
            (<any>this).anaphylaxisLabel = _data["anaphylaxisLabel"];
        }
    }

    static fromJS(data: any): PatientDiagnosisAllergyItemView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisAllergyItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["anaphylaxis"] = this.anaphylaxis;
        data["dialysisEquipmentAllergy"] = this.dialysisEquipmentAllergy;
        data["useMembraneMaterials"] = this.useMembraneMaterials;
        data["ummOther"] = this.ummOther;
        data["disinfectionMethod"] = this.disinfectionMethod;
        data["dmOther"] = this.dmOther;
        data["drugAllergy"] = this.drugAllergy;
        data["antibiotic"] = this.antibiotic;
        data["antibioticOther"] = this.antibioticOther;
        data["ferricCarboxymaltose"] = this.ferricCarboxymaltose;
        data["heparin"] = this.heparin;
        data["heparinOther"] = this.heparinOther;
        data["drugAllergyInstructionsOther"] = this.drugAllergyInstructionsOther;
        data["allergicReactionsOther"] = this.allergicReactionsOther;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["enable"] = this.enable;
        data["anaphylaxisLabel"] = this.anaphylaxisLabel;
        return data;
    }
}

/** 过敏诊断 */
export interface IPatientDiagnosisAllergyItemView {
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 检查日期 */
    date: dayjs.Dayjs;
    /** 过敏反应 *多选* *透析器材过敏,药物过敏,食物过敏,其它过敏* */
    anaphylaxis: string;
    /** 透析器材过敏 *多选* *本次使用膜材料,消毒方式* */
    dialysisEquipmentAllergy?: string | undefined;
    /** 本次使用膜材料 *多选* *聚砜膜,聚醚砜膜,聚丙烯晴膜,聚甲基丙烯酸甲酯莫,Polyamix膜,醋酸纤维素膜,其它* */
    useMembraneMaterials?: string | undefined;
    /** 本次使用其它膜材料 */
    ummOther?: string | undefined;
    /** 消毒方式 *多选* *γ射线,环氧乙烷熏蒸,蒸汽高压灭菌,其它* */
    disinfectionMethod?: string | undefined;
    /** 其它消毒方式 */
    dmOther?: string | undefined;
    /** 药物过敏 *多选* *抗生素,静脉铁剂,肝素,其它* */
    drugAllergy?: string | undefined;
    /** 抗生素 *多选* *青霉素类,头孢菌素类,大环内酯类,氨基糖苷类,喹诺酮类,碳青霉烯类,其它* */
    antibiotic?: string | undefined;
    /** 其它抗生素 */
    antibioticOther?: string | undefined;
    /** 静脉铁剂 *多选* *蔗糖铁,右旋糖苷铁,葡萄糖醛酸铁* */
    ferricCarboxymaltose?: string | undefined;
    /** 肝素 *肝素诱导的血小板减少症,其它* */
    heparin?: string | undefined;
    /** 其它肝素 */
    heparinOther?: string | undefined;
    /** 其它药物过敏说明 */
    drugAllergyInstructionsOther?: string | undefined;
    /** 其它过敏反应 */
    allergicReactionsOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 是否启用 */
    enable?: number | undefined;
    /** 类型 */
    anaphylaxisLabel?: string | undefined;
}

export class PatientDiagnosisAllergyView implements IPatientDiagnosisAllergyView {
    /** 诊断类型(*0:无,1:有*) */
    diagnosis?: number | undefined;
    /** 诊断详情 */
    items?: PatientDiagnosisAllergyItemView[] | undefined;

    constructor(data?: IPatientDiagnosisAllergyView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.diagnosis = _data["diagnosis"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PatientDiagnosisAllergyItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientDiagnosisAllergyView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisAllergyView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["diagnosis"] = this.diagnosis;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPatientDiagnosisAllergyView {
    /** 诊断类型(*0:无,1:有*) */
    diagnosis?: number | undefined;
    /** 诊断详情 */
    items?: PatientDiagnosisAllergyItemView[] | undefined;
}

/** Reponse */
export class PatientDiagnosisAllergyViewResultEntry implements IPatientDiagnosisAllergyViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDiagnosisAllergyView;

    constructor(data?: IPatientDiagnosisAllergyViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientDiagnosisAllergyView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDiagnosisAllergyViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisAllergyViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientDiagnosisAllergyViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDiagnosisAllergyView;
}

export class PatientDiagnosisComplicationEditModel implements IPatientDiagnosisComplicationEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 检查日期 */
    date!: dayjs.Dayjs;
    /** 并发症分类 *多选* *肾性贫血,骨矿物质代谢紊乱,营养不良,淀粉样变性,呼吸系统,心血管系统,神经系统,消化系统,皮肤瘙痒,不安腿,其它* */
    type!: string;
    /** 骨矿物质代谢紊乱 *多选* *高转运骨病(需骨活检支持),低转运骨病(需骨活检支持),混合型骨病(需骨活检支持),转移性钙化,骨质疏松,继发性甲旁亢,其它* */
    boneMineralMetabolismDisturbance?: string | undefined;
    /** 其它骨矿物质代谢紊乱 */
    bmmdOther?: string | undefined;
    /** 淀粉样变性 *多选* *腕管综合征,心脏损害,骨损害,其它* */
    amyloidosis?: string | undefined;
    /** 其它淀粉样变性 */
    amyloidosisOther?: string | undefined;
    /** 呼吸系统并发症 *多选* *肺部感染,结核,胸膜炎,胸腔积液,尿毒症肺炎,其它* */
    respiratoryComplications?: string | undefined;
    /** 其它呼吸系统并发症 */
    rcOther?: string | undefined;
    /** 心血管系统并发症 *多选* *高血压,低血压,心律失常,心功能不全,急性左心衰竭,缺血性心脏病,心包炎,心肌病变,其它* */
    cardiovascularComplications?: string | undefined;
    /** 其它心血管系统并发症 */
    ccOther?: string | undefined;
    /** 神经系统并发症 *多选* *脑梗塞,脑出血,神经病变,尿毒性脑病,其它* */
    neurologicalComplications?: string | undefined;
    /** 其它神经系统并发症 */
    ncOther?: string | undefined;
    /** 消化系统并发症 *多选* *肝硬化,消化道出血,其它* */
    digestiveSystemComplications?: string | undefined;
    /** 其它消化系统并发症 */
    dscOther?: string | undefined;
    /** 其它并发症 */
    complicationOther?: string | undefined;
    /** 具体情况描述 */
    specificDescription?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IPatientDiagnosisComplicationEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.boneMineralMetabolismDisturbance = _data["boneMineralMetabolismDisturbance"];
            this.bmmdOther = _data["bmmdOther"];
            this.amyloidosis = _data["amyloidosis"];
            this.amyloidosisOther = _data["amyloidosisOther"];
            this.respiratoryComplications = _data["respiratoryComplications"];
            this.rcOther = _data["rcOther"];
            this.cardiovascularComplications = _data["cardiovascularComplications"];
            this.ccOther = _data["ccOther"];
            this.neurologicalComplications = _data["neurologicalComplications"];
            this.ncOther = _data["ncOther"];
            this.digestiveSystemComplications = _data["digestiveSystemComplications"];
            this.dscOther = _data["dscOther"];
            this.complicationOther = _data["complicationOther"];
            this.specificDescription = _data["specificDescription"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): PatientDiagnosisComplicationEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisComplicationEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["type"] = this.type;
        data["boneMineralMetabolismDisturbance"] = this.boneMineralMetabolismDisturbance;
        data["bmmdOther"] = this.bmmdOther;
        data["amyloidosis"] = this.amyloidosis;
        data["amyloidosisOther"] = this.amyloidosisOther;
        data["respiratoryComplications"] = this.respiratoryComplications;
        data["rcOther"] = this.rcOther;
        data["cardiovascularComplications"] = this.cardiovascularComplications;
        data["ccOther"] = this.ccOther;
        data["neurologicalComplications"] = this.neurologicalComplications;
        data["ncOther"] = this.ncOther;
        data["digestiveSystemComplications"] = this.digestiveSystemComplications;
        data["dscOther"] = this.dscOther;
        data["complicationOther"] = this.complicationOther;
        data["specificDescription"] = this.specificDescription;
        data["remark"] = this.remark;
        return data;
    }
}

export interface IPatientDiagnosisComplicationEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 检查日期 */
    date: dayjs.Dayjs;
    /** 并发症分类 *多选* *肾性贫血,骨矿物质代谢紊乱,营养不良,淀粉样变性,呼吸系统,心血管系统,神经系统,消化系统,皮肤瘙痒,不安腿,其它* */
    type: string;
    /** 骨矿物质代谢紊乱 *多选* *高转运骨病(需骨活检支持),低转运骨病(需骨活检支持),混合型骨病(需骨活检支持),转移性钙化,骨质疏松,继发性甲旁亢,其它* */
    boneMineralMetabolismDisturbance?: string | undefined;
    /** 其它骨矿物质代谢紊乱 */
    bmmdOther?: string | undefined;
    /** 淀粉样变性 *多选* *腕管综合征,心脏损害,骨损害,其它* */
    amyloidosis?: string | undefined;
    /** 其它淀粉样变性 */
    amyloidosisOther?: string | undefined;
    /** 呼吸系统并发症 *多选* *肺部感染,结核,胸膜炎,胸腔积液,尿毒症肺炎,其它* */
    respiratoryComplications?: string | undefined;
    /** 其它呼吸系统并发症 */
    rcOther?: string | undefined;
    /** 心血管系统并发症 *多选* *高血压,低血压,心律失常,心功能不全,急性左心衰竭,缺血性心脏病,心包炎,心肌病变,其它* */
    cardiovascularComplications?: string | undefined;
    /** 其它心血管系统并发症 */
    ccOther?: string | undefined;
    /** 神经系统并发症 *多选* *脑梗塞,脑出血,神经病变,尿毒性脑病,其它* */
    neurologicalComplications?: string | undefined;
    /** 其它神经系统并发症 */
    ncOther?: string | undefined;
    /** 消化系统并发症 *多选* *肝硬化,消化道出血,其它* */
    digestiveSystemComplications?: string | undefined;
    /** 其它消化系统并发症 */
    dscOther?: string | undefined;
    /** 其它并发症 */
    complicationOther?: string | undefined;
    /** 具体情况描述 */
    specificDescription?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

export class PatientDiagnosisComplicationItemView implements IPatientDiagnosisComplicationItemView {
    /** [患者标识](患者信息Id) */
    patientId!: string;
    /** 检查日期 */
    date!: dayjs.Dayjs;
    /** 并发症分类 *多选* *肾性贫血,骨矿物质代谢紊乱,营养不良,淀粉样变性,呼吸系统,心血管系统,神经系统,消化系统,皮肤瘙痒,不安腿,其它* */
    type!: string;
    /** 骨矿物质代谢紊乱 *多选* *高转运骨病(需骨活检支持Id),低转运骨病(需骨活检支持Id),混合型骨病(需骨活检支持Id),转移性钙化,骨质疏松,继发性甲旁亢,其它* */
    boneMineralMetabolismDisturbance?: string | undefined;
    /** 其它骨矿物质代谢紊乱 */
    bmmdOther?: string | undefined;
    /** 淀粉样变性 *多选* *腕管综合征,心脏损害,骨损害,其它* */
    amyloidosis?: string | undefined;
    /** 其它淀粉样变性 */
    amyloidosisOther?: string | undefined;
    /** 呼吸系统并发症 *多选* *肺部感染,结核,胸膜炎,胸腔积液,尿毒症肺炎,其它* */
    respiratoryComplications?: string | undefined;
    /** 其它呼吸系统并发症 */
    rcOther?: string | undefined;
    /** 心血管系统并发症 *多选* *高血压,低血压,心律失常,心功能不全,急性左心衰竭,缺血性心脏病,心包炎,心肌病变,其它* */
    cardiovascularComplications?: string | undefined;
    /** 其它心血管系统并发症 */
    ccOther?: string | undefined;
    /** 神经系统并发症 *多选* *脑梗塞,脑出血,神经病变,尿毒性脑病,其它* */
    neurologicalComplications?: string | undefined;
    /** 其它神经系统并发症 */
    ncOther?: string | undefined;
    /** 消化系统并发症 *多选* *肝硬化,消化道出血,其它* */
    digestiveSystemComplications?: string | undefined;
    /** 其它消化系统并发症 */
    dscOther?: string | undefined;
    /** 其它并发症 */
    complicationOther?: string | undefined;
    /** 具体情况描述 */
    specificDescription?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;

    constructor(data?: IPatientDiagnosisComplicationItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.boneMineralMetabolismDisturbance = _data["boneMineralMetabolismDisturbance"];
            this.bmmdOther = _data["bmmdOther"];
            this.amyloidosis = _data["amyloidosis"];
            this.amyloidosisOther = _data["amyloidosisOther"];
            this.respiratoryComplications = _data["respiratoryComplications"];
            this.rcOther = _data["rcOther"];
            this.cardiovascularComplications = _data["cardiovascularComplications"];
            this.ccOther = _data["ccOther"];
            this.neurologicalComplications = _data["neurologicalComplications"];
            this.ncOther = _data["ncOther"];
            this.digestiveSystemComplications = _data["digestiveSystemComplications"];
            this.dscOther = _data["dscOther"];
            this.complicationOther = _data["complicationOther"];
            this.specificDescription = _data["specificDescription"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
        }
    }

    static fromJS(data: any): PatientDiagnosisComplicationItemView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisComplicationItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["type"] = this.type;
        data["boneMineralMetabolismDisturbance"] = this.boneMineralMetabolismDisturbance;
        data["bmmdOther"] = this.bmmdOther;
        data["amyloidosis"] = this.amyloidosis;
        data["amyloidosisOther"] = this.amyloidosisOther;
        data["respiratoryComplications"] = this.respiratoryComplications;
        data["rcOther"] = this.rcOther;
        data["cardiovascularComplications"] = this.cardiovascularComplications;
        data["ccOther"] = this.ccOther;
        data["neurologicalComplications"] = this.neurologicalComplications;
        data["ncOther"] = this.ncOther;
        data["digestiveSystemComplications"] = this.digestiveSystemComplications;
        data["dscOther"] = this.dscOther;
        data["complicationOther"] = this.complicationOther;
        data["specificDescription"] = this.specificDescription;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        return data;
    }
}

export interface IPatientDiagnosisComplicationItemView {
    /** [患者标识](患者信息Id) */
    patientId: string;
    /** 检查日期 */
    date: dayjs.Dayjs;
    /** 并发症分类 *多选* *肾性贫血,骨矿物质代谢紊乱,营养不良,淀粉样变性,呼吸系统,心血管系统,神经系统,消化系统,皮肤瘙痒,不安腿,其它* */
    type: string;
    /** 骨矿物质代谢紊乱 *多选* *高转运骨病(需骨活检支持Id),低转运骨病(需骨活检支持Id),混合型骨病(需骨活检支持Id),转移性钙化,骨质疏松,继发性甲旁亢,其它* */
    boneMineralMetabolismDisturbance?: string | undefined;
    /** 其它骨矿物质代谢紊乱 */
    bmmdOther?: string | undefined;
    /** 淀粉样变性 *多选* *腕管综合征,心脏损害,骨损害,其它* */
    amyloidosis?: string | undefined;
    /** 其它淀粉样变性 */
    amyloidosisOther?: string | undefined;
    /** 呼吸系统并发症 *多选* *肺部感染,结核,胸膜炎,胸腔积液,尿毒症肺炎,其它* */
    respiratoryComplications?: string | undefined;
    /** 其它呼吸系统并发症 */
    rcOther?: string | undefined;
    /** 心血管系统并发症 *多选* *高血压,低血压,心律失常,心功能不全,急性左心衰竭,缺血性心脏病,心包炎,心肌病变,其它* */
    cardiovascularComplications?: string | undefined;
    /** 其它心血管系统并发症 */
    ccOther?: string | undefined;
    /** 神经系统并发症 *多选* *脑梗塞,脑出血,神经病变,尿毒性脑病,其它* */
    neurologicalComplications?: string | undefined;
    /** 其它神经系统并发症 */
    ncOther?: string | undefined;
    /** 消化系统并发症 *多选* *肝硬化,消化道出血,其它* */
    digestiveSystemComplications?: string | undefined;
    /** 其它消化系统并发症 */
    dscOther?: string | undefined;
    /** 其它并发症 */
    complicationOther?: string | undefined;
    /** 具体情况描述 */
    specificDescription?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
}

export class PatientDiagnosisComplicationView implements IPatientDiagnosisComplicationView {
    /** 诊断类型(*0:无,1:有*) */
    diagnosis?: number | undefined;
    /** 诊断详情 */
    items?: PatientDiagnosisComplicationItemView[] | undefined;

    constructor(data?: IPatientDiagnosisComplicationView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.diagnosis = _data["diagnosis"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PatientDiagnosisComplicationItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientDiagnosisComplicationView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisComplicationView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["diagnosis"] = this.diagnosis;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPatientDiagnosisComplicationView {
    /** 诊断类型(*0:无,1:有*) */
    diagnosis?: number | undefined;
    /** 诊断详情 */
    items?: PatientDiagnosisComplicationItemView[] | undefined;
}

/** Reponse */
export class PatientDiagnosisComplicationViewResultEntry implements IPatientDiagnosisComplicationViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDiagnosisComplicationView;

    constructor(data?: IPatientDiagnosisComplicationViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientDiagnosisComplicationView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDiagnosisComplicationViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisComplicationViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientDiagnosisComplicationViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDiagnosisComplicationView;
}

export class PatientDiagnosisEditModel implements IPatientDiagnosisEditModel {
    /** 诊断类型(*0:无,1:有*) */
    diagnosis?: number | undefined;

    constructor(data?: IPatientDiagnosisEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.diagnosis = _data["diagnosis"];
        }
    }

    static fromJS(data: any): PatientDiagnosisEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["diagnosis"] = this.diagnosis;
        return data;
    }
}

export interface IPatientDiagnosisEditModel {
    /** 诊断类型(*0:无,1:有*) */
    diagnosis?: number | undefined;
}

export class PatientDiagnosisInfectiousDiseasesEditByINModel implements IPatientDiagnosisInfectiousDiseasesEditByINModel {
    /** 诊断类型(*0:无,1:有*) */
    diagnosis?: number | undefined;
    /** 诊断详情 */
    items?: PatientDiagnosisInfectiousDiseasesItemEditByInModel[] | undefined;

    constructor(data?: IPatientDiagnosisInfectiousDiseasesEditByINModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.diagnosis = _data["diagnosis"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PatientDiagnosisInfectiousDiseasesItemEditByInModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientDiagnosisInfectiousDiseasesEditByINModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisInfectiousDiseasesEditByINModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["diagnosis"] = this.diagnosis;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPatientDiagnosisInfectiousDiseasesEditByINModel {
    /** 诊断类型(*0:无,1:有*) */
    diagnosis?: number | undefined;
    /** 诊断详情 */
    items?: PatientDiagnosisInfectiousDiseasesItemEditByInModel[] | undefined;
}

export class PatientDiagnosisInfectiousDiseasesEditModel implements IPatientDiagnosisInfectiousDiseasesEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 检查日期 */
    date!: dayjs.Dayjs;
    /** 疾病种类 `DIC.DIAGNOSIS.ID.TYPE` *多选，用逗号隔开* *丙肝,乙肝,艾滋病,梅毒,结核,其它* */
    type!: string;
    /** 丙肝 *活动期,恢复期,携带者* */
    hcv?: string | undefined;
    /** 乙肝 *活动期,恢复期* */
    hepatitisb?: string | undefined;
    /** 艾滋病 *活动期,既往感染* */
    hiv?: string | undefined;
    /** 梅毒 *活动期,既往感染,携带者* */
    syphilis?: string | undefined;
    /** 结核 *活动期,恢复期,携带者* */
    tuberculosis?: string | undefined;
    /** 其它说明 */
    otherInstructions?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;

    constructor(data?: IPatientDiagnosisInfectiousDiseasesEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.hcv = _data["hcv"];
            this.hepatitisb = _data["hepatitisb"];
            this.hiv = _data["hiv"];
            this.syphilis = _data["syphilis"];
            this.tuberculosis = _data["tuberculosis"];
            this.otherInstructions = _data["otherInstructions"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): PatientDiagnosisInfectiousDiseasesEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisInfectiousDiseasesEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["type"] = this.type;
        data["hcv"] = this.hcv;
        data["hepatitisb"] = this.hepatitisb;
        data["hiv"] = this.hiv;
        data["syphilis"] = this.syphilis;
        data["tuberculosis"] = this.tuberculosis;
        data["otherInstructions"] = this.otherInstructions;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        return data;
    }
}

export interface IPatientDiagnosisInfectiousDiseasesEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 检查日期 */
    date: dayjs.Dayjs;
    /** 疾病种类 `DIC.DIAGNOSIS.ID.TYPE` *多选，用逗号隔开* *丙肝,乙肝,艾滋病,梅毒,结核,其它* */
    type: string;
    /** 丙肝 *活动期,恢复期,携带者* */
    hcv?: string | undefined;
    /** 乙肝 *活动期,恢复期* */
    hepatitisb?: string | undefined;
    /** 艾滋病 *活动期,既往感染* */
    hiv?: string | undefined;
    /** 梅毒 *活动期,既往感染,携带者* */
    syphilis?: string | undefined;
    /** 结核 *活动期,恢复期,携带者* */
    tuberculosis?: string | undefined;
    /** 其它说明 */
    otherInstructions?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
}

export class PatientDiagnosisInfectiousDiseasesItemEditByInModel implements IPatientDiagnosisInfectiousDiseasesItemEditByInModel {
    /** 诊断标识 */
    id?: string | undefined;
    /** 检查日期 */
    date!: dayjs.Dayjs;
    /** 疾病种类 `DIC.DIAGNOSIS.ID.TYPE` *多选，用逗号隔开* *丙肝,乙肝,艾滋病,梅毒,结核,其它* */
    type!: string;
    /** 丙肝 *活动期,恢复期,携带者* */
    hcv?: string | undefined;
    /** 乙肝 *活动期,恢复期* */
    hepatitisb?: string | undefined;
    /** 艾滋病 *活动期,既往感染* */
    hiv?: string | undefined;
    /** 梅毒 *活动期,既往感染,携带者* */
    syphilis?: string | undefined;
    /** 结核 *活动期,恢复期,携带者* */
    tuberculosis?: string | undefined;
    /** 其它说明 */
    otherInstructions?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IPatientDiagnosisInfectiousDiseasesItemEditByInModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.hcv = _data["hcv"];
            this.hepatitisb = _data["hepatitisb"];
            this.hiv = _data["hiv"];
            this.syphilis = _data["syphilis"];
            this.tuberculosis = _data["tuberculosis"];
            this.otherInstructions = _data["otherInstructions"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): PatientDiagnosisInfectiousDiseasesItemEditByInModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisInfectiousDiseasesItemEditByInModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["type"] = this.type;
        data["hcv"] = this.hcv;
        data["hepatitisb"] = this.hepatitisb;
        data["hiv"] = this.hiv;
        data["syphilis"] = this.syphilis;
        data["tuberculosis"] = this.tuberculosis;
        data["otherInstructions"] = this.otherInstructions;
        data["remark"] = this.remark;
        return data;
    }
}

export interface IPatientDiagnosisInfectiousDiseasesItemEditByInModel {
    /** 诊断标识 */
    id?: string | undefined;
    /** 检查日期 */
    date: dayjs.Dayjs;
    /** 疾病种类 `DIC.DIAGNOSIS.ID.TYPE` *多选，用逗号隔开* *丙肝,乙肝,艾滋病,梅毒,结核,其它* */
    type: string;
    /** 丙肝 *活动期,恢复期,携带者* */
    hcv?: string | undefined;
    /** 乙肝 *活动期,恢复期* */
    hepatitisb?: string | undefined;
    /** 艾滋病 *活动期,既往感染* */
    hiv?: string | undefined;
    /** 梅毒 *活动期,既往感染,携带者* */
    syphilis?: string | undefined;
    /** 结核 *活动期,恢复期,携带者* */
    tuberculosis?: string | undefined;
    /** 其它说明 */
    otherInstructions?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

export class PatientDiagnosisInfectiousDiseasesItemView implements IPatientDiagnosisInfectiousDiseasesItemView {
    /** [患者标识](患者信息Id) */
    patientId!: string;
    /** 检查日期 */
    date!: dayjs.Dayjs;
    /** 疾病种类 `DIC.DIAGNOSIS.ID.TYPE` *多选，用逗号隔开* *丙肝,乙肝,艾滋病,梅毒,结核,其它* */
    type!: string;
    /** 丙肝 *活动期,恢复期,携带者* */
    hcv?: string | undefined;
    /** 乙肝 *活动期,恢复期* */
    hepatitisb?: string | undefined;
    /** 艾滋病 *活动期,既往感染* */
    hiv?: string | undefined;
    /** 梅毒 *活动期,既往感染,携带者* */
    syphilis?: string | undefined;
    /** 结核 *活动期,恢复期,携带者* */
    tuberculosis?: string | undefined;
    /** 其它说明 */
    otherInstructions?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 疾病种类显示值 */
    typeLabel?: string | undefined;
    /** 是否启用 */
    enable?: number | undefined;

    constructor(data?: IPatientDiagnosisInfectiousDiseasesItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.hcv = _data["hcv"];
            this.hepatitisb = _data["hepatitisb"];
            this.hiv = _data["hiv"];
            this.syphilis = _data["syphilis"];
            this.tuberculosis = _data["tuberculosis"];
            this.otherInstructions = _data["otherInstructions"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.typeLabel = _data["typeLabel"];
            this.enable = _data["enable"];
        }
    }

    static fromJS(data: any): PatientDiagnosisInfectiousDiseasesItemView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisInfectiousDiseasesItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["type"] = this.type;
        data["hcv"] = this.hcv;
        data["hepatitisb"] = this.hepatitisb;
        data["hiv"] = this.hiv;
        data["syphilis"] = this.syphilis;
        data["tuberculosis"] = this.tuberculosis;
        data["otherInstructions"] = this.otherInstructions;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["typeLabel"] = this.typeLabel;
        data["enable"] = this.enable;
        return data;
    }
}

export interface IPatientDiagnosisInfectiousDiseasesItemView {
    /** [患者标识](患者信息Id) */
    patientId: string;
    /** 检查日期 */
    date: dayjs.Dayjs;
    /** 疾病种类 `DIC.DIAGNOSIS.ID.TYPE` *多选，用逗号隔开* *丙肝,乙肝,艾滋病,梅毒,结核,其它* */
    type: string;
    /** 丙肝 *活动期,恢复期,携带者* */
    hcv?: string | undefined;
    /** 乙肝 *活动期,恢复期* */
    hepatitisb?: string | undefined;
    /** 艾滋病 *活动期,既往感染* */
    hiv?: string | undefined;
    /** 梅毒 *活动期,既往感染,携带者* */
    syphilis?: string | undefined;
    /** 结核 *活动期,恢复期,携带者* */
    tuberculosis?: string | undefined;
    /** 其它说明 */
    otherInstructions?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 疾病种类显示值 */
    typeLabel?: string | undefined;
    /** 是否启用 */
    enable?: number | undefined;
}

export class PatientDiagnosisInfectiousDiseasesView implements IPatientDiagnosisInfectiousDiseasesView {
    /** 诊断类型(*0:无,1:有*) */
    diagnosis?: number | undefined;
    /** 诊断详情 */
    items?: PatientDiagnosisInfectiousDiseasesItemView[] | undefined;

    constructor(data?: IPatientDiagnosisInfectiousDiseasesView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.diagnosis = _data["diagnosis"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PatientDiagnosisInfectiousDiseasesItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientDiagnosisInfectiousDiseasesView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisInfectiousDiseasesView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["diagnosis"] = this.diagnosis;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPatientDiagnosisInfectiousDiseasesView {
    /** 诊断类型(*0:无,1:有*) */
    diagnosis?: number | undefined;
    /** 诊断详情 */
    items?: PatientDiagnosisInfectiousDiseasesItemView[] | undefined;
}

/** Reponse */
export class PatientDiagnosisInfectiousDiseasesViewResultEntry implements IPatientDiagnosisInfectiousDiseasesViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDiagnosisInfectiousDiseasesView;

    constructor(data?: IPatientDiagnosisInfectiousDiseasesViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientDiagnosisInfectiousDiseasesView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDiagnosisInfectiousDiseasesViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisInfectiousDiseasesViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientDiagnosisInfectiousDiseasesViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDiagnosisInfectiousDiseasesView;
}

export class PatientDiagnosisPathologicalEditModel implements IPatientDiagnosisPathologicalEditModel {
    /** 诊断类型(*0:无,1:有*) */
    diagnosis?: number | undefined;
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 诊断日期 */
    date?: dayjs.Dayjs | undefined;
    /** 病理诊断分类 *多选* *原发性肾小球疾病,继发性肾小球疾病,遗传性及先天性肾病,肾小管间质疾病* */
    type?: string | undefined;
    /** 原发性肾小球疾病 *多选* *肾小球轻微病变,微小病变性肾病,局灶节段性肾小球损害,膜性肾病,系膜增殖性肾炎,IgA肾病,毛细血管内增值性肾炎,膜增值性肾炎,新月体肾炎,硬化性肾炎,其它* */
    primaryGlomerularDisease?: string | undefined;
    /** 其它原发性肾小球疾病 */
    pgdOther?: string | undefined;
    /** 继发性肾小球疾病 *多选* *高血压肾硬化,糖尿病肾病,肥胖相关性肾病,淀粉样变性,多发骨髓瘤肾病,冷球蛋白血症性肾炎,轻链型肾病,狼疮性肾炎,过敏紫癜性肾炎,抗基底膜肾炎(Goodpasture综合征),系统性血管炎,血栓性微血管病,干燥综合征肾损害,硬皮病肾损害,乙型肝炎病毒相关性肾炎,丙型肝炎病毒相关性肾炎,HIV相关性肾损害,流行性出血热肾损害,其它* */
    secondaryGlomerularDisease?: string | undefined;
    /** 其它继发性肾小球疾病 */
    sgdOther?: string | undefined;
    /** 遗传性及先天性肾病 *多选* *Alport综合征,薄基底膜肾病,近端肾小管损伤及Fanconi综合征,Bartter综合征,Fabry病,脂蛋白肾病,肾发育不良,其它* */
    hereditaryCongenitalDisease?: string | undefined;
    /** 其它遗传性及先天性肾病 */
    hcdOther?: string | undefined;
    /** 肾小管间质疾病 *多选* *急性肾小管间质性肾炎,慢性肾小管间质性肾炎,急性肾小管坏死,马兜铃酸肾病,其它* */
    tubulointerstitialDisease?: string | undefined;
    /** 其它肾小管间质疾病 */
    tdOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IPatientDiagnosisPathologicalEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.diagnosis = _data["diagnosis"];
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.primaryGlomerularDisease = _data["primaryGlomerularDisease"];
            this.pgdOther = _data["pgdOther"];
            this.secondaryGlomerularDisease = _data["secondaryGlomerularDisease"];
            this.sgdOther = _data["sgdOther"];
            this.hereditaryCongenitalDisease = _data["hereditaryCongenitalDisease"];
            this.hcdOther = _data["hcdOther"];
            this.tubulointerstitialDisease = _data["tubulointerstitialDisease"];
            this.tdOther = _data["tdOther"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): PatientDiagnosisPathologicalEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisPathologicalEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["diagnosis"] = this.diagnosis;
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["type"] = this.type;
        data["primaryGlomerularDisease"] = this.primaryGlomerularDisease;
        data["pgdOther"] = this.pgdOther;
        data["secondaryGlomerularDisease"] = this.secondaryGlomerularDisease;
        data["sgdOther"] = this.sgdOther;
        data["hereditaryCongenitalDisease"] = this.hereditaryCongenitalDisease;
        data["hcdOther"] = this.hcdOther;
        data["tubulointerstitialDisease"] = this.tubulointerstitialDisease;
        data["tdOther"] = this.tdOther;
        data["remark"] = this.remark;
        return data;
    }
}

export interface IPatientDiagnosisPathologicalEditModel {
    /** 诊断类型(*0:无,1:有*) */
    diagnosis?: number | undefined;
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 诊断日期 */
    date?: dayjs.Dayjs | undefined;
    /** 病理诊断分类 *多选* *原发性肾小球疾病,继发性肾小球疾病,遗传性及先天性肾病,肾小管间质疾病* */
    type?: string | undefined;
    /** 原发性肾小球疾病 *多选* *肾小球轻微病变,微小病变性肾病,局灶节段性肾小球损害,膜性肾病,系膜增殖性肾炎,IgA肾病,毛细血管内增值性肾炎,膜增值性肾炎,新月体肾炎,硬化性肾炎,其它* */
    primaryGlomerularDisease?: string | undefined;
    /** 其它原发性肾小球疾病 */
    pgdOther?: string | undefined;
    /** 继发性肾小球疾病 *多选* *高血压肾硬化,糖尿病肾病,肥胖相关性肾病,淀粉样变性,多发骨髓瘤肾病,冷球蛋白血症性肾炎,轻链型肾病,狼疮性肾炎,过敏紫癜性肾炎,抗基底膜肾炎(Goodpasture综合征),系统性血管炎,血栓性微血管病,干燥综合征肾损害,硬皮病肾损害,乙型肝炎病毒相关性肾炎,丙型肝炎病毒相关性肾炎,HIV相关性肾损害,流行性出血热肾损害,其它* */
    secondaryGlomerularDisease?: string | undefined;
    /** 其它继发性肾小球疾病 */
    sgdOther?: string | undefined;
    /** 遗传性及先天性肾病 *多选* *Alport综合征,薄基底膜肾病,近端肾小管损伤及Fanconi综合征,Bartter综合征,Fabry病,脂蛋白肾病,肾发育不良,其它* */
    hereditaryCongenitalDisease?: string | undefined;
    /** 其它遗传性及先天性肾病 */
    hcdOther?: string | undefined;
    /** 肾小管间质疾病 *多选* *急性肾小管间质性肾炎,慢性肾小管间质性肾炎,急性肾小管坏死,马兜铃酸肾病,其它* */
    tubulointerstitialDisease?: string | undefined;
    /** 其它肾小管间质疾病 */
    tdOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

export class PatientDiagnosisPathologicalView implements IPatientDiagnosisPathologicalView {
    /** 诊断类型(*0:无,1:有*) */
    diagnosis?: number | undefined;
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 诊断日期 */
    date?: dayjs.Dayjs | undefined;
    /** 病理诊断分类 *多选* *原发性肾小球疾病,继发性肾小球疾病,遗传性及先天性肾病,肾小管间质疾病* */
    type?: string | undefined;
    /** 原发性肾小球疾病 *多选* *肾小球轻微病变,微小病变性肾病,局灶节段性肾小球损害,膜性肾病,系膜增殖性肾炎,IgA肾病,毛细血管内增值性肾炎,膜增值性肾炎,新月体肾炎,硬化性肾炎,其它* */
    primaryGlomerularDisease?: string | undefined;
    /** 其它原发性肾小球疾病 */
    pgdOther?: string | undefined;
    /** 继发性肾小球疾病 *多选* *高血压肾硬化,糖尿病肾病,肥胖相关性肾病,淀粉样变性,多发骨髓瘤肾病,冷球蛋白血症性肾炎,轻链型肾病,狼疮性肾炎,过敏紫癜性肾炎,抗基底膜肾炎(Goodpasture综合征),系统性血管炎,血栓性微血管病,干燥综合征肾损害,硬皮病肾损害,乙型肝炎病毒相关性肾炎,丙型肝炎病毒相关性肾炎,HIV相关性肾损害,流行性出血热肾损害,其它* */
    secondaryGlomerularDisease?: string | undefined;
    /** 其它继发性肾小球疾病 */
    sgdOther?: string | undefined;
    /** 遗传性及先天性肾病 *多选* *Alport综合征,薄基底膜肾病,近端肾小管损伤及Fanconi综合征,Bartter综合征,Fabry病,脂蛋白肾病,肾发育不良,其它* */
    hereditaryCongenitalDisease?: string | undefined;
    /** 其它遗传性及先天性肾病 */
    hcdOther?: string | undefined;
    /** 肾小管间质疾病 *多选* *急性肾小管间质性肾炎,慢性肾小管间质性肾炎,急性肾小管坏死,马兜铃酸肾病,其它* */
    tubulointerstitialDisease?: string | undefined;
    /** 其它肾小管间质疾病 */
    tdOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientDiagnosisPathologicalView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.diagnosis = _data["diagnosis"];
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.primaryGlomerularDisease = _data["primaryGlomerularDisease"];
            this.pgdOther = _data["pgdOther"];
            this.secondaryGlomerularDisease = _data["secondaryGlomerularDisease"];
            this.sgdOther = _data["sgdOther"];
            this.hereditaryCongenitalDisease = _data["hereditaryCongenitalDisease"];
            this.hcdOther = _data["hcdOther"];
            this.tubulointerstitialDisease = _data["tubulointerstitialDisease"];
            this.tdOther = _data["tdOther"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDiagnosisPathologicalView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisPathologicalView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["diagnosis"] = this.diagnosis;
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["type"] = this.type;
        data["primaryGlomerularDisease"] = this.primaryGlomerularDisease;
        data["pgdOther"] = this.pgdOther;
        data["secondaryGlomerularDisease"] = this.secondaryGlomerularDisease;
        data["sgdOther"] = this.sgdOther;
        data["hereditaryCongenitalDisease"] = this.hereditaryCongenitalDisease;
        data["hcdOther"] = this.hcdOther;
        data["tubulointerstitialDisease"] = this.tubulointerstitialDisease;
        data["tdOther"] = this.tdOther;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface IPatientDiagnosisPathologicalView {
    /** 诊断类型(*0:无,1:有*) */
    diagnosis?: number | undefined;
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 诊断日期 */
    date?: dayjs.Dayjs | undefined;
    /** 病理诊断分类 *多选* *原发性肾小球疾病,继发性肾小球疾病,遗传性及先天性肾病,肾小管间质疾病* */
    type?: string | undefined;
    /** 原发性肾小球疾病 *多选* *肾小球轻微病变,微小病变性肾病,局灶节段性肾小球损害,膜性肾病,系膜增殖性肾炎,IgA肾病,毛细血管内增值性肾炎,膜增值性肾炎,新月体肾炎,硬化性肾炎,其它* */
    primaryGlomerularDisease?: string | undefined;
    /** 其它原发性肾小球疾病 */
    pgdOther?: string | undefined;
    /** 继发性肾小球疾病 *多选* *高血压肾硬化,糖尿病肾病,肥胖相关性肾病,淀粉样变性,多发骨髓瘤肾病,冷球蛋白血症性肾炎,轻链型肾病,狼疮性肾炎,过敏紫癜性肾炎,抗基底膜肾炎(Goodpasture综合征),系统性血管炎,血栓性微血管病,干燥综合征肾损害,硬皮病肾损害,乙型肝炎病毒相关性肾炎,丙型肝炎病毒相关性肾炎,HIV相关性肾损害,流行性出血热肾损害,其它* */
    secondaryGlomerularDisease?: string | undefined;
    /** 其它继发性肾小球疾病 */
    sgdOther?: string | undefined;
    /** 遗传性及先天性肾病 *多选* *Alport综合征,薄基底膜肾病,近端肾小管损伤及Fanconi综合征,Bartter综合征,Fabry病,脂蛋白肾病,肾发育不良,其它* */
    hereditaryCongenitalDisease?: string | undefined;
    /** 其它遗传性及先天性肾病 */
    hcdOther?: string | undefined;
    /** 肾小管间质疾病 *多选* *急性肾小管间质性肾炎,慢性肾小管间质性肾炎,急性肾小管坏死,马兜铃酸肾病,其它* */
    tubulointerstitialDisease?: string | undefined;
    /** 其它肾小管间质疾病 */
    tdOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientDiagnosisPathologicalViewResultEntry implements IPatientDiagnosisPathologicalViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDiagnosisPathologicalView;

    constructor(data?: IPatientDiagnosisPathologicalViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientDiagnosisPathologicalView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDiagnosisPathologicalViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisPathologicalViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientDiagnosisPathologicalViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDiagnosisPathologicalView;
}

/** 原发病诊断 */
export class PatientDiagnosisPrimaryDiseaseEditModel implements IPatientDiagnosisPrimaryDiseaseEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 诊断日期 */
    date!: dayjs.Dayjs;
    /** 原发病诊断分类 *多选* *原发性肾小球疾病,继发性肾小球疾病,遗传性及先天性疾病,肾小管间质疾病,药物性肾损害,泌尿系肿瘤,泌尿系感染和结石,肾脏切除术后,原发病不明确* */
    type!: string;
    /** 原发性肾小球疾病 *多选* *急性肾炎综合征,急进性肾炎综合征,慢性肾炎综合征,肾病综合征,血尿,孤立性蛋白尿,其它* */
    primaryGlomerularDisease?: string | undefined;
    /** 其它原发性肾小球肾病 */
    pgdOther?: string | undefined;
    /** 继发性肾小球疾病 *多选* *高血压肾损害,糖尿病肾病,肥胖相关性肾病,淀粉样变肾损害,多发骨髓瘤肾病,狼疮性肾炎,系统性血管炎肾损害,过敏紫癜性肾炎,血栓性微血管病肾损害,干燥综合征肾损害,硬皮病肾损害,类风湿性关节炎和强制性脊柱炎肾损害,银屑病肾损害,乙型肝炎病毒相关性肾炎,丙型肝炎病毒相关性肾炎,hiv相关性肾损害,流行性出血热肾损害,其它* */
    secondaryGlomerularDisease?: string | undefined;
    /** 其它继发性肾小球肾病 */
    sgdOther?: string | undefined;
    /** 遗传性及先天性疾病 *多选* *多囊肾病,alport综合征,薄基底膜肾病,近端肾小管损伤及fanconi综合征,bartter综合征,fabry病,脂蛋白肾病,肾发育不良,其它* */
    hereditaryCongenitalDisease?: string | undefined;
    /** 其它遗传性及先天性肾病 */
    hcdOther?: string | undefined;
    /** 肾小管间质疾病 *多选* *急性肾小管间质性肾炎,慢性肾小管间质性肾炎,急性肾小管坏死,肾小管性酸中毒,慢性肾孟肾炎,反流性肾病,梗阻性肾病,其它* */
    tubulointerstitialDisease?: string | undefined;
    /** 其它肾小管间质疾病 */
    tdOther?: string | undefined;
    /** 药物性肾损害 *多选* *马兜铃酸肾病,造影剂肾病,重金属中毒性肾脏损害,放射性肾病及抗肿瘤药物所致的肾损害,氨基苷类抗生素肾损害,其它* */
    drugInducedRenalDamage?: string | undefined;
    /** 其它药物性肾损害 */
    dindOther?: string | undefined;
    /** 泌尿系感染和结石 *多选* *泌尿系结核,肾结石,其它* */
    urinaryInfectionStones?: string | undefined;
    /** 其它泌尿系感染和结石 */
    uisOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IPatientDiagnosisPrimaryDiseaseEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.primaryGlomerularDisease = _data["primaryGlomerularDisease"];
            this.pgdOther = _data["pgdOther"];
            this.secondaryGlomerularDisease = _data["secondaryGlomerularDisease"];
            this.sgdOther = _data["sgdOther"];
            this.hereditaryCongenitalDisease = _data["hereditaryCongenitalDisease"];
            this.hcdOther = _data["hcdOther"];
            this.tubulointerstitialDisease = _data["tubulointerstitialDisease"];
            this.tdOther = _data["tdOther"];
            this.drugInducedRenalDamage = _data["drugInducedRenalDamage"];
            this.dindOther = _data["dindOther"];
            this.urinaryInfectionStones = _data["urinaryInfectionStones"];
            this.uisOther = _data["uisOther"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): PatientDiagnosisPrimaryDiseaseEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisPrimaryDiseaseEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["type"] = this.type;
        data["primaryGlomerularDisease"] = this.primaryGlomerularDisease;
        data["pgdOther"] = this.pgdOther;
        data["secondaryGlomerularDisease"] = this.secondaryGlomerularDisease;
        data["sgdOther"] = this.sgdOther;
        data["hereditaryCongenitalDisease"] = this.hereditaryCongenitalDisease;
        data["hcdOther"] = this.hcdOther;
        data["tubulointerstitialDisease"] = this.tubulointerstitialDisease;
        data["tdOther"] = this.tdOther;
        data["drugInducedRenalDamage"] = this.drugInducedRenalDamage;
        data["dindOther"] = this.dindOther;
        data["urinaryInfectionStones"] = this.urinaryInfectionStones;
        data["uisOther"] = this.uisOther;
        data["remark"] = this.remark;
        return data;
    }
}

/** 原发病诊断 */
export interface IPatientDiagnosisPrimaryDiseaseEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 诊断日期 */
    date: dayjs.Dayjs;
    /** 原发病诊断分类 *多选* *原发性肾小球疾病,继发性肾小球疾病,遗传性及先天性疾病,肾小管间质疾病,药物性肾损害,泌尿系肿瘤,泌尿系感染和结石,肾脏切除术后,原发病不明确* */
    type: string;
    /** 原发性肾小球疾病 *多选* *急性肾炎综合征,急进性肾炎综合征,慢性肾炎综合征,肾病综合征,血尿,孤立性蛋白尿,其它* */
    primaryGlomerularDisease?: string | undefined;
    /** 其它原发性肾小球肾病 */
    pgdOther?: string | undefined;
    /** 继发性肾小球疾病 *多选* *高血压肾损害,糖尿病肾病,肥胖相关性肾病,淀粉样变肾损害,多发骨髓瘤肾病,狼疮性肾炎,系统性血管炎肾损害,过敏紫癜性肾炎,血栓性微血管病肾损害,干燥综合征肾损害,硬皮病肾损害,类风湿性关节炎和强制性脊柱炎肾损害,银屑病肾损害,乙型肝炎病毒相关性肾炎,丙型肝炎病毒相关性肾炎,hiv相关性肾损害,流行性出血热肾损害,其它* */
    secondaryGlomerularDisease?: string | undefined;
    /** 其它继发性肾小球肾病 */
    sgdOther?: string | undefined;
    /** 遗传性及先天性疾病 *多选* *多囊肾病,alport综合征,薄基底膜肾病,近端肾小管损伤及fanconi综合征,bartter综合征,fabry病,脂蛋白肾病,肾发育不良,其它* */
    hereditaryCongenitalDisease?: string | undefined;
    /** 其它遗传性及先天性肾病 */
    hcdOther?: string | undefined;
    /** 肾小管间质疾病 *多选* *急性肾小管间质性肾炎,慢性肾小管间质性肾炎,急性肾小管坏死,肾小管性酸中毒,慢性肾孟肾炎,反流性肾病,梗阻性肾病,其它* */
    tubulointerstitialDisease?: string | undefined;
    /** 其它肾小管间质疾病 */
    tdOther?: string | undefined;
    /** 药物性肾损害 *多选* *马兜铃酸肾病,造影剂肾病,重金属中毒性肾脏损害,放射性肾病及抗肿瘤药物所致的肾损害,氨基苷类抗生素肾损害,其它* */
    drugInducedRenalDamage?: string | undefined;
    /** 其它药物性肾损害 */
    dindOther?: string | undefined;
    /** 泌尿系感染和结石 *多选* *泌尿系结核,肾结石,其它* */
    urinaryInfectionStones?: string | undefined;
    /** 其它泌尿系感染和结石 */
    uisOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 原发病诊断 */
export class PatientDiagnosisPrimaryDiseaseView implements IPatientDiagnosisPrimaryDiseaseView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 诊断日期 */
    date!: dayjs.Dayjs;
    /** 原发病诊断分类 *多选* *原发性肾小球疾病,继发性肾小球疾病,遗传性及先天性疾病,肾小管间质疾病,药物性肾损害,泌尿系肿瘤,泌尿系感染和结石,肾脏切除术后,原发病不明确* */
    type!: string;
    /** 原发性肾小球疾病 *多选* *急性肾炎综合征,急进性肾炎综合征,慢性肾炎综合征,肾病综合征,血尿,孤立性蛋白尿,其它* */
    primaryGlomerularDisease?: string | undefined;
    /** 其它原发性肾小球肾病 */
    pgdOther?: string | undefined;
    /** 继发性肾小球疾病 *多选* *高血压肾损害,糖尿病肾病,肥胖相关性肾病,淀粉样变肾损害,多发骨髓瘤肾病,狼疮性肾炎,系统性血管炎肾损害,过敏紫癜性肾炎,血栓性微血管病肾损害,干燥综合征肾损害,硬皮病肾损害,类风湿性关节炎和强制性脊柱炎肾损害,银屑病肾损害,乙型肝炎病毒相关性肾炎,丙型肝炎病毒相关性肾炎,hiv相关性肾损害,流行性出血热肾损害,其它* */
    secondaryGlomerularDisease?: string | undefined;
    /** 其它继发性肾小球肾病 */
    sgdOther?: string | undefined;
    /** 遗传性及先天性疾病 *多选* *多囊肾病,alport综合征,薄基底膜肾病,近端肾小管损伤及fanconi综合征,bartter综合征,fabry病,脂蛋白肾病,肾发育不良,其它* */
    hereditaryCongenitalDisease?: string | undefined;
    /** 其它遗传性及先天性肾病 */
    hcdOther?: string | undefined;
    /** 肾小管间质疾病 *多选* *急性肾小管间质性肾炎,慢性肾小管间质性肾炎,急性肾小管坏死,肾小管性酸中毒,慢性肾孟肾炎,反流性肾病,梗阻性肾病,其它* */
    tubulointerstitialDisease?: string | undefined;
    /** 其它肾小管间质疾病 */
    tdOther?: string | undefined;
    /** 药物性肾损害 *多选* *马兜铃酸肾病,造影剂肾病,重金属中毒性肾脏损害,放射性肾病及抗肿瘤药物所致的肾损害,氨基苷类抗生素肾损害,其它* */
    drugInducedRenalDamage?: string | undefined;
    /** 其它药物性肾损害 */
    dindOther?: string | undefined;
    /** 泌尿系感染和结石 *多选* *泌尿系结核,肾结石,其它* */
    urinaryInfectionStones?: string | undefined;
    /** 其它泌尿系感染和结石 */
    uisOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientDiagnosisPrimaryDiseaseView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.primaryGlomerularDisease = _data["primaryGlomerularDisease"];
            this.pgdOther = _data["pgdOther"];
            this.secondaryGlomerularDisease = _data["secondaryGlomerularDisease"];
            this.sgdOther = _data["sgdOther"];
            this.hereditaryCongenitalDisease = _data["hereditaryCongenitalDisease"];
            this.hcdOther = _data["hcdOther"];
            this.tubulointerstitialDisease = _data["tubulointerstitialDisease"];
            this.tdOther = _data["tdOther"];
            this.drugInducedRenalDamage = _data["drugInducedRenalDamage"];
            this.dindOther = _data["dindOther"];
            this.urinaryInfectionStones = _data["urinaryInfectionStones"];
            this.uisOther = _data["uisOther"];
            this.remark = _data["remark"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDiagnosisPrimaryDiseaseView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisPrimaryDiseaseView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["type"] = this.type;
        data["primaryGlomerularDisease"] = this.primaryGlomerularDisease;
        data["pgdOther"] = this.pgdOther;
        data["secondaryGlomerularDisease"] = this.secondaryGlomerularDisease;
        data["sgdOther"] = this.sgdOther;
        data["hereditaryCongenitalDisease"] = this.hereditaryCongenitalDisease;
        data["hcdOther"] = this.hcdOther;
        data["tubulointerstitialDisease"] = this.tubulointerstitialDisease;
        data["tdOther"] = this.tdOther;
        data["drugInducedRenalDamage"] = this.drugInducedRenalDamage;
        data["dindOther"] = this.dindOther;
        data["urinaryInfectionStones"] = this.urinaryInfectionStones;
        data["uisOther"] = this.uisOther;
        data["remark"] = this.remark;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 原发病诊断 */
export interface IPatientDiagnosisPrimaryDiseaseView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 诊断日期 */
    date: dayjs.Dayjs;
    /** 原发病诊断分类 *多选* *原发性肾小球疾病,继发性肾小球疾病,遗传性及先天性疾病,肾小管间质疾病,药物性肾损害,泌尿系肿瘤,泌尿系感染和结石,肾脏切除术后,原发病不明确* */
    type: string;
    /** 原发性肾小球疾病 *多选* *急性肾炎综合征,急进性肾炎综合征,慢性肾炎综合征,肾病综合征,血尿,孤立性蛋白尿,其它* */
    primaryGlomerularDisease?: string | undefined;
    /** 其它原发性肾小球肾病 */
    pgdOther?: string | undefined;
    /** 继发性肾小球疾病 *多选* *高血压肾损害,糖尿病肾病,肥胖相关性肾病,淀粉样变肾损害,多发骨髓瘤肾病,狼疮性肾炎,系统性血管炎肾损害,过敏紫癜性肾炎,血栓性微血管病肾损害,干燥综合征肾损害,硬皮病肾损害,类风湿性关节炎和强制性脊柱炎肾损害,银屑病肾损害,乙型肝炎病毒相关性肾炎,丙型肝炎病毒相关性肾炎,hiv相关性肾损害,流行性出血热肾损害,其它* */
    secondaryGlomerularDisease?: string | undefined;
    /** 其它继发性肾小球肾病 */
    sgdOther?: string | undefined;
    /** 遗传性及先天性疾病 *多选* *多囊肾病,alport综合征,薄基底膜肾病,近端肾小管损伤及fanconi综合征,bartter综合征,fabry病,脂蛋白肾病,肾发育不良,其它* */
    hereditaryCongenitalDisease?: string | undefined;
    /** 其它遗传性及先天性肾病 */
    hcdOther?: string | undefined;
    /** 肾小管间质疾病 *多选* *急性肾小管间质性肾炎,慢性肾小管间质性肾炎,急性肾小管坏死,肾小管性酸中毒,慢性肾孟肾炎,反流性肾病,梗阻性肾病,其它* */
    tubulointerstitialDisease?: string | undefined;
    /** 其它肾小管间质疾病 */
    tdOther?: string | undefined;
    /** 药物性肾损害 *多选* *马兜铃酸肾病,造影剂肾病,重金属中毒性肾脏损害,放射性肾病及抗肿瘤药物所致的肾损害,氨基苷类抗生素肾损害,其它* */
    drugInducedRenalDamage?: string | undefined;
    /** 其它药物性肾损害 */
    dindOther?: string | undefined;
    /** 泌尿系感染和结石 *多选* *泌尿系结核,肾结石,其它* */
    urinaryInfectionStones?: string | undefined;
    /** 其它泌尿系感染和结石 */
    uisOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientDiagnosisPrimaryDiseaseViewResultEntry implements IPatientDiagnosisPrimaryDiseaseViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDiagnosisPrimaryDiseaseView;

    constructor(data?: IPatientDiagnosisPrimaryDiseaseViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientDiagnosisPrimaryDiseaseView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDiagnosisPrimaryDiseaseViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisPrimaryDiseaseViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientDiagnosisPrimaryDiseaseViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDiagnosisPrimaryDiseaseView;
}

export class PatientDiagnosisTumorEditModel implements IPatientDiagnosisTumorEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 检查日期 */
    date!: dayjs.Dayjs;
    /** 诊断 *多选* *消化系统,呼吸系统,血液系统,泌尿生殖系统,神经系统,骨骼肌肉系统,其它* */
    type!: string;
    /** 消化系统诊断 */
    digestive?: string | undefined;
    /** 呼吸系统诊断 */
    respiratory?: string | undefined;
    /** 血液系统诊断 */
    blood?: string | undefined;
    /** 泌尿生殖系统诊断 */
    urogenital?: string | undefined;
    /** 神经系统诊断 */
    nervous?: string | undefined;
    /** 骨骼肌肉系统诊断 */
    skeletalMuscle?: string | undefined;
    /** 其它诊断 */
    otherDiagnoses?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number | undefined;

    constructor(data?: IPatientDiagnosisTumorEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.digestive = _data["digestive"];
            this.respiratory = _data["respiratory"];
            this.blood = _data["blood"];
            this.urogenital = _data["urogenital"];
            this.nervous = _data["nervous"];
            this.skeletalMuscle = _data["skeletalMuscle"];
            this.otherDiagnoses = _data["otherDiagnoses"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): PatientDiagnosisTumorEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisTumorEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["type"] = this.type;
        data["digestive"] = this.digestive;
        data["respiratory"] = this.respiratory;
        data["blood"] = this.blood;
        data["urogenital"] = this.urogenital;
        data["nervous"] = this.nervous;
        data["skeletalMuscle"] = this.skeletalMuscle;
        data["otherDiagnoses"] = this.otherDiagnoses;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        return data;
    }
}

export interface IPatientDiagnosisTumorEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 检查日期 */
    date: dayjs.Dayjs;
    /** 诊断 *多选* *消化系统,呼吸系统,血液系统,泌尿生殖系统,神经系统,骨骼肌肉系统,其它* */
    type: string;
    /** 消化系统诊断 */
    digestive?: string | undefined;
    /** 呼吸系统诊断 */
    respiratory?: string | undefined;
    /** 血液系统诊断 */
    blood?: string | undefined;
    /** 泌尿生殖系统诊断 */
    urogenital?: string | undefined;
    /** 神经系统诊断 */
    nervous?: string | undefined;
    /** 骨骼肌肉系统诊断 */
    skeletalMuscle?: string | undefined;
    /** 其它诊断 */
    otherDiagnoses?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number | undefined;
}

export class PatientDiagnosisTumorItemView implements IPatientDiagnosisTumorItemView {
    /** [患者标识](患者信息Id) */
    patientId!: string;
    /** 检查日期 */
    date!: dayjs.Dayjs;
    /** 诊断 *多选* *消化系统,呼吸系统,血液系统,泌尿生殖系统,神经系统,骨骼肌肉系统,其它* */
    type!: string;
    /** 消化系统诊断 */
    digestive?: string | undefined;
    /** 呼吸系统诊断 */
    respiratory?: string | undefined;
    /** 血液系统诊断 */
    blood?: string | undefined;
    /** 泌尿生殖系统诊断 */
    urogenital?: string | undefined;
    /** 神经系统诊断 */
    nervous?: string | undefined;
    /** 骨骼肌肉系统诊断 */
    skeletalMuscle?: string | undefined;
    /** 其它诊断 */
    otherDiagnoses?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 是否启用 */
    enable?: number | undefined;
    /** 类型 */
    readonly typeLabel?: string | undefined;

    constructor(data?: IPatientDiagnosisTumorItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.digestive = _data["digestive"];
            this.respiratory = _data["respiratory"];
            this.blood = _data["blood"];
            this.urogenital = _data["urogenital"];
            this.nervous = _data["nervous"];
            this.skeletalMuscle = _data["skeletalMuscle"];
            this.otherDiagnoses = _data["otherDiagnoses"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.enable = _data["enable"];
            (<any>this).typeLabel = _data["typeLabel"];
        }
    }

    static fromJS(data: any): PatientDiagnosisTumorItemView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisTumorItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["type"] = this.type;
        data["digestive"] = this.digestive;
        data["respiratory"] = this.respiratory;
        data["blood"] = this.blood;
        data["urogenital"] = this.urogenital;
        data["nervous"] = this.nervous;
        data["skeletalMuscle"] = this.skeletalMuscle;
        data["otherDiagnoses"] = this.otherDiagnoses;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["enable"] = this.enable;
        data["typeLabel"] = this.typeLabel;
        return data;
    }
}

export interface IPatientDiagnosisTumorItemView {
    /** [患者标识](患者信息Id) */
    patientId: string;
    /** 检查日期 */
    date: dayjs.Dayjs;
    /** 诊断 *多选* *消化系统,呼吸系统,血液系统,泌尿生殖系统,神经系统,骨骼肌肉系统,其它* */
    type: string;
    /** 消化系统诊断 */
    digestive?: string | undefined;
    /** 呼吸系统诊断 */
    respiratory?: string | undefined;
    /** 血液系统诊断 */
    blood?: string | undefined;
    /** 泌尿生殖系统诊断 */
    urogenital?: string | undefined;
    /** 神经系统诊断 */
    nervous?: string | undefined;
    /** 骨骼肌肉系统诊断 */
    skeletalMuscle?: string | undefined;
    /** 其它诊断 */
    otherDiagnoses?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 是否启用 */
    enable?: number | undefined;
    /** 类型 */
    typeLabel?: string | undefined;
}

export class PatientDiagnosisTumorView implements IPatientDiagnosisTumorView {
    /** 诊断类型(*0:无,1:有*) */
    diagnosis?: number | undefined;
    /** 诊断详情 */
    items?: PatientDiagnosisTumorItemView[] | undefined;

    constructor(data?: IPatientDiagnosisTumorView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.diagnosis = _data["diagnosis"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PatientDiagnosisTumorItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientDiagnosisTumorView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisTumorView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["diagnosis"] = this.diagnosis;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPatientDiagnosisTumorView {
    /** 诊断类型(*0:无,1:有*) */
    diagnosis?: number | undefined;
    /** 诊断详情 */
    items?: PatientDiagnosisTumorItemView[] | undefined;
}

/** Reponse */
export class PatientDiagnosisTumorViewResultEntry implements IPatientDiagnosisTumorViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDiagnosisTumorView;

    constructor(data?: IPatientDiagnosisTumorViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientDiagnosisTumorView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDiagnosisTumorViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisTumorViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientDiagnosisTumorViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDiagnosisTumorView;
}

/** 患者 - 病史记录 */
export class PatientDiagnosisView implements IPatientDiagnosisView {
    /** 日期 - 传染病 */
    infectiousDiseasesDate?: string | undefined;
    /** 名称 - 传染病 */
    infectiousDiseasesName?: string | undefined;
    /** 日期 - 肿瘤 */
    tumorDate?: string | undefined;
    /** 名称 - 肿瘤 */
    tumorName?: string | undefined;
    /** 日期 - 过敏 */
    allergyDate?: string | undefined;
    /** 名称 - 过敏 */
    allergyName?: string | undefined;

    constructor(data?: IPatientDiagnosisView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.infectiousDiseasesDate = _data["infectiousDiseasesDate"];
            this.infectiousDiseasesName = _data["infectiousDiseasesName"];
            this.tumorDate = _data["tumorDate"];
            this.tumorName = _data["tumorName"];
            this.allergyDate = _data["allergyDate"];
            this.allergyName = _data["allergyName"];
        }
    }

    static fromJS(data: any): PatientDiagnosisView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["infectiousDiseasesDate"] = this.infectiousDiseasesDate;
        data["infectiousDiseasesName"] = this.infectiousDiseasesName;
        data["tumorDate"] = this.tumorDate;
        data["tumorName"] = this.tumorName;
        data["allergyDate"] = this.allergyDate;
        data["allergyName"] = this.allergyName;
        return data;
    }
}

/** 患者 - 病史记录 */
export interface IPatientDiagnosisView {
    /** 日期 - 传染病 */
    infectiousDiseasesDate?: string | undefined;
    /** 名称 - 传染病 */
    infectiousDiseasesName?: string | undefined;
    /** 日期 - 肿瘤 */
    tumorDate?: string | undefined;
    /** 名称 - 肿瘤 */
    tumorName?: string | undefined;
    /** 日期 - 过敏 */
    allergyDate?: string | undefined;
    /** 名称 - 过敏 */
    allergyName?: string | undefined;
}

/** Reponse */
export class PatientDiagnosisViewResult implements IPatientDiagnosisViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDiagnosisView[] | undefined;

    constructor(data?: IPatientDiagnosisViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientDiagnosisView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientDiagnosisViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDiagnosisViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientDiagnosisViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientDiagnosisView[] | undefined;
}

export class PatientDialysisPlanEditModel implements IPatientDialysisPlanEditModel {
    /** 透析治疗频次 *1次/周;2次/周;3次/周;4次/周;5次/周;6次/周;7次/周;3次/2周;5次/2周;7次/2周* */
    dialysisFrequency!: string;
    /** 每次治疗时间 *单位：小时/次* */
    dialysisTime!: number;
    /** HDF治疗 *1:有,0:无* */
    hdf!: number;
    /** HDF次数 *1次/周;1次/2周;1次/4周;其它* */
    hdfFrequency?: string | undefined;
    /** 其它HDF次数说明 *当HDF次数选择其它时显示* */
    hdfFrequencyOther?: string | undefined;
    /** HDF治疗时间 *单位：小时/次* */
    hdfTime?: number | undefined;
    /** HP治疗 *1:有,0:无* */
    hp!: number;
    /** HP次数 *1次/周;1次/2周;1次/4周;其它* */
    hpFrequency?: string | undefined;
    /** 其它HP次数说明 *当HDF次数选择其它时显示* */
    hpFrequencyOther?: string | undefined;
    /** HP治疗时间 *单位：小时/次* */
    hpTime?: number | undefined;
    /** 透析浓缩液 *A液+B液;中心供液* */
    dialysisConcentrate?: string | undefined;
    /** A液 *商品化成品;自行配制* */
    dialysisConcentrateAbA?: string | undefined;
    /** 钾 *2.0mmol/L;3.0mmol/L;4.0mmol/L;其它* */
    dialysisConcentrateAbK?: string | undefined;
    /** 其它 *当透析液k离子浓度选择其它时显示* */
    dialysisConcentrateAbKOther?: string | undefined;
    /** 钙  *1.25mmol/L;1.5mmol/L;1.75mmol/L;其它* */
    dialysisConcentrateAbCa?: string | undefined;
    /** 其它 *当透析液Ca离子浓度选择其它时显示* */
    dialysisConcentrateAbCaOther?: string | undefined;
    /** 是否含糖 *0,1* */
    dialysisConcentrateAbSugar?: number | undefined;
    /** B液 *商品化成品;自行配制* */
    dialysisConcentrateAbB?: string | undefined;
    /** 中心供液 *浓缩A液;浓缩A+B液;透析液* */
    dialysisConcentrateCenterSupply?: string | undefined;
    /** 钾 *2.0mmol/L;3.0mmol/L;4.0mmol/L;其它* */
    dialysisConcentrateCenterSupplyK?: string | undefined;
    /** 钙  *1.25mmol/L;1.5mmol/L;1.75mmol/L;其它* */
    dialysisConcentrateCenterSupplyCa?: string | undefined;
    /** 碳酸氢根浓度  *8.4%;7%;其它* */
    dialysisConcentrateCenterSupplyHCO3?: string | undefined;
    /** 透析器,滤器类型 *国产;进口* */
    type?: string | undefined;
    /** 透析器,滤器通量 *高通量;低通量* */
    flux?: string | undefined;
    /** 透析器,滤器使用 *一次性使用;复用* */
    usage?: string | undefined;
    /** 透析器,滤器透析膜 *聚砜（PS）膜;聚醚砜（FES）膜;聚丙烯晴（PAN）膜;聚甲基丙烯酸甲酯（PMMA）膜;Polyamix膜;醋酸纤维素膜;其它* */
    dialysisMembrane?: string | undefined;
    /** 其它透析器,滤器透析膜说明 *当透析器,滤器透析膜选择其它时显示* */
    dialysisMembraneOther?: string | undefined;
    membraneArea?: string | undefined;
    /** 有误变化 *0,1* */
    isChanged?: number | undefined;

    constructor(data?: IPatientDialysisPlanEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisFrequency = _data["dialysisFrequency"];
            this.dialysisTime = _data["dialysisTime"];
            this.hdf = _data["hdf"];
            this.hdfFrequency = _data["hdfFrequency"];
            this.hdfFrequencyOther = _data["hdfFrequencyOther"];
            this.hdfTime = _data["hdfTime"];
            this.hp = _data["hp"];
            this.hpFrequency = _data["hpFrequency"];
            this.hpFrequencyOther = _data["hpFrequencyOther"];
            this.hpTime = _data["hpTime"];
            this.dialysisConcentrate = _data["dialysisConcentrate"];
            this.dialysisConcentrateAbA = _data["dialysisConcentrateAbA"];
            this.dialysisConcentrateAbK = _data["dialysisConcentrateAbK"];
            this.dialysisConcentrateAbKOther = _data["dialysisConcentrateAbKOther"];
            this.dialysisConcentrateAbCa = _data["dialysisConcentrateAbCa"];
            this.dialysisConcentrateAbCaOther = _data["dialysisConcentrateAbCaOther"];
            this.dialysisConcentrateAbSugar = _data["dialysisConcentrateAbSugar"];
            this.dialysisConcentrateAbB = _data["dialysisConcentrateAbB"];
            this.dialysisConcentrateCenterSupply = _data["dialysisConcentrateCenterSupply"];
            this.dialysisConcentrateCenterSupplyK = _data["dialysisConcentrateCenterSupplyK"];
            this.dialysisConcentrateCenterSupplyCa = _data["dialysisConcentrateCenterSupplyCa"];
            this.dialysisConcentrateCenterSupplyHCO3 = _data["dialysisConcentrateCenterSupplyHCO3"];
            this.type = _data["type"];
            this.flux = _data["flux"];
            this.usage = _data["usage"];
            this.dialysisMembrane = _data["dialysisMembrane"];
            this.dialysisMembraneOther = _data["dialysisMembraneOther"];
            this.membraneArea = _data["membraneArea"];
            this.isChanged = _data["isChanged"];
        }
    }

    static fromJS(data: any): PatientDialysisPlanEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDialysisPlanEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisFrequency"] = this.dialysisFrequency;
        data["dialysisTime"] = this.dialysisTime;
        data["hdf"] = this.hdf;
        data["hdfFrequency"] = this.hdfFrequency;
        data["hdfFrequencyOther"] = this.hdfFrequencyOther;
        data["hdfTime"] = this.hdfTime;
        data["hp"] = this.hp;
        data["hpFrequency"] = this.hpFrequency;
        data["hpFrequencyOther"] = this.hpFrequencyOther;
        data["hpTime"] = this.hpTime;
        data["dialysisConcentrate"] = this.dialysisConcentrate;
        data["dialysisConcentrateAbA"] = this.dialysisConcentrateAbA;
        data["dialysisConcentrateAbK"] = this.dialysisConcentrateAbK;
        data["dialysisConcentrateAbKOther"] = this.dialysisConcentrateAbKOther;
        data["dialysisConcentrateAbCa"] = this.dialysisConcentrateAbCa;
        data["dialysisConcentrateAbCaOther"] = this.dialysisConcentrateAbCaOther;
        data["dialysisConcentrateAbSugar"] = this.dialysisConcentrateAbSugar;
        data["dialysisConcentrateAbB"] = this.dialysisConcentrateAbB;
        data["dialysisConcentrateCenterSupply"] = this.dialysisConcentrateCenterSupply;
        data["dialysisConcentrateCenterSupplyK"] = this.dialysisConcentrateCenterSupplyK;
        data["dialysisConcentrateCenterSupplyCa"] = this.dialysisConcentrateCenterSupplyCa;
        data["dialysisConcentrateCenterSupplyHCO3"] = this.dialysisConcentrateCenterSupplyHCO3;
        data["type"] = this.type;
        data["flux"] = this.flux;
        data["usage"] = this.usage;
        data["dialysisMembrane"] = this.dialysisMembrane;
        data["dialysisMembraneOther"] = this.dialysisMembraneOther;
        data["membraneArea"] = this.membraneArea;
        data["isChanged"] = this.isChanged;
        return data;
    }
}

export interface IPatientDialysisPlanEditModel {
    /** 透析治疗频次 *1次/周;2次/周;3次/周;4次/周;5次/周;6次/周;7次/周;3次/2周;5次/2周;7次/2周* */
    dialysisFrequency: string;
    /** 每次治疗时间 *单位：小时/次* */
    dialysisTime: number;
    /** HDF治疗 *1:有,0:无* */
    hdf: number;
    /** HDF次数 *1次/周;1次/2周;1次/4周;其它* */
    hdfFrequency?: string | undefined;
    /** 其它HDF次数说明 *当HDF次数选择其它时显示* */
    hdfFrequencyOther?: string | undefined;
    /** HDF治疗时间 *单位：小时/次* */
    hdfTime?: number | undefined;
    /** HP治疗 *1:有,0:无* */
    hp: number;
    /** HP次数 *1次/周;1次/2周;1次/4周;其它* */
    hpFrequency?: string | undefined;
    /** 其它HP次数说明 *当HDF次数选择其它时显示* */
    hpFrequencyOther?: string | undefined;
    /** HP治疗时间 *单位：小时/次* */
    hpTime?: number | undefined;
    /** 透析浓缩液 *A液+B液;中心供液* */
    dialysisConcentrate?: string | undefined;
    /** A液 *商品化成品;自行配制* */
    dialysisConcentrateAbA?: string | undefined;
    /** 钾 *2.0mmol/L;3.0mmol/L;4.0mmol/L;其它* */
    dialysisConcentrateAbK?: string | undefined;
    /** 其它 *当透析液k离子浓度选择其它时显示* */
    dialysisConcentrateAbKOther?: string | undefined;
    /** 钙  *1.25mmol/L;1.5mmol/L;1.75mmol/L;其它* */
    dialysisConcentrateAbCa?: string | undefined;
    /** 其它 *当透析液Ca离子浓度选择其它时显示* */
    dialysisConcentrateAbCaOther?: string | undefined;
    /** 是否含糖 *0,1* */
    dialysisConcentrateAbSugar?: number | undefined;
    /** B液 *商品化成品;自行配制* */
    dialysisConcentrateAbB?: string | undefined;
    /** 中心供液 *浓缩A液;浓缩A+B液;透析液* */
    dialysisConcentrateCenterSupply?: string | undefined;
    /** 钾 *2.0mmol/L;3.0mmol/L;4.0mmol/L;其它* */
    dialysisConcentrateCenterSupplyK?: string | undefined;
    /** 钙  *1.25mmol/L;1.5mmol/L;1.75mmol/L;其它* */
    dialysisConcentrateCenterSupplyCa?: string | undefined;
    /** 碳酸氢根浓度  *8.4%;7%;其它* */
    dialysisConcentrateCenterSupplyHCO3?: string | undefined;
    /** 透析器,滤器类型 *国产;进口* */
    type?: string | undefined;
    /** 透析器,滤器通量 *高通量;低通量* */
    flux?: string | undefined;
    /** 透析器,滤器使用 *一次性使用;复用* */
    usage?: string | undefined;
    /** 透析器,滤器透析膜 *聚砜（PS）膜;聚醚砜（FES）膜;聚丙烯晴（PAN）膜;聚甲基丙烯酸甲酯（PMMA）膜;Polyamix膜;醋酸纤维素膜;其它* */
    dialysisMembrane?: string | undefined;
    /** 其它透析器,滤器透析膜说明 *当透析器,滤器透析膜选择其它时显示* */
    dialysisMembraneOther?: string | undefined;
    membraneArea?: string | undefined;
    /** 有误变化 *0,1* */
    isChanged?: number | undefined;
}

export class PatientDialysisPlanView implements IPatientDialysisPlanView {
    /** 透析治疗频次 *1次/周;2次/周;3次/周;4次/周;5次/周;6次/周;7次/周;3次/2周;5次/2周;7次/2周* */
    dialysisFrequency!: string;
    /** 每次治疗时间 *单位：小时/次* */
    dialysisTime!: number;
    /** HDF治疗 *1:有,0:无* */
    hdf!: number;
    /** HDF次数 *1次/周;1次/2周;1次/4周;其它* */
    hdfFrequency?: string | undefined;
    /** 其它HDF次数说明 *当HDF次数选择其它时显示* */
    hdfFrequencyOther?: string | undefined;
    /** HDF治疗时间 *单位：小时/次* */
    hdfTime?: number | undefined;
    /** HP治疗 *1:有,0:无* */
    hp!: number;
    /** HP次数 *1次/周;1次/2周;1次/4周;其它* */
    hpFrequency?: string | undefined;
    /** 其它HP次数说明 *当HDF次数选择其它时显示* */
    hpFrequencyOther?: string | undefined;
    /** HP治疗时间 *单位：小时/次* */
    hpTime?: number | undefined;
    /** 透析浓缩液 *A液+B液;中心供液* */
    dialysisConcentrate?: string | undefined;
    /** A液 *商品化成品;自行配制* */
    dialysisConcentrateAbA?: string | undefined;
    /** 钾 *2.0mmol/L;3.0mmol/L;4.0mmol/L;其它* */
    dialysisConcentrateAbK?: string | undefined;
    /** 其它 *当透析液k离子浓度选择其它时显示* */
    dialysisConcentrateAbKOther?: string | undefined;
    /** 钙  *1.25mmol/L;1.5mmol/L;1.75mmol/L;其它* */
    dialysisConcentrateAbCa?: string | undefined;
    /** 其它 *当透析液Ca离子浓度选择其它时显示* */
    dialysisConcentrateAbCaOther?: string | undefined;
    /** 是否含糖 *0,1* */
    dialysisConcentrateAbSugar?: number | undefined;
    /** B液 *商品化成品;自行配制* */
    dialysisConcentrateAbB?: string | undefined;
    /** 中心供液 *浓缩A液;浓缩A+B液;透析液* */
    dialysisConcentrateCenterSupply?: string | undefined;
    /** 钾 *2.0mmol/L;3.0mmol/L;4.0mmol/L;其它* */
    dialysisConcentrateCenterSupplyK?: string | undefined;
    /** 钙  *1.25mmol/L;1.5mmol/L;1.75mmol/L;其它* */
    dialysisConcentrateCenterSupplyCa?: string | undefined;
    /** 碳酸氢根浓度  *8.4%;7%;其它* */
    dialysisConcentrateCenterSupplyHCO3?: string | undefined;
    /** 透析器,滤器类型 *国产;进口* */
    type?: string | undefined;
    /** 透析器,滤器通量 *高通量;低通量* */
    flux?: string | undefined;
    /** 透析器,滤器使用 *一次性使用;复用* */
    usage?: string | undefined;
    /** 透析器,滤器透析膜 *聚砜（PS）膜;聚醚砜（FES）膜;聚丙烯晴（PAN）膜;聚甲基丙烯酸甲酯（PMMA）膜;Polyamix膜;醋酸纤维素膜;其它* */
    dialysisMembrane?: string | undefined;
    /** 其它透析器,滤器透析膜说明 *当透析器,滤器透析膜选择其它时显示* */
    dialysisMembraneOther?: string | undefined;
    membraneArea?: string | undefined;
    /** 有误变化 *0,1* */
    isChanged?: number | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientDialysisPlanView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisFrequency = _data["dialysisFrequency"];
            this.dialysisTime = _data["dialysisTime"];
            this.hdf = _data["hdf"];
            this.hdfFrequency = _data["hdfFrequency"];
            this.hdfFrequencyOther = _data["hdfFrequencyOther"];
            this.hdfTime = _data["hdfTime"];
            this.hp = _data["hp"];
            this.hpFrequency = _data["hpFrequency"];
            this.hpFrequencyOther = _data["hpFrequencyOther"];
            this.hpTime = _data["hpTime"];
            this.dialysisConcentrate = _data["dialysisConcentrate"];
            this.dialysisConcentrateAbA = _data["dialysisConcentrateAbA"];
            this.dialysisConcentrateAbK = _data["dialysisConcentrateAbK"];
            this.dialysisConcentrateAbKOther = _data["dialysisConcentrateAbKOther"];
            this.dialysisConcentrateAbCa = _data["dialysisConcentrateAbCa"];
            this.dialysisConcentrateAbCaOther = _data["dialysisConcentrateAbCaOther"];
            this.dialysisConcentrateAbSugar = _data["dialysisConcentrateAbSugar"];
            this.dialysisConcentrateAbB = _data["dialysisConcentrateAbB"];
            this.dialysisConcentrateCenterSupply = _data["dialysisConcentrateCenterSupply"];
            this.dialysisConcentrateCenterSupplyK = _data["dialysisConcentrateCenterSupplyK"];
            this.dialysisConcentrateCenterSupplyCa = _data["dialysisConcentrateCenterSupplyCa"];
            this.dialysisConcentrateCenterSupplyHCO3 = _data["dialysisConcentrateCenterSupplyHCO3"];
            this.type = _data["type"];
            this.flux = _data["flux"];
            this.usage = _data["usage"];
            this.dialysisMembrane = _data["dialysisMembrane"];
            this.dialysisMembraneOther = _data["dialysisMembraneOther"];
            this.membraneArea = _data["membraneArea"];
            this.isChanged = _data["isChanged"];
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDialysisPlanView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDialysisPlanView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisFrequency"] = this.dialysisFrequency;
        data["dialysisTime"] = this.dialysisTime;
        data["hdf"] = this.hdf;
        data["hdfFrequency"] = this.hdfFrequency;
        data["hdfFrequencyOther"] = this.hdfFrequencyOther;
        data["hdfTime"] = this.hdfTime;
        data["hp"] = this.hp;
        data["hpFrequency"] = this.hpFrequency;
        data["hpFrequencyOther"] = this.hpFrequencyOther;
        data["hpTime"] = this.hpTime;
        data["dialysisConcentrate"] = this.dialysisConcentrate;
        data["dialysisConcentrateAbA"] = this.dialysisConcentrateAbA;
        data["dialysisConcentrateAbK"] = this.dialysisConcentrateAbK;
        data["dialysisConcentrateAbKOther"] = this.dialysisConcentrateAbKOther;
        data["dialysisConcentrateAbCa"] = this.dialysisConcentrateAbCa;
        data["dialysisConcentrateAbCaOther"] = this.dialysisConcentrateAbCaOther;
        data["dialysisConcentrateAbSugar"] = this.dialysisConcentrateAbSugar;
        data["dialysisConcentrateAbB"] = this.dialysisConcentrateAbB;
        data["dialysisConcentrateCenterSupply"] = this.dialysisConcentrateCenterSupply;
        data["dialysisConcentrateCenterSupplyK"] = this.dialysisConcentrateCenterSupplyK;
        data["dialysisConcentrateCenterSupplyCa"] = this.dialysisConcentrateCenterSupplyCa;
        data["dialysisConcentrateCenterSupplyHCO3"] = this.dialysisConcentrateCenterSupplyHCO3;
        data["type"] = this.type;
        data["flux"] = this.flux;
        data["usage"] = this.usage;
        data["dialysisMembrane"] = this.dialysisMembrane;
        data["dialysisMembraneOther"] = this.dialysisMembraneOther;
        data["membraneArea"] = this.membraneArea;
        data["isChanged"] = this.isChanged;
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface IPatientDialysisPlanView {
    /** 透析治疗频次 *1次/周;2次/周;3次/周;4次/周;5次/周;6次/周;7次/周;3次/2周;5次/2周;7次/2周* */
    dialysisFrequency: string;
    /** 每次治疗时间 *单位：小时/次* */
    dialysisTime: number;
    /** HDF治疗 *1:有,0:无* */
    hdf: number;
    /** HDF次数 *1次/周;1次/2周;1次/4周;其它* */
    hdfFrequency?: string | undefined;
    /** 其它HDF次数说明 *当HDF次数选择其它时显示* */
    hdfFrequencyOther?: string | undefined;
    /** HDF治疗时间 *单位：小时/次* */
    hdfTime?: number | undefined;
    /** HP治疗 *1:有,0:无* */
    hp: number;
    /** HP次数 *1次/周;1次/2周;1次/4周;其它* */
    hpFrequency?: string | undefined;
    /** 其它HP次数说明 *当HDF次数选择其它时显示* */
    hpFrequencyOther?: string | undefined;
    /** HP治疗时间 *单位：小时/次* */
    hpTime?: number | undefined;
    /** 透析浓缩液 *A液+B液;中心供液* */
    dialysisConcentrate?: string | undefined;
    /** A液 *商品化成品;自行配制* */
    dialysisConcentrateAbA?: string | undefined;
    /** 钾 *2.0mmol/L;3.0mmol/L;4.0mmol/L;其它* */
    dialysisConcentrateAbK?: string | undefined;
    /** 其它 *当透析液k离子浓度选择其它时显示* */
    dialysisConcentrateAbKOther?: string | undefined;
    /** 钙  *1.25mmol/L;1.5mmol/L;1.75mmol/L;其它* */
    dialysisConcentrateAbCa?: string | undefined;
    /** 其它 *当透析液Ca离子浓度选择其它时显示* */
    dialysisConcentrateAbCaOther?: string | undefined;
    /** 是否含糖 *0,1* */
    dialysisConcentrateAbSugar?: number | undefined;
    /** B液 *商品化成品;自行配制* */
    dialysisConcentrateAbB?: string | undefined;
    /** 中心供液 *浓缩A液;浓缩A+B液;透析液* */
    dialysisConcentrateCenterSupply?: string | undefined;
    /** 钾 *2.0mmol/L;3.0mmol/L;4.0mmol/L;其它* */
    dialysisConcentrateCenterSupplyK?: string | undefined;
    /** 钙  *1.25mmol/L;1.5mmol/L;1.75mmol/L;其它* */
    dialysisConcentrateCenterSupplyCa?: string | undefined;
    /** 碳酸氢根浓度  *8.4%;7%;其它* */
    dialysisConcentrateCenterSupplyHCO3?: string | undefined;
    /** 透析器,滤器类型 *国产;进口* */
    type?: string | undefined;
    /** 透析器,滤器通量 *高通量;低通量* */
    flux?: string | undefined;
    /** 透析器,滤器使用 *一次性使用;复用* */
    usage?: string | undefined;
    /** 透析器,滤器透析膜 *聚砜（PS）膜;聚醚砜（FES）膜;聚丙烯晴（PAN）膜;聚甲基丙烯酸甲酯（PMMA）膜;Polyamix膜;醋酸纤维素膜;其它* */
    dialysisMembrane?: string | undefined;
    /** 其它透析器,滤器透析膜说明 *当透析器,滤器透析膜选择其它时显示* */
    dialysisMembraneOther?: string | undefined;
    membraneArea?: string | undefined;
    /** 有误变化 *0,1* */
    isChanged?: number | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientDialysisPlanViewResultEntry implements IPatientDialysisPlanViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDialysisPlanView;

    constructor(data?: IPatientDialysisPlanViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientDialysisPlanView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientDialysisPlanViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientDialysisPlanViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientDialysisPlanViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientDialysisPlanView;
}

/** 新增患者Model */
export class PatientEditModel implements IPatientEditModel {
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name!: string;
    /** 别名 *用于患者重名,默认填姓名,系统内默认显示别名,打印单据使用姓名* */
    name2?: string | undefined;
    /** 照片路径 */
    photo?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender!: string;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source!: string;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 医保类型 `DIC.PEOPLE.MEDICARETYPE` *城镇职工,城镇居民* */
    medicareType?: string | undefined;
    /** 医保号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 血型 `DIC.PEOPLE.BLOODTYPE` *字典:A,B,O,未知* */
    bloodType?: string | undefined;
    /** RH `DIC.PEOPLE.RH` */
    rh?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 本人电话 */
    telephone?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 职业 `DIC.PEOPLE.PROFESSION` *个体,工人,农民,学生* */
    profession?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 家庭住址 */
    address?: string | undefined;
    /** 工作单位 */
    workUnit?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: dayjs.Dayjs | undefined;
    /** 透析状态 `DIC.PATIENT.DIALYSIS.STATE` *长期,临时* */
    dialysisState?: string | undefined;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 主治医生 */
    doctor?: string | undefined;
    /** 主管护士 */
    nurse?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 传染病 `DIC.PATIENT.POSITIVE` *0:阴性,1:阳性 编辑诊断-传染病时管理这个状态* */
    positive!: number;
    /** 透析状态是否转换 `DIC.PATIENT.DIALYSIS.STATE.TRANSITION` *0:未转换,1:已转换 编辑诊断-状态自动转换时管理这个状态* */
    dialysisStateTransition!: number;
    /** 档案号 *XT{Year}{Month}{Sequence}* */
    archiveNumber?: string | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 人脸识别图像 */
    face?: string | undefined;
    /** 指纹 */
    finger?: string | undefined;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 病历夹号 `DIC.PATIENT.CONDITION` *一般,病重,病危* */
    medicareCondition?: string | undefined;
    /** 并发症 `DIC.PATIENT.COMPLICATION` *多选* */
    complication?: string | undefined;
    /** 下次感筛检验日期 */
    nextDate?: dayjs.Dayjs | undefined;
    /** 首次透析时采用的通路类型 */
    firstDialysisVascularAccess?: string | undefined;
    /** 首次透析时采取的方式 */
    firstDialysisMode?: string | undefined;
    /** 首次肾脏代替治疗时肾功能 */
    firstGfr?: string | undefined;
    /** 首次肾脏代替治疗时血肌酐水平 */
    firstScr?: string | undefined;
    /** 附加照片路径 */
    photoAuxiliary?: string | undefined;
    /** 透析卡号 */
    cardNumber?: string | undefined;
    /** 标签 */
    tags?: PatientTagsBase[] | undefined;
    /** 院区 */
    sysHospitalAreaIds?: string[] | undefined;
    infectious?: PatientDiagnosisInfectiousDiseasesEditByINModel;

    constructor(data?: IPatientEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.photo = _data["photo"];
            this.gender = _data["gender"];
            this.source = _data["source"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.ward = _data["ward"];
            this.bed = _data["bed"];
            this.medicareType = _data["medicareType"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.nationality = _data["nationality"];
            this.idType = _data["idType"];
            this.idNumber = _data["idNumber"];
            this.birthdate = _data["birthdate"] ? dayjs(_data["birthdate"].toString()) : <any>undefined;
            this.bloodType = _data["bloodType"];
            this.rh = _data["rh"];
            this.height = _data["height"];
            this.telephone = _data["telephone"];
            this.marital = _data["marital"];
            this.educationalLevel = _data["educationalLevel"];
            this.profession = _data["profession"];
            this.province = _data["province"];
            this.city = _data["city"];
            this.area = _data["area"];
            this.address = _data["address"];
            this.workUnit = _data["workUnit"];
            this.receiptDate = _data["receiptDate"] ? dayjs(_data["receiptDate"].toString()) : <any>undefined;
            this.dialysisState = _data["dialysisState"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.dialysisCountInit = _data["dialysisCountInit"];
            this.doctor = _data["doctor"];
            this.nurse = _data["nurse"];
            this.diagnosis = _data["diagnosis"];
            this.remark = _data["remark"];
            this.positive = _data["positive"];
            this.dialysisStateTransition = _data["dialysisStateTransition"];
            this.archiveNumber = _data["archiveNumber"];
            this.department = _data["department"];
            this.face = _data["face"];
            this.finger = _data["finger"];
            this.dossierNumber = _data["dossierNumber"];
            this.medicareCondition = _data["medicareCondition"];
            this.complication = _data["complication"];
            this.nextDate = _data["nextDate"] ? dayjs(_data["nextDate"].toString()) : <any>undefined;
            this.firstDialysisVascularAccess = _data["firstDialysisVascularAccess"];
            this.firstDialysisMode = _data["firstDialysisMode"];
            this.firstGfr = _data["firstGfr"];
            this.firstScr = _data["firstScr"];
            this.photoAuxiliary = _data["photoAuxiliary"];
            this.cardNumber = _data["cardNumber"];
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(PatientTagsBase.fromJS(item));
            }
            if (Array.isArray(_data["sysHospitalAreaIds"])) {
                this.sysHospitalAreaIds = [] as any;
                for (let item of _data["sysHospitalAreaIds"])
                    this.sysHospitalAreaIds!.push(item);
            }
            this.infectious = _data["infectious"] ? PatientDiagnosisInfectiousDiseasesEditByINModel.fromJS(_data["infectious"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["photo"] = this.photo;
        data["gender"] = this.gender;
        data["source"] = this.source;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["ward"] = this.ward;
        data["bed"] = this.bed;
        data["medicareType"] = this.medicareType;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["dialysisNumber"] = this.dialysisNumber;
        data["nationality"] = this.nationality;
        data["idType"] = this.idType;
        data["idNumber"] = this.idNumber;
        data["birthdate"] = this.birthdate ? this.birthdate.toLocaleString() : <any>undefined;
        data["bloodType"] = this.bloodType;
        data["rh"] = this.rh;
        data["height"] = this.height;
        data["telephone"] = this.telephone;
        data["marital"] = this.marital;
        data["educationalLevel"] = this.educationalLevel;
        data["profession"] = this.profession;
        data["province"] = this.province;
        data["city"] = this.city;
        data["area"] = this.area;
        data["address"] = this.address;
        data["workUnit"] = this.workUnit;
        data["receiptDate"] = this.receiptDate ? this.receiptDate.toLocaleString() : <any>undefined;
        data["dialysisState"] = this.dialysisState;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toLocaleString() : <any>undefined;
        data["dialysisCountInit"] = this.dialysisCountInit;
        data["doctor"] = this.doctor;
        data["nurse"] = this.nurse;
        data["diagnosis"] = this.diagnosis;
        data["remark"] = this.remark;
        data["positive"] = this.positive;
        data["dialysisStateTransition"] = this.dialysisStateTransition;
        data["archiveNumber"] = this.archiveNumber;
        data["department"] = this.department;
        data["face"] = this.face;
        data["finger"] = this.finger;
        data["dossierNumber"] = this.dossierNumber;
        data["medicareCondition"] = this.medicareCondition;
        data["complication"] = this.complication;
        data["nextDate"] = this.nextDate ? this.nextDate.toLocaleString() : <any>undefined;
        data["firstDialysisVascularAccess"] = this.firstDialysisVascularAccess;
        data["firstDialysisMode"] = this.firstDialysisMode;
        data["firstGfr"] = this.firstGfr;
        data["firstScr"] = this.firstScr;
        data["photoAuxiliary"] = this.photoAuxiliary;
        data["cardNumber"] = this.cardNumber;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item.toJSON());
        }
        if (Array.isArray(this.sysHospitalAreaIds)) {
            data["sysHospitalAreaIds"] = [];
            for (let item of this.sysHospitalAreaIds)
                data["sysHospitalAreaIds"].push(item);
        }
        data["infectious"] = this.infectious ? this.infectious.toJSON() : <any>undefined;
        return data;
    }
}

/** 新增患者Model */
export interface IPatientEditModel {
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name: string;
    /** 别名 *用于患者重名,默认填姓名,系统内默认显示别名,打印单据使用姓名* */
    name2?: string | undefined;
    /** 照片路径 */
    photo?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender: string;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source: string;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 医保类型 `DIC.PEOPLE.MEDICARETYPE` *城镇职工,城镇居民* */
    medicareType?: string | undefined;
    /** 医保号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 血型 `DIC.PEOPLE.BLOODTYPE` *字典:A,B,O,未知* */
    bloodType?: string | undefined;
    /** RH `DIC.PEOPLE.RH` */
    rh?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 本人电话 */
    telephone?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 职业 `DIC.PEOPLE.PROFESSION` *个体,工人,农民,学生* */
    profession?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 家庭住址 */
    address?: string | undefined;
    /** 工作单位 */
    workUnit?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: dayjs.Dayjs | undefined;
    /** 透析状态 `DIC.PATIENT.DIALYSIS.STATE` *长期,临时* */
    dialysisState?: string | undefined;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 主治医生 */
    doctor?: string | undefined;
    /** 主管护士 */
    nurse?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 传染病 `DIC.PATIENT.POSITIVE` *0:阴性,1:阳性 编辑诊断-传染病时管理这个状态* */
    positive: number;
    /** 透析状态是否转换 `DIC.PATIENT.DIALYSIS.STATE.TRANSITION` *0:未转换,1:已转换 编辑诊断-状态自动转换时管理这个状态* */
    dialysisStateTransition: number;
    /** 档案号 *XT{Year}{Month}{Sequence}* */
    archiveNumber?: string | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 人脸识别图像 */
    face?: string | undefined;
    /** 指纹 */
    finger?: string | undefined;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 病历夹号 `DIC.PATIENT.CONDITION` *一般,病重,病危* */
    medicareCondition?: string | undefined;
    /** 并发症 `DIC.PATIENT.COMPLICATION` *多选* */
    complication?: string | undefined;
    /** 下次感筛检验日期 */
    nextDate?: dayjs.Dayjs | undefined;
    /** 首次透析时采用的通路类型 */
    firstDialysisVascularAccess?: string | undefined;
    /** 首次透析时采取的方式 */
    firstDialysisMode?: string | undefined;
    /** 首次肾脏代替治疗时肾功能 */
    firstGfr?: string | undefined;
    /** 首次肾脏代替治疗时血肌酐水平 */
    firstScr?: string | undefined;
    /** 附加照片路径 */
    photoAuxiliary?: string | undefined;
    /** 透析卡号 */
    cardNumber?: string | undefined;
    /** 标签 */
    tags?: PatientTagsBase[] | undefined;
    /** 院区 */
    sysHospitalAreaIds?: string[] | undefined;
    infectious?: PatientDiagnosisInfectiousDiseasesEditByINModel;
}

/** 从 Excel 导入 患者 表所需的视图类 */
export class PatientExcelView implements IPatientExcelView {
    /** 院区 */
    hospitalArea?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 性别 显示值 */
    genderLabel?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source?: string | undefined;
    /** 来源 显示值 */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 医保类型 `DIC.PEOPLE.MEDICARETYPE` *城镇职工,城镇居民* */
    medicareType?: string | undefined;
    /** 医保类型 显示值 */
    medicareTypeLabel?: string | undefined;
    /** 医保号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析卡号 */
    cardNumber?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 民族 显示值 */
    nationalityLabel?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件类型 显示值 */
    idTypeLabel?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 血型 `DIC.PEOPLE.BLOODTYPE` *字典:A,B,O,未知* */
    bloodType?: string | undefined;
    /** 血型 显示值 */
    bloodTypeLabel?: string | undefined;
    /** RH `DIC.PEOPLE.RH` */
    rh?: string | undefined;
    /** Rh 显示值 */
    rhLabel?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 本人电话 */
    telephone?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 婚否 显示值 */
    maritalLabel?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 并发症 */
    complication?: string | undefined;
    /** 文化程度 显示值 */
    educationalLevelLabel?: string | undefined;
    /** 职业 `DIC.PEOPLE.PROFESSION` *个体,工人,农民,学生* */
    profession?: string | undefined;
    /** 职业 显示值 */
    professionLabel?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 家庭住址 */
    address?: string | undefined;
    /** 工作单位 */
    workUnit?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: dayjs.Dayjs | undefined;
    /** 透析状态 `DIC.PATIENT.DIALYSIS.STATE` *长期,临时* */
    dialysisState?: string | undefined;
    /** 透析状态 显示值 */
    dialysisStateLabel?: string | undefined;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 转归状态 `DIC.PATIENT.PROGNOSIS.TYPE` *患者编辑界面不做维护,自动管理* */
    prognosisState?: string | undefined;
    /** 转归状态 显示值 */
    prognosisStateLabel?: string | undefined;
    /** 是否阳性0,1 *编辑诊断-传染病时管理这个状态* */
    positive?: string | undefined;
    /** 是否阳性 */
    positiveLabel?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 诊断 显示值 */
    diagnosisLabel?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 与患者关系 */
    contactRelation?: string | undefined;
    /** 联系人姓名 */
    contactName?: string | undefined;
    /** 联系人移动电话 */
    contactPhone?: string | undefined;
    /** 联系人座机 */
    contactTel?: string | undefined;
    /** 联系人邮箱 */
    contactEmail?: string | undefined;
    /** 联系人省级 */
    contactProvince?: string | undefined;
    /** 联系人城市 */
    contactCity?: string | undefined;
    /** 联系人区县 */
    contactArea?: string | undefined;
    /** 联系人地址 */
    contactAddress?: string | undefined;
    /** 检查日期 */
    date?: dayjs.Dayjs | undefined;
    /** 疾病种类 `DIC.DIAGNOSIS.ID.TYPE` *多选，用分号隔开* *丙肝;乙肝;艾滋病;梅毒;结核;其它* */
    type?: string | undefined;
    /** 疾病种类 - 显示值 */
    typeLabel?: string | undefined;
    /** 首次透析时采用的通路类型 */
    firstDialysisVascularAccess?: string | undefined;
    /** 首次透析时采取的方式 */
    firstDialysisMode?: string | undefined;
    /** 首次肾脏代替治疗时肾功能 */
    firstGfr?: string | undefined;
    /** 首次肾脏替代治疗时血肌酐水平 */
    firstScr?: string | undefined;

    constructor(data?: IPatientExcelView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hospitalArea = _data["hospitalArea"];
            this.name = _data["name"];
            this.gender = _data["gender"];
            this.genderLabel = _data["genderLabel"];
            this.source = _data["source"];
            this.sourceLabel = _data["sourceLabel"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.ward = _data["ward"];
            this.department = _data["department"];
            this.bed = _data["bed"];
            this.medicareType = _data["medicareType"];
            this.medicareTypeLabel = _data["medicareTypeLabel"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.cardNumber = _data["cardNumber"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.nationality = _data["nationality"];
            this.nationalityLabel = _data["nationalityLabel"];
            this.idType = _data["idType"];
            this.idTypeLabel = _data["idTypeLabel"];
            this.idNumber = _data["idNumber"];
            this.birthdate = _data["birthdate"] ? dayjs(_data["birthdate"].toString()) : <any>undefined;
            this.bloodType = _data["bloodType"];
            this.bloodTypeLabel = _data["bloodTypeLabel"];
            this.rh = _data["rh"];
            this.rhLabel = _data["rhLabel"];
            this.height = _data["height"];
            this.telephone = _data["telephone"];
            this.marital = _data["marital"];
            this.maritalLabel = _data["maritalLabel"];
            this.educationalLevel = _data["educationalLevel"];
            this.complication = _data["complication"];
            this.educationalLevelLabel = _data["educationalLevelLabel"];
            this.profession = _data["profession"];
            this.professionLabel = _data["professionLabel"];
            this.province = _data["province"];
            this.city = _data["city"];
            this.area = _data["area"];
            this.address = _data["address"];
            this.workUnit = _data["workUnit"];
            this.receiptDate = _data["receiptDate"] ? dayjs(_data["receiptDate"].toString()) : <any>undefined;
            this.dialysisState = _data["dialysisState"];
            this.dialysisStateLabel = _data["dialysisStateLabel"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.dialysisCountInit = _data["dialysisCountInit"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            this.prognosisState = _data["prognosisState"];
            this.prognosisStateLabel = _data["prognosisStateLabel"];
            this.positive = _data["positive"];
            this.positiveLabel = _data["positiveLabel"];
            this.diagnosis = _data["diagnosis"];
            this.diagnosisLabel = _data["diagnosisLabel"];
            this.remark = _data["remark"];
            this.contactRelation = _data["contactRelation"];
            this.contactName = _data["contactName"];
            this.contactPhone = _data["contactPhone"];
            this.contactTel = _data["contactTel"];
            this.contactEmail = _data["contactEmail"];
            this.contactProvince = _data["contactProvince"];
            this.contactCity = _data["contactCity"];
            this.contactArea = _data["contactArea"];
            this.contactAddress = _data["contactAddress"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.typeLabel = _data["typeLabel"];
            this.firstDialysisVascularAccess = _data["firstDialysisVascularAccess"];
            this.firstDialysisMode = _data["firstDialysisMode"];
            this.firstGfr = _data["firstGfr"];
            this.firstScr = _data["firstScr"];
        }
    }

    static fromJS(data: any): PatientExcelView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientExcelView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hospitalArea"] = this.hospitalArea;
        data["name"] = this.name;
        data["gender"] = this.gender;
        data["genderLabel"] = this.genderLabel;
        data["source"] = this.source;
        data["sourceLabel"] = this.sourceLabel;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["ward"] = this.ward;
        data["department"] = this.department;
        data["bed"] = this.bed;
        data["medicareType"] = this.medicareType;
        data["medicareTypeLabel"] = this.medicareTypeLabel;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["cardNumber"] = this.cardNumber;
        data["dialysisNumber"] = this.dialysisNumber;
        data["nationality"] = this.nationality;
        data["nationalityLabel"] = this.nationalityLabel;
        data["idType"] = this.idType;
        data["idTypeLabel"] = this.idTypeLabel;
        data["idNumber"] = this.idNumber;
        data["birthdate"] = this.birthdate ? this.birthdate.toLocaleString() : <any>undefined;
        data["bloodType"] = this.bloodType;
        data["bloodTypeLabel"] = this.bloodTypeLabel;
        data["rh"] = this.rh;
        data["rhLabel"] = this.rhLabel;
        data["height"] = this.height;
        data["telephone"] = this.telephone;
        data["marital"] = this.marital;
        data["maritalLabel"] = this.maritalLabel;
        data["educationalLevel"] = this.educationalLevel;
        data["complication"] = this.complication;
        data["educationalLevelLabel"] = this.educationalLevelLabel;
        data["profession"] = this.profession;
        data["professionLabel"] = this.professionLabel;
        data["province"] = this.province;
        data["city"] = this.city;
        data["area"] = this.area;
        data["address"] = this.address;
        data["workUnit"] = this.workUnit;
        data["receiptDate"] = this.receiptDate ? this.receiptDate.toLocaleString() : <any>undefined;
        data["dialysisState"] = this.dialysisState;
        data["dialysisStateLabel"] = this.dialysisStateLabel;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toLocaleString() : <any>undefined;
        data["dialysisCountInit"] = this.dialysisCountInit;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        data["prognosisState"] = this.prognosisState;
        data["prognosisStateLabel"] = this.prognosisStateLabel;
        data["positive"] = this.positive;
        data["positiveLabel"] = this.positiveLabel;
        data["diagnosis"] = this.diagnosis;
        data["diagnosisLabel"] = this.diagnosisLabel;
        data["remark"] = this.remark;
        data["contactRelation"] = this.contactRelation;
        data["contactName"] = this.contactName;
        data["contactPhone"] = this.contactPhone;
        data["contactTel"] = this.contactTel;
        data["contactEmail"] = this.contactEmail;
        data["contactProvince"] = this.contactProvince;
        data["contactCity"] = this.contactCity;
        data["contactArea"] = this.contactArea;
        data["contactAddress"] = this.contactAddress;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["type"] = this.type;
        data["typeLabel"] = this.typeLabel;
        data["firstDialysisVascularAccess"] = this.firstDialysisVascularAccess;
        data["firstDialysisMode"] = this.firstDialysisMode;
        data["firstGfr"] = this.firstGfr;
        data["firstScr"] = this.firstScr;
        return data;
    }
}

/** 从 Excel 导入 患者 表所需的视图类 */
export interface IPatientExcelView {
    /** 院区 */
    hospitalArea?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 性别 显示值 */
    genderLabel?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source?: string | undefined;
    /** 来源 显示值 */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 医保类型 `DIC.PEOPLE.MEDICARETYPE` *城镇职工,城镇居民* */
    medicareType?: string | undefined;
    /** 医保类型 显示值 */
    medicareTypeLabel?: string | undefined;
    /** 医保号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析卡号 */
    cardNumber?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 民族 显示值 */
    nationalityLabel?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件类型 显示值 */
    idTypeLabel?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 血型 `DIC.PEOPLE.BLOODTYPE` *字典:A,B,O,未知* */
    bloodType?: string | undefined;
    /** 血型 显示值 */
    bloodTypeLabel?: string | undefined;
    /** RH `DIC.PEOPLE.RH` */
    rh?: string | undefined;
    /** Rh 显示值 */
    rhLabel?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 本人电话 */
    telephone?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 婚否 显示值 */
    maritalLabel?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 并发症 */
    complication?: string | undefined;
    /** 文化程度 显示值 */
    educationalLevelLabel?: string | undefined;
    /** 职业 `DIC.PEOPLE.PROFESSION` *个体,工人,农民,学生* */
    profession?: string | undefined;
    /** 职业 显示值 */
    professionLabel?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 家庭住址 */
    address?: string | undefined;
    /** 工作单位 */
    workUnit?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: dayjs.Dayjs | undefined;
    /** 透析状态 `DIC.PATIENT.DIALYSIS.STATE` *长期,临时* */
    dialysisState?: string | undefined;
    /** 透析状态 显示值 */
    dialysisStateLabel?: string | undefined;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 转归状态 `DIC.PATIENT.PROGNOSIS.TYPE` *患者编辑界面不做维护,自动管理* */
    prognosisState?: string | undefined;
    /** 转归状态 显示值 */
    prognosisStateLabel?: string | undefined;
    /** 是否阳性0,1 *编辑诊断-传染病时管理这个状态* */
    positive?: string | undefined;
    /** 是否阳性 */
    positiveLabel?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 诊断 显示值 */
    diagnosisLabel?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 与患者关系 */
    contactRelation?: string | undefined;
    /** 联系人姓名 */
    contactName?: string | undefined;
    /** 联系人移动电话 */
    contactPhone?: string | undefined;
    /** 联系人座机 */
    contactTel?: string | undefined;
    /** 联系人邮箱 */
    contactEmail?: string | undefined;
    /** 联系人省级 */
    contactProvince?: string | undefined;
    /** 联系人城市 */
    contactCity?: string | undefined;
    /** 联系人区县 */
    contactArea?: string | undefined;
    /** 联系人地址 */
    contactAddress?: string | undefined;
    /** 检查日期 */
    date?: dayjs.Dayjs | undefined;
    /** 疾病种类 `DIC.DIAGNOSIS.ID.TYPE` *多选，用分号隔开* *丙肝;乙肝;艾滋病;梅毒;结核;其它* */
    type?: string | undefined;
    /** 疾病种类 - 显示值 */
    typeLabel?: string | undefined;
    /** 首次透析时采用的通路类型 */
    firstDialysisVascularAccess?: string | undefined;
    /** 首次透析时采取的方式 */
    firstDialysisMode?: string | undefined;
    /** 首次肾脏代替治疗时肾功能 */
    firstGfr?: string | undefined;
    /** 首次肾脏替代治疗时血肌酐水平 */
    firstScr?: string | undefined;
}

/** Reponse */
export class PatientExcelViewResult implements IPatientExcelViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientExcelView[] | undefined;

    constructor(data?: IPatientExcelViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientExcelView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientExcelViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientExcelViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientExcelViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientExcelView[] | undefined;
}

/** 患者扩展信息 */
export class PatientExtra implements IPatientExtra {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 扩展属性名称 */
    name?: string | undefined;
    /** 扩展属性值 */
    value?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;

    constructor(data?: IPatientExtra) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.name = _data["name"];
            this.value = _data["value"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientExtra {
        data = typeof data === 'object' ? data : {};
        let result = new PatientExtra();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["name"] = this.name;
        data["value"] = this.value;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        return data;
    }
}

/** 患者扩展信息 */
export interface IPatientExtra {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 扩展属性名称 */
    name?: string | undefined;
    /** 扩展属性值 */
    value?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
}

export class PatientExtraEditModel implements IPatientExtraEditModel {
    /** 扩展属性名称 */
    name!: string;
    /** 扩展属性值 */
    value!: string;

    constructor(data?: IPatientExtraEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): PatientExtraEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientExtraEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        return data;
    }
}

export interface IPatientExtraEditModel {
    /** 扩展属性名称 */
    name: string;
    /** 扩展属性值 */
    value: string;
}

export class PatientExtraView implements IPatientExtraView {
    /** 扩展属性名称 */
    name!: string;
    /** 扩展属性值 */
    value!: string;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientExtraView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.value = _data["value"];
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientExtraView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientExtraView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface IPatientExtraView {
    /** 扩展属性名称 */
    name: string;
    /** 扩展属性值 */
    value: string;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientExtraViewResult implements IPatientExtraViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientExtraView[] | undefined;

    constructor(data?: IPatientExtraViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientExtraView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientExtraViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientExtraViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientExtraViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientExtraView[] | undefined;
}

/** Reponse */
export class PatientExtraViewResultEntry implements IPatientExtraViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientExtraView;

    constructor(data?: IPatientExtraViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientExtraView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientExtraViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientExtraViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientExtraViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientExtraView;
}

/** 首次病程 */
export class PatientFirstProgressEditModel implements IPatientFirstProgressEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 病程时间 */
    date!: dayjs.Dayjs;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 出生地 */
    birthplace?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` */
    marital?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 职业 */
    profession?: string | undefined;
    /** 入院日期 */
    admitDate?: dayjs.Dayjs | undefined;
    /** 主诉 */
    selfReported?: string | undefined;
    /** 病史陈述者 */
    representor?: string | undefined;
    /** 现病史 */
    presentIllness?: string | undefined;
    /** 既往史 */
    pastHistory?: string | undefined;
    /** 首次透析 */
    firstDialysis?: string | undefined;
    /** 手术史 */
    surgeryHistory?: string | undefined;
    /** 血透史 */
    hdHistory?: string | undefined;
    /** 腹透史 */
    pdHistory?: string | undefined;
    /** 肿瘤史 */
    tumorHistory?: string | undefined;
    /** 过敏史 */
    allergicHistory?: string | undefined;
    /** 传染病史 */
    infectionHistory?: string | undefined;
    /** 个人史 */
    personalHistory?: string | undefined;
    /** 婚育史 */
    obstericalHistory?: string | undefined;
    /** 家族史 */
    familyHistory?: string | undefined;
    /** 体温 */
    temp?: number | undefined;
    /** 脉搏 *次/分* */
    pulse?: number | undefined;
    /** 呼吸 *次/分* */
    breathe?: number | undefined;
    /** 收缩压 *mmHg* */
    sbp?: number | undefined;
    /** 舒张压 *mmHg* */
    dbp?: number | undefined;
    /** 体格检查描述 */
    physicalDesc?: string | undefined;
    /** 专科情况 */
    specialistDesc?: string | undefined;
    /** 辅助检查描述 */
    auxiliaryDesc?: string | undefined;
    /** 诊断 */
    diagnosisDesc?: string | undefined;
    /** 医生标识 */
    doctorId?: string | undefined;
    /** 医生姓名 */
    doctorName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 入院记录 */
    admissionRecord?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;

    constructor(data?: IPatientFirstProgressEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.nationality = _data["nationality"];
            this.birthplace = _data["birthplace"];
            this.marital = _data["marital"];
            this.age = _data["age"];
            this.profession = _data["profession"];
            this.admitDate = _data["admitDate"] ? dayjs(_data["admitDate"].toString()) : <any>undefined;
            this.selfReported = _data["selfReported"];
            this.representor = _data["representor"];
            this.presentIllness = _data["presentIllness"];
            this.pastHistory = _data["pastHistory"];
            this.firstDialysis = _data["firstDialysis"];
            this.surgeryHistory = _data["surgeryHistory"];
            this.hdHistory = _data["hdHistory"];
            this.pdHistory = _data["pdHistory"];
            this.tumorHistory = _data["tumorHistory"];
            this.allergicHistory = _data["allergicHistory"];
            this.infectionHistory = _data["infectionHistory"];
            this.personalHistory = _data["personalHistory"];
            this.obstericalHistory = _data["obstericalHistory"];
            this.familyHistory = _data["familyHistory"];
            this.temp = _data["temp"];
            this.pulse = _data["pulse"];
            this.breathe = _data["breathe"];
            this.sbp = _data["sbp"];
            this.dbp = _data["dbp"];
            this.physicalDesc = _data["physicalDesc"];
            this.specialistDesc = _data["specialistDesc"];
            this.auxiliaryDesc = _data["auxiliaryDesc"];
            this.diagnosisDesc = _data["diagnosisDesc"];
            this.doctorId = _data["doctorId"];
            this.doctorName = _data["doctorName"];
            this.remark = _data["remark"];
            this.admissionRecord = _data["admissionRecord"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
        }
    }

    static fromJS(data: any): PatientFirstProgressEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientFirstProgressEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["nationality"] = this.nationality;
        data["birthplace"] = this.birthplace;
        data["marital"] = this.marital;
        data["age"] = this.age;
        data["profession"] = this.profession;
        data["admitDate"] = this.admitDate ? this.admitDate.toLocaleString() : <any>undefined;
        data["selfReported"] = this.selfReported;
        data["representor"] = this.representor;
        data["presentIllness"] = this.presentIllness;
        data["pastHistory"] = this.pastHistory;
        data["firstDialysis"] = this.firstDialysis;
        data["surgeryHistory"] = this.surgeryHistory;
        data["hdHistory"] = this.hdHistory;
        data["pdHistory"] = this.pdHistory;
        data["tumorHistory"] = this.tumorHistory;
        data["allergicHistory"] = this.allergicHistory;
        data["infectionHistory"] = this.infectionHistory;
        data["personalHistory"] = this.personalHistory;
        data["obstericalHistory"] = this.obstericalHistory;
        data["familyHistory"] = this.familyHistory;
        data["temp"] = this.temp;
        data["pulse"] = this.pulse;
        data["breathe"] = this.breathe;
        data["sbp"] = this.sbp;
        data["dbp"] = this.dbp;
        data["physicalDesc"] = this.physicalDesc;
        data["specialistDesc"] = this.specialistDesc;
        data["auxiliaryDesc"] = this.auxiliaryDesc;
        data["diagnosisDesc"] = this.diagnosisDesc;
        data["doctorId"] = this.doctorId;
        data["doctorName"] = this.doctorName;
        data["remark"] = this.remark;
        data["admissionRecord"] = this.admissionRecord;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        return data;
    }
}

/** 首次病程 */
export interface IPatientFirstProgressEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 病程时间 */
    date: dayjs.Dayjs;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 出生地 */
    birthplace?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` */
    marital?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 职业 */
    profession?: string | undefined;
    /** 入院日期 */
    admitDate?: dayjs.Dayjs | undefined;
    /** 主诉 */
    selfReported?: string | undefined;
    /** 病史陈述者 */
    representor?: string | undefined;
    /** 现病史 */
    presentIllness?: string | undefined;
    /** 既往史 */
    pastHistory?: string | undefined;
    /** 首次透析 */
    firstDialysis?: string | undefined;
    /** 手术史 */
    surgeryHistory?: string | undefined;
    /** 血透史 */
    hdHistory?: string | undefined;
    /** 腹透史 */
    pdHistory?: string | undefined;
    /** 肿瘤史 */
    tumorHistory?: string | undefined;
    /** 过敏史 */
    allergicHistory?: string | undefined;
    /** 传染病史 */
    infectionHistory?: string | undefined;
    /** 个人史 */
    personalHistory?: string | undefined;
    /** 婚育史 */
    obstericalHistory?: string | undefined;
    /** 家族史 */
    familyHistory?: string | undefined;
    /** 体温 */
    temp?: number | undefined;
    /** 脉搏 *次/分* */
    pulse?: number | undefined;
    /** 呼吸 *次/分* */
    breathe?: number | undefined;
    /** 收缩压 *mmHg* */
    sbp?: number | undefined;
    /** 舒张压 *mmHg* */
    dbp?: number | undefined;
    /** 体格检查描述 */
    physicalDesc?: string | undefined;
    /** 专科情况 */
    specialistDesc?: string | undefined;
    /** 辅助检查描述 */
    auxiliaryDesc?: string | undefined;
    /** 诊断 */
    diagnosisDesc?: string | undefined;
    /** 医生标识 */
    doctorId?: string | undefined;
    /** 医生姓名 */
    doctorName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 入院记录 */
    admissionRecord?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
}

/** 首次病程 */
export class PatientFirstProgressView implements IPatientFirstProgressView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 病程时间 */
    date!: dayjs.Dayjs;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 出生地 */
    birthplace?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` */
    marital?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 职业 */
    profession?: string | undefined;
    /** 入院日期 */
    admitDate?: dayjs.Dayjs | undefined;
    /** 主诉 */
    selfReported?: string | undefined;
    /** 病史陈述者 */
    representor?: string | undefined;
    /** 现病史 */
    presentIllness?: string | undefined;
    /** 既往史 */
    pastHistory?: string | undefined;
    /** 首次透析 */
    firstDialysis?: string | undefined;
    /** 手术史 */
    surgeryHistory?: string | undefined;
    /** 血透史 */
    hdHistory?: string | undefined;
    /** 腹透史 */
    pdHistory?: string | undefined;
    /** 肿瘤史 */
    tumorHistory?: string | undefined;
    /** 过敏史 */
    allergicHistory?: string | undefined;
    /** 传染病史 */
    infectionHistory?: string | undefined;
    /** 个人史 */
    personalHistory?: string | undefined;
    /** 婚育史 */
    obstericalHistory?: string | undefined;
    /** 家族史 */
    familyHistory?: string | undefined;
    /** 体温 */
    temp?: number | undefined;
    /** 脉搏 *次/分* */
    pulse?: number | undefined;
    /** 呼吸 *次/分* */
    breathe?: number | undefined;
    /** 收缩压 *mmHg* */
    sbp?: number | undefined;
    /** 舒张压 *mmHg* */
    dbp?: number | undefined;
    /** 体格检查描述 */
    physicalDesc?: string | undefined;
    /** 专科情况 */
    specialistDesc?: string | undefined;
    /** 辅助检查描述 */
    auxiliaryDesc?: string | undefined;
    /** 诊断 */
    diagnosisDesc?: string | undefined;
    /** 医生标识 */
    doctorId?: string | undefined;
    /** 医生姓名 */
    doctorName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 入院记录 */
    admissionRecord?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 家庭住址 */
    address?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 婚否显示值 */
    maritalLabel?: string | undefined;
    /** 体格检查 */
    body?: string | undefined;
    /** 辅助检查 */
    other?: string | undefined;
    /** 性别 */
    genderName?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 归属透析室名称 */
    sysHospitalAreaName?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 医生电子签名 */
    signature?: string | undefined;

    constructor(data?: IPatientFirstProgressView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.nationality = _data["nationality"];
            this.birthplace = _data["birthplace"];
            this.marital = _data["marital"];
            this.age = _data["age"];
            this.profession = _data["profession"];
            this.admitDate = _data["admitDate"] ? dayjs(_data["admitDate"].toString()) : <any>undefined;
            this.selfReported = _data["selfReported"];
            this.representor = _data["representor"];
            this.presentIllness = _data["presentIllness"];
            this.pastHistory = _data["pastHistory"];
            this.firstDialysis = _data["firstDialysis"];
            this.surgeryHistory = _data["surgeryHistory"];
            this.hdHistory = _data["hdHistory"];
            this.pdHistory = _data["pdHistory"];
            this.tumorHistory = _data["tumorHistory"];
            this.allergicHistory = _data["allergicHistory"];
            this.infectionHistory = _data["infectionHistory"];
            this.personalHistory = _data["personalHistory"];
            this.obstericalHistory = _data["obstericalHistory"];
            this.familyHistory = _data["familyHistory"];
            this.temp = _data["temp"];
            this.pulse = _data["pulse"];
            this.breathe = _data["breathe"];
            this.sbp = _data["sbp"];
            this.dbp = _data["dbp"];
            this.physicalDesc = _data["physicalDesc"];
            this.specialistDesc = _data["specialistDesc"];
            this.auxiliaryDesc = _data["auxiliaryDesc"];
            this.diagnosisDesc = _data["diagnosisDesc"];
            this.doctorId = _data["doctorId"];
            this.doctorName = _data["doctorName"];
            this.remark = _data["remark"];
            this.admissionRecord = _data["admissionRecord"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.address = _data["address"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.maritalLabel = _data["maritalLabel"];
            this.body = _data["body"];
            this.other = _data["other"];
            this.genderName = _data["genderName"];
            this.ward = _data["ward"];
            this.department = _data["department"];
            this.sysHospitalAreaName = _data["sysHospitalAreaName"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.signature = _data["signature"];
        }
    }

    static fromJS(data: any): PatientFirstProgressView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientFirstProgressView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["nationality"] = this.nationality;
        data["birthplace"] = this.birthplace;
        data["marital"] = this.marital;
        data["age"] = this.age;
        data["profession"] = this.profession;
        data["admitDate"] = this.admitDate ? this.admitDate.toLocaleString() : <any>undefined;
        data["selfReported"] = this.selfReported;
        data["representor"] = this.representor;
        data["presentIllness"] = this.presentIllness;
        data["pastHistory"] = this.pastHistory;
        data["firstDialysis"] = this.firstDialysis;
        data["surgeryHistory"] = this.surgeryHistory;
        data["hdHistory"] = this.hdHistory;
        data["pdHistory"] = this.pdHistory;
        data["tumorHistory"] = this.tumorHistory;
        data["allergicHistory"] = this.allergicHistory;
        data["infectionHistory"] = this.infectionHistory;
        data["personalHistory"] = this.personalHistory;
        data["obstericalHistory"] = this.obstericalHistory;
        data["familyHistory"] = this.familyHistory;
        data["temp"] = this.temp;
        data["pulse"] = this.pulse;
        data["breathe"] = this.breathe;
        data["sbp"] = this.sbp;
        data["dbp"] = this.dbp;
        data["physicalDesc"] = this.physicalDesc;
        data["specialistDesc"] = this.specialistDesc;
        data["auxiliaryDesc"] = this.auxiliaryDesc;
        data["diagnosisDesc"] = this.diagnosisDesc;
        data["doctorId"] = this.doctorId;
        data["doctorName"] = this.doctorName;
        data["remark"] = this.remark;
        data["admissionRecord"] = this.admissionRecord;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["address"] = this.address;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["maritalLabel"] = this.maritalLabel;
        data["body"] = this.body;
        data["other"] = this.other;
        data["genderName"] = this.genderName;
        data["ward"] = this.ward;
        data["department"] = this.department;
        data["sysHospitalAreaName"] = this.sysHospitalAreaName;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["signature"] = this.signature;
        return data;
    }
}

/** 首次病程 */
export interface IPatientFirstProgressView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 病程时间 */
    date: dayjs.Dayjs;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 出生地 */
    birthplace?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` */
    marital?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 职业 */
    profession?: string | undefined;
    /** 入院日期 */
    admitDate?: dayjs.Dayjs | undefined;
    /** 主诉 */
    selfReported?: string | undefined;
    /** 病史陈述者 */
    representor?: string | undefined;
    /** 现病史 */
    presentIllness?: string | undefined;
    /** 既往史 */
    pastHistory?: string | undefined;
    /** 首次透析 */
    firstDialysis?: string | undefined;
    /** 手术史 */
    surgeryHistory?: string | undefined;
    /** 血透史 */
    hdHistory?: string | undefined;
    /** 腹透史 */
    pdHistory?: string | undefined;
    /** 肿瘤史 */
    tumorHistory?: string | undefined;
    /** 过敏史 */
    allergicHistory?: string | undefined;
    /** 传染病史 */
    infectionHistory?: string | undefined;
    /** 个人史 */
    personalHistory?: string | undefined;
    /** 婚育史 */
    obstericalHistory?: string | undefined;
    /** 家族史 */
    familyHistory?: string | undefined;
    /** 体温 */
    temp?: number | undefined;
    /** 脉搏 *次/分* */
    pulse?: number | undefined;
    /** 呼吸 *次/分* */
    breathe?: number | undefined;
    /** 收缩压 *mmHg* */
    sbp?: number | undefined;
    /** 舒张压 *mmHg* */
    dbp?: number | undefined;
    /** 体格检查描述 */
    physicalDesc?: string | undefined;
    /** 专科情况 */
    specialistDesc?: string | undefined;
    /** 辅助检查描述 */
    auxiliaryDesc?: string | undefined;
    /** 诊断 */
    diagnosisDesc?: string | undefined;
    /** 医生标识 */
    doctorId?: string | undefined;
    /** 医生姓名 */
    doctorName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 入院记录 */
    admissionRecord?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 家庭住址 */
    address?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 婚否显示值 */
    maritalLabel?: string | undefined;
    /** 体格检查 */
    body?: string | undefined;
    /** 辅助检查 */
    other?: string | undefined;
    /** 性别 */
    genderName?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 归属透析室名称 */
    sysHospitalAreaName?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 医生电子签名 */
    signature?: string | undefined;
}

/** Reponse */
export class PatientFirstProgressViewResult implements IPatientFirstProgressViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientFirstProgressView[] | undefined;

    constructor(data?: IPatientFirstProgressViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientFirstProgressView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientFirstProgressViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientFirstProgressViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientFirstProgressViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientFirstProgressView[] | undefined;
}

/** Reponse */
export class PatientFirstProgressViewResultEntry implements IPatientFirstProgressViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientFirstProgressView;

    constructor(data?: IPatientFirstProgressViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientFirstProgressView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientFirstProgressViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientFirstProgressViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientFirstProgressViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientFirstProgressView;
}

export class PatientHealtheducationLessonEditModel implements IPatientHealtheducationLessonEditModel {
    /** [患者健康宣教记录标识](#患者健康宣教记录) */
    patientHealtheducationRecordId!: string;
    /** 课程名称 */
    name!: string;

    constructor(data?: IPatientHealtheducationLessonEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientHealtheducationRecordId = _data["patientHealtheducationRecordId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): PatientHealtheducationLessonEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHealtheducationLessonEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientHealtheducationRecordId"] = this.patientHealtheducationRecordId;
        data["name"] = this.name;
        return data;
    }
}

export interface IPatientHealtheducationLessonEditModel {
    /** [患者健康宣教记录标识](#患者健康宣教记录) */
    patientHealtheducationRecordId: string;
    /** 课程名称 */
    name: string;
}

export class PatientHealtheducationLessonItemEditModel implements IPatientHealtheducationLessonItemEditModel {
    /** [患者健康宣教记录课程标识](#患者健康宣教记录课程) */
    patientHealtheducationLessonId!: string;
    /** [宣教内容明细标识](#宣教内容明细) */
    repositoryHealtheducationDetailId!: string;
    /** 宣教时长 *内容为视频/音频时，时长不能>最大播放时长，再次打开时从播放时长倒退5s开始播放* */
    duration?: number | undefined;

    constructor(data?: IPatientHealtheducationLessonItemEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientHealtheducationLessonId = _data["patientHealtheducationLessonId"];
            this.repositoryHealtheducationDetailId = _data["repositoryHealtheducationDetailId"];
            this.duration = _data["duration"];
        }
    }

    static fromJS(data: any): PatientHealtheducationLessonItemEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHealtheducationLessonItemEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientHealtheducationLessonId"] = this.patientHealtheducationLessonId;
        data["repositoryHealtheducationDetailId"] = this.repositoryHealtheducationDetailId;
        data["duration"] = this.duration;
        return data;
    }
}

export interface IPatientHealtheducationLessonItemEditModel {
    /** [患者健康宣教记录课程标识](#患者健康宣教记录课程) */
    patientHealtheducationLessonId: string;
    /** [宣教内容明细标识](#宣教内容明细) */
    repositoryHealtheducationDetailId: string;
    /** 宣教时长 *内容为视频/音频时，时长不能>最大播放时长，再次打开时从播放时长倒退5s开始播放* */
    duration?: number | undefined;
}

export class PatientHealtheducationLessonItemView implements IPatientHealtheducationLessonItemView {
    /** [患者健康宣教记录课程标识](#患者健康宣教记录课程) */
    patientHealtheducationLessonId!: string;
    /** [宣教内容明细标识](#宣教内容明细) */
    repositoryHealtheducationDetailId!: string;
    /** 宣教时长 *内容为视频/音频时，时长不能>最大播放时长，再次打开时从播放时长倒退5s开始播放* */
    duration?: number | undefined;
    detail?: RepositoryHealtheducationDetailView;
    /** 标识 */
    id?: string | undefined;
    /** 是否完成0,1 */
    complete?: number;
    /** 最近学习0,1 */
    recentStudy?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientHealtheducationLessonItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientHealtheducationLessonId = _data["patientHealtheducationLessonId"];
            this.repositoryHealtheducationDetailId = _data["repositoryHealtheducationDetailId"];
            this.duration = _data["duration"];
            this.detail = _data["detail"] ? RepositoryHealtheducationDetailView.fromJS(_data["detail"]) : <any>undefined;
            this.id = _data["id"];
            this.complete = _data["complete"];
            this.recentStudy = _data["recentStudy"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientHealtheducationLessonItemView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHealtheducationLessonItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientHealtheducationLessonId"] = this.patientHealtheducationLessonId;
        data["repositoryHealtheducationDetailId"] = this.repositoryHealtheducationDetailId;
        data["duration"] = this.duration;
        data["detail"] = this.detail ? this.detail.toJSON() : <any>undefined;
        data["id"] = this.id;
        data["complete"] = this.complete;
        data["recentStudy"] = this.recentStudy;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface IPatientHealtheducationLessonItemView {
    /** [患者健康宣教记录课程标识](#患者健康宣教记录课程) */
    patientHealtheducationLessonId: string;
    /** [宣教内容明细标识](#宣教内容明细) */
    repositoryHealtheducationDetailId: string;
    /** 宣教时长 *内容为视频/音频时，时长不能>最大播放时长，再次打开时从播放时长倒退5s开始播放* */
    duration?: number | undefined;
    detail?: RepositoryHealtheducationDetailView;
    /** 标识 */
    id?: string | undefined;
    /** 是否完成0,1 */
    complete?: number;
    /** 最近学习0,1 */
    recentStudy?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientHealtheducationLessonItemViewResult implements IPatientHealtheducationLessonItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientHealtheducationLessonItemView[] | undefined;

    constructor(data?: IPatientHealtheducationLessonItemViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientHealtheducationLessonItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientHealtheducationLessonItemViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHealtheducationLessonItemViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientHealtheducationLessonItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientHealtheducationLessonItemView[] | undefined;
}

/** Reponse */
export class PatientHealtheducationLessonItemViewResultEntry implements IPatientHealtheducationLessonItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientHealtheducationLessonItemView;

    constructor(data?: IPatientHealtheducationLessonItemViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientHealtheducationLessonItemView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientHealtheducationLessonItemViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHealtheducationLessonItemViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientHealtheducationLessonItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientHealtheducationLessonItemView;
}

export class PatientHealtheducationLessonView implements IPatientHealtheducationLessonView {
    /** [患者健康宣教记录标识](#患者健康宣教记录) */
    patientHealtheducationRecordId!: string;
    /** 课程名称 */
    name!: string;
    /** 课程列表信息 */
    items?: PatientHealtheducationLessonItemView[] | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 是否完成0,1 */
    complete?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientHealtheducationLessonView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientHealtheducationRecordId = _data["patientHealtheducationRecordId"];
            this.name = _data["name"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PatientHealtheducationLessonItemView.fromJS(item));
            }
            this.id = _data["id"];
            this.complete = _data["complete"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientHealtheducationLessonView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHealtheducationLessonView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientHealtheducationRecordId"] = this.patientHealtheducationRecordId;
        data["name"] = this.name;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["id"] = this.id;
        data["complete"] = this.complete;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface IPatientHealtheducationLessonView {
    /** [患者健康宣教记录标识](#患者健康宣教记录) */
    patientHealtheducationRecordId: string;
    /** 课程名称 */
    name: string;
    /** 课程列表信息 */
    items?: PatientHealtheducationLessonItemView[] | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 是否完成0,1 */
    complete?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientHealtheducationLessonViewResult implements IPatientHealtheducationLessonViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientHealtheducationLessonView[] | undefined;

    constructor(data?: IPatientHealtheducationLessonViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientHealtheducationLessonView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientHealtheducationLessonViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHealtheducationLessonViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientHealtheducationLessonViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientHealtheducationLessonView[] | undefined;
}

/** Reponse */
export class PatientHealtheducationLessonViewResultEntry implements IPatientHealtheducationLessonViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientHealtheducationLessonView;

    constructor(data?: IPatientHealtheducationLessonViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientHealtheducationLessonView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientHealtheducationLessonViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHealtheducationLessonViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientHealtheducationLessonViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientHealtheducationLessonView;
}

export class PatientHealtheducationRecordAddModel implements IPatientHealtheducationRecordAddModel {
    /** 宣教评估表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 主观评价 */
    subjective?: string | undefined;
    /** 客观评价 */
    objective?: string | undefined;
    /** 宣教效果 `DIC.PATIENT.HEALTHEDUCATION.EFFECT` *掌握,熟悉,了解,欠缺* */
    effect?: string | undefined;
    /** 宣教日期 */
    date?: dayjs.Dayjs;
    patientIds?: string[] | undefined;
    /** 从课程模板勾选的课程集合 */
    lessons?: PatientHealtheducationRecordAddModelLesson[] | undefined;

    constructor(data?: IPatientHealtheducationRecordAddModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["dataValue"]) {
                this.dataValue = {} as any;
                for (let key in _data["dataValue"]) {
                    if (_data["dataValue"].hasOwnProperty(key))
                        (<any>this.dataValue)![key] = _data["dataValue"][key];
                }
            }
            this.subjective = _data["subjective"];
            this.objective = _data["objective"];
            this.effect = _data["effect"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            if (Array.isArray(_data["patientIds"])) {
                this.patientIds = [] as any;
                for (let item of _data["patientIds"])
                    this.patientIds!.push(item);
            }
            if (Array.isArray(_data["lessons"])) {
                this.lessons = [] as any;
                for (let item of _data["lessons"])
                    this.lessons!.push(PatientHealtheducationRecordAddModelLesson.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientHealtheducationRecordAddModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHealtheducationRecordAddModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.dataValue) {
            data["dataValue"] = {};
            for (let key in this.dataValue) {
                if (this.dataValue.hasOwnProperty(key))
                    (<any>data["dataValue"])[key] = (<any>this.dataValue)[key];
            }
        }
        data["subjective"] = this.subjective;
        data["objective"] = this.objective;
        data["effect"] = this.effect;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        if (Array.isArray(this.patientIds)) {
            data["patientIds"] = [];
            for (let item of this.patientIds)
                data["patientIds"].push(item);
        }
        if (Array.isArray(this.lessons)) {
            data["lessons"] = [];
            for (let item of this.lessons)
                data["lessons"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPatientHealtheducationRecordAddModel {
    /** 宣教评估表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 主观评价 */
    subjective?: string | undefined;
    /** 客观评价 */
    objective?: string | undefined;
    /** 宣教效果 `DIC.PATIENT.HEALTHEDUCATION.EFFECT` *掌握,熟悉,了解,欠缺* */
    effect?: string | undefined;
    /** 宣教日期 */
    date?: dayjs.Dayjs;
    patientIds?: string[] | undefined;
    /** 从课程模板勾选的课程集合 */
    lessons?: PatientHealtheducationRecordAddModelLesson[] | undefined;
}

export class PatientHealtheducationRecordAddModelLesson implements IPatientHealtheducationRecordAddModelLesson {
    /** 课程名称 */
    healtheducationLessonName?: string | undefined;
    /** 从课程模板勾选的课程列表集合 */
    items?: PatientHealtheducationRecordAddModelLessonItem[] | undefined;

    constructor(data?: IPatientHealtheducationRecordAddModelLesson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.healtheducationLessonName = _data["healtheducationLessonName"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PatientHealtheducationRecordAddModelLessonItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientHealtheducationRecordAddModelLesson {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHealtheducationRecordAddModelLesson();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["healtheducationLessonName"] = this.healtheducationLessonName;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPatientHealtheducationRecordAddModelLesson {
    /** 课程名称 */
    healtheducationLessonName?: string | undefined;
    /** 从课程模板勾选的课程列表集合 */
    items?: PatientHealtheducationRecordAddModelLessonItem[] | undefined;
}

export class PatientHealtheducationRecordAddModelLessonItem implements IPatientHealtheducationRecordAddModelLessonItem {
    /** 宣教资源标识 */
    repositoryHealtheducationDetailId?: string | undefined;

    constructor(data?: IPatientHealtheducationRecordAddModelLessonItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.repositoryHealtheducationDetailId = _data["repositoryHealtheducationDetailId"];
        }
    }

    static fromJS(data: any): PatientHealtheducationRecordAddModelLessonItem {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHealtheducationRecordAddModelLessonItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["repositoryHealtheducationDetailId"] = this.repositoryHealtheducationDetailId;
        return data;
    }
}

export interface IPatientHealtheducationRecordAddModelLessonItem {
    /** 宣教资源标识 */
    repositoryHealtheducationDetailId?: string | undefined;
}

export class PatientHealtheducationRecordEditModel implements IPatientHealtheducationRecordEditModel {
    /** 标识(编辑时必传) */
    id?: string | undefined;
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 宣教日期 */
    date!: dayjs.Dayjs;
    /** 宣教评估表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 主观评价 */
    subjective?: string | undefined;
    /** 客观评价 */
    objective?: string | undefined;
    /** 宣教效果 `DIC.PATIENT.HEALTHEDUCATION.EFFECT` *掌握,熟悉,了解,欠缺* */
    effect?: string | undefined;
    /** 从课程模板勾选的课程集合 */
    lessons?: PatientHealtheducationRecordEditModelLesson[] | undefined;

    constructor(data?: IPatientHealtheducationRecordEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            if (_data["dataValue"]) {
                this.dataValue = {} as any;
                for (let key in _data["dataValue"]) {
                    if (_data["dataValue"].hasOwnProperty(key))
                        (<any>this.dataValue)![key] = _data["dataValue"][key];
                }
            }
            this.subjective = _data["subjective"];
            this.objective = _data["objective"];
            this.effect = _data["effect"];
            if (Array.isArray(_data["lessons"])) {
                this.lessons = [] as any;
                for (let item of _data["lessons"])
                    this.lessons!.push(PatientHealtheducationRecordEditModelLesson.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientHealtheducationRecordEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHealtheducationRecordEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        if (this.dataValue) {
            data["dataValue"] = {};
            for (let key in this.dataValue) {
                if (this.dataValue.hasOwnProperty(key))
                    (<any>data["dataValue"])[key] = (<any>this.dataValue)[key];
            }
        }
        data["subjective"] = this.subjective;
        data["objective"] = this.objective;
        data["effect"] = this.effect;
        if (Array.isArray(this.lessons)) {
            data["lessons"] = [];
            for (let item of this.lessons)
                data["lessons"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPatientHealtheducationRecordEditModel {
    /** 标识(编辑时必传) */
    id?: string | undefined;
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 宣教日期 */
    date: dayjs.Dayjs;
    /** 宣教评估表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 主观评价 */
    subjective?: string | undefined;
    /** 客观评价 */
    objective?: string | undefined;
    /** 宣教效果 `DIC.PATIENT.HEALTHEDUCATION.EFFECT` *掌握,熟悉,了解,欠缺* */
    effect?: string | undefined;
    /** 从课程模板勾选的课程集合 */
    lessons?: PatientHealtheducationRecordEditModelLesson[] | undefined;
}

export class PatientHealtheducationRecordEditModelLesson implements IPatientHealtheducationRecordEditModelLesson {
    /** 课程名称 */
    healtheducationLessonName?: string | undefined;
    /** 从课程模板勾选的课程列表集合 */
    items?: PatientHealtheducationRecordEditModelLessonItem[] | undefined;

    constructor(data?: IPatientHealtheducationRecordEditModelLesson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.healtheducationLessonName = _data["healtheducationLessonName"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PatientHealtheducationRecordEditModelLessonItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientHealtheducationRecordEditModelLesson {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHealtheducationRecordEditModelLesson();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["healtheducationLessonName"] = this.healtheducationLessonName;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPatientHealtheducationRecordEditModelLesson {
    /** 课程名称 */
    healtheducationLessonName?: string | undefined;
    /** 从课程模板勾选的课程列表集合 */
    items?: PatientHealtheducationRecordEditModelLessonItem[] | undefined;
}

export class PatientHealtheducationRecordEditModelLessonItem implements IPatientHealtheducationRecordEditModelLessonItem {
    /** 宣教资源标识 */
    repositoryHealtheducationDetailId?: string | undefined;

    constructor(data?: IPatientHealtheducationRecordEditModelLessonItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.repositoryHealtheducationDetailId = _data["repositoryHealtheducationDetailId"];
        }
    }

    static fromJS(data: any): PatientHealtheducationRecordEditModelLessonItem {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHealtheducationRecordEditModelLessonItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["repositoryHealtheducationDetailId"] = this.repositoryHealtheducationDetailId;
        return data;
    }
}

export interface IPatientHealtheducationRecordEditModelLessonItem {
    /** 宣教资源标识 */
    repositoryHealtheducationDetailId?: string | undefined;
}

export class PatientHealtheducationRecordView implements IPatientHealtheducationRecordView {
    /** 标识(编辑时必传) */
    id?: string | undefined;
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 宣教日期 */
    date!: dayjs.Dayjs;
    /** 宣教评估表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 主观评价 */
    subjective?: string | undefined;
    /** 客观评价 */
    objective?: string | undefined;
    /** 宣教效果 `DIC.PATIENT.HEALTHEDUCATION.EFFECT` *掌握,熟悉,了解,欠缺* */
    effect?: string | undefined;
    /** 宣教内容 */
    content?: string | undefined;
    /** 宣教效果显示值 */
    effectLabel?: string | undefined;
    /** [宣教评估模板标识](表单模板Id) */
    tmplFormId?: string | undefined;
    /** 宣教评估表单结构 */
    data?: { [key: string]: string; } | undefined;
    /** 是否完成0,1 - 记录下，所有课程均已完成，标注为已完成 */
    complete?: number;
    /** 是否评估0,1 */
    assement?: number;
    /** 课程信息 */
    lessons?: PatientHealtheducationLessonView[] | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patientName?: string | undefined;

    constructor(data?: IPatientHealtheducationRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            if (_data["dataValue"]) {
                this.dataValue = {} as any;
                for (let key in _data["dataValue"]) {
                    if (_data["dataValue"].hasOwnProperty(key))
                        (<any>this.dataValue)![key] = _data["dataValue"][key];
                }
            }
            this.subjective = _data["subjective"];
            this.objective = _data["objective"];
            this.effect = _data["effect"];
            this.content = _data["content"];
            this.effectLabel = _data["effectLabel"];
            this.tmplFormId = _data["tmplFormId"];
            if (_data["data"]) {
                this.data = {} as any;
                for (let key in _data["data"]) {
                    if (_data["data"].hasOwnProperty(key))
                        (<any>this.data)![key] = _data["data"][key];
                }
            }
            this.complete = _data["complete"];
            this.assement = _data["assement"];
            if (Array.isArray(_data["lessons"])) {
                this.lessons = [] as any;
                for (let item of _data["lessons"])
                    this.lessons!.push(PatientHealtheducationLessonView.fromJS(item));
            }
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patientName = _data["patientName"];
        }
    }

    static fromJS(data: any): PatientHealtheducationRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHealtheducationRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        if (this.dataValue) {
            data["dataValue"] = {};
            for (let key in this.dataValue) {
                if (this.dataValue.hasOwnProperty(key))
                    (<any>data["dataValue"])[key] = (<any>this.dataValue)[key];
            }
        }
        data["subjective"] = this.subjective;
        data["objective"] = this.objective;
        data["effect"] = this.effect;
        data["content"] = this.content;
        data["effectLabel"] = this.effectLabel;
        data["tmplFormId"] = this.tmplFormId;
        if (this.data) {
            data["data"] = {};
            for (let key in this.data) {
                if (this.data.hasOwnProperty(key))
                    (<any>data["data"])[key] = (<any>this.data)[key];
            }
        }
        data["complete"] = this.complete;
        data["assement"] = this.assement;
        if (Array.isArray(this.lessons)) {
            data["lessons"] = [];
            for (let item of this.lessons)
                data["lessons"].push(item.toJSON());
        }
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patientName"] = this.patientName;
        return data;
    }
}

export interface IPatientHealtheducationRecordView {
    /** 标识(编辑时必传) */
    id?: string | undefined;
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 宣教日期 */
    date: dayjs.Dayjs;
    /** 宣教评估表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 主观评价 */
    subjective?: string | undefined;
    /** 客观评价 */
    objective?: string | undefined;
    /** 宣教效果 `DIC.PATIENT.HEALTHEDUCATION.EFFECT` *掌握,熟悉,了解,欠缺* */
    effect?: string | undefined;
    /** 宣教内容 */
    content?: string | undefined;
    /** 宣教效果显示值 */
    effectLabel?: string | undefined;
    /** [宣教评估模板标识](表单模板Id) */
    tmplFormId?: string | undefined;
    /** 宣教评估表单结构 */
    data?: { [key: string]: string; } | undefined;
    /** 是否完成0,1 - 记录下，所有课程均已完成，标注为已完成 */
    complete?: number;
    /** 是否评估0,1 */
    assement?: number;
    /** 课程信息 */
    lessons?: PatientHealtheducationLessonView[] | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patientName?: string | undefined;
}

/** Reponse */
export class PatientHealtheducationRecordViewResult implements IPatientHealtheducationRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientHealtheducationRecordView[] | undefined;

    constructor(data?: IPatientHealtheducationRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientHealtheducationRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientHealtheducationRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHealtheducationRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientHealtheducationRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientHealtheducationRecordView[] | undefined;
}

/** Reponse */
export class PatientHealtheducationRecordViewResultEntry implements IPatientHealtheducationRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientHealtheducationRecordView;

    constructor(data?: IPatientHealtheducationRecordViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientHealtheducationRecordView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientHealtheducationRecordViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHealtheducationRecordViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientHealtheducationRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientHealtheducationRecordView;
}

/** 透析充分性 */
export class PatientHemodialysisAdequacy implements IPatientHemodialysisAdequacy {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 检查日期 */
    date?: dayjs.Dayjs;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 透后体重 *kg* */
    weight?: number;
    /** BMI *自动计算* */
    bmi?: number | undefined;
    /** 透前尿素 *mmol/L Blood Urea Nitrogen* */
    bunBefore?: number;
    /** 透后尿素 *mmol/L Blood Urea Nitrogen* */
    bunAfter?: number;
    /** 每次透析时间 *分钟/次* */
    dialysisTime?: number;
    /** 每次透析超滤量 *L* */
    ufv?: number;
    /** spKt/V *自动计算* */
    ktv?: number | undefined;
    /** URR *% 自动计算* */
    urr?: number | undefined;
    /** 患者情况 */
    patientCondition?: string | undefined;
    /** 干体重 *kg* */
    bestWeight?: number | undefined;
    /** 干体重是否达标0,1 */
    bestWeightCompliance?: number | undefined;
    /** 是否手工录入0,1 */
    manualFlag?: number | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;

    constructor(data?: IPatientHemodialysisAdequacy) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.height = _data["height"];
            this.weight = _data["weight"];
            this.bmi = _data["bmi"];
            this.bunBefore = _data["bunBefore"];
            this.bunAfter = _data["bunAfter"];
            this.dialysisTime = _data["dialysisTime"];
            this.ufv = _data["ufv"];
            this.ktv = _data["ktv"];
            this.urr = _data["urr"];
            this.patientCondition = _data["patientCondition"];
            this.bestWeight = _data["bestWeight"];
            this.bestWeightCompliance = _data["bestWeightCompliance"];
            this.manualFlag = _data["manualFlag"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientHemodialysisAdequacy {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHemodialysisAdequacy();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["height"] = this.height;
        data["weight"] = this.weight;
        data["bmi"] = this.bmi;
        data["bunBefore"] = this.bunBefore;
        data["bunAfter"] = this.bunAfter;
        data["dialysisTime"] = this.dialysisTime;
        data["ufv"] = this.ufv;
        data["ktv"] = this.ktv;
        data["urr"] = this.urr;
        data["patientCondition"] = this.patientCondition;
        data["bestWeight"] = this.bestWeight;
        data["bestWeightCompliance"] = this.bestWeightCompliance;
        data["manualFlag"] = this.manualFlag;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析充分性 */
export interface IPatientHemodialysisAdequacy {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 检查日期 */
    date?: dayjs.Dayjs;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 透后体重 *kg* */
    weight?: number;
    /** BMI *自动计算* */
    bmi?: number | undefined;
    /** 透前尿素 *mmol/L Blood Urea Nitrogen* */
    bunBefore?: number;
    /** 透后尿素 *mmol/L Blood Urea Nitrogen* */
    bunAfter?: number;
    /** 每次透析时间 *分钟/次* */
    dialysisTime?: number;
    /** 每次透析超滤量 *L* */
    ufv?: number;
    /** spKt/V *自动计算* */
    ktv?: number | undefined;
    /** URR *% 自动计算* */
    urr?: number | undefined;
    /** 患者情况 */
    patientCondition?: string | undefined;
    /** 干体重 *kg* */
    bestWeight?: number | undefined;
    /** 干体重是否达标0,1 */
    bestWeightCompliance?: number | undefined;
    /** 是否手工录入0,1 */
    manualFlag?: number | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
}

/** 透析充分性 */
export class PatientHemodialysisAdequacyEditModel implements IPatientHemodialysisAdequacyEditModel {
    /** [患者标识](#患者信息) */
    patientId?: string | undefined;
    /** 检查日期 */
    date?: dayjs.Dayjs;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 透后体重 *kg* */
    weight?: number;
    /** BMI *自动计算* */
    bmi?: number | undefined;
    /** 透前尿素 *mmol/L Blood Urea Nitrogen* */
    bunBefore?: number;
    /** 透后尿素 *mmol/L Blood Urea Nitrogen* */
    bunAfter?: number;
    /** 每次透析时间 *分钟/次* */
    dialysisTime?: number;
    /** 每次透析超滤量 *L* */
    ufv?: number;
    /** spKt/V *自动计算* */
    ktv?: number | undefined;
    /** URR *% 自动计算* */
    urr?: number | undefined;
    /** 患者情况 */
    patientCondition?: string | undefined;
    /** 干体重 *kg* */
    bestWeight?: number | undefined;
    /** 干体重是否达标0,1 */
    bestWeightCompliance?: number | undefined;
    /** 是否手工录入0,1 */
    manualFlag?: number | undefined;

    constructor(data?: IPatientHemodialysisAdequacyEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.height = _data["height"];
            this.weight = _data["weight"];
            this.bmi = _data["bmi"];
            this.bunBefore = _data["bunBefore"];
            this.bunAfter = _data["bunAfter"];
            this.dialysisTime = _data["dialysisTime"];
            this.ufv = _data["ufv"];
            this.ktv = _data["ktv"];
            this.urr = _data["urr"];
            this.patientCondition = _data["patientCondition"];
            this.bestWeight = _data["bestWeight"];
            this.bestWeightCompliance = _data["bestWeightCompliance"];
            this.manualFlag = _data["manualFlag"];
        }
    }

    static fromJS(data: any): PatientHemodialysisAdequacyEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHemodialysisAdequacyEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["height"] = this.height;
        data["weight"] = this.weight;
        data["bmi"] = this.bmi;
        data["bunBefore"] = this.bunBefore;
        data["bunAfter"] = this.bunAfter;
        data["dialysisTime"] = this.dialysisTime;
        data["ufv"] = this.ufv;
        data["ktv"] = this.ktv;
        data["urr"] = this.urr;
        data["patientCondition"] = this.patientCondition;
        data["bestWeight"] = this.bestWeight;
        data["bestWeightCompliance"] = this.bestWeightCompliance;
        data["manualFlag"] = this.manualFlag;
        return data;
    }
}

/** 透析充分性 */
export interface IPatientHemodialysisAdequacyEditModel {
    /** [患者标识](#患者信息) */
    patientId?: string | undefined;
    /** 检查日期 */
    date?: dayjs.Dayjs;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 透后体重 *kg* */
    weight?: number;
    /** BMI *自动计算* */
    bmi?: number | undefined;
    /** 透前尿素 *mmol/L Blood Urea Nitrogen* */
    bunBefore?: number;
    /** 透后尿素 *mmol/L Blood Urea Nitrogen* */
    bunAfter?: number;
    /** 每次透析时间 *分钟/次* */
    dialysisTime?: number;
    /** 每次透析超滤量 *L* */
    ufv?: number;
    /** spKt/V *自动计算* */
    ktv?: number | undefined;
    /** URR *% 自动计算* */
    urr?: number | undefined;
    /** 患者情况 */
    patientCondition?: string | undefined;
    /** 干体重 *kg* */
    bestWeight?: number | undefined;
    /** 干体重是否达标0,1 */
    bestWeightCompliance?: number | undefined;
    /** 是否手工录入0,1 */
    manualFlag?: number | undefined;
}

/** Reponse */
export class PatientHemodialysisAdequacyResultEntry implements IPatientHemodialysisAdequacyResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientHemodialysisAdequacy;

    constructor(data?: IPatientHemodialysisAdequacyResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientHemodialysisAdequacy.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientHemodialysisAdequacyResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHemodialysisAdequacyResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientHemodialysisAdequacyResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientHemodialysisAdequacy;
}

/** 透析充分性 */
export class PatientHemodialysisAdequacyView implements IPatientHemodialysisAdequacyView {
    /** [患者标识](#患者信息) */
    patientId?: string | undefined;
    /** 检查日期 */
    date?: dayjs.Dayjs;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 透后体重 *kg* */
    weight?: number;
    /** BMI *自动计算* */
    bmi?: number | undefined;
    /** 透前尿素 *mmol/L Blood Urea Nitrogen* */
    bunBefore?: number;
    /** 透后尿素 *mmol/L Blood Urea Nitrogen* */
    bunAfter?: number;
    /** 每次透析时间 *分钟/次* */
    dialysisTime?: number;
    /** 每次透析超滤量 *L* */
    ufv?: number;
    /** spKt/V *自动计算* */
    ktv?: number | undefined;
    /** URR *% 自动计算* */
    urr?: number | undefined;
    /** 患者情况 */
    patientCondition?: string | undefined;
    /** 干体重 *kg* */
    bestWeight?: number | undefined;
    /** 干体重是否达标0,1 */
    bestWeightCompliance?: number | undefined;
    /** 是否手工录入0,1 */
    manualFlag?: number | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientHemodialysisAdequacyView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.height = _data["height"];
            this.weight = _data["weight"];
            this.bmi = _data["bmi"];
            this.bunBefore = _data["bunBefore"];
            this.bunAfter = _data["bunAfter"];
            this.dialysisTime = _data["dialysisTime"];
            this.ufv = _data["ufv"];
            this.ktv = _data["ktv"];
            this.urr = _data["urr"];
            this.patientCondition = _data["patientCondition"];
            this.bestWeight = _data["bestWeight"];
            this.bestWeightCompliance = _data["bestWeightCompliance"];
            this.manualFlag = _data["manualFlag"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientHemodialysisAdequacyView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHemodialysisAdequacyView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["height"] = this.height;
        data["weight"] = this.weight;
        data["bmi"] = this.bmi;
        data["bunBefore"] = this.bunBefore;
        data["bunAfter"] = this.bunAfter;
        data["dialysisTime"] = this.dialysisTime;
        data["ufv"] = this.ufv;
        data["ktv"] = this.ktv;
        data["urr"] = this.urr;
        data["patientCondition"] = this.patientCondition;
        data["bestWeight"] = this.bestWeight;
        data["bestWeightCompliance"] = this.bestWeightCompliance;
        data["manualFlag"] = this.manualFlag;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 透析充分性 */
export interface IPatientHemodialysisAdequacyView {
    /** [患者标识](#患者信息) */
    patientId?: string | undefined;
    /** 检查日期 */
    date?: dayjs.Dayjs;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 透后体重 *kg* */
    weight?: number;
    /** BMI *自动计算* */
    bmi?: number | undefined;
    /** 透前尿素 *mmol/L Blood Urea Nitrogen* */
    bunBefore?: number;
    /** 透后尿素 *mmol/L Blood Urea Nitrogen* */
    bunAfter?: number;
    /** 每次透析时间 *分钟/次* */
    dialysisTime?: number;
    /** 每次透析超滤量 *L* */
    ufv?: number;
    /** spKt/V *自动计算* */
    ktv?: number | undefined;
    /** URR *% 自动计算* */
    urr?: number | undefined;
    /** 患者情况 */
    patientCondition?: string | undefined;
    /** 干体重 *kg* */
    bestWeight?: number | undefined;
    /** 干体重是否达标0,1 */
    bestWeightCompliance?: number | undefined;
    /** 是否手工录入0,1 */
    manualFlag?: number | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientHemodialysisAdequacyViewResult implements IPatientHemodialysisAdequacyViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientHemodialysisAdequacyView[] | undefined;

    constructor(data?: IPatientHemodialysisAdequacyViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientHemodialysisAdequacyView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientHemodialysisAdequacyViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHemodialysisAdequacyViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientHemodialysisAdequacyViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientHemodialysisAdequacyView[] | undefined;
}

/** 患者院区 */
export class PatientHospitalEditModel implements IPatientHospitalEditModel {
    /** [患者信息](#患者信息) */
    patientId!: string;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IPatientHospitalEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): PatientHospitalEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHospitalEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["remark"] = this.remark;
        return data;
    }
}

/** 患者院区 */
export interface IPatientHospitalEditModel {
    /** [患者信息](#患者信息) */
    patientId: string;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId: string;
    /** 备注 */
    remark?: string | undefined;
}

/** 患者住院号 */
export class PatientHospitalNumberInEditModel implements IPatientHospitalNumberInEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 住院号 */
    hospitalNumberIn!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;

    constructor(data?: IPatientHospitalNumberInEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): PatientHospitalNumberInEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHospitalNumberInEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        return data;
    }
}

/** 患者住院号 */
export interface IPatientHospitalNumberInEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 住院号 */
    hospitalNumberIn: string;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
}

/** 患者住院号 */
export class PatientHospitalNumberInView implements IPatientHospitalNumberInView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 住院号 */
    hospitalNumberIn!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientHospitalNumberInView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientHospitalNumberInView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHospitalNumberInView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 患者住院号 */
export interface IPatientHospitalNumberInView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 住院号 */
    hospitalNumberIn: string;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientHospitalNumberInViewResult implements IPatientHospitalNumberInViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientHospitalNumberInView[] | undefined;

    constructor(data?: IPatientHospitalNumberInViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientHospitalNumberInView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientHospitalNumberInViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHospitalNumberInViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientHospitalNumberInViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientHospitalNumberInView[] | undefined;
}

/** Reponse */
export class PatientHospitalNumberInViewResultEntry implements IPatientHospitalNumberInViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientHospitalNumberInView;

    constructor(data?: IPatientHospitalNumberInViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientHospitalNumberInView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientHospitalNumberInViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHospitalNumberInViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientHospitalNumberInViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientHospitalNumberInView;
}

/** 患者门诊号 */
export class PatientHospitalNumberOutEditModel implements IPatientHospitalNumberOutEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 门诊号 */
    hospitalNumberOut!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;

    constructor(data?: IPatientHospitalNumberOutEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): PatientHospitalNumberOutEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHospitalNumberOutEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        return data;
    }
}

/** 患者门诊号 */
export interface IPatientHospitalNumberOutEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 门诊号 */
    hospitalNumberOut: string;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
}

/** 患者门诊号 */
export class PatientHospitalNumberOutView implements IPatientHospitalNumberOutView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 门诊号 */
    hospitalNumberOut!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientHospitalNumberOutView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientHospitalNumberOutView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHospitalNumberOutView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 患者门诊号 */
export interface IPatientHospitalNumberOutView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 门诊号 */
    hospitalNumberOut: string;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientHospitalNumberOutViewResult implements IPatientHospitalNumberOutViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientHospitalNumberOutView[] | undefined;

    constructor(data?: IPatientHospitalNumberOutViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientHospitalNumberOutView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientHospitalNumberOutViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHospitalNumberOutViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientHospitalNumberOutViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientHospitalNumberOutView[] | undefined;
}

/** Reponse */
export class PatientHospitalNumberOutViewResultEntry implements IPatientHospitalNumberOutViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientHospitalNumberOutView;

    constructor(data?: IPatientHospitalNumberOutViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientHospitalNumberOutView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientHospitalNumberOutViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHospitalNumberOutViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientHospitalNumberOutViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientHospitalNumberOutView;
}

/** 患者院区 */
export class PatientHospitalView implements IPatientHospitalView {
    /** [患者信息](#患者信息) */
    patientId!: string;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientHospitalView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientHospitalView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHospitalView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 患者院区 */
export interface IPatientHospitalView {
    /** [患者信息](#患者信息) */
    patientId: string;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId: string;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientHospitalViewResult implements IPatientHospitalViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientHospitalView[] | undefined;

    constructor(data?: IPatientHospitalViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientHospitalView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientHospitalViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHospitalViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientHospitalViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientHospitalView[] | undefined;
}

/** Reponse */
export class PatientHospitalViewResultEntry implements IPatientHospitalViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientHospitalView;

    constructor(data?: IPatientHospitalViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientHospitalView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientHospitalViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientHospitalViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientHospitalViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientHospitalView;
}

/** 患者感染事件监测表 */
export class PatientInfectEventMonitorEditModel implements IPatientInfectEventMonitorEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 年龄 */
    age?: string | undefined;
    /** 门诊住院号 */
    hospitalOutInNumber?: string | undefined;
    /** 联系电话 */
    phoneNumber?: string | undefined;
    /** 监测时间 */
    date!: dayjs.Dayjs;
    /** 血管通路类型 */
    vascularAccessType?: string | undefined;
    /** 导管穿刺部位 */
    catheterPunctureSite?: string | undefined;
    /** 插管日期 */
    spileDate?: dayjs.Dayjs | undefined;
    /** 全身使用抗菌药物 */
    totalBodyAntimicrobialDrug!: number;
    /** 抗菌药物名称 */
    antimicrobialDrugName?: string | undefined;
    /** 开始使用药物日期 */
    startDrugTime?: dayjs.Dayjs | undefined;
    /** 抗菌药物原因 */
    antimicrobialDrugReason?: string | undefined;
    /** 血培养阳性 */
    bloodCulturePositive!: number;
    /** 血培养送检日期 */
    bloodCultureSendTime?: dayjs.Dayjs | undefined;
    /** 血培养病原体 */
    bloodCulturePathogene?: string | undefined;
    /** 血培养来源 */
    bloodCultureSource?: string | undefined;
    /** 血管通路脓液肿胀加剧 */
    vascularAccessSwellingPus!: number;
    /** 血管通路部位 */
    vascularAccessPart?: string | undefined;
    /** 血管通路临床表现 */
    vascularAccessRepresent?: string | undefined;
    /** 血管通路处理 */
    vascularAccessHandle?: string | undefined;
    /** 血管通路处理其他 */
    vascularAccessHandleOther?: string | undefined;
    /** 感染结局 */
    infectOutcome?: string | undefined;
    /** 重新插管类型 */
    reintubationType?: string | undefined;
    /** 感染事件诊断 */
    infectEventDiagnosis!: string;
    /** 患者姓名 */
    patientName!: string;
    /** 性别 */
    gender?: string | undefined;
    /** 来源 */
    source?: string | undefined;

    constructor(data?: IPatientInfectEventMonitorEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.age = _data["age"];
            this.hospitalOutInNumber = _data["hospitalOutInNumber"];
            this.phoneNumber = _data["phoneNumber"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.vascularAccessType = _data["vascularAccessType"];
            this.catheterPunctureSite = _data["catheterPunctureSite"];
            this.spileDate = _data["spileDate"] ? dayjs(_data["spileDate"].toString()) : <any>undefined;
            this.totalBodyAntimicrobialDrug = _data["totalBodyAntimicrobialDrug"];
            this.antimicrobialDrugName = _data["antimicrobialDrugName"];
            this.startDrugTime = _data["startDrugTime"] ? dayjs(_data["startDrugTime"].toString()) : <any>undefined;
            this.antimicrobialDrugReason = _data["antimicrobialDrugReason"];
            this.bloodCulturePositive = _data["bloodCulturePositive"];
            this.bloodCultureSendTime = _data["bloodCultureSendTime"] ? dayjs(_data["bloodCultureSendTime"].toString()) : <any>undefined;
            this.bloodCulturePathogene = _data["bloodCulturePathogene"];
            this.bloodCultureSource = _data["bloodCultureSource"];
            this.vascularAccessSwellingPus = _data["vascularAccessSwellingPus"];
            this.vascularAccessPart = _data["vascularAccessPart"];
            this.vascularAccessRepresent = _data["vascularAccessRepresent"];
            this.vascularAccessHandle = _data["vascularAccessHandle"];
            this.vascularAccessHandleOther = _data["vascularAccessHandleOther"];
            this.infectOutcome = _data["infectOutcome"];
            this.reintubationType = _data["reintubationType"];
            this.infectEventDiagnosis = _data["infectEventDiagnosis"];
            this.patientName = _data["patientName"];
            this.gender = _data["gender"];
            this.source = _data["source"];
        }
    }

    static fromJS(data: any): PatientInfectEventMonitorEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientInfectEventMonitorEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["age"] = this.age;
        data["hospitalOutInNumber"] = this.hospitalOutInNumber;
        data["phoneNumber"] = this.phoneNumber;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["vascularAccessType"] = this.vascularAccessType;
        data["catheterPunctureSite"] = this.catheterPunctureSite;
        data["spileDate"] = this.spileDate ? this.spileDate.toLocaleString() : <any>undefined;
        data["totalBodyAntimicrobialDrug"] = this.totalBodyAntimicrobialDrug;
        data["antimicrobialDrugName"] = this.antimicrobialDrugName;
        data["startDrugTime"] = this.startDrugTime ? this.startDrugTime.toLocaleString() : <any>undefined;
        data["antimicrobialDrugReason"] = this.antimicrobialDrugReason;
        data["bloodCulturePositive"] = this.bloodCulturePositive;
        data["bloodCultureSendTime"] = this.bloodCultureSendTime ? this.bloodCultureSendTime.toLocaleString() : <any>undefined;
        data["bloodCulturePathogene"] = this.bloodCulturePathogene;
        data["bloodCultureSource"] = this.bloodCultureSource;
        data["vascularAccessSwellingPus"] = this.vascularAccessSwellingPus;
        data["vascularAccessPart"] = this.vascularAccessPart;
        data["vascularAccessRepresent"] = this.vascularAccessRepresent;
        data["vascularAccessHandle"] = this.vascularAccessHandle;
        data["vascularAccessHandleOther"] = this.vascularAccessHandleOther;
        data["infectOutcome"] = this.infectOutcome;
        data["reintubationType"] = this.reintubationType;
        data["infectEventDiagnosis"] = this.infectEventDiagnosis;
        data["patientName"] = this.patientName;
        data["gender"] = this.gender;
        data["source"] = this.source;
        return data;
    }
}

/** 患者感染事件监测表 */
export interface IPatientInfectEventMonitorEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 年龄 */
    age?: string | undefined;
    /** 门诊住院号 */
    hospitalOutInNumber?: string | undefined;
    /** 联系电话 */
    phoneNumber?: string | undefined;
    /** 监测时间 */
    date: dayjs.Dayjs;
    /** 血管通路类型 */
    vascularAccessType?: string | undefined;
    /** 导管穿刺部位 */
    catheterPunctureSite?: string | undefined;
    /** 插管日期 */
    spileDate?: dayjs.Dayjs | undefined;
    /** 全身使用抗菌药物 */
    totalBodyAntimicrobialDrug: number;
    /** 抗菌药物名称 */
    antimicrobialDrugName?: string | undefined;
    /** 开始使用药物日期 */
    startDrugTime?: dayjs.Dayjs | undefined;
    /** 抗菌药物原因 */
    antimicrobialDrugReason?: string | undefined;
    /** 血培养阳性 */
    bloodCulturePositive: number;
    /** 血培养送检日期 */
    bloodCultureSendTime?: dayjs.Dayjs | undefined;
    /** 血培养病原体 */
    bloodCulturePathogene?: string | undefined;
    /** 血培养来源 */
    bloodCultureSource?: string | undefined;
    /** 血管通路脓液肿胀加剧 */
    vascularAccessSwellingPus: number;
    /** 血管通路部位 */
    vascularAccessPart?: string | undefined;
    /** 血管通路临床表现 */
    vascularAccessRepresent?: string | undefined;
    /** 血管通路处理 */
    vascularAccessHandle?: string | undefined;
    /** 血管通路处理其他 */
    vascularAccessHandleOther?: string | undefined;
    /** 感染结局 */
    infectOutcome?: string | undefined;
    /** 重新插管类型 */
    reintubationType?: string | undefined;
    /** 感染事件诊断 */
    infectEventDiagnosis: string;
    /** 患者姓名 */
    patientName: string;
    /** 性别 */
    gender?: string | undefined;
    /** 来源 */
    source?: string | undefined;
}

/** 患者感染事件监测表 */
export class PatientInfectEventMonitorView implements IPatientInfectEventMonitorView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 年龄 */
    age?: string | undefined;
    /** 门诊住院号 */
    hospitalOutInNumber?: string | undefined;
    /** 联系电话 */
    phoneNumber?: string | undefined;
    /** 监测时间 */
    date!: dayjs.Dayjs;
    /** 血管通路类型 */
    vascularAccessType?: string | undefined;
    /** 导管穿刺部位 */
    catheterPunctureSite?: string | undefined;
    /** 插管日期 */
    spileDate?: dayjs.Dayjs | undefined;
    /** 全身使用抗菌药物 */
    totalBodyAntimicrobialDrug!: number;
    /** 抗菌药物名称 */
    antimicrobialDrugName?: string | undefined;
    /** 开始使用药物日期 */
    startDrugTime?: dayjs.Dayjs | undefined;
    /** 抗菌药物原因 */
    antimicrobialDrugReason?: string | undefined;
    /** 血培养阳性 */
    bloodCulturePositive!: number;
    /** 血培养送检日期 */
    bloodCultureSendTime?: dayjs.Dayjs | undefined;
    /** 血培养病原体 */
    bloodCulturePathogene?: string | undefined;
    /** 血培养来源 */
    bloodCultureSource?: string | undefined;
    /** 血管通路脓液肿胀加剧 */
    vascularAccessSwellingPus!: number;
    /** 血管通路部位 */
    vascularAccessPart?: string | undefined;
    /** 血管通路临床表现 */
    vascularAccessRepresent?: string | undefined;
    /** 血管通路处理 */
    vascularAccessHandle?: string | undefined;
    /** 血管通路处理其他 */
    vascularAccessHandleOther?: string | undefined;
    /** 感染结局 */
    infectOutcome?: string | undefined;
    /** 重新插管类型 */
    reintubationType?: string | undefined;
    /** 感染事件诊断 */
    infectEventDiagnosis!: string;
    /** 患者姓名 */
    patientName!: string;
    /** 性别 */
    gender?: string | undefined;
    /** 来源 */
    source?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientInfectEventMonitorView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.age = _data["age"];
            this.hospitalOutInNumber = _data["hospitalOutInNumber"];
            this.phoneNumber = _data["phoneNumber"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.vascularAccessType = _data["vascularAccessType"];
            this.catheterPunctureSite = _data["catheterPunctureSite"];
            this.spileDate = _data["spileDate"] ? dayjs(_data["spileDate"].toString()) : <any>undefined;
            this.totalBodyAntimicrobialDrug = _data["totalBodyAntimicrobialDrug"];
            this.antimicrobialDrugName = _data["antimicrobialDrugName"];
            this.startDrugTime = _data["startDrugTime"] ? dayjs(_data["startDrugTime"].toString()) : <any>undefined;
            this.antimicrobialDrugReason = _data["antimicrobialDrugReason"];
            this.bloodCulturePositive = _data["bloodCulturePositive"];
            this.bloodCultureSendTime = _data["bloodCultureSendTime"] ? dayjs(_data["bloodCultureSendTime"].toString()) : <any>undefined;
            this.bloodCulturePathogene = _data["bloodCulturePathogene"];
            this.bloodCultureSource = _data["bloodCultureSource"];
            this.vascularAccessSwellingPus = _data["vascularAccessSwellingPus"];
            this.vascularAccessPart = _data["vascularAccessPart"];
            this.vascularAccessRepresent = _data["vascularAccessRepresent"];
            this.vascularAccessHandle = _data["vascularAccessHandle"];
            this.vascularAccessHandleOther = _data["vascularAccessHandleOther"];
            this.infectOutcome = _data["infectOutcome"];
            this.reintubationType = _data["reintubationType"];
            this.infectEventDiagnosis = _data["infectEventDiagnosis"];
            this.patientName = _data["patientName"];
            this.gender = _data["gender"];
            this.source = _data["source"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientInfectEventMonitorView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientInfectEventMonitorView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["age"] = this.age;
        data["hospitalOutInNumber"] = this.hospitalOutInNumber;
        data["phoneNumber"] = this.phoneNumber;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["vascularAccessType"] = this.vascularAccessType;
        data["catheterPunctureSite"] = this.catheterPunctureSite;
        data["spileDate"] = this.spileDate ? this.spileDate.toLocaleString() : <any>undefined;
        data["totalBodyAntimicrobialDrug"] = this.totalBodyAntimicrobialDrug;
        data["antimicrobialDrugName"] = this.antimicrobialDrugName;
        data["startDrugTime"] = this.startDrugTime ? this.startDrugTime.toLocaleString() : <any>undefined;
        data["antimicrobialDrugReason"] = this.antimicrobialDrugReason;
        data["bloodCulturePositive"] = this.bloodCulturePositive;
        data["bloodCultureSendTime"] = this.bloodCultureSendTime ? this.bloodCultureSendTime.toLocaleString() : <any>undefined;
        data["bloodCulturePathogene"] = this.bloodCulturePathogene;
        data["bloodCultureSource"] = this.bloodCultureSource;
        data["vascularAccessSwellingPus"] = this.vascularAccessSwellingPus;
        data["vascularAccessPart"] = this.vascularAccessPart;
        data["vascularAccessRepresent"] = this.vascularAccessRepresent;
        data["vascularAccessHandle"] = this.vascularAccessHandle;
        data["vascularAccessHandleOther"] = this.vascularAccessHandleOther;
        data["infectOutcome"] = this.infectOutcome;
        data["reintubationType"] = this.reintubationType;
        data["infectEventDiagnosis"] = this.infectEventDiagnosis;
        data["patientName"] = this.patientName;
        data["gender"] = this.gender;
        data["source"] = this.source;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 患者感染事件监测表 */
export interface IPatientInfectEventMonitorView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 年龄 */
    age?: string | undefined;
    /** 门诊住院号 */
    hospitalOutInNumber?: string | undefined;
    /** 联系电话 */
    phoneNumber?: string | undefined;
    /** 监测时间 */
    date: dayjs.Dayjs;
    /** 血管通路类型 */
    vascularAccessType?: string | undefined;
    /** 导管穿刺部位 */
    catheterPunctureSite?: string | undefined;
    /** 插管日期 */
    spileDate?: dayjs.Dayjs | undefined;
    /** 全身使用抗菌药物 */
    totalBodyAntimicrobialDrug: number;
    /** 抗菌药物名称 */
    antimicrobialDrugName?: string | undefined;
    /** 开始使用药物日期 */
    startDrugTime?: dayjs.Dayjs | undefined;
    /** 抗菌药物原因 */
    antimicrobialDrugReason?: string | undefined;
    /** 血培养阳性 */
    bloodCulturePositive: number;
    /** 血培养送检日期 */
    bloodCultureSendTime?: dayjs.Dayjs | undefined;
    /** 血培养病原体 */
    bloodCulturePathogene?: string | undefined;
    /** 血培养来源 */
    bloodCultureSource?: string | undefined;
    /** 血管通路脓液肿胀加剧 */
    vascularAccessSwellingPus: number;
    /** 血管通路部位 */
    vascularAccessPart?: string | undefined;
    /** 血管通路临床表现 */
    vascularAccessRepresent?: string | undefined;
    /** 血管通路处理 */
    vascularAccessHandle?: string | undefined;
    /** 血管通路处理其他 */
    vascularAccessHandleOther?: string | undefined;
    /** 感染结局 */
    infectOutcome?: string | undefined;
    /** 重新插管类型 */
    reintubationType?: string | undefined;
    /** 感染事件诊断 */
    infectEventDiagnosis: string;
    /** 患者姓名 */
    patientName: string;
    /** 性别 */
    gender?: string | undefined;
    /** 来源 */
    source?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientInfectEventMonitorViewResult implements IPatientInfectEventMonitorViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientInfectEventMonitorView[] | undefined;

    constructor(data?: IPatientInfectEventMonitorViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientInfectEventMonitorView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientInfectEventMonitorViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientInfectEventMonitorViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientInfectEventMonitorViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientInfectEventMonitorView[] | undefined;
}

/** Reponse */
export class PatientInfectEventMonitorViewResultEntry implements IPatientInfectEventMonitorViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientInfectEventMonitorView;

    constructor(data?: IPatientInfectEventMonitorViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientInfectEventMonitorView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientInfectEventMonitorViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientInfectEventMonitorViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientInfectEventMonitorViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientInfectEventMonitorView;
}

/** 检验感染筛查数据 */
export class PatientInfectLisReportItemEditModel implements IPatientInfectLisReportItemEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 乙肝检查次数 */
    hbvCount?: number | undefined;
    /** 丙肝检查次数 */
    hcvCount?: number | undefined;
    /** 艾滋检查次数 */
    hivCount?: number | undefined;
    /** 梅毒检查次数 */
    tpCount?: number | undefined;
    /** 检测日期 */
    nextDate!: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 检查次数 */
    infectCount?: number | undefined;
    /** 检查周期 */
    infectCycle?: number | undefined;
    /** 乙肝表面抗原 */
    ygbmkydl?: string | undefined;
    /** 乙肝表面抗体 */
    ygbmktdl?: string | undefined;
    /** 乙肝E抗原 */
    ygEkydl?: string | undefined;
    /** 乙型肝炎e抗体 */
    ygEktdl?: string | undefined;
    /** 乙型肝炎核心抗体 */
    yghxktdl?: string | undefined;
    /** 丙型肝炎抗体 */
    bxgykt?: string | undefined;
    /** 梅毒螺旋体特异性抗体 */
    mdlxt?: string | undefined;
    /** 人免疫缺陷病抗体 */
    rmyqxbd?: string | undefined;
    /** 检验日期 */
    reportDate?: string | undefined;

    constructor(data?: IPatientInfectLisReportItemEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.hbvCount = _data["hbvCount"];
            this.hcvCount = _data["hcvCount"];
            this.hivCount = _data["hivCount"];
            this.tpCount = _data["tpCount"];
            this.nextDate = _data["nextDate"] ? dayjs(_data["nextDate"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.infectCount = _data["infectCount"];
            this.infectCycle = _data["infectCycle"];
            this.ygbmkydl = _data["ygbmkydl"];
            this.ygbmktdl = _data["ygbmktdl"];
            this.ygEkydl = _data["ygEkydl"];
            this.ygEktdl = _data["ygEktdl"];
            this.yghxktdl = _data["yghxktdl"];
            this.bxgykt = _data["bxgykt"];
            this.mdlxt = _data["mdlxt"];
            this.rmyqxbd = _data["rmyqxbd"];
            this.reportDate = _data["reportDate"];
        }
    }

    static fromJS(data: any): PatientInfectLisReportItemEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientInfectLisReportItemEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["hbvCount"] = this.hbvCount;
        data["hcvCount"] = this.hcvCount;
        data["hivCount"] = this.hivCount;
        data["tpCount"] = this.tpCount;
        data["nextDate"] = this.nextDate ? this.nextDate.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        data["infectCount"] = this.infectCount;
        data["infectCycle"] = this.infectCycle;
        data["ygbmkydl"] = this.ygbmkydl;
        data["ygbmktdl"] = this.ygbmktdl;
        data["ygEkydl"] = this.ygEkydl;
        data["ygEktdl"] = this.ygEktdl;
        data["yghxktdl"] = this.yghxktdl;
        data["bxgykt"] = this.bxgykt;
        data["mdlxt"] = this.mdlxt;
        data["rmyqxbd"] = this.rmyqxbd;
        data["reportDate"] = this.reportDate;
        return data;
    }
}

/** 检验感染筛查数据 */
export interface IPatientInfectLisReportItemEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 乙肝检查次数 */
    hbvCount?: number | undefined;
    /** 丙肝检查次数 */
    hcvCount?: number | undefined;
    /** 艾滋检查次数 */
    hivCount?: number | undefined;
    /** 梅毒检查次数 */
    tpCount?: number | undefined;
    /** 检测日期 */
    nextDate: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 检查次数 */
    infectCount?: number | undefined;
    /** 检查周期 */
    infectCycle?: number | undefined;
    /** 乙肝表面抗原 */
    ygbmkydl?: string | undefined;
    /** 乙肝表面抗体 */
    ygbmktdl?: string | undefined;
    /** 乙肝E抗原 */
    ygEkydl?: string | undefined;
    /** 乙型肝炎e抗体 */
    ygEktdl?: string | undefined;
    /** 乙型肝炎核心抗体 */
    yghxktdl?: string | undefined;
    /** 丙型肝炎抗体 */
    bxgykt?: string | undefined;
    /** 梅毒螺旋体特异性抗体 */
    mdlxt?: string | undefined;
    /** 人免疫缺陷病抗体 */
    rmyqxbd?: string | undefined;
    /** 检验日期 */
    reportDate?: string | undefined;
}

/** 检验感染筛查数据 */
export class PatientInfectLisReportItemView implements IPatientInfectLisReportItemView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 乙肝检查次数 */
    hbvCount?: number | undefined;
    /** 丙肝检查次数 */
    hcvCount?: number | undefined;
    /** 艾滋检查次数 */
    hivCount?: number | undefined;
    /** 梅毒检查次数 */
    tpCount?: number | undefined;
    /** 检测日期 */
    nextDate!: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 检查次数 */
    infectCount?: number | undefined;
    /** 检查周期 */
    infectCycle?: number | undefined;
    /** 乙肝表面抗原 */
    ygbmkydl?: string | undefined;
    /** 乙肝表面抗体 */
    ygbmktdl?: string | undefined;
    /** 乙肝E抗原 */
    ygEkydl?: string | undefined;
    /** 乙型肝炎e抗体 */
    ygEktdl?: string | undefined;
    /** 乙型肝炎核心抗体 */
    yghxktdl?: string | undefined;
    /** 丙型肝炎抗体 */
    bxgykt?: string | undefined;
    /** 梅毒螺旋体特异性抗体 */
    mdlxt?: string | undefined;
    /** 人免疫缺陷病抗体 */
    rmyqxbd?: string | undefined;
    /** 检验日期 */
    reportDate?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientInfectLisReportItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.hbvCount = _data["hbvCount"];
            this.hcvCount = _data["hcvCount"];
            this.hivCount = _data["hivCount"];
            this.tpCount = _data["tpCount"];
            this.nextDate = _data["nextDate"] ? dayjs(_data["nextDate"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.infectCount = _data["infectCount"];
            this.infectCycle = _data["infectCycle"];
            this.ygbmkydl = _data["ygbmkydl"];
            this.ygbmktdl = _data["ygbmktdl"];
            this.ygEkydl = _data["ygEkydl"];
            this.ygEktdl = _data["ygEktdl"];
            this.yghxktdl = _data["yghxktdl"];
            this.bxgykt = _data["bxgykt"];
            this.mdlxt = _data["mdlxt"];
            this.rmyqxbd = _data["rmyqxbd"];
            this.reportDate = _data["reportDate"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientInfectLisReportItemView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientInfectLisReportItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["hbvCount"] = this.hbvCount;
        data["hcvCount"] = this.hcvCount;
        data["hivCount"] = this.hivCount;
        data["tpCount"] = this.tpCount;
        data["nextDate"] = this.nextDate ? this.nextDate.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        data["infectCount"] = this.infectCount;
        data["infectCycle"] = this.infectCycle;
        data["ygbmkydl"] = this.ygbmkydl;
        data["ygbmktdl"] = this.ygbmktdl;
        data["ygEkydl"] = this.ygEkydl;
        data["ygEktdl"] = this.ygEktdl;
        data["yghxktdl"] = this.yghxktdl;
        data["bxgykt"] = this.bxgykt;
        data["mdlxt"] = this.mdlxt;
        data["rmyqxbd"] = this.rmyqxbd;
        data["reportDate"] = this.reportDate;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 检验感染筛查数据 */
export interface IPatientInfectLisReportItemView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 乙肝检查次数 */
    hbvCount?: number | undefined;
    /** 丙肝检查次数 */
    hcvCount?: number | undefined;
    /** 艾滋检查次数 */
    hivCount?: number | undefined;
    /** 梅毒检查次数 */
    tpCount?: number | undefined;
    /** 检测日期 */
    nextDate: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 检查次数 */
    infectCount?: number | undefined;
    /** 检查周期 */
    infectCycle?: number | undefined;
    /** 乙肝表面抗原 */
    ygbmkydl?: string | undefined;
    /** 乙肝表面抗体 */
    ygbmktdl?: string | undefined;
    /** 乙肝E抗原 */
    ygEkydl?: string | undefined;
    /** 乙型肝炎e抗体 */
    ygEktdl?: string | undefined;
    /** 乙型肝炎核心抗体 */
    yghxktdl?: string | undefined;
    /** 丙型肝炎抗体 */
    bxgykt?: string | undefined;
    /** 梅毒螺旋体特异性抗体 */
    mdlxt?: string | undefined;
    /** 人免疫缺陷病抗体 */
    rmyqxbd?: string | undefined;
    /** 检验日期 */
    reportDate?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientInfectLisReportItemViewResult implements IPatientInfectLisReportItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientInfectLisReportItemView[] | undefined;

    constructor(data?: IPatientInfectLisReportItemViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientInfectLisReportItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientInfectLisReportItemViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientInfectLisReportItemViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientInfectLisReportItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientInfectLisReportItemView[] | undefined;
}

/** Reponse */
export class PatientInfectLisReportItemViewResultEntry implements IPatientInfectLisReportItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientInfectLisReportItemView;

    constructor(data?: IPatientInfectLisReportItemViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientInfectLisReportItemView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientInfectLisReportItemViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientInfectLisReportItemViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientInfectLisReportItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientInfectLisReportItemView;
}

/** 检验检查项异常 */
export class PatientLisAbnormaView implements IPatientLisAbnormaView {
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 检验大类 */
    testCategory?: string | undefined;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 编码 */
    itemCode?: string | undefined;
    /** 名称 */
    itemName?: string | undefined;
    /** 检验结果 */
    itemValue?: string | undefined;
    /** 单位 */
    itemValueUnit?: string | undefined;
    /** 数值标识 *1|↑|高；-1|↓|低；0|-|正常* */
    itemValueMark1?: string | undefined;
    /** 危险标识 */
    itemValueMark2?: string | undefined;
    /** 参考范围 */
    itemValueReference?: string | undefined;
    /** 报告时间 */
    reportTime?: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 主治医生 */
    doctor?: string | undefined;

    constructor(data?: IPatientLisAbnormaView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientName = _data["patientName"];
            this.testCategory = _data["testCategory"];
            this.reportNo = _data["reportNo"];
            this.itemCode = _data["itemCode"];
            this.itemName = _data["itemName"];
            this.itemValue = _data["itemValue"];
            this.itemValueUnit = _data["itemValueUnit"];
            this.itemValueMark1 = _data["itemValueMark1"];
            this.itemValueMark2 = _data["itemValueMark2"];
            this.itemValueReference = _data["itemValueReference"];
            this.reportTime = _data["reportTime"] ? dayjs(_data["reportTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.doctor = _data["doctor"];
        }
    }

    static fromJS(data: any): PatientLisAbnormaView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLisAbnormaView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientName"] = this.patientName;
        data["testCategory"] = this.testCategory;
        data["reportNo"] = this.reportNo;
        data["itemCode"] = this.itemCode;
        data["itemName"] = this.itemName;
        data["itemValue"] = this.itemValue;
        data["itemValueUnit"] = this.itemValueUnit;
        data["itemValueMark1"] = this.itemValueMark1;
        data["itemValueMark2"] = this.itemValueMark2;
        data["itemValueReference"] = this.itemValueReference;
        data["reportTime"] = this.reportTime ? this.reportTime.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        data["doctor"] = this.doctor;
        return data;
    }
}

/** 检验检查项异常 */
export interface IPatientLisAbnormaView {
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 检验大类 */
    testCategory?: string | undefined;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 编码 */
    itemCode?: string | undefined;
    /** 名称 */
    itemName?: string | undefined;
    /** 检验结果 */
    itemValue?: string | undefined;
    /** 单位 */
    itemValueUnit?: string | undefined;
    /** 数值标识 *1|↑|高；-1|↓|低；0|-|正常* */
    itemValueMark1?: string | undefined;
    /** 危险标识 */
    itemValueMark2?: string | undefined;
    /** 参考范围 */
    itemValueReference?: string | undefined;
    /** 报告时间 */
    reportTime?: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 主治医生 */
    doctor?: string | undefined;
}

/** 检验项异常提醒 */
export class PatientLisAbnormalRemindEditModel implements IPatientLisAbnormalRemindEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 编码 */
    itemCode!: string;
    /** 名称 */
    itemName?: string | undefined;
    /** 检验结果 */
    itemValue?: string | undefined;
    /** 单位 */
    itemValueUnit?: string | undefined;
    /** 数值标识 *1|↑|高；-1|↓|低；0|-|正常* */
    itemValueMark1?: string | undefined;
    /** 危险标识 */
    itemValueMark2?: string | undefined;
    /** 参考范围 */
    itemValueReference?: string | undefined;
    /** 报告时间 */
    reportTime!: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 检验大类 */
    testCategory?: string | undefined;

    constructor(data?: IPatientLisAbnormalRemindEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.reportNo = _data["reportNo"];
            this.itemCode = _data["itemCode"];
            this.itemName = _data["itemName"];
            this.itemValue = _data["itemValue"];
            this.itemValueUnit = _data["itemValueUnit"];
            this.itemValueMark1 = _data["itemValueMark1"];
            this.itemValueMark2 = _data["itemValueMark2"];
            this.itemValueReference = _data["itemValueReference"];
            this.reportTime = _data["reportTime"] ? dayjs(_data["reportTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.testCategory = _data["testCategory"];
        }
    }

    static fromJS(data: any): PatientLisAbnormalRemindEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLisAbnormalRemindEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["reportNo"] = this.reportNo;
        data["itemCode"] = this.itemCode;
        data["itemName"] = this.itemName;
        data["itemValue"] = this.itemValue;
        data["itemValueUnit"] = this.itemValueUnit;
        data["itemValueMark1"] = this.itemValueMark1;
        data["itemValueMark2"] = this.itemValueMark2;
        data["itemValueReference"] = this.itemValueReference;
        data["reportTime"] = this.reportTime ? this.reportTime.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        data["testCategory"] = this.testCategory;
        return data;
    }
}

/** 检验项异常提醒 */
export interface IPatientLisAbnormalRemindEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 编码 */
    itemCode: string;
    /** 名称 */
    itemName?: string | undefined;
    /** 检验结果 */
    itemValue?: string | undefined;
    /** 单位 */
    itemValueUnit?: string | undefined;
    /** 数值标识 *1|↑|高；-1|↓|低；0|-|正常* */
    itemValueMark1?: string | undefined;
    /** 危险标识 */
    itemValueMark2?: string | undefined;
    /** 参考范围 */
    itemValueReference?: string | undefined;
    /** 报告时间 */
    reportTime: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 检验大类 */
    testCategory?: string | undefined;
}

/** 检验项异常提醒 */
export class PatientLisAbnormalRemindView implements IPatientLisAbnormalRemindView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 编码 */
    itemCode!: string;
    /** 名称 */
    itemName?: string | undefined;
    /** 检验结果 */
    itemValue?: string | undefined;
    /** 单位 */
    itemValueUnit?: string | undefined;
    /** 数值标识 *1|↑|高；-1|↓|低；0|-|正常* */
    itemValueMark1?: string | undefined;
    /** 危险标识 */
    itemValueMark2?: string | undefined;
    /** 参考范围 */
    itemValueReference?: string | undefined;
    /** 报告时间 */
    reportTime!: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 检验大类 */
    testCategory?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientLisAbnormalRemindView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.reportNo = _data["reportNo"];
            this.itemCode = _data["itemCode"];
            this.itemName = _data["itemName"];
            this.itemValue = _data["itemValue"];
            this.itemValueUnit = _data["itemValueUnit"];
            this.itemValueMark1 = _data["itemValueMark1"];
            this.itemValueMark2 = _data["itemValueMark2"];
            this.itemValueReference = _data["itemValueReference"];
            this.reportTime = _data["reportTime"] ? dayjs(_data["reportTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.testCategory = _data["testCategory"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientLisAbnormalRemindView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLisAbnormalRemindView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["reportNo"] = this.reportNo;
        data["itemCode"] = this.itemCode;
        data["itemName"] = this.itemName;
        data["itemValue"] = this.itemValue;
        data["itemValueUnit"] = this.itemValueUnit;
        data["itemValueMark1"] = this.itemValueMark1;
        data["itemValueMark2"] = this.itemValueMark2;
        data["itemValueReference"] = this.itemValueReference;
        data["reportTime"] = this.reportTime ? this.reportTime.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        data["testCategory"] = this.testCategory;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 检验项异常提醒 */
export interface IPatientLisAbnormalRemindView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 编码 */
    itemCode: string;
    /** 名称 */
    itemName?: string | undefined;
    /** 检验结果 */
    itemValue?: string | undefined;
    /** 单位 */
    itemValueUnit?: string | undefined;
    /** 数值标识 *1|↑|高；-1|↓|低；0|-|正常* */
    itemValueMark1?: string | undefined;
    /** 危险标识 */
    itemValueMark2?: string | undefined;
    /** 参考范围 */
    itemValueReference?: string | undefined;
    /** 报告时间 */
    reportTime: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 检验大类 */
    testCategory?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientLisAbnormalRemindViewResult implements IPatientLisAbnormalRemindViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientLisAbnormalRemindView[] | undefined;

    constructor(data?: IPatientLisAbnormalRemindViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientLisAbnormalRemindView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientLisAbnormalRemindViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLisAbnormalRemindViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientLisAbnormalRemindViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientLisAbnormalRemindView[] | undefined;
}

/** Reponse */
export class PatientLisAbnormalRemindViewResultEntry implements IPatientLisAbnormalRemindViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientLisAbnormalRemindView;

    constructor(data?: IPatientLisAbnormalRemindViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientLisAbnormalRemindView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientLisAbnormalRemindViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLisAbnormalRemindViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientLisAbnormalRemindViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientLisAbnormalRemindView;
}

/** 患者检验项提醒 */
export class PatientLisRemindView implements IPatientLisRemindView {
    /** 检验提醒标识 */
    id?: string | undefined;
    /** 检验项名称 */
    name?: string | undefined;
    /** 上次检查时间 */
    lastReportTime?: dayjs.Dayjs | undefined;
    /** 下次检查时间 */
    nextReportTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientLisRemindView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.lastReportTime = _data["lastReportTime"] ? dayjs(_data["lastReportTime"].toString()) : <any>undefined;
            this.nextReportTime = _data["nextReportTime"] ? dayjs(_data["nextReportTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientLisRemindView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLisRemindView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["lastReportTime"] = this.lastReportTime ? this.lastReportTime.toLocaleString() : <any>undefined;
        data["nextReportTime"] = this.nextReportTime ? this.nextReportTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 患者检验项提醒 */
export interface IPatientLisRemindView {
    /** 检验提醒标识 */
    id?: string | undefined;
    /** 检验项名称 */
    name?: string | undefined;
    /** 上次检查时间 */
    lastReportTime?: dayjs.Dayjs | undefined;
    /** 下次检查时间 */
    nextReportTime?: dayjs.Dayjs | undefined;
}

/** 检验报告单信息 */
export class PatientLisReport implements IPatientLisReport {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 数据来源 `DIC.EXAMINE.DATASOURCE` */
    dataSource?: string | undefined;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 样本编号 */
    sampleNo?: string | undefined;
    /** 样本类型 `DIC.TEST.SAMPLETYPE` *血清,全血* */
    sampleType?: string | undefined;
    /** 检验大类 */
    testCategory?: string | undefined;
    /** 是否透后血0,1 */
    cureAfterBlood?: number | undefined;
    /** 检验项目 */
    testItem?: string | undefined;
    /** 临床诊断 */
    diagnosis?: string | undefined;
    /** 申请时间 */
    applicationTime?: dayjs.Dayjs | undefined;
    /** 申请科室 */
    applicationDepartment?: string | undefined;
    /** 申请人编码 */
    proposerId?: string | undefined;
    /** 申请人姓名 */
    proposerName?: string | undefined;
    /** 报告时间 */
    reportTime?: dayjs.Dayjs;
    /** 报告人编码 */
    reportId?: string | undefined;
    /** 报告人姓名 */
    reportName?: string | undefined;
    /** 审核时间 */
    auditTime?: dayjs.Dayjs | undefined;
    /** 审核人编码 */
    auditId?: string | undefined;
    /** 审核人姓名 */
    auditName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;

    constructor(data?: IPatientLisReport) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.dataSource = _data["dataSource"];
            this.reportNo = _data["reportNo"];
            this.sampleNo = _data["sampleNo"];
            this.sampleType = _data["sampleType"];
            this.testCategory = _data["testCategory"];
            this.cureAfterBlood = _data["cureAfterBlood"];
            this.testItem = _data["testItem"];
            this.diagnosis = _data["diagnosis"];
            this.applicationTime = _data["applicationTime"] ? dayjs(_data["applicationTime"].toString()) : <any>undefined;
            this.applicationDepartment = _data["applicationDepartment"];
            this.proposerId = _data["proposerId"];
            this.proposerName = _data["proposerName"];
            this.reportTime = _data["reportTime"] ? dayjs(_data["reportTime"].toString()) : <any>undefined;
            this.reportId = _data["reportId"];
            this.reportName = _data["reportName"];
            this.auditTime = _data["auditTime"] ? dayjs(_data["auditTime"].toString()) : <any>undefined;
            this.auditId = _data["auditId"];
            this.auditName = _data["auditName"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientLisReport {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLisReport();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["dataSource"] = this.dataSource;
        data["reportNo"] = this.reportNo;
        data["sampleNo"] = this.sampleNo;
        data["sampleType"] = this.sampleType;
        data["testCategory"] = this.testCategory;
        data["cureAfterBlood"] = this.cureAfterBlood;
        data["testItem"] = this.testItem;
        data["diagnosis"] = this.diagnosis;
        data["applicationTime"] = this.applicationTime ? this.applicationTime.toLocaleString() : <any>undefined;
        data["applicationDepartment"] = this.applicationDepartment;
        data["proposerId"] = this.proposerId;
        data["proposerName"] = this.proposerName;
        data["reportTime"] = this.reportTime ? this.reportTime.toLocaleString() : <any>undefined;
        data["reportId"] = this.reportId;
        data["reportName"] = this.reportName;
        data["auditTime"] = this.auditTime ? this.auditTime.toLocaleString() : <any>undefined;
        data["auditId"] = this.auditId;
        data["auditName"] = this.auditName;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        return data;
    }
}

/** 检验报告单信息 */
export interface IPatientLisReport {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 数据来源 `DIC.EXAMINE.DATASOURCE` */
    dataSource?: string | undefined;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 样本编号 */
    sampleNo?: string | undefined;
    /** 样本类型 `DIC.TEST.SAMPLETYPE` *血清,全血* */
    sampleType?: string | undefined;
    /** 检验大类 */
    testCategory?: string | undefined;
    /** 是否透后血0,1 */
    cureAfterBlood?: number | undefined;
    /** 检验项目 */
    testItem?: string | undefined;
    /** 临床诊断 */
    diagnosis?: string | undefined;
    /** 申请时间 */
    applicationTime?: dayjs.Dayjs | undefined;
    /** 申请科室 */
    applicationDepartment?: string | undefined;
    /** 申请人编码 */
    proposerId?: string | undefined;
    /** 申请人姓名 */
    proposerName?: string | undefined;
    /** 报告时间 */
    reportTime?: dayjs.Dayjs;
    /** 报告人编码 */
    reportId?: string | undefined;
    /** 报告人姓名 */
    reportName?: string | undefined;
    /** 审核时间 */
    auditTime?: dayjs.Dayjs | undefined;
    /** 审核人编码 */
    auditId?: string | undefined;
    /** 审核人姓名 */
    auditName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
}

/** 检查报告单图表 */
export class PatientLisReportChatPadView implements IPatientLisReportChatPadView {
    /** 报告时间 */
    reportTime?: dayjs.Dayjs[] | undefined;
    /** 检验结果 */
    itemValue?: string[] | undefined;

    constructor(data?: IPatientLisReportChatPadView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["reportTime"])) {
                this.reportTime = [] as any;
                for (let item of _data["reportTime"])
                    this.reportTime!.push(dayjs(item));
            }
            if (Array.isArray(_data["itemValue"])) {
                this.itemValue = [] as any;
                for (let item of _data["itemValue"])
                    this.itemValue!.push(item);
            }
        }
    }

    static fromJS(data: any): PatientLisReportChatPadView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLisReportChatPadView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.reportTime)) {
            data["reportTime"] = [];
            for (let item of this.reportTime)
                data["reportTime"].push(item.toLocaleString());
        }
        if (Array.isArray(this.itemValue)) {
            data["itemValue"] = [];
            for (let item of this.itemValue)
                data["itemValue"].push(item);
        }
        return data;
    }
}

/** 检查报告单图表 */
export interface IPatientLisReportChatPadView {
    /** 报告时间 */
    reportTime?: dayjs.Dayjs[] | undefined;
    /** 检验结果 */
    itemValue?: string[] | undefined;
}

/** Reponse */
export class PatientLisReportChatPadViewResultEntry implements IPatientLisReportChatPadViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientLisReportChatPadView;

    constructor(data?: IPatientLisReportChatPadViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientLisReportChatPadView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientLisReportChatPadViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLisReportChatPadViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientLisReportChatPadViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientLisReportChatPadView;
}

/** 检查报告单图表 */
export class PatientLisReportChatView implements IPatientLisReportChatView {
    /** 报告时间 */
    reportTime?: dayjs.Dayjs;
    /** 检验结果 */
    itemValue?: string | undefined;
    /** 检验子项全称 */
    itemText?: string | undefined;
    /** 数值标识 *1 */
    itemValueMark1?: string | undefined;
    /** 危险标识 */
    itemValueMark2?: string | undefined;

    constructor(data?: IPatientLisReportChatView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.reportTime = _data["reportTime"] ? dayjs(_data["reportTime"].toString()) : <any>undefined;
            this.itemValue = _data["itemValue"];
            this.itemText = _data["itemText"];
            this.itemValueMark1 = _data["itemValueMark1"];
            this.itemValueMark2 = _data["itemValueMark2"];
        }
    }

    static fromJS(data: any): PatientLisReportChatView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLisReportChatView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reportTime"] = this.reportTime ? this.reportTime.toLocaleString() : <any>undefined;
        data["itemValue"] = this.itemValue;
        data["itemText"] = this.itemText;
        data["itemValueMark1"] = this.itemValueMark1;
        data["itemValueMark2"] = this.itemValueMark2;
        return data;
    }
}

/** 检查报告单图表 */
export interface IPatientLisReportChatView {
    /** 报告时间 */
    reportTime?: dayjs.Dayjs;
    /** 检验结果 */
    itemValue?: string | undefined;
    /** 检验子项全称 */
    itemText?: string | undefined;
    /** 数值标识 *1 */
    itemValueMark1?: string | undefined;
    /** 危险标识 */
    itemValueMark2?: string | undefined;
}

/** Reponse */
export class PatientLisReportChatViewResult implements IPatientLisReportChatViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientLisReportChatView[] | undefined;

    constructor(data?: IPatientLisReportChatViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientLisReportChatView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientLisReportChatViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLisReportChatViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientLisReportChatViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientLisReportChatView[] | undefined;
}

export class PatientLisReportEditModel implements IPatientLisReportEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 数据来源 `DIC.EXAMINE.DATASOURCE` */
    dataSource?: string | undefined;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 样本编号 */
    sampleNo?: string | undefined;
    /** 样本类型 `DIC.TEST.SAMPLETYPE` *血清,全血* */
    sampleType?: string | undefined;
    /** 检验大类 */
    testCategory?: string | undefined;
    /** 是否透后血0,1 */
    cureAfterBlood?: number | undefined;
    /** 检验项目 */
    testItem?: string | undefined;
    /** 临床诊断 */
    diagnosis?: string | undefined;
    /** 申请时间 */
    applicationTime?: dayjs.Dayjs | undefined;
    /** 申请科室 */
    applicationDepartment?: string | undefined;
    /** 申请人编码 */
    proposerId?: string | undefined;
    /** 申请人姓名 */
    proposerName?: string | undefined;
    /** 报告时间 */
    reportTime?: dayjs.Dayjs;
    /** 报告人编码 */
    reportId?: string | undefined;
    /** 报告人姓名 */
    reportName?: string | undefined;
    /** 审核时间 */
    auditTime?: dayjs.Dayjs | undefined;
    /** 审核人编码 */
    auditId?: string | undefined;
    /** 审核人姓名 */
    auditName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IPatientLisReportEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.dataSource = _data["dataSource"];
            this.reportNo = _data["reportNo"];
            this.sampleNo = _data["sampleNo"];
            this.sampleType = _data["sampleType"];
            this.testCategory = _data["testCategory"];
            this.cureAfterBlood = _data["cureAfterBlood"];
            this.testItem = _data["testItem"];
            this.diagnosis = _data["diagnosis"];
            this.applicationTime = _data["applicationTime"] ? dayjs(_data["applicationTime"].toString()) : <any>undefined;
            this.applicationDepartment = _data["applicationDepartment"];
            this.proposerId = _data["proposerId"];
            this.proposerName = _data["proposerName"];
            this.reportTime = _data["reportTime"] ? dayjs(_data["reportTime"].toString()) : <any>undefined;
            this.reportId = _data["reportId"];
            this.reportName = _data["reportName"];
            this.auditTime = _data["auditTime"] ? dayjs(_data["auditTime"].toString()) : <any>undefined;
            this.auditId = _data["auditId"];
            this.auditName = _data["auditName"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): PatientLisReportEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLisReportEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["dataSource"] = this.dataSource;
        data["reportNo"] = this.reportNo;
        data["sampleNo"] = this.sampleNo;
        data["sampleType"] = this.sampleType;
        data["testCategory"] = this.testCategory;
        data["cureAfterBlood"] = this.cureAfterBlood;
        data["testItem"] = this.testItem;
        data["diagnosis"] = this.diagnosis;
        data["applicationTime"] = this.applicationTime ? this.applicationTime.toLocaleString() : <any>undefined;
        data["applicationDepartment"] = this.applicationDepartment;
        data["proposerId"] = this.proposerId;
        data["proposerName"] = this.proposerName;
        data["reportTime"] = this.reportTime ? this.reportTime.toLocaleString() : <any>undefined;
        data["reportId"] = this.reportId;
        data["reportName"] = this.reportName;
        data["auditTime"] = this.auditTime ? this.auditTime.toLocaleString() : <any>undefined;
        data["auditId"] = this.auditId;
        data["auditName"] = this.auditName;
        data["remark"] = this.remark;
        return data;
    }
}

export interface IPatientLisReportEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 数据来源 `DIC.EXAMINE.DATASOURCE` */
    dataSource?: string | undefined;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 样本编号 */
    sampleNo?: string | undefined;
    /** 样本类型 `DIC.TEST.SAMPLETYPE` *血清,全血* */
    sampleType?: string | undefined;
    /** 检验大类 */
    testCategory?: string | undefined;
    /** 是否透后血0,1 */
    cureAfterBlood?: number | undefined;
    /** 检验项目 */
    testItem?: string | undefined;
    /** 临床诊断 */
    diagnosis?: string | undefined;
    /** 申请时间 */
    applicationTime?: dayjs.Dayjs | undefined;
    /** 申请科室 */
    applicationDepartment?: string | undefined;
    /** 申请人编码 */
    proposerId?: string | undefined;
    /** 申请人姓名 */
    proposerName?: string | undefined;
    /** 报告时间 */
    reportTime?: dayjs.Dayjs;
    /** 报告人编码 */
    reportId?: string | undefined;
    /** 报告人姓名 */
    reportName?: string | undefined;
    /** 审核时间 */
    auditTime?: dayjs.Dayjs | undefined;
    /** 审核人编码 */
    auditId?: string | undefined;
    /** 审核人姓名 */
    auditName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 检验报告条目信息 */
export class PatientLisReportItem implements IPatientLisReportItem {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** [检验报告单标识](检验报告单信息) */
    patientLisReportId?: string | undefined;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 编码 */
    itemCode?: string | undefined;
    /** 名称 */
    itemName?: string | undefined;
    /** 检验结果 */
    itemValue?: string | undefined;
    /** 单位 */
    itemValueUnit?: string | undefined;
    /** 数值标识 *1|↑|高；-1|↓|低；0|-|正常* */
    itemValueMark1?: string | undefined;
    /** 危险标识 */
    itemValueMark2?: string | undefined;
    /** 参考范围 */
    itemValueReference?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
    patientLisReports?: PatientLisReport;

    constructor(data?: IPatientLisReportItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.patientLisReportId = _data["patientLisReportId"];
            this.reportNo = _data["reportNo"];
            this.itemCode = _data["itemCode"];
            this.itemName = _data["itemName"];
            this.itemValue = _data["itemValue"];
            this.itemValueUnit = _data["itemValueUnit"];
            this.itemValueMark1 = _data["itemValueMark1"];
            this.itemValueMark2 = _data["itemValueMark2"];
            this.itemValueReference = _data["itemValueReference"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
            this.patientLisReports = _data["patientLisReports"] ? PatientLisReport.fromJS(_data["patientLisReports"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientLisReportItem {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLisReportItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["patientLisReportId"] = this.patientLisReportId;
        data["reportNo"] = this.reportNo;
        data["itemCode"] = this.itemCode;
        data["itemName"] = this.itemName;
        data["itemValue"] = this.itemValue;
        data["itemValueUnit"] = this.itemValueUnit;
        data["itemValueMark1"] = this.itemValueMark1;
        data["itemValueMark2"] = this.itemValueMark2;
        data["itemValueReference"] = this.itemValueReference;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        data["patientLisReports"] = this.patientLisReports ? this.patientLisReports.toJSON() : <any>undefined;
        return data;
    }
}

/** 检验报告条目信息 */
export interface IPatientLisReportItem {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** [检验报告单标识](检验报告单信息) */
    patientLisReportId?: string | undefined;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 编码 */
    itemCode?: string | undefined;
    /** 名称 */
    itemName?: string | undefined;
    /** 检验结果 */
    itemValue?: string | undefined;
    /** 单位 */
    itemValueUnit?: string | undefined;
    /** 数值标识 *1|↑|高；-1|↓|低；0|-|正常* */
    itemValueMark1?: string | undefined;
    /** 危险标识 */
    itemValueMark2?: string | undefined;
    /** 参考范围 */
    itemValueReference?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
    patientLisReports?: PatientLisReport;
}

export class PatientLisReportItemEditModel implements IPatientLisReportItemEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [检验报告单标识](#检验报告单信息) */
    patientLisReportId?: string | undefined;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 编码 */
    itemCode!: string;
    /** 名称 */
    itemName?: string | undefined;
    /** 检验结果 */
    itemValue?: string | undefined;
    /** 单位 */
    itemValueUnit?: string | undefined;
    /** 数值标识 *1|↑|高；-1|↓|低；0|-|正常* */
    itemValueMark1?: string | undefined;
    /** 危险标识 */
    itemValueMark2?: string | undefined;
    /** 参考范围 */
    itemValueReference?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IPatientLisReportItemEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientLisReportId = _data["patientLisReportId"];
            this.reportNo = _data["reportNo"];
            this.itemCode = _data["itemCode"];
            this.itemName = _data["itemName"];
            this.itemValue = _data["itemValue"];
            this.itemValueUnit = _data["itemValueUnit"];
            this.itemValueMark1 = _data["itemValueMark1"];
            this.itemValueMark2 = _data["itemValueMark2"];
            this.itemValueReference = _data["itemValueReference"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): PatientLisReportItemEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLisReportItemEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientLisReportId"] = this.patientLisReportId;
        data["reportNo"] = this.reportNo;
        data["itemCode"] = this.itemCode;
        data["itemName"] = this.itemName;
        data["itemValue"] = this.itemValue;
        data["itemValueUnit"] = this.itemValueUnit;
        data["itemValueMark1"] = this.itemValueMark1;
        data["itemValueMark2"] = this.itemValueMark2;
        data["itemValueReference"] = this.itemValueReference;
        data["remark"] = this.remark;
        return data;
    }
}

export interface IPatientLisReportItemEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [检验报告单标识](#检验报告单信息) */
    patientLisReportId?: string | undefined;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 编码 */
    itemCode: string;
    /** 名称 */
    itemName?: string | undefined;
    /** 检验结果 */
    itemValue?: string | undefined;
    /** 单位 */
    itemValueUnit?: string | undefined;
    /** 数值标识 *1|↑|高；-1|↓|低；0|-|正常* */
    itemValueMark1?: string | undefined;
    /** 危险标识 */
    itemValueMark2?: string | undefined;
    /** 参考范围 */
    itemValueReference?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class PatientLisReportItemResult implements IPatientLisReportItemResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientLisReportItem[] | undefined;

    constructor(data?: IPatientLisReportItemResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientLisReportItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientLisReportItemResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLisReportItemResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientLisReportItemResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientLisReportItem[] | undefined;
}

/** Reponse */
export class PatientLisReportItemResultEntry implements IPatientLisReportItemResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientLisReportItem;

    constructor(data?: IPatientLisReportItemResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientLisReportItem.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientLisReportItemResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLisReportItemResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientLisReportItemResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientLisReportItem;
}

export class PatientLisReportItemView implements IPatientLisReportItemView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [检验报告单标识](#检验报告单信息) */
    patientLisReportId?: string | undefined;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 编码 */
    itemCode!: string;
    /** 名称 */
    itemName?: string | undefined;
    /** 检验结果 */
    itemValue?: string | undefined;
    /** 单位 */
    itemValueUnit?: string | undefined;
    /** 数值标识 *1|↑|高；-1|↓|低；0|-|正常* */
    itemValueMark1?: string | undefined;
    /** 危险标识 */
    itemValueMark2?: string | undefined;
    /** 参考范围 */
    itemValueReference?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 检验子项全称显示值 */
    itemTextLabel?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 检验日期 */
    reportTime?: dayjs.Dayjs;
    /** 是否为数字 */
    isNumber?: boolean;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientLisReportItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientLisReportId = _data["patientLisReportId"];
            this.reportNo = _data["reportNo"];
            this.itemCode = _data["itemCode"];
            this.itemName = _data["itemName"];
            this.itemValue = _data["itemValue"];
            this.itemValueUnit = _data["itemValueUnit"];
            this.itemValueMark1 = _data["itemValueMark1"];
            this.itemValueMark2 = _data["itemValueMark2"];
            this.itemValueReference = _data["itemValueReference"];
            this.remark = _data["remark"];
            this.itemTextLabel = _data["itemTextLabel"];
            this.patientName = _data["patientName"];
            this.reportTime = _data["reportTime"] ? dayjs(_data["reportTime"].toString()) : <any>undefined;
            this.isNumber = _data["isNumber"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientLisReportItemView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLisReportItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientLisReportId"] = this.patientLisReportId;
        data["reportNo"] = this.reportNo;
        data["itemCode"] = this.itemCode;
        data["itemName"] = this.itemName;
        data["itemValue"] = this.itemValue;
        data["itemValueUnit"] = this.itemValueUnit;
        data["itemValueMark1"] = this.itemValueMark1;
        data["itemValueMark2"] = this.itemValueMark2;
        data["itemValueReference"] = this.itemValueReference;
        data["remark"] = this.remark;
        data["itemTextLabel"] = this.itemTextLabel;
        data["patientName"] = this.patientName;
        data["reportTime"] = this.reportTime ? this.reportTime.toLocaleString() : <any>undefined;
        data["isNumber"] = this.isNumber;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface IPatientLisReportItemView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [检验报告单标识](#检验报告单信息) */
    patientLisReportId?: string | undefined;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 编码 */
    itemCode: string;
    /** 名称 */
    itemName?: string | undefined;
    /** 检验结果 */
    itemValue?: string | undefined;
    /** 单位 */
    itemValueUnit?: string | undefined;
    /** 数值标识 *1|↑|高；-1|↓|低；0|-|正常* */
    itemValueMark1?: string | undefined;
    /** 危险标识 */
    itemValueMark2?: string | undefined;
    /** 参考范围 */
    itemValueReference?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 检验子项全称显示值 */
    itemTextLabel?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 检验日期 */
    reportTime?: dayjs.Dayjs;
    /** 是否为数字 */
    isNumber?: boolean;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientLisReportItemViewResult implements IPatientLisReportItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientLisReportItemView[] | undefined;

    constructor(data?: IPatientLisReportItemViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientLisReportItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientLisReportItemViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLisReportItemViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientLisReportItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientLisReportItemView[] | undefined;
}

export class PatientLisReportView implements IPatientLisReportView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 数据来源 `DIC.EXAMINE.DATASOURCE` */
    dataSource?: string | undefined;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 样本编号 */
    sampleNo?: string | undefined;
    /** 样本类型 `DIC.TEST.SAMPLETYPE` *血清,全血* */
    sampleType?: string | undefined;
    /** 检验大类 */
    testCategory?: string | undefined;
    /** 是否透后血0,1 */
    cureAfterBlood?: number | undefined;
    /** 检验项目 */
    testItem?: string | undefined;
    /** 临床诊断 */
    diagnosis?: string | undefined;
    /** 申请时间 */
    applicationTime?: dayjs.Dayjs | undefined;
    /** 申请科室 */
    applicationDepartment?: string | undefined;
    /** 申请人编码 */
    proposerId?: string | undefined;
    /** 申请人姓名 */
    proposerName?: string | undefined;
    /** 报告时间 */
    reportTime?: dayjs.Dayjs;
    /** 报告人编码 */
    reportId?: string | undefined;
    /** 报告人姓名 */
    reportName?: string | undefined;
    /** 审核时间 */
    auditTime?: dayjs.Dayjs | undefined;
    /** 审核人编码 */
    auditId?: string | undefined;
    /** 审核人姓名 */
    auditName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 检验项目名称 */
    testItemLabel?: string | undefined;
    /** 数据来源显示值 */
    dataSourceLable?: string | undefined;
    /** 样本类型显示值 */
    sampleTypeLabel?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 检验报告条目信息 */
    patientLisReportItems?: PatientLisReportItemView[] | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientLisReportView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.dataSource = _data["dataSource"];
            this.reportNo = _data["reportNo"];
            this.sampleNo = _data["sampleNo"];
            this.sampleType = _data["sampleType"];
            this.testCategory = _data["testCategory"];
            this.cureAfterBlood = _data["cureAfterBlood"];
            this.testItem = _data["testItem"];
            this.diagnosis = _data["diagnosis"];
            this.applicationTime = _data["applicationTime"] ? dayjs(_data["applicationTime"].toString()) : <any>undefined;
            this.applicationDepartment = _data["applicationDepartment"];
            this.proposerId = _data["proposerId"];
            this.proposerName = _data["proposerName"];
            this.reportTime = _data["reportTime"] ? dayjs(_data["reportTime"].toString()) : <any>undefined;
            this.reportId = _data["reportId"];
            this.reportName = _data["reportName"];
            this.auditTime = _data["auditTime"] ? dayjs(_data["auditTime"].toString()) : <any>undefined;
            this.auditId = _data["auditId"];
            this.auditName = _data["auditName"];
            this.remark = _data["remark"];
            this.testItemLabel = _data["testItemLabel"];
            this.dataSourceLable = _data["dataSourceLable"];
            this.sampleTypeLabel = _data["sampleTypeLabel"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.idType = _data["idType"];
            this.idNumber = _data["idNumber"];
            if (Array.isArray(_data["patientLisReportItems"])) {
                this.patientLisReportItems = [] as any;
                for (let item of _data["patientLisReportItems"])
                    this.patientLisReportItems!.push(PatientLisReportItemView.fromJS(item));
            }
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientLisReportView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLisReportView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["dataSource"] = this.dataSource;
        data["reportNo"] = this.reportNo;
        data["sampleNo"] = this.sampleNo;
        data["sampleType"] = this.sampleType;
        data["testCategory"] = this.testCategory;
        data["cureAfterBlood"] = this.cureAfterBlood;
        data["testItem"] = this.testItem;
        data["diagnosis"] = this.diagnosis;
        data["applicationTime"] = this.applicationTime ? this.applicationTime.toLocaleString() : <any>undefined;
        data["applicationDepartment"] = this.applicationDepartment;
        data["proposerId"] = this.proposerId;
        data["proposerName"] = this.proposerName;
        data["reportTime"] = this.reportTime ? this.reportTime.toLocaleString() : <any>undefined;
        data["reportId"] = this.reportId;
        data["reportName"] = this.reportName;
        data["auditTime"] = this.auditTime ? this.auditTime.toLocaleString() : <any>undefined;
        data["auditId"] = this.auditId;
        data["auditName"] = this.auditName;
        data["remark"] = this.remark;
        data["testItemLabel"] = this.testItemLabel;
        data["dataSourceLable"] = this.dataSourceLable;
        data["sampleTypeLabel"] = this.sampleTypeLabel;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["idType"] = this.idType;
        data["idNumber"] = this.idNumber;
        if (Array.isArray(this.patientLisReportItems)) {
            data["patientLisReportItems"] = [];
            for (let item of this.patientLisReportItems)
                data["patientLisReportItems"].push(item.toJSON());
        }
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface IPatientLisReportView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 数据来源 `DIC.EXAMINE.DATASOURCE` */
    dataSource?: string | undefined;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 样本编号 */
    sampleNo?: string | undefined;
    /** 样本类型 `DIC.TEST.SAMPLETYPE` *血清,全血* */
    sampleType?: string | undefined;
    /** 检验大类 */
    testCategory?: string | undefined;
    /** 是否透后血0,1 */
    cureAfterBlood?: number | undefined;
    /** 检验项目 */
    testItem?: string | undefined;
    /** 临床诊断 */
    diagnosis?: string | undefined;
    /** 申请时间 */
    applicationTime?: dayjs.Dayjs | undefined;
    /** 申请科室 */
    applicationDepartment?: string | undefined;
    /** 申请人编码 */
    proposerId?: string | undefined;
    /** 申请人姓名 */
    proposerName?: string | undefined;
    /** 报告时间 */
    reportTime?: dayjs.Dayjs;
    /** 报告人编码 */
    reportId?: string | undefined;
    /** 报告人姓名 */
    reportName?: string | undefined;
    /** 审核时间 */
    auditTime?: dayjs.Dayjs | undefined;
    /** 审核人编码 */
    auditId?: string | undefined;
    /** 审核人姓名 */
    auditName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 检验项目名称 */
    testItemLabel?: string | undefined;
    /** 数据来源显示值 */
    dataSourceLable?: string | undefined;
    /** 样本类型显示值 */
    sampleTypeLabel?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 检验报告条目信息 */
    patientLisReportItems?: PatientLisReportItemView[] | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientLisReportViewResult implements IPatientLisReportViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientLisReportView[] | undefined;

    constructor(data?: IPatientLisReportViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientLisReportView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientLisReportViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLisReportViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientLisReportViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientLisReportView[] | undefined;
}

/** Reponse */
export class PatientLisReportViewResultEntry implements IPatientLisReportViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientLisReportView;

    constructor(data?: IPatientLisReportViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientLisReportView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientLisReportViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientLisReportViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientLisReportViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientLisReportView;
}

/** 患者列表信息 (ViewModel) */
export class PatientListView implements IPatientListView {
    patientId?: string | undefined;
    patientName?: string | undefined;
    nationalityName?: string | undefined;
    sourceName?: string | undefined;
    genderName?: string | undefined;
    dialysisState?: string | undefined;

    constructor(data?: IPatientListView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.nationalityName = _data["nationalityName"];
            this.sourceName = _data["sourceName"];
            this.genderName = _data["genderName"];
            this.dialysisState = _data["dialysisState"];
        }
    }

    static fromJS(data: any): PatientListView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientListView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["nationalityName"] = this.nationalityName;
        data["sourceName"] = this.sourceName;
        data["genderName"] = this.genderName;
        data["dialysisState"] = this.dialysisState;
        return data;
    }
}

/** 患者列表信息 (ViewModel) */
export interface IPatientListView {
    patientId?: string | undefined;
    patientName?: string | undefined;
    nationalityName?: string | undefined;
    sourceName?: string | undefined;
    genderName?: string | undefined;
    dialysisState?: string | undefined;
}

/** Reponse */
export class PatientListViewResult implements IPatientListViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientListView[] | undefined;

    constructor(data?: IPatientListViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientListView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientListViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientListViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientListViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientListView[] | undefined;
}

/** 病案记录自定义显示 */
export class PatientMedicalHistoryCustom implements IPatientMedicalHistoryCustom {
    /** 标识 为空时，标识为当前数据，不允许删除 */
    id?: string | undefined;
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 操作人 */
    operator?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 *用于患者重名,默认填姓名,系统内默认显示别名,打印单据使用姓名* */
    name2?: string | undefined;
    /** 患者全名 */
    nameFull?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    genderLabel?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    sourceLabel?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 模板标识 */
    tmplId?: string | undefined;
    /** 本人电话 */
    telephone?: string | undefined;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 家庭住址 */
    address?: string | undefined;
    /** 工作单位 */
    workUnit?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosisLabel?: string | undefined;
    /** 并发症诊断 *无,有* */
    diagnosisComplication?: string | undefined;
    /** 亲属与患者关系 */
    relation?: string | undefined;
    /** 亲属姓名 */
    relationName?: string | undefined;
    /** 亲属移动电话 */
    relationPhone?: string | undefined;
    /** 亲属座机 */
    relationTel?: string | undefined;
    /** 亲属邮箱 */
    relationEmail?: string | undefined;
    /** 亲属省级 */
    relationProvince?: string | undefined;
    /** 亲属城市 */
    relationCity?: string | undefined;
    /** 亲属区县 */
    relationArea?: string | undefined;
    /** 亲属地址 */
    relationAddress?: string | undefined;
    /** 拓展信息 */
    patientExtra?: PatientExtra[] | undefined;
    /** 最近五次干体重 */
    lastBestWeight?: PatientMedicalHistoryCustomItem[] | undefined;
    /** 最近五次血管通路 */
    lastVascularAccess?: PatientMedicalHistoryCustomItem[] | undefined;
    /** 最近五次抗凝剂 */
    lastAnticoagulant?: PatientMedicalHistoryCustomItem[] | undefined;
    /** 最近五次传染病诊断 */
    lastDiagnosisInfectiousDisease?: PatientMedicalHistoryCustomItem[] | undefined;
    /** 最近五次肿瘤 */
    lastTumour?: PatientMedicalHistoryCustomItem[] | undefined;
    /** 最近五次过敏反应 */
    lastAllergicReaction?: PatientMedicalHistoryCustomItem[] | undefined;
    /** 治疗方案调整 */
    prescriptionPlans?: PrescriptionPlan[] | undefined;

    constructor(data?: IPatientMedicalHistoryCustom) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.operator = _data["operator"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.nameFull = _data["nameFull"];
            this.genderLabel = _data["genderLabel"];
            this.source = _data["source"];
            this.sourceLabel = _data["sourceLabel"];
            this.idNumber = _data["idNumber"];
            this.tmplId = _data["tmplId"];
            this.telephone = _data["telephone"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.medicareNumber = _data["medicareNumber"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.address = _data["address"];
            this.workUnit = _data["workUnit"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.province = _data["province"];
            this.city = _data["city"];
            this.area = _data["area"];
            this.diagnosisLabel = _data["diagnosisLabel"];
            this.diagnosisComplication = _data["diagnosisComplication"];
            this.relation = _data["relation"];
            this.relationName = _data["relationName"];
            this.relationPhone = _data["relationPhone"];
            this.relationTel = _data["relationTel"];
            this.relationEmail = _data["relationEmail"];
            this.relationProvince = _data["relationProvince"];
            this.relationCity = _data["relationCity"];
            this.relationArea = _data["relationArea"];
            this.relationAddress = _data["relationAddress"];
            if (Array.isArray(_data["patientExtra"])) {
                this.patientExtra = [] as any;
                for (let item of _data["patientExtra"])
                    this.patientExtra!.push(PatientExtra.fromJS(item));
            }
            if (Array.isArray(_data["lastBestWeight"])) {
                this.lastBestWeight = [] as any;
                for (let item of _data["lastBestWeight"])
                    this.lastBestWeight!.push(PatientMedicalHistoryCustomItem.fromJS(item));
            }
            if (Array.isArray(_data["lastVascularAccess"])) {
                this.lastVascularAccess = [] as any;
                for (let item of _data["lastVascularAccess"])
                    this.lastVascularAccess!.push(PatientMedicalHistoryCustomItem.fromJS(item));
            }
            if (Array.isArray(_data["lastAnticoagulant"])) {
                this.lastAnticoagulant = [] as any;
                for (let item of _data["lastAnticoagulant"])
                    this.lastAnticoagulant!.push(PatientMedicalHistoryCustomItem.fromJS(item));
            }
            if (Array.isArray(_data["lastDiagnosisInfectiousDisease"])) {
                this.lastDiagnosisInfectiousDisease = [] as any;
                for (let item of _data["lastDiagnosisInfectiousDisease"])
                    this.lastDiagnosisInfectiousDisease!.push(PatientMedicalHistoryCustomItem.fromJS(item));
            }
            if (Array.isArray(_data["lastTumour"])) {
                this.lastTumour = [] as any;
                for (let item of _data["lastTumour"])
                    this.lastTumour!.push(PatientMedicalHistoryCustomItem.fromJS(item));
            }
            if (Array.isArray(_data["lastAllergicReaction"])) {
                this.lastAllergicReaction = [] as any;
                for (let item of _data["lastAllergicReaction"])
                    this.lastAllergicReaction!.push(PatientMedicalHistoryCustomItem.fromJS(item));
            }
            if (Array.isArray(_data["prescriptionPlans"])) {
                this.prescriptionPlans = [] as any;
                for (let item of _data["prescriptionPlans"])
                    this.prescriptionPlans!.push(PrescriptionPlan.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientMedicalHistoryCustom {
        data = typeof data === 'object' ? data : {};
        let result = new PatientMedicalHistoryCustom();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["operator"] = this.operator;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["nameFull"] = this.nameFull;
        data["genderLabel"] = this.genderLabel;
        data["source"] = this.source;
        data["sourceLabel"] = this.sourceLabel;
        data["idNumber"] = this.idNumber;
        data["tmplId"] = this.tmplId;
        data["telephone"] = this.telephone;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toLocaleString() : <any>undefined;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["medicareNumber"] = this.medicareNumber;
        data["dialysisNumber"] = this.dialysisNumber;
        data["address"] = this.address;
        data["workUnit"] = this.workUnit;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["province"] = this.province;
        data["city"] = this.city;
        data["area"] = this.area;
        data["diagnosisLabel"] = this.diagnosisLabel;
        data["diagnosisComplication"] = this.diagnosisComplication;
        data["relation"] = this.relation;
        data["relationName"] = this.relationName;
        data["relationPhone"] = this.relationPhone;
        data["relationTel"] = this.relationTel;
        data["relationEmail"] = this.relationEmail;
        data["relationProvince"] = this.relationProvince;
        data["relationCity"] = this.relationCity;
        data["relationArea"] = this.relationArea;
        data["relationAddress"] = this.relationAddress;
        if (Array.isArray(this.patientExtra)) {
            data["patientExtra"] = [];
            for (let item of this.patientExtra)
                data["patientExtra"].push(item.toJSON());
        }
        if (Array.isArray(this.lastBestWeight)) {
            data["lastBestWeight"] = [];
            for (let item of this.lastBestWeight)
                data["lastBestWeight"].push(item.toJSON());
        }
        if (Array.isArray(this.lastVascularAccess)) {
            data["lastVascularAccess"] = [];
            for (let item of this.lastVascularAccess)
                data["lastVascularAccess"].push(item.toJSON());
        }
        if (Array.isArray(this.lastAnticoagulant)) {
            data["lastAnticoagulant"] = [];
            for (let item of this.lastAnticoagulant)
                data["lastAnticoagulant"].push(item.toJSON());
        }
        if (Array.isArray(this.lastDiagnosisInfectiousDisease)) {
            data["lastDiagnosisInfectiousDisease"] = [];
            for (let item of this.lastDiagnosisInfectiousDisease)
                data["lastDiagnosisInfectiousDisease"].push(item.toJSON());
        }
        if (Array.isArray(this.lastTumour)) {
            data["lastTumour"] = [];
            for (let item of this.lastTumour)
                data["lastTumour"].push(item.toJSON());
        }
        if (Array.isArray(this.lastAllergicReaction)) {
            data["lastAllergicReaction"] = [];
            for (let item of this.lastAllergicReaction)
                data["lastAllergicReaction"].push(item.toJSON());
        }
        if (Array.isArray(this.prescriptionPlans)) {
            data["prescriptionPlans"] = [];
            for (let item of this.prescriptionPlans)
                data["prescriptionPlans"].push(item.toJSON());
        }
        return data;
    }
}

/** 病案记录自定义显示 */
export interface IPatientMedicalHistoryCustom {
    /** 标识 为空时，标识为当前数据，不允许删除 */
    id?: string | undefined;
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 操作人 */
    operator?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 *用于患者重名,默认填姓名,系统内默认显示别名,打印单据使用姓名* */
    name2?: string | undefined;
    /** 患者全名 */
    nameFull?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    genderLabel?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    sourceLabel?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 模板标识 */
    tmplId?: string | undefined;
    /** 本人电话 */
    telephone?: string | undefined;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 医保卡号 */
    medicareNumber?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 家庭住址 */
    address?: string | undefined;
    /** 工作单位 */
    workUnit?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosisLabel?: string | undefined;
    /** 并发症诊断 *无,有* */
    diagnosisComplication?: string | undefined;
    /** 亲属与患者关系 */
    relation?: string | undefined;
    /** 亲属姓名 */
    relationName?: string | undefined;
    /** 亲属移动电话 */
    relationPhone?: string | undefined;
    /** 亲属座机 */
    relationTel?: string | undefined;
    /** 亲属邮箱 */
    relationEmail?: string | undefined;
    /** 亲属省级 */
    relationProvince?: string | undefined;
    /** 亲属城市 */
    relationCity?: string | undefined;
    /** 亲属区县 */
    relationArea?: string | undefined;
    /** 亲属地址 */
    relationAddress?: string | undefined;
    /** 拓展信息 */
    patientExtra?: PatientExtra[] | undefined;
    /** 最近五次干体重 */
    lastBestWeight?: PatientMedicalHistoryCustomItem[] | undefined;
    /** 最近五次血管通路 */
    lastVascularAccess?: PatientMedicalHistoryCustomItem[] | undefined;
    /** 最近五次抗凝剂 */
    lastAnticoagulant?: PatientMedicalHistoryCustomItem[] | undefined;
    /** 最近五次传染病诊断 */
    lastDiagnosisInfectiousDisease?: PatientMedicalHistoryCustomItem[] | undefined;
    /** 最近五次肿瘤 */
    lastTumour?: PatientMedicalHistoryCustomItem[] | undefined;
    /** 最近五次过敏反应 */
    lastAllergicReaction?: PatientMedicalHistoryCustomItem[] | undefined;
    /** 治疗方案调整 */
    prescriptionPlans?: PrescriptionPlan[] | undefined;
}

export class PatientMedicalHistoryCustomItem implements IPatientMedicalHistoryCustomItem {
    /** 日期 */
    date?: string | undefined;
    /** 内容 */
    data?: string | undefined;

    constructor(data?: IPatientMedicalHistoryCustomItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.data = _data["data"];
        }
    }

    static fromJS(data: any): PatientMedicalHistoryCustomItem {
        data = typeof data === 'object' ? data : {};
        let result = new PatientMedicalHistoryCustomItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["data"] = this.data;
        return data;
    }
}

export interface IPatientMedicalHistoryCustomItem {
    /** 日期 */
    date?: string | undefined;
    /** 内容 */
    data?: string | undefined;
}

/** Reponse */
export class PatientMedicalHistoryCustomResult implements IPatientMedicalHistoryCustomResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientMedicalHistoryCustom[] | undefined;

    constructor(data?: IPatientMedicalHistoryCustomResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientMedicalHistoryCustom.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientMedicalHistoryCustomResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientMedicalHistoryCustomResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientMedicalHistoryCustomResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientMedicalHistoryCustom[] | undefined;
}

/** 病案首页记录 */
export class PatientMedicalHistoryEditModel implements IPatientMedicalHistoryEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 内容（整个内容的json格式，用于后端反序列化） */
    data?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 模板标识 */
    tmplId?: string | undefined;

    constructor(data?: IPatientMedicalHistoryEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.data = _data["data"];
            this.remark = _data["remark"];
            this.tmplId = _data["tmplId"];
        }
    }

    static fromJS(data: any): PatientMedicalHistoryEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientMedicalHistoryEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["data"] = this.data;
        data["remark"] = this.remark;
        data["tmplId"] = this.tmplId;
        return data;
    }
}

/** 病案首页记录 */
export interface IPatientMedicalHistoryEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 内容（整个内容的json格式，用于后端反序列化） */
    data?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 模板标识 */
    tmplId?: string | undefined;
}

/** 病案首页记录 */
export class PatientMedicalHistoryView implements IPatientMedicalHistoryView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 内容（整个内容的json格式，用于后端反序列化） */
    data?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 模板标识 */
    tmplId?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientMedicalHistoryView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.data = _data["data"];
            this.remark = _data["remark"];
            this.tmplId = _data["tmplId"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientMedicalHistoryView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientMedicalHistoryView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["data"] = this.data;
        data["remark"] = this.remark;
        data["tmplId"] = this.tmplId;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 病案首页记录 */
export interface IPatientMedicalHistoryView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 内容（整个内容的json格式，用于后端反序列化） */
    data?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 模板标识 */
    tmplId?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientMedicalHistoryViewResult implements IPatientMedicalHistoryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientMedicalHistoryView[] | undefined;

    constructor(data?: IPatientMedicalHistoryViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientMedicalHistoryView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientMedicalHistoryViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientMedicalHistoryViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientMedicalHistoryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientMedicalHistoryView[] | undefined;
}

/** Reponse */
export class PatientMedicalHistoryViewResultEntry implements IPatientMedicalHistoryViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientMedicalHistoryView;

    constructor(data?: IPatientMedicalHistoryViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientMedicalHistoryView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientMedicalHistoryViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientMedicalHistoryViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientMedicalHistoryViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientMedicalHistoryView;
}

/** 合并其他血液净化模式 */
export class PatientOtherDialysis implements IPatientOtherDialysis {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 处方日期 */
    prescriptionDate?: dayjs.Dayjs;
    /** 有无变化 *1:有,0:无* */
    change?: number;
    /** 合并其它血液净化模式 *1:有,0:无* */
    mergeOtherMode?: number;
    /** 合并其它血液净化模式 *可选值：腹膜透析/结肠透析/其它，多选* */
    modes?: string | undefined;
    /** 其它 *当模式选择其它时显示此栏位* */
    modesOther?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;

    constructor(data?: IPatientOtherDialysis) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.prescriptionDate = _data["prescriptionDate"] ? dayjs(_data["prescriptionDate"].toString()) : <any>undefined;
            this.change = _data["change"];
            this.mergeOtherMode = _data["mergeOtherMode"];
            this.modes = _data["modes"];
            this.modesOther = _data["modesOther"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientOtherDialysis {
        data = typeof data === 'object' ? data : {};
        let result = new PatientOtherDialysis();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["prescriptionDate"] = this.prescriptionDate ? this.prescriptionDate.toLocaleString() : <any>undefined;
        data["change"] = this.change;
        data["mergeOtherMode"] = this.mergeOtherMode;
        data["modes"] = this.modes;
        data["modesOther"] = this.modesOther;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        return data;
    }
}

/** 合并其他血液净化模式 */
export interface IPatientOtherDialysis {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 处方日期 */
    prescriptionDate?: dayjs.Dayjs;
    /** 有无变化 *1:有,0:无* */
    change?: number;
    /** 合并其它血液净化模式 *1:有,0:无* */
    mergeOtherMode?: number;
    /** 合并其它血液净化模式 *可选值：腹膜透析/结肠透析/其它，多选* */
    modes?: string | undefined;
    /** 其它 *当模式选择其它时显示此栏位* */
    modesOther?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
}

export class PatientOtherDialysisEditModel implements IPatientOtherDialysisEditModel {
    /** 处方日期 */
    prescriptionDate!: dayjs.Dayjs;
    /** 有无变化 *1:有,0:无* */
    change!: number;
    /** 合并其它血液净化模式 *1:有,0:无* */
    mergeOtherMode!: number;
    /** 合并其它血液净化模式 *可选值：腹膜透析/结肠透析/其它，多选* */
    modes?: string | undefined;
    /** 其它 *当模式选择其它时显示此栏位* */
    modesOther?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 附件 */
    images?: PatientOtherDialysisImagesEditModel[] | undefined;

    constructor(data?: IPatientOtherDialysisEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.prescriptionDate = _data["prescriptionDate"] ? dayjs(_data["prescriptionDate"].toString()) : <any>undefined;
            this.change = _data["change"];
            this.mergeOtherMode = _data["mergeOtherMode"];
            this.modes = _data["modes"];
            this.modesOther = _data["modesOther"];
            this.patientId = _data["patientId"];
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(PatientOtherDialysisImagesEditModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientOtherDialysisEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientOtherDialysisEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["prescriptionDate"] = this.prescriptionDate ? this.prescriptionDate.toLocaleString() : <any>undefined;
        data["change"] = this.change;
        data["mergeOtherMode"] = this.mergeOtherMode;
        data["modes"] = this.modes;
        data["modesOther"] = this.modesOther;
        data["patientId"] = this.patientId;
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPatientOtherDialysisEditModel {
    /** 处方日期 */
    prescriptionDate: dayjs.Dayjs;
    /** 有无变化 *1:有,0:无* */
    change: number;
    /** 合并其它血液净化模式 *1:有,0:无* */
    mergeOtherMode: number;
    /** 合并其它血液净化模式 *可选值：腹膜透析/结肠透析/其它，多选* */
    modes?: string | undefined;
    /** 其它 *当模式选择其它时显示此栏位* */
    modesOther?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 附件 */
    images?: PatientOtherDialysisImagesEditModel[] | undefined;
}

/** 合并其他血液净化模式附件 */
export class PatientOtherDialysisImages implements IPatientOtherDialysisImages {
    /** 标识 */
    id?: string | undefined;
    /** [合并其他血液净化模式标识](合并其他血液净化模式) */
    patientOtherDialysisId?: string | undefined;
    /** [照片文件标识](文件列表) */
    hfsFilesId?: string | undefined;
    /** 拍摄日期 */
    imageDate?: dayjs.Dayjs | undefined;
    /** 照片标签 *多个以;分隔* */
    tag?: string | undefined;
    /** 照片描述 */
    imageDesc?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patientOtherDialysiss?: PatientOtherDialysis;
    hfsFiless?: HfsFiles;

    constructor(data?: IPatientOtherDialysisImages) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientOtherDialysisId = _data["patientOtherDialysisId"];
            this.hfsFilesId = _data["hfsFilesId"];
            this.imageDate = _data["imageDate"] ? dayjs(_data["imageDate"].toString()) : <any>undefined;
            this.tag = _data["tag"];
            this.imageDesc = _data["imageDesc"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patientOtherDialysiss = _data["patientOtherDialysiss"] ? PatientOtherDialysis.fromJS(_data["patientOtherDialysiss"]) : <any>undefined;
            this.hfsFiless = _data["hfsFiless"] ? HfsFiles.fromJS(_data["hfsFiless"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientOtherDialysisImages {
        data = typeof data === 'object' ? data : {};
        let result = new PatientOtherDialysisImages();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientOtherDialysisId"] = this.patientOtherDialysisId;
        data["hfsFilesId"] = this.hfsFilesId;
        data["imageDate"] = this.imageDate ? this.imageDate.toLocaleString() : <any>undefined;
        data["tag"] = this.tag;
        data["imageDesc"] = this.imageDesc;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patientOtherDialysiss"] = this.patientOtherDialysiss ? this.patientOtherDialysiss.toJSON() : <any>undefined;
        data["hfsFiless"] = this.hfsFiless ? this.hfsFiless.toJSON() : <any>undefined;
        return data;
    }
}

/** 合并其他血液净化模式附件 */
export interface IPatientOtherDialysisImages {
    /** 标识 */
    id?: string | undefined;
    /** [合并其他血液净化模式标识](合并其他血液净化模式) */
    patientOtherDialysisId?: string | undefined;
    /** [照片文件标识](文件列表) */
    hfsFilesId?: string | undefined;
    /** 拍摄日期 */
    imageDate?: dayjs.Dayjs | undefined;
    /** 照片标签 *多个以;分隔* */
    tag?: string | undefined;
    /** 照片描述 */
    imageDesc?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patientOtherDialysiss?: PatientOtherDialysis;
    hfsFiless?: HfsFiles;
}

export class PatientOtherDialysisImagesEditModel implements IPatientOtherDialysisImagesEditModel {
    /** [照片文件标识](#文件列表) */
    hfsFilesId?: string | undefined;
    /** 拍摄日期 */
    imageDate?: dayjs.Dayjs | undefined;
    /** 照片标签 *多个以;分隔* */
    tag?: string | undefined;
    /** 照片描述 */
    imageDesc?: string | undefined;

    constructor(data?: IPatientOtherDialysisImagesEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hfsFilesId = _data["hfsFilesId"];
            this.imageDate = _data["imageDate"] ? dayjs(_data["imageDate"].toString()) : <any>undefined;
            this.tag = _data["tag"];
            this.imageDesc = _data["imageDesc"];
        }
    }

    static fromJS(data: any): PatientOtherDialysisImagesEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientOtherDialysisImagesEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hfsFilesId"] = this.hfsFilesId;
        data["imageDate"] = this.imageDate ? this.imageDate.toLocaleString() : <any>undefined;
        data["tag"] = this.tag;
        data["imageDesc"] = this.imageDesc;
        return data;
    }
}

export interface IPatientOtherDialysisImagesEditModel {
    /** [照片文件标识](#文件列表) */
    hfsFilesId?: string | undefined;
    /** 拍摄日期 */
    imageDate?: dayjs.Dayjs | undefined;
    /** 照片标签 *多个以;分隔* */
    tag?: string | undefined;
    /** 照片描述 */
    imageDesc?: string | undefined;
}

/** Reponse */
export class PatientOtherDialysisImagesResult implements IPatientOtherDialysisImagesResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientOtherDialysisImages[] | undefined;

    constructor(data?: IPatientOtherDialysisImagesResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientOtherDialysisImages.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientOtherDialysisImagesResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientOtherDialysisImagesResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientOtherDialysisImagesResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientOtherDialysisImages[] | undefined;
}

/** Reponse */
export class PatientOtherDialysisImagesResultEntry implements IPatientOtherDialysisImagesResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientOtherDialysisImages;

    constructor(data?: IPatientOtherDialysisImagesResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientOtherDialysisImages.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientOtherDialysisImagesResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientOtherDialysisImagesResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientOtherDialysisImagesResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientOtherDialysisImages;
}

export class PatientOtherDialysisImagesView implements IPatientOtherDialysisImagesView {
    /** [照片文件标识](#文件列表) */
    hfsFilesId?: string | undefined;
    /** 拍摄日期 */
    imageDate?: dayjs.Dayjs | undefined;
    /** 照片标签 *多个以;分隔* */
    tag?: string | undefined;
    /** 照片描述 */
    imageDesc?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** [合并其他血液净化模式标识](合并其他血液净化模式Id) */
    patientOtherDialysisId?: string | undefined;
    /** 照片文件 - 原文件名 */
    hfsFilesName?: string | undefined;
    /** 照片文件 - 扩展名 */
    hfsFilesExtension?: string | undefined;
    /** 照片文件 - 文件大小 *字节* */
    hfsFilesLength?: number;
    /** 照片文件 - 文件路径 */
    hfsFilesPath?: string | undefined;
    /** 照片文件 - url */
    hfsFilesUrl?: string | undefined;

    constructor(data?: IPatientOtherDialysisImagesView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hfsFilesId = _data["hfsFilesId"];
            this.imageDate = _data["imageDate"] ? dayjs(_data["imageDate"].toString()) : <any>undefined;
            this.tag = _data["tag"];
            this.imageDesc = _data["imageDesc"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patientOtherDialysisId = _data["patientOtherDialysisId"];
            this.hfsFilesName = _data["hfsFilesName"];
            this.hfsFilesExtension = _data["hfsFilesExtension"];
            this.hfsFilesLength = _data["hfsFilesLength"];
            this.hfsFilesPath = _data["hfsFilesPath"];
            this.hfsFilesUrl = _data["hfsFilesUrl"];
        }
    }

    static fromJS(data: any): PatientOtherDialysisImagesView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientOtherDialysisImagesView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hfsFilesId"] = this.hfsFilesId;
        data["imageDate"] = this.imageDate ? this.imageDate.toLocaleString() : <any>undefined;
        data["tag"] = this.tag;
        data["imageDesc"] = this.imageDesc;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patientOtherDialysisId"] = this.patientOtherDialysisId;
        data["hfsFilesName"] = this.hfsFilesName;
        data["hfsFilesExtension"] = this.hfsFilesExtension;
        data["hfsFilesLength"] = this.hfsFilesLength;
        data["hfsFilesPath"] = this.hfsFilesPath;
        data["hfsFilesUrl"] = this.hfsFilesUrl;
        return data;
    }
}

export interface IPatientOtherDialysisImagesView {
    /** [照片文件标识](#文件列表) */
    hfsFilesId?: string | undefined;
    /** 拍摄日期 */
    imageDate?: dayjs.Dayjs | undefined;
    /** 照片标签 *多个以;分隔* */
    tag?: string | undefined;
    /** 照片描述 */
    imageDesc?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** [合并其他血液净化模式标识](合并其他血液净化模式Id) */
    patientOtherDialysisId?: string | undefined;
    /** 照片文件 - 原文件名 */
    hfsFilesName?: string | undefined;
    /** 照片文件 - 扩展名 */
    hfsFilesExtension?: string | undefined;
    /** 照片文件 - 文件大小 *字节* */
    hfsFilesLength?: number;
    /** 照片文件 - 文件路径 */
    hfsFilesPath?: string | undefined;
    /** 照片文件 - url */
    hfsFilesUrl?: string | undefined;
}

/** 合并其他血液净化模式附件 (ViewModel) */
export class PatientOtherDialysisImagesViewModel implements IPatientOtherDialysisImagesViewModel {
    /** [合并其他血液净化模式标识](合并其他血液净化模式Id) */
    patientOtherDialysisId!: string;
    /** [照片文件标识](文件列表Id) */
    hfsFilesId?: string | undefined;
    /** 拍摄日期 */
    imageDate?: dayjs.Dayjs | undefined;
    /** 照片标签 *多个以;分隔* */
    tag?: string | undefined;
    /** 照片描述 */
    imageDesc?: string | undefined;

    constructor(data?: IPatientOtherDialysisImagesViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientOtherDialysisId = _data["patientOtherDialysisId"];
            this.hfsFilesId = _data["hfsFilesId"];
            this.imageDate = _data["imageDate"] ? dayjs(_data["imageDate"].toString()) : <any>undefined;
            this.tag = _data["tag"];
            this.imageDesc = _data["imageDesc"];
        }
    }

    static fromJS(data: any): PatientOtherDialysisImagesViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientOtherDialysisImagesViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientOtherDialysisId"] = this.patientOtherDialysisId;
        data["hfsFilesId"] = this.hfsFilesId;
        data["imageDate"] = this.imageDate ? this.imageDate.toLocaleString() : <any>undefined;
        data["tag"] = this.tag;
        data["imageDesc"] = this.imageDesc;
        return data;
    }
}

/** 合并其他血液净化模式附件 (ViewModel) */
export interface IPatientOtherDialysisImagesViewModel {
    /** [合并其他血液净化模式标识](合并其他血液净化模式Id) */
    patientOtherDialysisId: string;
    /** [照片文件标识](文件列表Id) */
    hfsFilesId?: string | undefined;
    /** 拍摄日期 */
    imageDate?: dayjs.Dayjs | undefined;
    /** 照片标签 *多个以;分隔* */
    tag?: string | undefined;
    /** 照片描述 */
    imageDesc?: string | undefined;
}

export class PatientOtherDialysisView implements IPatientOtherDialysisView {
    /** 处方日期 */
    prescriptionDate!: dayjs.Dayjs;
    /** 有无变化 *1:有,0:无* */
    change!: number;
    /** 合并其它血液净化模式 *1:有,0:无* */
    mergeOtherMode!: number;
    /** 合并其它血液净化模式 *可选值：腹膜透析/结肠透析/其它，多选* */
    modes?: string | undefined;
    /** 其它 *当模式选择其它时显示此栏位* */
    modesOther?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 附件 */
    images?: PatientOtherDialysisImagesView[] | undefined;

    constructor(data?: IPatientOtherDialysisView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.prescriptionDate = _data["prescriptionDate"] ? dayjs(_data["prescriptionDate"].toString()) : <any>undefined;
            this.change = _data["change"];
            this.mergeOtherMode = _data["mergeOtherMode"];
            this.modes = _data["modes"];
            this.modesOther = _data["modesOther"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(PatientOtherDialysisImagesView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientOtherDialysisView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientOtherDialysisView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["prescriptionDate"] = this.prescriptionDate ? this.prescriptionDate.toLocaleString() : <any>undefined;
        data["change"] = this.change;
        data["mergeOtherMode"] = this.mergeOtherMode;
        data["modes"] = this.modes;
        data["modesOther"] = this.modesOther;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPatientOtherDialysisView {
    /** 处方日期 */
    prescriptionDate: dayjs.Dayjs;
    /** 有无变化 *1:有,0:无* */
    change: number;
    /** 合并其它血液净化模式 *1:有,0:无* */
    mergeOtherMode: number;
    /** 合并其它血液净化模式 *可选值：腹膜透析/结肠透析/其它，多选* */
    modes?: string | undefined;
    /** 其它 *当模式选择其它时显示此栏位* */
    modesOther?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 附件 */
    images?: PatientOtherDialysisImagesView[] | undefined;
}

/** Reponse */
export class PatientOtherDialysisViewResult implements IPatientOtherDialysisViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientOtherDialysisView[] | undefined;

    constructor(data?: IPatientOtherDialysisViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientOtherDialysisView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientOtherDialysisViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientOtherDialysisViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientOtherDialysisViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientOtherDialysisView[] | undefined;
}

/** Reponse */
export class PatientOtherDialysisViewResultEntry implements IPatientOtherDialysisViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientOtherDialysisView;

    constructor(data?: IPatientOtherDialysisViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientOtherDialysisView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientOtherDialysisViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientOtherDialysisViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientOtherDialysisViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientOtherDialysisView;
}

/** 检查报告信息 */
export class PatientPacsReport implements IPatientPacsReport {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 数据来源 `DIC.EXAMINE.DATASOURCE` */
    dataSource?: string | undefined;
    /** 检查大类 `DIC.EXAMINE.CATEGORY` */
    examineCategory?: string | undefined;
    /** 检查项目 `DIC.EXAMINE.ITEM` */
    examineItem?: string | undefined;
    /** 检查部位 `DIC.EXAMINE.POSITION` */
    examinePosition?: string | undefined;
    /** 检查目的 */
    examinePurpose?: string | undefined;
    /** 临床诊断 */
    diagnosis?: string | undefined;
    /** 检查所见 */
    examineFind?: string | undefined;
    /** 检查结论 */
    examineConclusion?: string | undefined;
    /** 胶片类型 */
    filmType?: string | undefined;
    /** 影像文件 *data:image/jpeg;base64,...* */
    film?: string | undefined;
    /** 影像文件路径 */
    filmUrl?: string | undefined;
    /** 申请时间 */
    applicationTime?: dayjs.Dayjs | undefined;
    /** 申请科室 */
    applicationDepartment?: string | undefined;
    /** 申请人编码 */
    proposerId?: string | undefined;
    /** 申请人姓名 */
    proposerName?: string | undefined;
    /** 报告时间 */
    reportTime?: dayjs.Dayjs;
    /** 报告人编码 */
    reportId?: string | undefined;
    /** 报告人姓名 */
    reportName?: string | undefined;
    /** 审核时间 */
    auditTime?: dayjs.Dayjs | undefined;
    /** 审核人编码 */
    auditId?: string | undefined;
    /** 审核人姓名 */
    auditName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;

    constructor(data?: IPatientPacsReport) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.reportNo = _data["reportNo"];
            this.dataSource = _data["dataSource"];
            this.examineCategory = _data["examineCategory"];
            this.examineItem = _data["examineItem"];
            this.examinePosition = _data["examinePosition"];
            this.examinePurpose = _data["examinePurpose"];
            this.diagnosis = _data["diagnosis"];
            this.examineFind = _data["examineFind"];
            this.examineConclusion = _data["examineConclusion"];
            this.filmType = _data["filmType"];
            this.film = _data["film"];
            this.filmUrl = _data["filmUrl"];
            this.applicationTime = _data["applicationTime"] ? dayjs(_data["applicationTime"].toString()) : <any>undefined;
            this.applicationDepartment = _data["applicationDepartment"];
            this.proposerId = _data["proposerId"];
            this.proposerName = _data["proposerName"];
            this.reportTime = _data["reportTime"] ? dayjs(_data["reportTime"].toString()) : <any>undefined;
            this.reportId = _data["reportId"];
            this.reportName = _data["reportName"];
            this.auditTime = _data["auditTime"] ? dayjs(_data["auditTime"].toString()) : <any>undefined;
            this.auditId = _data["auditId"];
            this.auditName = _data["auditName"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientPacsReport {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPacsReport();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["reportNo"] = this.reportNo;
        data["dataSource"] = this.dataSource;
        data["examineCategory"] = this.examineCategory;
        data["examineItem"] = this.examineItem;
        data["examinePosition"] = this.examinePosition;
        data["examinePurpose"] = this.examinePurpose;
        data["diagnosis"] = this.diagnosis;
        data["examineFind"] = this.examineFind;
        data["examineConclusion"] = this.examineConclusion;
        data["filmType"] = this.filmType;
        data["film"] = this.film;
        data["filmUrl"] = this.filmUrl;
        data["applicationTime"] = this.applicationTime ? this.applicationTime.toLocaleString() : <any>undefined;
        data["applicationDepartment"] = this.applicationDepartment;
        data["proposerId"] = this.proposerId;
        data["proposerName"] = this.proposerName;
        data["reportTime"] = this.reportTime ? this.reportTime.toLocaleString() : <any>undefined;
        data["reportId"] = this.reportId;
        data["reportName"] = this.reportName;
        data["auditTime"] = this.auditTime ? this.auditTime.toLocaleString() : <any>undefined;
        data["auditId"] = this.auditId;
        data["auditName"] = this.auditName;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        return data;
    }
}

/** 检查报告信息 */
export interface IPatientPacsReport {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 数据来源 `DIC.EXAMINE.DATASOURCE` */
    dataSource?: string | undefined;
    /** 检查大类 `DIC.EXAMINE.CATEGORY` */
    examineCategory?: string | undefined;
    /** 检查项目 `DIC.EXAMINE.ITEM` */
    examineItem?: string | undefined;
    /** 检查部位 `DIC.EXAMINE.POSITION` */
    examinePosition?: string | undefined;
    /** 检查目的 */
    examinePurpose?: string | undefined;
    /** 临床诊断 */
    diagnosis?: string | undefined;
    /** 检查所见 */
    examineFind?: string | undefined;
    /** 检查结论 */
    examineConclusion?: string | undefined;
    /** 胶片类型 */
    filmType?: string | undefined;
    /** 影像文件 *data:image/jpeg;base64,...* */
    film?: string | undefined;
    /** 影像文件路径 */
    filmUrl?: string | undefined;
    /** 申请时间 */
    applicationTime?: dayjs.Dayjs | undefined;
    /** 申请科室 */
    applicationDepartment?: string | undefined;
    /** 申请人编码 */
    proposerId?: string | undefined;
    /** 申请人姓名 */
    proposerName?: string | undefined;
    /** 报告时间 */
    reportTime?: dayjs.Dayjs;
    /** 报告人编码 */
    reportId?: string | undefined;
    /** 报告人姓名 */
    reportName?: string | undefined;
    /** 审核时间 */
    auditTime?: dayjs.Dayjs | undefined;
    /** 审核人编码 */
    auditId?: string | undefined;
    /** 审核人姓名 */
    auditName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
}

/** Reponse */
export class PatientPacsReportResultEntry implements IPatientPacsReportResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientPacsReport;

    constructor(data?: IPatientPacsReportResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientPacsReport.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientPacsReportResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPacsReportResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientPacsReportResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientPacsReport;
}

export class PatientPacsReportView implements IPatientPacsReportView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 数据来源 `DIC.EXAMINE.DATASOURCE` */
    dataSource?: string | undefined;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 检查大类 `DIC.EXAMINE.CATEGORY` */
    examineCategory?: string | undefined;
    /** 检查项目 `DIC.EXAMINE.ITEM` */
    examineItem?: string | undefined;
    /** 检查部位 `DIC.EXAMINE.POSITION` */
    examinePosition?: string | undefined;
    /** 检查目的 */
    examinePurpose?: string | undefined;
    /** 临床诊断 */
    diagnosis?: string | undefined;
    /** 申请时间 */
    applicationTime?: dayjs.Dayjs | undefined;
    /** 申请科室 */
    applicationDepartment?: string | undefined;
    /** 申请人编码 */
    proposerId?: string | undefined;
    /** 申请人姓名 */
    proposerName?: string | undefined;
    /** 报告时间 */
    reportTime?: dayjs.Dayjs | undefined;
    /** 报告人编码 */
    reportId?: string | undefined;
    /** 报告人姓名 */
    reportName?: string | undefined;
    /** 审核时间 */
    auditTime?: dayjs.Dayjs | undefined;
    /** 审核人编码 */
    auditId?: string | undefined;
    /** 审核人姓名 */
    auditName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 检查所见 */
    examineFind?: string | undefined;
    /** 检查结论 */
    examineConclusion?: string | undefined;
    /** 胶片类型 */
    filmType?: string | undefined;
    /** 影像文件 *data:image/jpeg;base64,...* */
    film?: string | undefined;
    /** 影像文件路径 */
    filmUrl?: string | undefined;
    /** 数据来源显示值 */
    dataSourceLable?: string | undefined;
    /** 检查大类显示值 */
    examineCategoryLable?: string | undefined;
    /** 检查项目显示值 */
    examineItemLable?: string | undefined;
    /** 检查部位显示值 */
    examinePositionLable?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientPacsReportView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.dataSource = _data["dataSource"];
            this.reportNo = _data["reportNo"];
            this.examineCategory = _data["examineCategory"];
            this.examineItem = _data["examineItem"];
            this.examinePosition = _data["examinePosition"];
            this.examinePurpose = _data["examinePurpose"];
            this.diagnosis = _data["diagnosis"];
            this.applicationTime = _data["applicationTime"] ? dayjs(_data["applicationTime"].toString()) : <any>undefined;
            this.applicationDepartment = _data["applicationDepartment"];
            this.proposerId = _data["proposerId"];
            this.proposerName = _data["proposerName"];
            this.reportTime = _data["reportTime"] ? dayjs(_data["reportTime"].toString()) : <any>undefined;
            this.reportId = _data["reportId"];
            this.reportName = _data["reportName"];
            this.auditTime = _data["auditTime"] ? dayjs(_data["auditTime"].toString()) : <any>undefined;
            this.auditId = _data["auditId"];
            this.auditName = _data["auditName"];
            this.remark = _data["remark"];
            this.examineFind = _data["examineFind"];
            this.examineConclusion = _data["examineConclusion"];
            this.filmType = _data["filmType"];
            this.film = _data["film"];
            this.filmUrl = _data["filmUrl"];
            this.dataSourceLable = _data["dataSourceLable"];
            this.examineCategoryLable = _data["examineCategoryLable"];
            this.examineItemLable = _data["examineItemLable"];
            this.examinePositionLable = _data["examinePositionLable"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientPacsReportView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPacsReportView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["dataSource"] = this.dataSource;
        data["reportNo"] = this.reportNo;
        data["examineCategory"] = this.examineCategory;
        data["examineItem"] = this.examineItem;
        data["examinePosition"] = this.examinePosition;
        data["examinePurpose"] = this.examinePurpose;
        data["diagnosis"] = this.diagnosis;
        data["applicationTime"] = this.applicationTime ? this.applicationTime.toLocaleString() : <any>undefined;
        data["applicationDepartment"] = this.applicationDepartment;
        data["proposerId"] = this.proposerId;
        data["proposerName"] = this.proposerName;
        data["reportTime"] = this.reportTime ? this.reportTime.toLocaleString() : <any>undefined;
        data["reportId"] = this.reportId;
        data["reportName"] = this.reportName;
        data["auditTime"] = this.auditTime ? this.auditTime.toLocaleString() : <any>undefined;
        data["auditId"] = this.auditId;
        data["auditName"] = this.auditName;
        data["remark"] = this.remark;
        data["examineFind"] = this.examineFind;
        data["examineConclusion"] = this.examineConclusion;
        data["filmType"] = this.filmType;
        data["film"] = this.film;
        data["filmUrl"] = this.filmUrl;
        data["dataSourceLable"] = this.dataSourceLable;
        data["examineCategoryLable"] = this.examineCategoryLable;
        data["examineItemLable"] = this.examineItemLable;
        data["examinePositionLable"] = this.examinePositionLable;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface IPatientPacsReportView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 数据来源 `DIC.EXAMINE.DATASOURCE` */
    dataSource?: string | undefined;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 检查大类 `DIC.EXAMINE.CATEGORY` */
    examineCategory?: string | undefined;
    /** 检查项目 `DIC.EXAMINE.ITEM` */
    examineItem?: string | undefined;
    /** 检查部位 `DIC.EXAMINE.POSITION` */
    examinePosition?: string | undefined;
    /** 检查目的 */
    examinePurpose?: string | undefined;
    /** 临床诊断 */
    diagnosis?: string | undefined;
    /** 申请时间 */
    applicationTime?: dayjs.Dayjs | undefined;
    /** 申请科室 */
    applicationDepartment?: string | undefined;
    /** 申请人编码 */
    proposerId?: string | undefined;
    /** 申请人姓名 */
    proposerName?: string | undefined;
    /** 报告时间 */
    reportTime?: dayjs.Dayjs | undefined;
    /** 报告人编码 */
    reportId?: string | undefined;
    /** 报告人姓名 */
    reportName?: string | undefined;
    /** 审核时间 */
    auditTime?: dayjs.Dayjs | undefined;
    /** 审核人编码 */
    auditId?: string | undefined;
    /** 审核人姓名 */
    auditName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 检查所见 */
    examineFind?: string | undefined;
    /** 检查结论 */
    examineConclusion?: string | undefined;
    /** 胶片类型 */
    filmType?: string | undefined;
    /** 影像文件 *data:image/jpeg;base64,...* */
    film?: string | undefined;
    /** 影像文件路径 */
    filmUrl?: string | undefined;
    /** 数据来源显示值 */
    dataSourceLable?: string | undefined;
    /** 检查大类显示值 */
    examineCategoryLable?: string | undefined;
    /** 检查项目显示值 */
    examineItemLable?: string | undefined;
    /** 检查部位显示值 */
    examinePositionLable?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 检查报告信息 (ViewModel) */
export class PatientPacsReportViewModel implements IPatientPacsReportViewModel {
    /** [患者标识](患者信息Id) */
    patientId!: string;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 数据来源 `DIC.EXAMINE.DATASOURCE` */
    dataSource!: string;
    /** 检查大类 `DIC.EXAMINE.CATEGORY` */
    examineCategory!: string;
    /** 检查项目 `DIC.EXAMINE.ITEM` */
    examineItem!: string;
    /** 检查部位 `DIC.EXAMINE.POSITION` */
    examinePosition!: string;
    /** 检查目的 */
    examinePurpose?: string | undefined;
    /** 临床诊断 */
    diagnosis?: string | undefined;
    /** 检查所见 */
    examineFind?: string | undefined;
    /** 检查结论 */
    examineConclusion?: string | undefined;
    /** 胶片类型 */
    filmType?: string | undefined;
    /** 影像文件 *data:image/jpeg;base64,...* */
    film?: string | undefined;
    /** 影像文件路径 */
    filmUrl?: string | undefined;
    /** 申请时间 */
    applicationTime?: dayjs.Dayjs | undefined;
    /** 申请科室 */
    applicationDepartment?: string | undefined;
    /** 申请人编码 */
    proposerId?: string | undefined;
    /** 申请人姓名 */
    proposerName?: string | undefined;
    /** 报告时间 */
    reportTime!: dayjs.Dayjs;
    /** 报告人编码 */
    reportId?: string | undefined;
    /** 报告人姓名 */
    reportName?: string | undefined;
    /** 审核时间 */
    auditTime?: dayjs.Dayjs | undefined;
    /** 审核人编码 */
    auditId?: string | undefined;
    /** 审核人姓名 */
    auditName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IPatientPacsReportViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.reportNo = _data["reportNo"];
            this.dataSource = _data["dataSource"];
            this.examineCategory = _data["examineCategory"];
            this.examineItem = _data["examineItem"];
            this.examinePosition = _data["examinePosition"];
            this.examinePurpose = _data["examinePurpose"];
            this.diagnosis = _data["diagnosis"];
            this.examineFind = _data["examineFind"];
            this.examineConclusion = _data["examineConclusion"];
            this.filmType = _data["filmType"];
            this.film = _data["film"];
            this.filmUrl = _data["filmUrl"];
            this.applicationTime = _data["applicationTime"] ? dayjs(_data["applicationTime"].toString()) : <any>undefined;
            this.applicationDepartment = _data["applicationDepartment"];
            this.proposerId = _data["proposerId"];
            this.proposerName = _data["proposerName"];
            this.reportTime = _data["reportTime"] ? dayjs(_data["reportTime"].toString()) : <any>undefined;
            this.reportId = _data["reportId"];
            this.reportName = _data["reportName"];
            this.auditTime = _data["auditTime"] ? dayjs(_data["auditTime"].toString()) : <any>undefined;
            this.auditId = _data["auditId"];
            this.auditName = _data["auditName"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): PatientPacsReportViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPacsReportViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["reportNo"] = this.reportNo;
        data["dataSource"] = this.dataSource;
        data["examineCategory"] = this.examineCategory;
        data["examineItem"] = this.examineItem;
        data["examinePosition"] = this.examinePosition;
        data["examinePurpose"] = this.examinePurpose;
        data["diagnosis"] = this.diagnosis;
        data["examineFind"] = this.examineFind;
        data["examineConclusion"] = this.examineConclusion;
        data["filmType"] = this.filmType;
        data["film"] = this.film;
        data["filmUrl"] = this.filmUrl;
        data["applicationTime"] = this.applicationTime ? this.applicationTime.toLocaleString() : <any>undefined;
        data["applicationDepartment"] = this.applicationDepartment;
        data["proposerId"] = this.proposerId;
        data["proposerName"] = this.proposerName;
        data["reportTime"] = this.reportTime ? this.reportTime.toLocaleString() : <any>undefined;
        data["reportId"] = this.reportId;
        data["reportName"] = this.reportName;
        data["auditTime"] = this.auditTime ? this.auditTime.toLocaleString() : <any>undefined;
        data["auditId"] = this.auditId;
        data["auditName"] = this.auditName;
        data["remark"] = this.remark;
        return data;
    }
}

/** 检查报告信息 (ViewModel) */
export interface IPatientPacsReportViewModel {
    /** [患者标识](患者信息Id) */
    patientId: string;
    /** 报告单编号 */
    reportNo?: string | undefined;
    /** 数据来源 `DIC.EXAMINE.DATASOURCE` */
    dataSource: string;
    /** 检查大类 `DIC.EXAMINE.CATEGORY` */
    examineCategory: string;
    /** 检查项目 `DIC.EXAMINE.ITEM` */
    examineItem: string;
    /** 检查部位 `DIC.EXAMINE.POSITION` */
    examinePosition: string;
    /** 检查目的 */
    examinePurpose?: string | undefined;
    /** 临床诊断 */
    diagnosis?: string | undefined;
    /** 检查所见 */
    examineFind?: string | undefined;
    /** 检查结论 */
    examineConclusion?: string | undefined;
    /** 胶片类型 */
    filmType?: string | undefined;
    /** 影像文件 *data:image/jpeg;base64,...* */
    film?: string | undefined;
    /** 影像文件路径 */
    filmUrl?: string | undefined;
    /** 申请时间 */
    applicationTime?: dayjs.Dayjs | undefined;
    /** 申请科室 */
    applicationDepartment?: string | undefined;
    /** 申请人编码 */
    proposerId?: string | undefined;
    /** 申请人姓名 */
    proposerName?: string | undefined;
    /** 报告时间 */
    reportTime: dayjs.Dayjs;
    /** 报告人编码 */
    reportId?: string | undefined;
    /** 报告人姓名 */
    reportName?: string | undefined;
    /** 审核时间 */
    auditTime?: dayjs.Dayjs | undefined;
    /** 审核人编码 */
    auditId?: string | undefined;
    /** 审核人姓名 */
    auditName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class PatientPacsReportViewResult implements IPatientPacsReportViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientPacsReportView[] | undefined;

    constructor(data?: IPatientPacsReportViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientPacsReportView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientPacsReportViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPacsReportViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientPacsReportViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientPacsReportView[] | undefined;
}

/** 血源性病原体监测表 */
export class PatientPathogenMonitorEditModel implements IPatientPathogenMonitorEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 患者姓名 */
    patientName!: string;
    /** 性别 */
    gender?: string | undefined;
    /** 来源 */
    source?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 门诊住院号 */
    hospitalOutInNumber?: string | undefined;
    /** 联系电话 */
    phoneNumber?: string | undefined;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 医院首次透析日期 */
    dialysisDateFirstHospital?: dayjs.Dayjs | undefined;
    /** 风险因素 */
    riskFactor?: string | undefined;
    /** 在外院血液透析 */
    outHospitalDialysis!: number;
    /** 地点 */
    outHospitalLocation?: string | undefined;
    /** 住院治疗 */
    inHospitalTreatment!: number;
    /** 住院地点 */
    inHospitalLocation?: string | undefined;
    /** 病原体感染 */
    pathogenInfect?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    firstScreen?: PatientPathogenMonitorScreenEditModel;
    /** 复查 */
    reviewScreens?: PatientPathogenMonitorScreenEditModel[] | undefined;

    constructor(data?: IPatientPathogenMonitorEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.gender = _data["gender"];
            this.source = _data["source"];
            this.age = _data["age"];
            this.hospitalOutInNumber = _data["hospitalOutInNumber"];
            this.phoneNumber = _data["phoneNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.dialysisDateFirstHospital = _data["dialysisDateFirstHospital"] ? dayjs(_data["dialysisDateFirstHospital"].toString()) : <any>undefined;
            this.riskFactor = _data["riskFactor"];
            this.outHospitalDialysis = _data["outHospitalDialysis"];
            this.outHospitalLocation = _data["outHospitalLocation"];
            this.inHospitalTreatment = _data["inHospitalTreatment"];
            this.inHospitalLocation = _data["inHospitalLocation"];
            this.pathogenInfect = _data["pathogenInfect"];
            this.remark = _data["remark"];
            this.firstScreen = _data["firstScreen"] ? PatientPathogenMonitorScreenEditModel.fromJS(_data["firstScreen"]) : <any>undefined;
            if (Array.isArray(_data["reviewScreens"])) {
                this.reviewScreens = [] as any;
                for (let item of _data["reviewScreens"])
                    this.reviewScreens!.push(PatientPathogenMonitorScreenEditModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientPathogenMonitorEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPathogenMonitorEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["gender"] = this.gender;
        data["source"] = this.source;
        data["age"] = this.age;
        data["hospitalOutInNumber"] = this.hospitalOutInNumber;
        data["phoneNumber"] = this.phoneNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toLocaleString() : <any>undefined;
        data["dialysisDateFirstHospital"] = this.dialysisDateFirstHospital ? this.dialysisDateFirstHospital.toLocaleString() : <any>undefined;
        data["riskFactor"] = this.riskFactor;
        data["outHospitalDialysis"] = this.outHospitalDialysis;
        data["outHospitalLocation"] = this.outHospitalLocation;
        data["inHospitalTreatment"] = this.inHospitalTreatment;
        data["inHospitalLocation"] = this.inHospitalLocation;
        data["pathogenInfect"] = this.pathogenInfect;
        data["remark"] = this.remark;
        data["firstScreen"] = this.firstScreen ? this.firstScreen.toJSON() : <any>undefined;
        if (Array.isArray(this.reviewScreens)) {
            data["reviewScreens"] = [];
            for (let item of this.reviewScreens)
                data["reviewScreens"].push(item.toJSON());
        }
        return data;
    }
}

/** 血源性病原体监测表 */
export interface IPatientPathogenMonitorEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 患者姓名 */
    patientName: string;
    /** 性别 */
    gender?: string | undefined;
    /** 来源 */
    source?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 门诊住院号 */
    hospitalOutInNumber?: string | undefined;
    /** 联系电话 */
    phoneNumber?: string | undefined;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 医院首次透析日期 */
    dialysisDateFirstHospital?: dayjs.Dayjs | undefined;
    /** 风险因素 */
    riskFactor?: string | undefined;
    /** 在外院血液透析 */
    outHospitalDialysis: number;
    /** 地点 */
    outHospitalLocation?: string | undefined;
    /** 住院治疗 */
    inHospitalTreatment: number;
    /** 住院地点 */
    inHospitalLocation?: string | undefined;
    /** 病原体感染 */
    pathogenInfect?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    firstScreen?: PatientPathogenMonitorScreenEditModel;
    /** 复查 */
    reviewScreens?: PatientPathogenMonitorScreenEditModel[] | undefined;
}

/** 血源性病原体监测筛查 */
export class PatientPathogenMonitorScreenEditModel implements IPatientPathogenMonitorScreenEditModel {
    /** [患者标识](#患者信息) */
    patientId?: string | undefined;
    /** [血源性病原体监测表标识](#血源性病原体监测表) */
    patientPathogenMonitorId?: string | undefined;
    /** 检查日期 */
    checkDate?: dayjs.Dayjs | undefined;
    /** HBsAg */
    hbsAg?: string | undefined;
    /** HBsAb */
    hbsAb?: string | undefined;
    /** HBcAb */
    hbcAb?: string | undefined;
    /** HBeAb */
    hbeAb?: string | undefined;
    /** HBeAg */
    hbeAg?: string | undefined;
    /** HBV-DNA */
    hbvDna?: string | undefined;
    /** HCV-Ab */
    hcvAb?: string | undefined;
    /** HCV-RNA */
    hcvRna?: string | undefined;
    /** HIV初筛 */
    hivScreen?: string | undefined;
    /** HIV确诊 */
    hivDiagnose?: string | undefined;
    /** 梅毒抗体检测 */
    syphilisAntibody?: string | undefined;
    /** 特异性抗体检测 */
    specificAntibody?: string | undefined;
    /** 特异性抗体滴度 */
    specificAntibodyTiter?: string | undefined;
    /** 非特异性抗体检测 */
    nonSpecificAntibody?: string | undefined;
    /** 非特异性抗体滴度 */
    nonSpecificAntibodyTiter?: string | undefined;
    /** 是否首次 */
    isFirst!: number;

    constructor(data?: IPatientPathogenMonitorScreenEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientPathogenMonitorId = _data["patientPathogenMonitorId"];
            this.checkDate = _data["checkDate"] ? dayjs(_data["checkDate"].toString()) : <any>undefined;
            this.hbsAg = _data["hbsAg"];
            this.hbsAb = _data["hbsAb"];
            this.hbcAb = _data["hbcAb"];
            this.hbeAb = _data["hbeAb"];
            this.hbeAg = _data["hbeAg"];
            this.hbvDna = _data["hbvDna"];
            this.hcvAb = _data["hcvAb"];
            this.hcvRna = _data["hcvRna"];
            this.hivScreen = _data["hivScreen"];
            this.hivDiagnose = _data["hivDiagnose"];
            this.syphilisAntibody = _data["syphilisAntibody"];
            this.specificAntibody = _data["specificAntibody"];
            this.specificAntibodyTiter = _data["specificAntibodyTiter"];
            this.nonSpecificAntibody = _data["nonSpecificAntibody"];
            this.nonSpecificAntibodyTiter = _data["nonSpecificAntibodyTiter"];
            this.isFirst = _data["isFirst"];
        }
    }

    static fromJS(data: any): PatientPathogenMonitorScreenEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPathogenMonitorScreenEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientPathogenMonitorId"] = this.patientPathogenMonitorId;
        data["checkDate"] = this.checkDate ? this.checkDate.toLocaleString() : <any>undefined;
        data["hbsAg"] = this.hbsAg;
        data["hbsAb"] = this.hbsAb;
        data["hbcAb"] = this.hbcAb;
        data["hbeAb"] = this.hbeAb;
        data["hbeAg"] = this.hbeAg;
        data["hbvDna"] = this.hbvDna;
        data["hcvAb"] = this.hcvAb;
        data["hcvRna"] = this.hcvRna;
        data["hivScreen"] = this.hivScreen;
        data["hivDiagnose"] = this.hivDiagnose;
        data["syphilisAntibody"] = this.syphilisAntibody;
        data["specificAntibody"] = this.specificAntibody;
        data["specificAntibodyTiter"] = this.specificAntibodyTiter;
        data["nonSpecificAntibody"] = this.nonSpecificAntibody;
        data["nonSpecificAntibodyTiter"] = this.nonSpecificAntibodyTiter;
        data["isFirst"] = this.isFirst;
        return data;
    }
}

/** 血源性病原体监测筛查 */
export interface IPatientPathogenMonitorScreenEditModel {
    /** [患者标识](#患者信息) */
    patientId?: string | undefined;
    /** [血源性病原体监测表标识](#血源性病原体监测表) */
    patientPathogenMonitorId?: string | undefined;
    /** 检查日期 */
    checkDate?: dayjs.Dayjs | undefined;
    /** HBsAg */
    hbsAg?: string | undefined;
    /** HBsAb */
    hbsAb?: string | undefined;
    /** HBcAb */
    hbcAb?: string | undefined;
    /** HBeAb */
    hbeAb?: string | undefined;
    /** HBeAg */
    hbeAg?: string | undefined;
    /** HBV-DNA */
    hbvDna?: string | undefined;
    /** HCV-Ab */
    hcvAb?: string | undefined;
    /** HCV-RNA */
    hcvRna?: string | undefined;
    /** HIV初筛 */
    hivScreen?: string | undefined;
    /** HIV确诊 */
    hivDiagnose?: string | undefined;
    /** 梅毒抗体检测 */
    syphilisAntibody?: string | undefined;
    /** 特异性抗体检测 */
    specificAntibody?: string | undefined;
    /** 特异性抗体滴度 */
    specificAntibodyTiter?: string | undefined;
    /** 非特异性抗体检测 */
    nonSpecificAntibody?: string | undefined;
    /** 非特异性抗体滴度 */
    nonSpecificAntibodyTiter?: string | undefined;
    /** 是否首次 */
    isFirst: number;
}

/** 血源性病原体监测筛查 */
export class PatientPathogenMonitorScreenView implements IPatientPathogenMonitorScreenView {
    /** [患者标识](#患者信息) */
    patientId?: string | undefined;
    /** [血源性病原体监测表标识](#血源性病原体监测表) */
    patientPathogenMonitorId?: string | undefined;
    /** 检查日期 */
    checkDate?: dayjs.Dayjs | undefined;
    /** HBsAg */
    hbsAg?: string | undefined;
    /** HBsAb */
    hbsAb?: string | undefined;
    /** HBcAb */
    hbcAb?: string | undefined;
    /** HBeAb */
    hbeAb?: string | undefined;
    /** HBeAg */
    hbeAg?: string | undefined;
    /** HBV-DNA */
    hbvDna?: string | undefined;
    /** HCV-Ab */
    hcvAb?: string | undefined;
    /** HCV-RNA */
    hcvRna?: string | undefined;
    /** HIV初筛 */
    hivScreen?: string | undefined;
    /** HIV确诊 */
    hivDiagnose?: string | undefined;
    /** 梅毒抗体检测 */
    syphilisAntibody?: string | undefined;
    /** 特异性抗体检测 */
    specificAntibody?: string | undefined;
    /** 特异性抗体滴度 */
    specificAntibodyTiter?: string | undefined;
    /** 非特异性抗体检测 */
    nonSpecificAntibody?: string | undefined;
    /** 非特异性抗体滴度 */
    nonSpecificAntibodyTiter?: string | undefined;
    /** 是否首次 */
    isFirst!: number;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientPathogenMonitorScreenView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientPathogenMonitorId = _data["patientPathogenMonitorId"];
            this.checkDate = _data["checkDate"] ? dayjs(_data["checkDate"].toString()) : <any>undefined;
            this.hbsAg = _data["hbsAg"];
            this.hbsAb = _data["hbsAb"];
            this.hbcAb = _data["hbcAb"];
            this.hbeAb = _data["hbeAb"];
            this.hbeAg = _data["hbeAg"];
            this.hbvDna = _data["hbvDna"];
            this.hcvAb = _data["hcvAb"];
            this.hcvRna = _data["hcvRna"];
            this.hivScreen = _data["hivScreen"];
            this.hivDiagnose = _data["hivDiagnose"];
            this.syphilisAntibody = _data["syphilisAntibody"];
            this.specificAntibody = _data["specificAntibody"];
            this.specificAntibodyTiter = _data["specificAntibodyTiter"];
            this.nonSpecificAntibody = _data["nonSpecificAntibody"];
            this.nonSpecificAntibodyTiter = _data["nonSpecificAntibodyTiter"];
            this.isFirst = _data["isFirst"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientPathogenMonitorScreenView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPathogenMonitorScreenView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientPathogenMonitorId"] = this.patientPathogenMonitorId;
        data["checkDate"] = this.checkDate ? this.checkDate.toLocaleString() : <any>undefined;
        data["hbsAg"] = this.hbsAg;
        data["hbsAb"] = this.hbsAb;
        data["hbcAb"] = this.hbcAb;
        data["hbeAb"] = this.hbeAb;
        data["hbeAg"] = this.hbeAg;
        data["hbvDna"] = this.hbvDna;
        data["hcvAb"] = this.hcvAb;
        data["hcvRna"] = this.hcvRna;
        data["hivScreen"] = this.hivScreen;
        data["hivDiagnose"] = this.hivDiagnose;
        data["syphilisAntibody"] = this.syphilisAntibody;
        data["specificAntibody"] = this.specificAntibody;
        data["specificAntibodyTiter"] = this.specificAntibodyTiter;
        data["nonSpecificAntibody"] = this.nonSpecificAntibody;
        data["nonSpecificAntibodyTiter"] = this.nonSpecificAntibodyTiter;
        data["isFirst"] = this.isFirst;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 血源性病原体监测筛查 */
export interface IPatientPathogenMonitorScreenView {
    /** [患者标识](#患者信息) */
    patientId?: string | undefined;
    /** [血源性病原体监测表标识](#血源性病原体监测表) */
    patientPathogenMonitorId?: string | undefined;
    /** 检查日期 */
    checkDate?: dayjs.Dayjs | undefined;
    /** HBsAg */
    hbsAg?: string | undefined;
    /** HBsAb */
    hbsAb?: string | undefined;
    /** HBcAb */
    hbcAb?: string | undefined;
    /** HBeAb */
    hbeAb?: string | undefined;
    /** HBeAg */
    hbeAg?: string | undefined;
    /** HBV-DNA */
    hbvDna?: string | undefined;
    /** HCV-Ab */
    hcvAb?: string | undefined;
    /** HCV-RNA */
    hcvRna?: string | undefined;
    /** HIV初筛 */
    hivScreen?: string | undefined;
    /** HIV确诊 */
    hivDiagnose?: string | undefined;
    /** 梅毒抗体检测 */
    syphilisAntibody?: string | undefined;
    /** 特异性抗体检测 */
    specificAntibody?: string | undefined;
    /** 特异性抗体滴度 */
    specificAntibodyTiter?: string | undefined;
    /** 非特异性抗体检测 */
    nonSpecificAntibody?: string | undefined;
    /** 非特异性抗体滴度 */
    nonSpecificAntibodyTiter?: string | undefined;
    /** 是否首次 */
    isFirst: number;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientPathogenMonitorScreenViewResult implements IPatientPathogenMonitorScreenViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientPathogenMonitorScreenView[] | undefined;

    constructor(data?: IPatientPathogenMonitorScreenViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientPathogenMonitorScreenView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientPathogenMonitorScreenViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPathogenMonitorScreenViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientPathogenMonitorScreenViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientPathogenMonitorScreenView[] | undefined;
}

/** Reponse */
export class PatientPathogenMonitorScreenViewResultEntry implements IPatientPathogenMonitorScreenViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientPathogenMonitorScreenView;

    constructor(data?: IPatientPathogenMonitorScreenViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientPathogenMonitorScreenView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientPathogenMonitorScreenViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPathogenMonitorScreenViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientPathogenMonitorScreenViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientPathogenMonitorScreenView;
}

/** 血源性病原体监测表 */
export class PatientPathogenMonitorView implements IPatientPathogenMonitorView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 患者姓名 */
    patientName!: string;
    /** 性别 */
    gender?: string | undefined;
    /** 来源 */
    source?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 门诊住院号 */
    hospitalOutInNumber?: string | undefined;
    /** 联系电话 */
    phoneNumber?: string | undefined;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 医院首次透析日期 */
    dialysisDateFirstHospital?: dayjs.Dayjs | undefined;
    /** 风险因素 */
    riskFactor?: string | undefined;
    /** 在外院血液透析 */
    outHospitalDialysis!: number;
    /** 地点 */
    outHospitalLocation?: string | undefined;
    /** 住院治疗 */
    inHospitalTreatment!: number;
    /** 住院地点 */
    inHospitalLocation?: string | undefined;
    /** 病原体感染 */
    pathogenInfect?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    firstScreen?: PatientPathogenMonitorScreenView;
    /** 复查 */
    reviewScreens?: PatientPathogenMonitorScreenView[] | undefined;

    constructor(data?: IPatientPathogenMonitorView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.gender = _data["gender"];
            this.source = _data["source"];
            this.age = _data["age"];
            this.hospitalOutInNumber = _data["hospitalOutInNumber"];
            this.phoneNumber = _data["phoneNumber"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.dialysisDateFirstHospital = _data["dialysisDateFirstHospital"] ? dayjs(_data["dialysisDateFirstHospital"].toString()) : <any>undefined;
            this.riskFactor = _data["riskFactor"];
            this.outHospitalDialysis = _data["outHospitalDialysis"];
            this.outHospitalLocation = _data["outHospitalLocation"];
            this.inHospitalTreatment = _data["inHospitalTreatment"];
            this.inHospitalLocation = _data["inHospitalLocation"];
            this.pathogenInfect = _data["pathogenInfect"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.firstScreen = _data["firstScreen"] ? PatientPathogenMonitorScreenView.fromJS(_data["firstScreen"]) : <any>undefined;
            if (Array.isArray(_data["reviewScreens"])) {
                this.reviewScreens = [] as any;
                for (let item of _data["reviewScreens"])
                    this.reviewScreens!.push(PatientPathogenMonitorScreenView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientPathogenMonitorView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPathogenMonitorView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["gender"] = this.gender;
        data["source"] = this.source;
        data["age"] = this.age;
        data["hospitalOutInNumber"] = this.hospitalOutInNumber;
        data["phoneNumber"] = this.phoneNumber;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toLocaleString() : <any>undefined;
        data["dialysisDateFirstHospital"] = this.dialysisDateFirstHospital ? this.dialysisDateFirstHospital.toLocaleString() : <any>undefined;
        data["riskFactor"] = this.riskFactor;
        data["outHospitalDialysis"] = this.outHospitalDialysis;
        data["outHospitalLocation"] = this.outHospitalLocation;
        data["inHospitalTreatment"] = this.inHospitalTreatment;
        data["inHospitalLocation"] = this.inHospitalLocation;
        data["pathogenInfect"] = this.pathogenInfect;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["firstScreen"] = this.firstScreen ? this.firstScreen.toJSON() : <any>undefined;
        if (Array.isArray(this.reviewScreens)) {
            data["reviewScreens"] = [];
            for (let item of this.reviewScreens)
                data["reviewScreens"].push(item.toJSON());
        }
        return data;
    }
}

/** 血源性病原体监测表 */
export interface IPatientPathogenMonitorView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 患者姓名 */
    patientName: string;
    /** 性别 */
    gender?: string | undefined;
    /** 来源 */
    source?: string | undefined;
    /** 年龄 */
    age?: string | undefined;
    /** 门诊住院号 */
    hospitalOutInNumber?: string | undefined;
    /** 联系电话 */
    phoneNumber?: string | undefined;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 医院首次透析日期 */
    dialysisDateFirstHospital?: dayjs.Dayjs | undefined;
    /** 风险因素 */
    riskFactor?: string | undefined;
    /** 在外院血液透析 */
    outHospitalDialysis: number;
    /** 地点 */
    outHospitalLocation?: string | undefined;
    /** 住院治疗 */
    inHospitalTreatment: number;
    /** 住院地点 */
    inHospitalLocation?: string | undefined;
    /** 病原体感染 */
    pathogenInfect?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    firstScreen?: PatientPathogenMonitorScreenView;
    /** 复查 */
    reviewScreens?: PatientPathogenMonitorScreenView[] | undefined;
}

/** Reponse */
export class PatientPathogenMonitorViewResult implements IPatientPathogenMonitorViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientPathogenMonitorView[] | undefined;

    constructor(data?: IPatientPathogenMonitorViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientPathogenMonitorView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientPathogenMonitorViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPathogenMonitorViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientPathogenMonitorViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientPathogenMonitorView[] | undefined;
}

/** Reponse */
export class PatientPathogenMonitorViewResultEntry implements IPatientPathogenMonitorViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientPathogenMonitorView;

    constructor(data?: IPatientPathogenMonitorViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientPathogenMonitorView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientPathogenMonitorViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPathogenMonitorViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientPathogenMonitorViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientPathogenMonitorView;
}

/** 既往病史 */
export class PatientPmh implements IPatientPmh {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 有无既往史0,1 */
    isPmh?: number;
    /** 否有以下系统疾病史或者异常 `DIC.PATIENT.DHAA` *多选 DiseaseHistoryAndAbnormalities* */
    dhaa?: string | undefined;
    /** 既往肾脏替代治疗史0,1 *RenalReplacementTherapy* */
    isRrt?: number | undefined;
    /** 既往肾脏替代治疗史详情 `DIC.PATIENT.RRTD` *多选 RenalReplacementTherapyDetails* */
    rrtd?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;

    constructor(data?: IPatientPmh) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.isPmh = _data["isPmh"];
            this.dhaa = _data["dhaa"];
            this.isRrt = _data["isRrt"];
            this.rrtd = _data["rrtd"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientPmh {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPmh();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["isPmh"] = this.isPmh;
        data["dhaa"] = this.dhaa;
        data["isRrt"] = this.isRrt;
        data["rrtd"] = this.rrtd;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        return data;
    }
}

/** 既往病史 */
export interface IPatientPmh {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 有无既往史0,1 */
    isPmh?: number;
    /** 否有以下系统疾病史或者异常 `DIC.PATIENT.DHAA` *多选 DiseaseHistoryAndAbnormalities* */
    dhaa?: string | undefined;
    /** 既往肾脏替代治疗史0,1 *RenalReplacementTherapy* */
    isRrt?: number | undefined;
    /** 既往肾脏替代治疗史详情 `DIC.PATIENT.RRTD` *多选 RenalReplacementTherapyDetails* */
    rrtd?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
}

/** Reponse */
export class PatientPmhResultEntry implements IPatientPmhResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientPmh;

    constructor(data?: IPatientPmhResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientPmh.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientPmhResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPmhResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientPmhResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientPmh;
}

export class PatientPmhView implements IPatientPmhView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 有无既往史0,1 */
    isPmh!: number;
    /** 否有以下系统疾病史或者异常 `DIC.PATIENT.DHAA` *多选 DiseaseHistoryAndAbnormalities* */
    dhaa?: string | undefined;
    /** 既往肾脏替代治疗史0,1 *RenalReplacementTherapy* */
    isRrt?: number | undefined;
    /** 既往肾脏替代治疗史详情 `DIC.PATIENT.RRTD` *多选 RenalReplacementTherapyDetails* */
    rrtd?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 否有以下系统疾病史或者异常 `DIC.PATIENT.DHAA` *多选 DiseaseHistoryAndAbnormalities* */
    dhaaLabel?: string | undefined;
    /** 既往肾脏替代治疗史详情 `DIC.PATIENT.RRTD` *多选 RenalReplacementTherapyDetails* */
    rrtdLabel?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientPmhView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.isPmh = _data["isPmh"];
            this.dhaa = _data["dhaa"];
            this.isRrt = _data["isRrt"];
            this.rrtd = _data["rrtd"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.dhaaLabel = _data["dhaaLabel"];
            this.rrtdLabel = _data["rrtdLabel"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientPmhView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPmhView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["isPmh"] = this.isPmh;
        data["dhaa"] = this.dhaa;
        data["isRrt"] = this.isRrt;
        data["rrtd"] = this.rrtd;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["dhaaLabel"] = this.dhaaLabel;
        data["rrtdLabel"] = this.rrtdLabel;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface IPatientPmhView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 有无既往史0,1 */
    isPmh: number;
    /** 否有以下系统疾病史或者异常 `DIC.PATIENT.DHAA` *多选 DiseaseHistoryAndAbnormalities* */
    dhaa?: string | undefined;
    /** 既往肾脏替代治疗史0,1 *RenalReplacementTherapy* */
    isRrt?: number | undefined;
    /** 既往肾脏替代治疗史详情 `DIC.PATIENT.RRTD` *多选 RenalReplacementTherapyDetails* */
    rrtd?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 否有以下系统疾病史或者异常 `DIC.PATIENT.DHAA` *多选 DiseaseHistoryAndAbnormalities* */
    dhaaLabel?: string | undefined;
    /** 既往肾脏替代治疗史详情 `DIC.PATIENT.RRTD` *多选 RenalReplacementTherapyDetails* */
    rrtdLabel?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 既往病史 (ViewModel) */
export class PatientPmhViewModel implements IPatientPmhViewModel {
    /** [患者标识](患者信息Id) */
    patientId!: string;
    /** 有无既往史0,1 */
    isPmh!: number;
    /** 否有以下系统疾病史或者异常 `DIC.PATIENT.DHAA` *多选 DiseaseHistoryAndAbnormalities* */
    dhaa?: string | undefined;
    /** 既往肾脏替代治疗史0,1 *RenalReplacementTherapy* */
    isRrt?: number | undefined;
    /** 既往肾脏替代治疗史详情 `DIC.PATIENT.RRTD` *多选 RenalReplacementTherapyDetails* */
    rrtd?: string | undefined;

    constructor(data?: IPatientPmhViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.isPmh = _data["isPmh"];
            this.dhaa = _data["dhaa"];
            this.isRrt = _data["isRrt"];
            this.rrtd = _data["rrtd"];
        }
    }

    static fromJS(data: any): PatientPmhViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPmhViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["isPmh"] = this.isPmh;
        data["dhaa"] = this.dhaa;
        data["isRrt"] = this.isRrt;
        data["rrtd"] = this.rrtd;
        return data;
    }
}

/** 既往病史 (ViewModel) */
export interface IPatientPmhViewModel {
    /** [患者标识](患者信息Id) */
    patientId: string;
    /** 有无既往史0,1 */
    isPmh: number;
    /** 否有以下系统疾病史或者异常 `DIC.PATIENT.DHAA` *多选 DiseaseHistoryAndAbnormalities* */
    dhaa?: string | undefined;
    /** 既往肾脏替代治疗史0,1 *RenalReplacementTherapy* */
    isRrt?: number | undefined;
    /** 既往肾脏替代治疗史详情 `DIC.PATIENT.RRTD` *多选 RenalReplacementTherapyDetails* */
    rrtd?: string | undefined;
}

/** Reponse */
export class PatientPmhViewResult implements IPatientPmhViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientPmhView[] | undefined;

    constructor(data?: IPatientPmhViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientPmhView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientPmhViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPmhViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientPmhViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientPmhView[] | undefined;
}

/** 患者转归报告 */
export class PatientPrognosisReportEditModel implements IPatientPrognosisReportEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 模板类型 */
    type!: string;
    /** 内容 */
    dataValue?: string | undefined;
    /** 日期 */
    recordDate?: dayjs.Dayjs | undefined;
    /** 状态 */
    status!: string;
    /** 医生标识 */
    doctorId?: string | undefined;
    /** 医生姓名 */
    doctorName?: string | undefined;
    /** 转归类型 `DIC.PROGNOSIS.TYPE` *转入,转出,退出* */
    dicType?: string | undefined;
    /** 转归原因 */
    dicItem?: string | undefined;

    constructor(data?: IPatientPrognosisReportEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.type = _data["type"];
            this.dataValue = _data["dataValue"];
            this.recordDate = _data["recordDate"] ? dayjs(_data["recordDate"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.doctorId = _data["doctorId"];
            this.doctorName = _data["doctorName"];
            this.dicType = _data["dicType"];
            this.dicItem = _data["dicItem"];
        }
    }

    static fromJS(data: any): PatientPrognosisReportEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPrognosisReportEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["type"] = this.type;
        data["dataValue"] = this.dataValue;
        data["recordDate"] = this.recordDate ? this.recordDate.toLocaleString() : <any>undefined;
        data["status"] = this.status;
        data["doctorId"] = this.doctorId;
        data["doctorName"] = this.doctorName;
        data["dicType"] = this.dicType;
        data["dicItem"] = this.dicItem;
        return data;
    }
}

/** 患者转归报告 */
export interface IPatientPrognosisReportEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 模板类型 */
    type: string;
    /** 内容 */
    dataValue?: string | undefined;
    /** 日期 */
    recordDate?: dayjs.Dayjs | undefined;
    /** 状态 */
    status: string;
    /** 医生标识 */
    doctorId?: string | undefined;
    /** 医生姓名 */
    doctorName?: string | undefined;
    /** 转归类型 `DIC.PROGNOSIS.TYPE` *转入,转出,退出* */
    dicType?: string | undefined;
    /** 转归原因 */
    dicItem?: string | undefined;
}

/** 患者转归报告 */
export class PatientPrognosisReportView implements IPatientPrognosisReportView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 模板类型 */
    type!: string;
    /** 内容 */
    dataValue?: string | undefined;
    /** 日期 */
    recordDate?: dayjs.Dayjs | undefined;
    /** 状态 */
    status!: string;
    /** 医生标识 */
    doctorId?: string | undefined;
    /** 医生姓名 */
    doctorName?: string | undefined;
    /** 转归类型 `DIC.PROGNOSIS.TYPE` *转入,转出,退出* */
    dicType?: string | undefined;
    /** 转归原因 */
    dicItem?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientPrognosisReportView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.type = _data["type"];
            this.dataValue = _data["dataValue"];
            this.recordDate = _data["recordDate"] ? dayjs(_data["recordDate"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.doctorId = _data["doctorId"];
            this.doctorName = _data["doctorName"];
            this.dicType = _data["dicType"];
            this.dicItem = _data["dicItem"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientPrognosisReportView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPrognosisReportView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["type"] = this.type;
        data["dataValue"] = this.dataValue;
        data["recordDate"] = this.recordDate ? this.recordDate.toLocaleString() : <any>undefined;
        data["status"] = this.status;
        data["doctorId"] = this.doctorId;
        data["doctorName"] = this.doctorName;
        data["dicType"] = this.dicType;
        data["dicItem"] = this.dicItem;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 患者转归报告 */
export interface IPatientPrognosisReportView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 模板类型 */
    type: string;
    /** 内容 */
    dataValue?: string | undefined;
    /** 日期 */
    recordDate?: dayjs.Dayjs | undefined;
    /** 状态 */
    status: string;
    /** 医生标识 */
    doctorId?: string | undefined;
    /** 医生姓名 */
    doctorName?: string | undefined;
    /** 转归类型 `DIC.PROGNOSIS.TYPE` *转入,转出,退出* */
    dicType?: string | undefined;
    /** 转归原因 */
    dicItem?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientPrognosisReportViewResult implements IPatientPrognosisReportViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientPrognosisReportView[] | undefined;

    constructor(data?: IPatientPrognosisReportViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientPrognosisReportView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientPrognosisReportViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPrognosisReportViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientPrognosisReportViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientPrognosisReportView[] | undefined;
}

/** Reponse */
export class PatientPrognosisReportViewResultEntry implements IPatientPrognosisReportViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientPrognosisReportView;

    constructor(data?: IPatientPrognosisReportViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientPrognosisReportView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientPrognosisReportViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPrognosisReportViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientPrognosisReportViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientPrognosisReportView;
}

/** 患者转归 */
export class PatientPrognosisView implements IPatientPrognosisView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 转归日期 */
    date!: dayjs.Dayjs;
    /** 转归类型 `DIC.PROGNOSIS.TYPE` *转入,转出,退出* */
    type!: string;
    /** 其它请说明 *其它转出原因* */
    outCauseOther?: string | undefined;
    /** 退出原因 `DIC.PROGNOSIS.QUIT.CAUSE` */
    quitCause?: string | undefined;
    /** 死亡原因 `DIC.PROGNOSIS.QUIT.DIE.CAUSE` *多选* */
    quitDieCause?: string | undefined;
    /** 心血管事件 `DIC.PROGNOSIS.QUIT.DIE.CAUSE.CVE` *多选* */
    quitDieCauseCve?: string | undefined;
    /** 其它心血管事件 */
    quitDieCauseCveOther?: string | undefined;
    /** 脑血管事件 `DIC.PROGNOSIS.QUIT.DIE.CAUSE.MACCE` *多选* */
    quitDieCauseMacce?: string | undefined;
    /** 其它脑血管事件 */
    quitDieCauseMacceOther?: string | undefined;
    /** 感染 `DIC.PROGNOSIS.QUIT.DIE.CAUSE.INFECTION` *多选* */
    quitDieCauseInfection?: string | undefined;
    /** 其它感染 */
    quitDieCauseInfectionOther?: string | undefined;
    /** 其它死亡原因 */
    quitDieCauseOther?: string | undefined;
    /** 其它退出原因 */
    quitCauseOther?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 患者别称 */
    patientName2?: string | undefined;
    /** 患者全称 */
    patientNameFull?: string | undefined;
    /** 转归类型显示值 */
    typeLabel!: string;
    /** 转出地点显示值 */
    outLocationLabel?: string | undefined;
    outLocation?: string | undefined;
    /** 转出原因显示值 */
    outCauseLabel?: string | undefined;
    outCause?: string | undefined;
    /** 退出原因显示值 */
    quitCauseLabel?: string | undefined;
    /** 死亡原因显示值 */
    quitDieCauseLabel?: string | undefined;
    /** 心血管事件显示值 */
    quitDieCauseCveLabel?: string | undefined;
    /** 脑血管事件显示值 */
    quitDieCauseMacceLabel?: string | undefined;
    /** 感染显示值 */
    quitDieCauseInfectionLabel?: string | undefined;

    constructor(data?: IPatientPrognosisView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.outCauseOther = _data["outCauseOther"];
            this.quitCause = _data["quitCause"];
            this.quitDieCause = _data["quitDieCause"];
            this.quitDieCauseCve = _data["quitDieCauseCve"];
            this.quitDieCauseCveOther = _data["quitDieCauseCveOther"];
            this.quitDieCauseMacce = _data["quitDieCauseMacce"];
            this.quitDieCauseMacceOther = _data["quitDieCauseMacceOther"];
            this.quitDieCauseInfection = _data["quitDieCauseInfection"];
            this.quitDieCauseInfectionOther = _data["quitDieCauseInfectionOther"];
            this.quitDieCauseOther = _data["quitDieCauseOther"];
            this.quitCauseOther = _data["quitCauseOther"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.typeLabel = _data["typeLabel"];
            this.outLocationLabel = _data["outLocationLabel"];
            this.outLocation = _data["outLocation"];
            this.outCauseLabel = _data["outCauseLabel"];
            this.outCause = _data["outCause"];
            this.quitCauseLabel = _data["quitCauseLabel"];
            this.quitDieCauseLabel = _data["quitDieCauseLabel"];
            this.quitDieCauseCveLabel = _data["quitDieCauseCveLabel"];
            this.quitDieCauseMacceLabel = _data["quitDieCauseMacceLabel"];
            this.quitDieCauseInfectionLabel = _data["quitDieCauseInfectionLabel"];
        }
    }

    static fromJS(data: any): PatientPrognosisView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPrognosisView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["type"] = this.type;
        data["outCauseOther"] = this.outCauseOther;
        data["quitCause"] = this.quitCause;
        data["quitDieCause"] = this.quitDieCause;
        data["quitDieCauseCve"] = this.quitDieCauseCve;
        data["quitDieCauseCveOther"] = this.quitDieCauseCveOther;
        data["quitDieCauseMacce"] = this.quitDieCauseMacce;
        data["quitDieCauseMacceOther"] = this.quitDieCauseMacceOther;
        data["quitDieCauseInfection"] = this.quitDieCauseInfection;
        data["quitDieCauseInfectionOther"] = this.quitDieCauseInfectionOther;
        data["quitDieCauseOther"] = this.quitDieCauseOther;
        data["quitCauseOther"] = this.quitCauseOther;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["typeLabel"] = this.typeLabel;
        data["outLocationLabel"] = this.outLocationLabel;
        data["outLocation"] = this.outLocation;
        data["outCauseLabel"] = this.outCauseLabel;
        data["outCause"] = this.outCause;
        data["quitCauseLabel"] = this.quitCauseLabel;
        data["quitDieCauseLabel"] = this.quitDieCauseLabel;
        data["quitDieCauseCveLabel"] = this.quitDieCauseCveLabel;
        data["quitDieCauseMacceLabel"] = this.quitDieCauseMacceLabel;
        data["quitDieCauseInfectionLabel"] = this.quitDieCauseInfectionLabel;
        return data;
    }
}

/** 患者转归 */
export interface IPatientPrognosisView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 转归日期 */
    date: dayjs.Dayjs;
    /** 转归类型 `DIC.PROGNOSIS.TYPE` *转入,转出,退出* */
    type: string;
    /** 其它请说明 *其它转出原因* */
    outCauseOther?: string | undefined;
    /** 退出原因 `DIC.PROGNOSIS.QUIT.CAUSE` */
    quitCause?: string | undefined;
    /** 死亡原因 `DIC.PROGNOSIS.QUIT.DIE.CAUSE` *多选* */
    quitDieCause?: string | undefined;
    /** 心血管事件 `DIC.PROGNOSIS.QUIT.DIE.CAUSE.CVE` *多选* */
    quitDieCauseCve?: string | undefined;
    /** 其它心血管事件 */
    quitDieCauseCveOther?: string | undefined;
    /** 脑血管事件 `DIC.PROGNOSIS.QUIT.DIE.CAUSE.MACCE` *多选* */
    quitDieCauseMacce?: string | undefined;
    /** 其它脑血管事件 */
    quitDieCauseMacceOther?: string | undefined;
    /** 感染 `DIC.PROGNOSIS.QUIT.DIE.CAUSE.INFECTION` *多选* */
    quitDieCauseInfection?: string | undefined;
    /** 其它感染 */
    quitDieCauseInfectionOther?: string | undefined;
    /** 其它死亡原因 */
    quitDieCauseOther?: string | undefined;
    /** 其它退出原因 */
    quitCauseOther?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 患者别称 */
    patientName2?: string | undefined;
    /** 患者全称 */
    patientNameFull?: string | undefined;
    /** 转归类型显示值 */
    typeLabel: string;
    /** 转出地点显示值 */
    outLocationLabel?: string | undefined;
    outLocation?: string | undefined;
    /** 转出原因显示值 */
    outCauseLabel?: string | undefined;
    outCause?: string | undefined;
    /** 退出原因显示值 */
    quitCauseLabel?: string | undefined;
    /** 死亡原因显示值 */
    quitDieCauseLabel?: string | undefined;
    /** 心血管事件显示值 */
    quitDieCauseCveLabel?: string | undefined;
    /** 脑血管事件显示值 */
    quitDieCauseMacceLabel?: string | undefined;
    /** 感染显示值 */
    quitDieCauseInfectionLabel?: string | undefined;
}

/** 患者转归 (ViewModel) */
export class PatientPrognosisViewModel implements IPatientPrognosisViewModel {
    /** [患者标识](患者信息Id) */
    patientId!: string;
    /** 转归日期 */
    date!: dayjs.Dayjs;
    /** 转归类型 `DIC.PROGNOSIS.TYPE` *转入,转出,退出* */
    type!: string;
    /** 转出地点 `DIC.PROGNOSIS.OUT.LOCATION` */
    outLocation?: string | undefined;
    /** 转出原因 `DIC.PROGNOSIS.OUT.CAUSE` */
    outCause?: string | undefined;
    /** 其它请说明 *其它转出原因* */
    outCauseOther?: string | undefined;
    /** 退出原因 `DIC.PROGNOSIS.QUIT.CAUSE` */
    quitCause?: string | undefined;
    /** 死亡原因 `DIC.PROGNOSIS.QUIT.DIE.CAUSE` *多选* */
    quitDieCause?: string | undefined;
    /** 心血管事件 `DIC.PROGNOSIS.QUIT.DIE.CAUSE.CVE` *多选* */
    quitDieCauseCve?: string | undefined;
    /** 其它心血管事件 */
    quitDieCauseCveOther?: string | undefined;
    /** 脑血管事件 `DIC.PROGNOSIS.QUIT.DIE.CAUSE.MACCE` *多选* */
    quitDieCauseMacce?: string | undefined;
    /** 其它脑血管事件 */
    quitDieCauseMacceOther?: string | undefined;
    /** 感染 `DIC.PROGNOSIS.QUIT.DIE.CAUSE.INFECTION` *多选* */
    quitDieCauseInfection?: string | undefined;
    /** 其它感染 */
    quitDieCauseInfectionOther?: string | undefined;
    /** 其它死亡原因 */
    quitDieCauseOther?: string | undefined;
    /** 其它退出原因 */
    quitCauseOther?: string | undefined;

    constructor(data?: IPatientPrognosisViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.outLocation = _data["outLocation"];
            this.outCause = _data["outCause"];
            this.outCauseOther = _data["outCauseOther"];
            this.quitCause = _data["quitCause"];
            this.quitDieCause = _data["quitDieCause"];
            this.quitDieCauseCve = _data["quitDieCauseCve"];
            this.quitDieCauseCveOther = _data["quitDieCauseCveOther"];
            this.quitDieCauseMacce = _data["quitDieCauseMacce"];
            this.quitDieCauseMacceOther = _data["quitDieCauseMacceOther"];
            this.quitDieCauseInfection = _data["quitDieCauseInfection"];
            this.quitDieCauseInfectionOther = _data["quitDieCauseInfectionOther"];
            this.quitDieCauseOther = _data["quitDieCauseOther"];
            this.quitCauseOther = _data["quitCauseOther"];
        }
    }

    static fromJS(data: any): PatientPrognosisViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPrognosisViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["type"] = this.type;
        data["outLocation"] = this.outLocation;
        data["outCause"] = this.outCause;
        data["outCauseOther"] = this.outCauseOther;
        data["quitCause"] = this.quitCause;
        data["quitDieCause"] = this.quitDieCause;
        data["quitDieCauseCve"] = this.quitDieCauseCve;
        data["quitDieCauseCveOther"] = this.quitDieCauseCveOther;
        data["quitDieCauseMacce"] = this.quitDieCauseMacce;
        data["quitDieCauseMacceOther"] = this.quitDieCauseMacceOther;
        data["quitDieCauseInfection"] = this.quitDieCauseInfection;
        data["quitDieCauseInfectionOther"] = this.quitDieCauseInfectionOther;
        data["quitDieCauseOther"] = this.quitDieCauseOther;
        data["quitCauseOther"] = this.quitCauseOther;
        return data;
    }
}

/** 患者转归 (ViewModel) */
export interface IPatientPrognosisViewModel {
    /** [患者标识](患者信息Id) */
    patientId: string;
    /** 转归日期 */
    date: dayjs.Dayjs;
    /** 转归类型 `DIC.PROGNOSIS.TYPE` *转入,转出,退出* */
    type: string;
    /** 转出地点 `DIC.PROGNOSIS.OUT.LOCATION` */
    outLocation?: string | undefined;
    /** 转出原因 `DIC.PROGNOSIS.OUT.CAUSE` */
    outCause?: string | undefined;
    /** 其它请说明 *其它转出原因* */
    outCauseOther?: string | undefined;
    /** 退出原因 `DIC.PROGNOSIS.QUIT.CAUSE` */
    quitCause?: string | undefined;
    /** 死亡原因 `DIC.PROGNOSIS.QUIT.DIE.CAUSE` *多选* */
    quitDieCause?: string | undefined;
    /** 心血管事件 `DIC.PROGNOSIS.QUIT.DIE.CAUSE.CVE` *多选* */
    quitDieCauseCve?: string | undefined;
    /** 其它心血管事件 */
    quitDieCauseCveOther?: string | undefined;
    /** 脑血管事件 `DIC.PROGNOSIS.QUIT.DIE.CAUSE.MACCE` *多选* */
    quitDieCauseMacce?: string | undefined;
    /** 其它脑血管事件 */
    quitDieCauseMacceOther?: string | undefined;
    /** 感染 `DIC.PROGNOSIS.QUIT.DIE.CAUSE.INFECTION` *多选* */
    quitDieCauseInfection?: string | undefined;
    /** 其它感染 */
    quitDieCauseInfectionOther?: string | undefined;
    /** 其它死亡原因 */
    quitDieCauseOther?: string | undefined;
    /** 其它退出原因 */
    quitCauseOther?: string | undefined;
}

/** Reponse */
export class PatientPrognosisViewResult implements IPatientPrognosisViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientPrognosisView[] | undefined;

    constructor(data?: IPatientPrognosisViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientPrognosisView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientPrognosisViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPrognosisViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientPrognosisViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientPrognosisView[] | undefined;
}

/** Reponse */
export class PatientPrognosisViewResultEntry implements IPatientPrognosisViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientPrognosisView;

    constructor(data?: IPatientPrognosisViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientPrognosisView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientPrognosisViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPrognosisViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientPrognosisViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientPrognosisView;
}

/** 患者透析穿刺记录 */
export class PatientPunctureRecordEditModel implements IPatientPunctureRecordEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [透析记录标识](#透析记录) */
    cureRecordId!: string;
    /** 穿刺位置 */
    position?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 文件id */
    hfsFilesId?: string | undefined;
    /** 文件url */
    hfsFilesUrl?: string | undefined;

    constructor(data?: IPatientPunctureRecordEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.cureRecordId = _data["cureRecordId"];
            this.position = _data["position"];
            this.remark = _data["remark"];
            this.hfsFilesId = _data["hfsFilesId"];
            this.hfsFilesUrl = _data["hfsFilesUrl"];
        }
    }

    static fromJS(data: any): PatientPunctureRecordEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPunctureRecordEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["cureRecordId"] = this.cureRecordId;
        data["position"] = this.position;
        data["remark"] = this.remark;
        data["hfsFilesId"] = this.hfsFilesId;
        data["hfsFilesUrl"] = this.hfsFilesUrl;
        return data;
    }
}

/** 患者透析穿刺记录 */
export interface IPatientPunctureRecordEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [透析记录标识](#透析记录) */
    cureRecordId: string;
    /** 穿刺位置 */
    position?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 文件id */
    hfsFilesId?: string | undefined;
    /** 文件url */
    hfsFilesUrl?: string | undefined;
}

/** 患者透析穿刺记录节点 */
export class PatientPunctureRecordNodeBatchEditModel implements IPatientPunctureRecordNodeBatchEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [患者透析穿刺记录标识](#患者透析穿刺记录) */
    patientPunctureRecordId!: string;
    /** 节点 */
    title?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 方向 */
    direction?: string | undefined;
    /** 动脉静脉 */
    vessel?: string | undefined;
    /** 穿刺日期 */
    punctureDate?: dayjs.Dayjs | undefined;
    /** 穿刺护士 */
    puncturer?: string | undefined;
    /** 穿刺护士标识 */
    puncturerId?: string | undefined;
    id?: string | undefined;

    constructor(data?: IPatientPunctureRecordNodeBatchEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientPunctureRecordId = _data["patientPunctureRecordId"];
            this.title = _data["title"];
            this.remark = _data["remark"];
            this.direction = _data["direction"];
            this.vessel = _data["vessel"];
            this.punctureDate = _data["punctureDate"] ? dayjs(_data["punctureDate"].toString()) : <any>undefined;
            this.puncturer = _data["puncturer"];
            this.puncturerId = _data["puncturerId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): PatientPunctureRecordNodeBatchEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPunctureRecordNodeBatchEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientPunctureRecordId"] = this.patientPunctureRecordId;
        data["title"] = this.title;
        data["remark"] = this.remark;
        data["direction"] = this.direction;
        data["vessel"] = this.vessel;
        data["punctureDate"] = this.punctureDate ? this.punctureDate.toLocaleString() : <any>undefined;
        data["puncturer"] = this.puncturer;
        data["puncturerId"] = this.puncturerId;
        data["id"] = this.id;
        return data;
    }
}

/** 患者透析穿刺记录节点 */
export interface IPatientPunctureRecordNodeBatchEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [患者透析穿刺记录标识](#患者透析穿刺记录) */
    patientPunctureRecordId: string;
    /** 节点 */
    title?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 方向 */
    direction?: string | undefined;
    /** 动脉静脉 */
    vessel?: string | undefined;
    /** 穿刺日期 */
    punctureDate?: dayjs.Dayjs | undefined;
    /** 穿刺护士 */
    puncturer?: string | undefined;
    /** 穿刺护士标识 */
    puncturerId?: string | undefined;
    id?: string | undefined;
}

/** 患者透析穿刺记录节点 */
export class PatientPunctureRecordNodeEditModel implements IPatientPunctureRecordNodeEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [患者透析穿刺记录标识](#患者透析穿刺记录) */
    patientPunctureRecordId!: string;
    /** 节点 */
    title?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 方向 */
    direction?: string | undefined;
    /** 动脉静脉 */
    vessel?: string | undefined;
    /** 穿刺日期 */
    punctureDate?: dayjs.Dayjs | undefined;
    /** 穿刺护士 */
    puncturer?: string | undefined;
    /** 穿刺护士标识 */
    puncturerId?: string | undefined;

    constructor(data?: IPatientPunctureRecordNodeEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientPunctureRecordId = _data["patientPunctureRecordId"];
            this.title = _data["title"];
            this.remark = _data["remark"];
            this.direction = _data["direction"];
            this.vessel = _data["vessel"];
            this.punctureDate = _data["punctureDate"] ? dayjs(_data["punctureDate"].toString()) : <any>undefined;
            this.puncturer = _data["puncturer"];
            this.puncturerId = _data["puncturerId"];
        }
    }

    static fromJS(data: any): PatientPunctureRecordNodeEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPunctureRecordNodeEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientPunctureRecordId"] = this.patientPunctureRecordId;
        data["title"] = this.title;
        data["remark"] = this.remark;
        data["direction"] = this.direction;
        data["vessel"] = this.vessel;
        data["punctureDate"] = this.punctureDate ? this.punctureDate.toLocaleString() : <any>undefined;
        data["puncturer"] = this.puncturer;
        data["puncturerId"] = this.puncturerId;
        return data;
    }
}

/** 患者透析穿刺记录节点 */
export interface IPatientPunctureRecordNodeEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [患者透析穿刺记录标识](#患者透析穿刺记录) */
    patientPunctureRecordId: string;
    /** 节点 */
    title?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 方向 */
    direction?: string | undefined;
    /** 动脉静脉 */
    vessel?: string | undefined;
    /** 穿刺日期 */
    punctureDate?: dayjs.Dayjs | undefined;
    /** 穿刺护士 */
    puncturer?: string | undefined;
    /** 穿刺护士标识 */
    puncturerId?: string | undefined;
}

/** 患者透析穿刺记录节点 */
export class PatientPunctureRecordNodeView implements IPatientPunctureRecordNodeView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [患者透析穿刺记录标识](#患者透析穿刺记录) */
    patientPunctureRecordId!: string;
    /** 节点 */
    title?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 方向 */
    direction?: string | undefined;
    /** 动脉静脉 */
    vessel?: string | undefined;
    /** 穿刺日期 */
    punctureDate?: dayjs.Dayjs | undefined;
    /** 穿刺护士 */
    puncturer?: string | undefined;
    /** 穿刺护士标识 */
    puncturerId?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 方向 */
    directionLabel?: string | undefined;

    constructor(data?: IPatientPunctureRecordNodeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientPunctureRecordId = _data["patientPunctureRecordId"];
            this.title = _data["title"];
            this.remark = _data["remark"];
            this.direction = _data["direction"];
            this.vessel = _data["vessel"];
            this.punctureDate = _data["punctureDate"] ? dayjs(_data["punctureDate"].toString()) : <any>undefined;
            this.puncturer = _data["puncturer"];
            this.puncturerId = _data["puncturerId"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.directionLabel = _data["directionLabel"];
        }
    }

    static fromJS(data: any): PatientPunctureRecordNodeView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPunctureRecordNodeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientPunctureRecordId"] = this.patientPunctureRecordId;
        data["title"] = this.title;
        data["remark"] = this.remark;
        data["direction"] = this.direction;
        data["vessel"] = this.vessel;
        data["punctureDate"] = this.punctureDate ? this.punctureDate.toLocaleString() : <any>undefined;
        data["puncturer"] = this.puncturer;
        data["puncturerId"] = this.puncturerId;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["directionLabel"] = this.directionLabel;
        return data;
    }
}

/** 患者透析穿刺记录节点 */
export interface IPatientPunctureRecordNodeView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [患者透析穿刺记录标识](#患者透析穿刺记录) */
    patientPunctureRecordId: string;
    /** 节点 */
    title?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 方向 */
    direction?: string | undefined;
    /** 动脉静脉 */
    vessel?: string | undefined;
    /** 穿刺日期 */
    punctureDate?: dayjs.Dayjs | undefined;
    /** 穿刺护士 */
    puncturer?: string | undefined;
    /** 穿刺护士标识 */
    puncturerId?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 方向 */
    directionLabel?: string | undefined;
}

/** Reponse */
export class PatientPunctureRecordNodeViewResult implements IPatientPunctureRecordNodeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientPunctureRecordNodeView[] | undefined;

    constructor(data?: IPatientPunctureRecordNodeViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientPunctureRecordNodeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientPunctureRecordNodeViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPunctureRecordNodeViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientPunctureRecordNodeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientPunctureRecordNodeView[] | undefined;
}

/** Reponse */
export class PatientPunctureRecordNodeViewResultEntry implements IPatientPunctureRecordNodeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientPunctureRecordNodeView;

    constructor(data?: IPatientPunctureRecordNodeViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientPunctureRecordNodeView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientPunctureRecordNodeViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPunctureRecordNodeViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientPunctureRecordNodeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientPunctureRecordNodeView;
}

/** 患者透析穿刺记录 */
export class PatientPunctureRecordView implements IPatientPunctureRecordView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [透析记录标识](#透析记录) */
    cureRecordId!: string;
    /** 穿刺位置 */
    position?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 文件id */
    hfsFilesId?: string | undefined;
    /** 文件url */
    hfsFilesUrl?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientPunctureRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.cureRecordId = _data["cureRecordId"];
            this.position = _data["position"];
            this.remark = _data["remark"];
            this.hfsFilesId = _data["hfsFilesId"];
            this.hfsFilesUrl = _data["hfsFilesUrl"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientPunctureRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPunctureRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["cureRecordId"] = this.cureRecordId;
        data["position"] = this.position;
        data["remark"] = this.remark;
        data["hfsFilesId"] = this.hfsFilesId;
        data["hfsFilesUrl"] = this.hfsFilesUrl;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 患者透析穿刺记录 */
export interface IPatientPunctureRecordView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [透析记录标识](#透析记录) */
    cureRecordId: string;
    /** 穿刺位置 */
    position?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 文件id */
    hfsFilesId?: string | undefined;
    /** 文件url */
    hfsFilesUrl?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientPunctureRecordViewResult implements IPatientPunctureRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientPunctureRecordView[] | undefined;

    constructor(data?: IPatientPunctureRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientPunctureRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientPunctureRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPunctureRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientPunctureRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientPunctureRecordView[] | undefined;
}

/** Reponse */
export class PatientPunctureRecordViewResultEntry implements IPatientPunctureRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientPunctureRecordView;

    constructor(data?: IPatientPunctureRecordViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientPunctureRecordView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientPunctureRecordViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientPunctureRecordViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientPunctureRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientPunctureRecordView;
}

/** 问卷调查 */
export class PatientQuestionnaire implements IPatientQuestionnaire {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** [问卷调查模板标识](问卷调查模板) */
    tmplQuestionnaireId?: string | undefined;
    /** 结论 *问卷类型为评估时会有结论* */
    conclusion?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
    tmplQuestionnaires?: TmplQuestionnaire;

    constructor(data?: IPatientQuestionnaire) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.tmplQuestionnaireId = _data["tmplQuestionnaireId"];
            this.conclusion = _data["conclusion"];
            this.remark = _data["remark"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
            this.tmplQuestionnaires = _data["tmplQuestionnaires"] ? TmplQuestionnaire.fromJS(_data["tmplQuestionnaires"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientQuestionnaire {
        data = typeof data === 'object' ? data : {};
        let result = new PatientQuestionnaire();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["tmplQuestionnaireId"] = this.tmplQuestionnaireId;
        data["conclusion"] = this.conclusion;
        data["remark"] = this.remark;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        data["tmplQuestionnaires"] = this.tmplQuestionnaires ? this.tmplQuestionnaires.toJSON() : <any>undefined;
        return data;
    }
}

/** 问卷调查 */
export interface IPatientQuestionnaire {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** [问卷调查模板标识](问卷调查模板) */
    tmplQuestionnaireId?: string | undefined;
    /** 结论 *问卷类型为评估时会有结论* */
    conclusion?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
    tmplQuestionnaires?: TmplQuestionnaire;
}

/** 问卷调查明细 */
export class PatientQuestionnaireDetail implements IPatientQuestionnaireDetail {
    /** 标识 */
    id?: string | undefined;
    /** [问卷调查](问卷调查) */
    patientQuestionnaireId?: string | undefined;
    /** [问卷调查条目模板标识](问卷调查条目模板) */
    tmplQuestionnaireItemId?: string | undefined;
    /** 问卷调查条目详情模板标识 */
    tmplQuestionnaireItemDetailId?: string | undefined;
    /** 答案 */
    answer?: string | undefined;
    /** 分数 */
    score?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patientQuestionnaires?: PatientQuestionnaire;
    tmplQuestionnaireItems?: TmplQuestionnaireItem;

    constructor(data?: IPatientQuestionnaireDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientQuestionnaireId = _data["patientQuestionnaireId"];
            this.tmplQuestionnaireItemId = _data["tmplQuestionnaireItemId"];
            this.tmplQuestionnaireItemDetailId = _data["tmplQuestionnaireItemDetailId"];
            this.answer = _data["answer"];
            this.score = _data["score"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patientQuestionnaires = _data["patientQuestionnaires"] ? PatientQuestionnaire.fromJS(_data["patientQuestionnaires"]) : <any>undefined;
            this.tmplQuestionnaireItems = _data["tmplQuestionnaireItems"] ? TmplQuestionnaireItem.fromJS(_data["tmplQuestionnaireItems"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientQuestionnaireDetail {
        data = typeof data === 'object' ? data : {};
        let result = new PatientQuestionnaireDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientQuestionnaireId"] = this.patientQuestionnaireId;
        data["tmplQuestionnaireItemId"] = this.tmplQuestionnaireItemId;
        data["tmplQuestionnaireItemDetailId"] = this.tmplQuestionnaireItemDetailId;
        data["answer"] = this.answer;
        data["score"] = this.score;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patientQuestionnaires"] = this.patientQuestionnaires ? this.patientQuestionnaires.toJSON() : <any>undefined;
        data["tmplQuestionnaireItems"] = this.tmplQuestionnaireItems ? this.tmplQuestionnaireItems.toJSON() : <any>undefined;
        return data;
    }
}

/** 问卷调查明细 */
export interface IPatientQuestionnaireDetail {
    /** 标识 */
    id?: string | undefined;
    /** [问卷调查](问卷调查) */
    patientQuestionnaireId?: string | undefined;
    /** [问卷调查条目模板标识](问卷调查条目模板) */
    tmplQuestionnaireItemId?: string | undefined;
    /** 问卷调查条目详情模板标识 */
    tmplQuestionnaireItemDetailId?: string | undefined;
    /** 答案 */
    answer?: string | undefined;
    /** 分数 */
    score?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patientQuestionnaires?: PatientQuestionnaire;
    tmplQuestionnaireItems?: TmplQuestionnaireItem;
}

/** 问卷调查明细 */
export class PatientQuestionnaireDetailBase implements IPatientQuestionnaireDetailBase {
    /** [问卷调查](#问卷调查) */
    patientQuestionnaireId?: string | undefined;
    /** [问卷调查条目模板标识](#问卷调查条目模板) */
    tmplQuestionnaireItemId?: string | undefined;
    /** 问卷调查条目详情模板标识 */
    tmplQuestionnaireItemDetailId?: string | undefined;
    /** 问卷调查条目详情模板标识集合 */
    tmplQuestionnaireItemDetailIds?: string[] | undefined;
    /** 答案 */
    answer?: string | undefined;
    /** 分数 */
    score?: number | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IPatientQuestionnaireDetailBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientQuestionnaireId = _data["patientQuestionnaireId"];
            this.tmplQuestionnaireItemId = _data["tmplQuestionnaireItemId"];
            this.tmplQuestionnaireItemDetailId = _data["tmplQuestionnaireItemDetailId"];
            if (Array.isArray(_data["tmplQuestionnaireItemDetailIds"])) {
                this.tmplQuestionnaireItemDetailIds = [] as any;
                for (let item of _data["tmplQuestionnaireItemDetailIds"])
                    this.tmplQuestionnaireItemDetailIds!.push(item);
            }
            this.answer = _data["answer"];
            this.score = _data["score"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): PatientQuestionnaireDetailBase {
        data = typeof data === 'object' ? data : {};
        let result = new PatientQuestionnaireDetailBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientQuestionnaireId"] = this.patientQuestionnaireId;
        data["tmplQuestionnaireItemId"] = this.tmplQuestionnaireItemId;
        data["tmplQuestionnaireItemDetailId"] = this.tmplQuestionnaireItemDetailId;
        if (Array.isArray(this.tmplQuestionnaireItemDetailIds)) {
            data["tmplQuestionnaireItemDetailIds"] = [];
            for (let item of this.tmplQuestionnaireItemDetailIds)
                data["tmplQuestionnaireItemDetailIds"].push(item);
        }
        data["answer"] = this.answer;
        data["score"] = this.score;
        data["remark"] = this.remark;
        return data;
    }
}

/** 问卷调查明细 */
export interface IPatientQuestionnaireDetailBase {
    /** [问卷调查](#问卷调查) */
    patientQuestionnaireId?: string | undefined;
    /** [问卷调查条目模板标识](#问卷调查条目模板) */
    tmplQuestionnaireItemId?: string | undefined;
    /** 问卷调查条目详情模板标识 */
    tmplQuestionnaireItemDetailId?: string | undefined;
    /** 问卷调查条目详情模板标识集合 */
    tmplQuestionnaireItemDetailIds?: string[] | undefined;
    /** 答案 */
    answer?: string | undefined;
    /** 分数 */
    score?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class PatientQuestionnaireDetailResult implements IPatientQuestionnaireDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientQuestionnaireDetail[] | undefined;

    constructor(data?: IPatientQuestionnaireDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientQuestionnaireDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientQuestionnaireDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientQuestionnaireDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientQuestionnaireDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientQuestionnaireDetail[] | undefined;
}

/** Reponse */
export class PatientQuestionnaireDetailResultEntry implements IPatientQuestionnaireDetailResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientQuestionnaireDetail;

    constructor(data?: IPatientQuestionnaireDetailResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientQuestionnaireDetail.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientQuestionnaireDetailResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientQuestionnaireDetailResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientQuestionnaireDetailResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientQuestionnaireDetail;
}

export class PatientQuestionnaireDetailView implements IPatientQuestionnaireDetailView {
    /** [问卷调查](#问卷调查) */
    patientQuestionnaireId?: string | undefined;
    /** [问卷调查条目模板标识](#问卷调查条目模板) */
    tmplQuestionnaireItemId?: string | undefined;
    /** 问卷调查条目详情模板标识 */
    tmplQuestionnaireItemDetailId?: string | undefined;
    /** 问卷调查条目详情模板标识集合 */
    tmplQuestionnaireItemDetailIds?: string[] | undefined;
    /** 答案 */
    answer?: string | undefined;
    /** 分数 */
    score?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientQuestionnaireDetailView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientQuestionnaireId = _data["patientQuestionnaireId"];
            this.tmplQuestionnaireItemId = _data["tmplQuestionnaireItemId"];
            this.tmplQuestionnaireItemDetailId = _data["tmplQuestionnaireItemDetailId"];
            if (Array.isArray(_data["tmplQuestionnaireItemDetailIds"])) {
                this.tmplQuestionnaireItemDetailIds = [] as any;
                for (let item of _data["tmplQuestionnaireItemDetailIds"])
                    this.tmplQuestionnaireItemDetailIds!.push(item);
            }
            this.answer = _data["answer"];
            this.score = _data["score"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientQuestionnaireDetailView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientQuestionnaireDetailView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientQuestionnaireId"] = this.patientQuestionnaireId;
        data["tmplQuestionnaireItemId"] = this.tmplQuestionnaireItemId;
        data["tmplQuestionnaireItemDetailId"] = this.tmplQuestionnaireItemDetailId;
        if (Array.isArray(this.tmplQuestionnaireItemDetailIds)) {
            data["tmplQuestionnaireItemDetailIds"] = [];
            for (let item of this.tmplQuestionnaireItemDetailIds)
                data["tmplQuestionnaireItemDetailIds"].push(item);
        }
        data["answer"] = this.answer;
        data["score"] = this.score;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface IPatientQuestionnaireDetailView {
    /** [问卷调查](#问卷调查) */
    patientQuestionnaireId?: string | undefined;
    /** [问卷调查条目模板标识](#问卷调查条目模板) */
    tmplQuestionnaireItemId?: string | undefined;
    /** 问卷调查条目详情模板标识 */
    tmplQuestionnaireItemDetailId?: string | undefined;
    /** 问卷调查条目详情模板标识集合 */
    tmplQuestionnaireItemDetailIds?: string[] | undefined;
    /** 答案 */
    answer?: string | undefined;
    /** 分数 */
    score?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 问卷调查明细 (ViewModel) */
export class PatientQuestionnaireDetailViewModel implements IPatientQuestionnaireDetailViewModel {
    /** [问卷调查](问卷调查Id) */
    patientQuestionnaireId!: string;
    /** [问卷调查条目模板标识](问卷调查条目模板Id) */
    tmplQuestionnaireItemId!: string;
    /** 问卷调查条目详情模板标识 */
    tmplQuestionnaireItemDetailId?: string | undefined;
    /** 答案 */
    answer!: string;
    /** 分数 */
    score?: number | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IPatientQuestionnaireDetailViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientQuestionnaireId = _data["patientQuestionnaireId"];
            this.tmplQuestionnaireItemId = _data["tmplQuestionnaireItemId"];
            this.tmplQuestionnaireItemDetailId = _data["tmplQuestionnaireItemDetailId"];
            this.answer = _data["answer"];
            this.score = _data["score"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): PatientQuestionnaireDetailViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientQuestionnaireDetailViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientQuestionnaireId"] = this.patientQuestionnaireId;
        data["tmplQuestionnaireItemId"] = this.tmplQuestionnaireItemId;
        data["tmplQuestionnaireItemDetailId"] = this.tmplQuestionnaireItemDetailId;
        data["answer"] = this.answer;
        data["score"] = this.score;
        data["remark"] = this.remark;
        return data;
    }
}

/** 问卷调查明细 (ViewModel) */
export interface IPatientQuestionnaireDetailViewModel {
    /** [问卷调查](问卷调查Id) */
    patientQuestionnaireId: string;
    /** [问卷调查条目模板标识](问卷调查条目模板Id) */
    tmplQuestionnaireItemId: string;
    /** 问卷调查条目详情模板标识 */
    tmplQuestionnaireItemDetailId?: string | undefined;
    /** 答案 */
    answer: string;
    /** 分数 */
    score?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
}

export class PatientQuestionnaireEditModel implements IPatientQuestionnaireEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [问卷调查模板标识](#问卷调查模板) */
    tmplQuestionnaireId!: string;
    /** 结论 *问卷类型为评估时会有结论* */
    conclusion?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 问卷调查详细信息 */
    patientQuestionnaireItems?: PatientQuestionnaireDetailBase[] | undefined;
    /** 问卷调查条目信息 */
    tmplQuestionaireItems?: TmplQuestionnaireItemEditModel[] | undefined;

    constructor(data?: IPatientQuestionnaireEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.tmplQuestionnaireId = _data["tmplQuestionnaireId"];
            this.conclusion = _data["conclusion"];
            this.remark = _data["remark"];
            if (Array.isArray(_data["patientQuestionnaireItems"])) {
                this.patientQuestionnaireItems = [] as any;
                for (let item of _data["patientQuestionnaireItems"])
                    this.patientQuestionnaireItems!.push(PatientQuestionnaireDetailBase.fromJS(item));
            }
            if (Array.isArray(_data["tmplQuestionaireItems"])) {
                this.tmplQuestionaireItems = [] as any;
                for (let item of _data["tmplQuestionaireItems"])
                    this.tmplQuestionaireItems!.push(TmplQuestionnaireItemEditModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientQuestionnaireEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientQuestionnaireEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["tmplQuestionnaireId"] = this.tmplQuestionnaireId;
        data["conclusion"] = this.conclusion;
        data["remark"] = this.remark;
        if (Array.isArray(this.patientQuestionnaireItems)) {
            data["patientQuestionnaireItems"] = [];
            for (let item of this.patientQuestionnaireItems)
                data["patientQuestionnaireItems"].push(item.toJSON());
        }
        if (Array.isArray(this.tmplQuestionaireItems)) {
            data["tmplQuestionaireItems"] = [];
            for (let item of this.tmplQuestionaireItems)
                data["tmplQuestionaireItems"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPatientQuestionnaireEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [问卷调查模板标识](#问卷调查模板) */
    tmplQuestionnaireId: string;
    /** 结论 *问卷类型为评估时会有结论* */
    conclusion?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 问卷调查详细信息 */
    patientQuestionnaireItems?: PatientQuestionnaireDetailBase[] | undefined;
    /** 问卷调查条目信息 */
    tmplQuestionaireItems?: TmplQuestionnaireItemEditModel[] | undefined;
}

/** Reponse */
export class PatientQuestionnaireEditModelResultEntry implements IPatientQuestionnaireEditModelResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientQuestionnaireEditModel;

    constructor(data?: IPatientQuestionnaireEditModelResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientQuestionnaireEditModel.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientQuestionnaireEditModelResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientQuestionnaireEditModelResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientQuestionnaireEditModelResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientQuestionnaireEditModel;
}

export class PatientQuestionnaireView implements IPatientQuestionnaireView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [问卷调查模板标识](#问卷调查模板) */
    tmplQuestionnaireId!: string;
    /** 结论 *问卷类型为评估时会有结论* */
    conclusion?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 评估日期 */
    questionnaireDate?: dayjs.Dayjs;
    /** 评估模板类型 *评估,问卷* */
    questionnaireType?: string | undefined;
    /** 评估名称 */
    questionnaireName?: string | undefined;
    /** 评估版本 */
    questionnaireVersion?: string | undefined;
    /** 问卷调查详细信息 */
    patientQuestionnaireItems?: PatientQuestionnaireDetailView[] | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientQuestionnaireView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.tmplQuestionnaireId = _data["tmplQuestionnaireId"];
            this.conclusion = _data["conclusion"];
            this.remark = _data["remark"];
            this.questionnaireDate = _data["questionnaireDate"] ? dayjs(_data["questionnaireDate"].toString()) : <any>undefined;
            this.questionnaireType = _data["questionnaireType"];
            this.questionnaireName = _data["questionnaireName"];
            this.questionnaireVersion = _data["questionnaireVersion"];
            if (Array.isArray(_data["patientQuestionnaireItems"])) {
                this.patientQuestionnaireItems = [] as any;
                for (let item of _data["patientQuestionnaireItems"])
                    this.patientQuestionnaireItems!.push(PatientQuestionnaireDetailView.fromJS(item));
            }
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientQuestionnaireView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientQuestionnaireView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["tmplQuestionnaireId"] = this.tmplQuestionnaireId;
        data["conclusion"] = this.conclusion;
        data["remark"] = this.remark;
        data["questionnaireDate"] = this.questionnaireDate ? this.questionnaireDate.toLocaleString() : <any>undefined;
        data["questionnaireType"] = this.questionnaireType;
        data["questionnaireName"] = this.questionnaireName;
        data["questionnaireVersion"] = this.questionnaireVersion;
        if (Array.isArray(this.patientQuestionnaireItems)) {
            data["patientQuestionnaireItems"] = [];
            for (let item of this.patientQuestionnaireItems)
                data["patientQuestionnaireItems"].push(item.toJSON());
        }
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface IPatientQuestionnaireView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [问卷调查模板标识](#问卷调查模板) */
    tmplQuestionnaireId: string;
    /** 结论 *问卷类型为评估时会有结论* */
    conclusion?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 评估日期 */
    questionnaireDate?: dayjs.Dayjs;
    /** 评估模板类型 *评估,问卷* */
    questionnaireType?: string | undefined;
    /** 评估名称 */
    questionnaireName?: string | undefined;
    /** 评估版本 */
    questionnaireVersion?: string | undefined;
    /** 问卷调查详细信息 */
    patientQuestionnaireItems?: PatientQuestionnaireDetailView[] | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientQuestionnaireViewResult implements IPatientQuestionnaireViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientQuestionnaireView[] | undefined;

    constructor(data?: IPatientQuestionnaireViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientQuestionnaireView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientQuestionnaireViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientQuestionnaireViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientQuestionnaireViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientQuestionnaireView[] | undefined;
}

/** Reponse */
export class PatientQuestionnaireViewResultEntry implements IPatientQuestionnaireViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientQuestionnaireView;

    constructor(data?: IPatientQuestionnaireViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientQuestionnaireView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientQuestionnaireViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientQuestionnaireViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientQuestionnaireViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientQuestionnaireView;
}

/** Reponse */
export class PatientResultEntry implements IPatientResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: Patient;

    constructor(data?: IPatientResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? Patient.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: Patient;
}

/** 患者自定义话术模板类记录 */
export class PatientScriptRecordEditModel implements IPatientScriptRecordEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 模板类型 */
    type!: string;
    /** 标题 */
    title!: string;
    /** 内容 */
    dataValue?: string | undefined;
    /** 日期 */
    recordDate?: dayjs.Dayjs | undefined;
    /** 医生标识 */
    doctorId?: string | undefined;
    /** 医生姓名 */
    doctorName?: string | undefined;

    constructor(data?: IPatientScriptRecordEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.type = _data["type"];
            this.title = _data["title"];
            this.dataValue = _data["dataValue"];
            this.recordDate = _data["recordDate"] ? dayjs(_data["recordDate"].toString()) : <any>undefined;
            this.doctorId = _data["doctorId"];
            this.doctorName = _data["doctorName"];
        }
    }

    static fromJS(data: any): PatientScriptRecordEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientScriptRecordEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["type"] = this.type;
        data["title"] = this.title;
        data["dataValue"] = this.dataValue;
        data["recordDate"] = this.recordDate ? this.recordDate.toLocaleString() : <any>undefined;
        data["doctorId"] = this.doctorId;
        data["doctorName"] = this.doctorName;
        return data;
    }
}

/** 患者自定义话术模板类记录 */
export interface IPatientScriptRecordEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 模板类型 */
    type: string;
    /** 标题 */
    title: string;
    /** 内容 */
    dataValue?: string | undefined;
    /** 日期 */
    recordDate?: dayjs.Dayjs | undefined;
    /** 医生标识 */
    doctorId?: string | undefined;
    /** 医生姓名 */
    doctorName?: string | undefined;
}

export class PatientScriptRecordGroupDetailView implements IPatientScriptRecordGroupDetailView {
    date?: dayjs.Dayjs | undefined;
    id?: string | undefined;

    constructor(data?: IPatientScriptRecordGroupDetailView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): PatientScriptRecordGroupDetailView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientScriptRecordGroupDetailView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IPatientScriptRecordGroupDetailView {
    date?: dayjs.Dayjs | undefined;
    id?: string | undefined;
}

export class PatientScriptRecordGroupItemView implements IPatientScriptRecordGroupItemView {
    /** 总数 */
    total?: number;
    month?: string | undefined;
    items?: PatientScriptRecordGroupDetailView[] | undefined;

    constructor(data?: IPatientScriptRecordGroupItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total = _data["total"];
            this.month = _data["month"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PatientScriptRecordGroupDetailView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientScriptRecordGroupItemView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientScriptRecordGroupItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total;
        data["month"] = this.month;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPatientScriptRecordGroupItemView {
    /** 总数 */
    total?: number;
    month?: string | undefined;
    items?: PatientScriptRecordGroupDetailView[] | undefined;
}

export class PatientScriptRecordGroupTypeView implements IPatientScriptRecordGroupTypeView {
    /** 总数 */
    total?: number;
    type?: string | undefined;
    items?: PatientScriptRecordGroupItemView[] | undefined;

    constructor(data?: IPatientScriptRecordGroupTypeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total = _data["total"];
            this.type = _data["type"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PatientScriptRecordGroupItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientScriptRecordGroupTypeView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientScriptRecordGroupTypeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total;
        data["type"] = this.type;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPatientScriptRecordGroupTypeView {
    /** 总数 */
    total?: number;
    type?: string | undefined;
    items?: PatientScriptRecordGroupItemView[] | undefined;
}

/** 患者自定义话术模板类记录 */
export class PatientScriptRecordGroupView implements IPatientScriptRecordGroupView {
    /** 总数 */
    total?: number;
    items?: PatientScriptRecordGroupTypeView[] | undefined;

    constructor(data?: IPatientScriptRecordGroupView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total = _data["total"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PatientScriptRecordGroupTypeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientScriptRecordGroupView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientScriptRecordGroupView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 患者自定义话术模板类记录 */
export interface IPatientScriptRecordGroupView {
    /** 总数 */
    total?: number;
    items?: PatientScriptRecordGroupTypeView[] | undefined;
}

/** Reponse */
export class PatientScriptRecordGroupViewResultEntry implements IPatientScriptRecordGroupViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientScriptRecordGroupView;

    constructor(data?: IPatientScriptRecordGroupViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientScriptRecordGroupView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientScriptRecordGroupViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientScriptRecordGroupViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientScriptRecordGroupViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientScriptRecordGroupView;
}

/** 患者自定义话术模板类记录 */
export class PatientScriptRecordView implements IPatientScriptRecordView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 模板类型 */
    type!: string;
    /** 标题 */
    title!: string;
    /** 内容 */
    dataValue?: string | undefined;
    /** 日期 */
    recordDate?: dayjs.Dayjs | undefined;
    /** 医生标识 */
    doctorId?: string | undefined;
    /** 医生姓名 */
    doctorName?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者签名(base64) */
    patientSignature?: string | undefined;
    /** 医生签名(路径) */
    doctorSignature?: string | undefined;
    customPrint?: { [key: string]: string; } | undefined;

    constructor(data?: IPatientScriptRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.type = _data["type"];
            this.title = _data["title"];
            this.dataValue = _data["dataValue"];
            this.recordDate = _data["recordDate"] ? dayjs(_data["recordDate"].toString()) : <any>undefined;
            this.doctorId = _data["doctorId"];
            this.doctorName = _data["doctorName"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patientSignature = _data["patientSignature"];
            this.doctorSignature = _data["doctorSignature"];
            if (_data["customPrint"]) {
                this.customPrint = {} as any;
                for (let key in _data["customPrint"]) {
                    if (_data["customPrint"].hasOwnProperty(key))
                        (<any>this.customPrint)![key] = _data["customPrint"][key];
                }
            }
        }
    }

    static fromJS(data: any): PatientScriptRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientScriptRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["type"] = this.type;
        data["title"] = this.title;
        data["dataValue"] = this.dataValue;
        data["recordDate"] = this.recordDate ? this.recordDate.toLocaleString() : <any>undefined;
        data["doctorId"] = this.doctorId;
        data["doctorName"] = this.doctorName;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patientSignature"] = this.patientSignature;
        data["doctorSignature"] = this.doctorSignature;
        if (this.customPrint) {
            data["customPrint"] = {};
            for (let key in this.customPrint) {
                if (this.customPrint.hasOwnProperty(key))
                    (<any>data["customPrint"])[key] = (<any>this.customPrint)[key];
            }
        }
        return data;
    }
}

/** 患者自定义话术模板类记录 */
export interface IPatientScriptRecordView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 模板类型 */
    type: string;
    /** 标题 */
    title: string;
    /** 内容 */
    dataValue?: string | undefined;
    /** 日期 */
    recordDate?: dayjs.Dayjs | undefined;
    /** 医生标识 */
    doctorId?: string | undefined;
    /** 医生姓名 */
    doctorName?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者签名(base64) */
    patientSignature?: string | undefined;
    /** 医生签名(路径) */
    doctorSignature?: string | undefined;
    customPrint?: { [key: string]: string; } | undefined;
}

/** Reponse */
export class PatientScriptRecordViewResult implements IPatientScriptRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientScriptRecordView[] | undefined;

    constructor(data?: IPatientScriptRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientScriptRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientScriptRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientScriptRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientScriptRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientScriptRecordView[] | undefined;
}

/** Reponse */
export class PatientScriptRecordViewResultEntry implements IPatientScriptRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientScriptRecordView;

    constructor(data?: IPatientScriptRecordViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientScriptRecordView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientScriptRecordViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientScriptRecordViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientScriptRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientScriptRecordView;
}

/** 患者签名 */
export class PatientSignatureEditModel implements IPatientSignatureEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 影像文件 *data:image/jpeg;base64,...* */
    signature!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IPatientSignatureEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.signature = _data["signature"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): PatientSignatureEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientSignatureEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["signature"] = this.signature;
        data["remark"] = this.remark;
        return data;
    }
}

/** 患者签名 */
export interface IPatientSignatureEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 影像文件 *data:image/jpeg;base64,...* */
    signature: string;
    /** 备注 */
    remark?: string | undefined;
}

/** 患者签名 */
export class PatientSignatureView implements IPatientSignatureView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 影像文件 *data:image/jpeg;base64,...* */
    signature!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientSignatureView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.signature = _data["signature"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientSignatureView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientSignatureView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["signature"] = this.signature;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 患者签名 */
export interface IPatientSignatureView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 影像文件 *data:image/jpeg;base64,...* */
    signature: string;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientSignatureViewResult implements IPatientSignatureViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientSignatureView[] | undefined;

    constructor(data?: IPatientSignatureViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientSignatureView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientSignatureViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientSignatureViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientSignatureViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientSignatureView[] | undefined;
}

/** Reponse */
export class PatientSignatureViewResultEntry implements IPatientSignatureViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientSignatureView;

    constructor(data?: IPatientSignatureViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientSignatureView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientSignatureViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientSignatureViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientSignatureViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientSignatureView;
}

export class PatientStageSummaryEditModel implements IPatientStageSummaryEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 日期 */
    date!: dayjs.Dayjs;
    /** [记录人员标识](#用户信息) */
    sysUserId?: string | undefined;
    /** 小结内容 */
    content!: string;
    /** 病程内容 */
    contentText!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IPatientStageSummaryEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.sysUserId = _data["sysUserId"];
            this.content = _data["content"];
            this.contentText = _data["contentText"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): PatientStageSummaryEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientStageSummaryEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["sysUserId"] = this.sysUserId;
        data["content"] = this.content;
        data["contentText"] = this.contentText;
        data["remark"] = this.remark;
        return data;
    }
}

export interface IPatientStageSummaryEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 日期 */
    date: dayjs.Dayjs;
    /** [记录人员标识](#用户信息) */
    sysUserId?: string | undefined;
    /** 小结内容 */
    content: string;
    /** 病程内容 */
    contentText: string;
    /** 备注 */
    remark?: string | undefined;
}

export class PatientStageSummaryView implements IPatientStageSummaryView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 日期 */
    date!: dayjs.Dayjs;
    /** [记录人员标识](#用户信息) */
    sysUserId?: string | undefined;
    /** 小结内容 */
    content!: string;
    /** 病程内容 */
    contentText!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 医生姓名 */
    sysUserName?: string | undefined;
    /** 医生别名 */
    sysUserName2?: string | undefined;
    /** 医生全名 */
    sysUserNameFull?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientStageSummaryView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.sysUserId = _data["sysUserId"];
            this.content = _data["content"];
            this.contentText = _data["contentText"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.sysUserName = _data["sysUserName"];
            this.sysUserName2 = _data["sysUserName2"];
            this.sysUserNameFull = _data["sysUserNameFull"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientStageSummaryView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientStageSummaryView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["sysUserId"] = this.sysUserId;
        data["content"] = this.content;
        data["contentText"] = this.contentText;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["sysUserName"] = this.sysUserName;
        data["sysUserName2"] = this.sysUserName2;
        data["sysUserNameFull"] = this.sysUserNameFull;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface IPatientStageSummaryView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 日期 */
    date: dayjs.Dayjs;
    /** [记录人员标识](#用户信息) */
    sysUserId?: string | undefined;
    /** 小结内容 */
    content: string;
    /** 病程内容 */
    contentText: string;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 医生姓名 */
    sysUserName?: string | undefined;
    /** 医生别名 */
    sysUserName2?: string | undefined;
    /** 医生全名 */
    sysUserNameFull?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientStageSummaryViewResult implements IPatientStageSummaryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientStageSummaryView[] | undefined;

    constructor(data?: IPatientStageSummaryViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientStageSummaryView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientStageSummaryViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientStageSummaryViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientStageSummaryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientStageSummaryView[] | undefined;
}

/** Reponse */
export class PatientStageSummaryViewResultEntry implements IPatientStageSummaryViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientStageSummaryView;

    constructor(data?: IPatientStageSummaryViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientStageSummaryView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientStageSummaryViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientStageSummaryViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientStageSummaryViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientStageSummaryView;
}

/** 患者首页数据汇总(干体重、血管通路、抗凝剂汇总) */
export class PatientSummaryView implements IPatientSummaryView {
    /** 日期 - 干体重 */
    weightBestDate?: string | undefined;
    /** 体重 - 干体重 */
    weightBest?: string | undefined;
    /** 日期 - 血管通路 */
    vascularAccessDate?: string | undefined;
    /** 名称 - 血管通路 */
    vascularAccessName?: string | undefined;
    /** 日期 - 抗凝剂 */
    anticoagulantDate?: string | undefined;
    /** 种类 - 抗凝剂 */
    anticoagulantType?: string | undefined;

    constructor(data?: IPatientSummaryView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.weightBestDate = _data["weightBestDate"];
            this.weightBest = _data["weightBest"];
            this.vascularAccessDate = _data["vascularAccessDate"];
            this.vascularAccessName = _data["vascularAccessName"];
            this.anticoagulantDate = _data["anticoagulantDate"];
            this.anticoagulantType = _data["anticoagulantType"];
        }
    }

    static fromJS(data: any): PatientSummaryView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientSummaryView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["weightBestDate"] = this.weightBestDate;
        data["weightBest"] = this.weightBest;
        data["vascularAccessDate"] = this.vascularAccessDate;
        data["vascularAccessName"] = this.vascularAccessName;
        data["anticoagulantDate"] = this.anticoagulantDate;
        data["anticoagulantType"] = this.anticoagulantType;
        return data;
    }
}

/** 患者首页数据汇总(干体重、血管通路、抗凝剂汇总) */
export interface IPatientSummaryView {
    /** 日期 - 干体重 */
    weightBestDate?: string | undefined;
    /** 体重 - 干体重 */
    weightBest?: string | undefined;
    /** 日期 - 血管通路 */
    vascularAccessDate?: string | undefined;
    /** 名称 - 血管通路 */
    vascularAccessName?: string | undefined;
    /** 日期 - 抗凝剂 */
    anticoagulantDate?: string | undefined;
    /** 种类 - 抗凝剂 */
    anticoagulantType?: string | undefined;
}

/** Reponse */
export class PatientSummaryViewResult implements IPatientSummaryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientSummaryView[] | undefined;

    constructor(data?: IPatientSummaryViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientSummaryView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientSummaryViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientSummaryViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientSummaryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientSummaryView[] | undefined;
}

/** 患者标签 */
export class PatientTags implements IPatientTags {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 级别 `DIC.PATIENT.TAG.LEVEL` */
    level?: string | undefined;
    /** 名称 *○同一个`patient_id`下不允许重复* */
    name?: string | undefined;
    /** 简称 *○不允许重复* */
    shortName?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;

    constructor(data?: IPatientTags) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.level = _data["level"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.color = _data["color"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientTags {
        data = typeof data === 'object' ? data : {};
        let result = new PatientTags();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["level"] = this.level;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["color"] = this.color;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        return data;
    }
}

/** 患者标签 */
export interface IPatientTags {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 级别 `DIC.PATIENT.TAG.LEVEL` */
    level?: string | undefined;
    /** 名称 *○同一个`patient_id`下不允许重复* */
    name?: string | undefined;
    /** 简称 *○不允许重复* */
    shortName?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
}

/** 患者标签 */
export class PatientTagsBase implements IPatientTagsBase {
    /** 级别 `DIC.PATIENT.TAG.LEVEL` */
    level!: string;
    /** 名称 *○同一个`patient_id`下不允许重复* */
    name!: string;
    /** 简称 *○不允许重复* */
    shortName?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IPatientTagsBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.level = _data["level"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.color = _data["color"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): PatientTagsBase {
        data = typeof data === 'object' ? data : {};
        let result = new PatientTagsBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["level"] = this.level;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["color"] = this.color;
        data["remark"] = this.remark;
        return data;
    }
}

/** 患者标签 */
export interface IPatientTagsBase {
    /** 级别 `DIC.PATIENT.TAG.LEVEL` */
    level: string;
    /** 名称 *○同一个`patient_id`下不允许重复* */
    name: string;
    /** 简称 *○不允许重复* */
    shortName?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color: string;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class PatientTagsResult implements IPatientTagsResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientTags[] | undefined;

    constructor(data?: IPatientTagsResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientTags.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientTagsResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientTagsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientTagsResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientTags[] | undefined;
}

/** Reponse */
export class PatientTagsResultEntry implements IPatientTagsResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientTags;

    constructor(data?: IPatientTagsResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientTags.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientTagsResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientTagsResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientTagsResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientTags;
}

/** 患者标签 (ViewModel) */
export class PatientTagsView implements IPatientTagsView {
    /** 级别 `DIC.PATIENT.TAG.LEVEL` */
    level!: string;
    /** 名称 *○同一个`patient_id`下不允许重复* */
    name!: string;
    /** 简称 *○不允许重复* */
    shortName?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color!: string;
    /** 备注 */
    remark?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId!: string;
    /** 启用状态 */
    enabled!: number;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 级别名称 */
    levelName?: string | undefined;
    /** 颜色代码名称 */
    colorName?: string | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientTagsView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.level = _data["level"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.color = _data["color"];
            this.remark = _data["remark"];
            this.patientId = _data["patientId"];
            this.enabled = _data["enabled"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.levelName = _data["levelName"];
            this.colorName = _data["colorName"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientTagsView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientTagsView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["level"] = this.level;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["color"] = this.color;
        data["remark"] = this.remark;
        data["patientId"] = this.patientId;
        data["enabled"] = this.enabled;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["levelName"] = this.levelName;
        data["colorName"] = this.colorName;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 患者标签 (ViewModel) */
export interface IPatientTagsView {
    /** 级别 `DIC.PATIENT.TAG.LEVEL` */
    level: string;
    /** 名称 *○同一个`patient_id`下不允许重复* */
    name: string;
    /** 简称 *○不允许重复* */
    shortName?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color: string;
    /** 备注 */
    remark?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId: string;
    /** 启用状态 */
    enabled: number;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 级别名称 */
    levelName?: string | undefined;
    /** 颜色代码名称 */
    colorName?: string | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 患者标签 (ViewModel) */
export class PatientTagsViewModel implements IPatientTagsViewModel {
    /** [患者标识](患者信息Id) */
    patientId!: string;
    /** 级别 `DIC.PATIENT.TAG.LEVEL` */
    level!: string;
    /** 名称 *○同一个`patient_id`下不允许重复* */
    name!: string;
    /** 简称 *○不允许重复* */
    shortName!: string;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IPatientTagsViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.level = _data["level"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.color = _data["color"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): PatientTagsViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientTagsViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["level"] = this.level;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["color"] = this.color;
        data["remark"] = this.remark;
        return data;
    }
}

/** 患者标签 (ViewModel) */
export interface IPatientTagsViewModel {
    /** [患者标识](患者信息Id) */
    patientId: string;
    /** 级别 `DIC.PATIENT.TAG.LEVEL` */
    level: string;
    /** 名称 *○同一个`patient_id`下不允许重复* */
    name: string;
    /** 简称 *○不允许重复* */
    shortName: string;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color: string;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class PatientTagsViewResult implements IPatientTagsViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientTagsView[] | undefined;

    constructor(data?: IPatientTagsViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientTagsView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientTagsViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientTagsViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientTagsViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientTagsView[] | undefined;
}

/** 患者门限配置表 */
export class PatientThresholdSettingEditModel implements IPatientThresholdSettingEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 收缩压-上限 *mmHg* */
    sbpHigh?: number | undefined;
    /** 收缩压-下限 *mmHg* */
    sbpLower?: number | undefined;
    /** 舒张压-上限 *mmHg* */
    dbpHigh?: number | undefined;
    /** 舒张压-下限 *mmHg* */
    dbpLower?: number | undefined;
    /** 脉搏-上限 *次/分* */
    pulseHigh?: number | undefined;
    /** 脉搏-下限 *次/分* */
    pulseLower?: number | undefined;
    /** 预脱百分比 */
    ufgPercentage?: number | undefined;
    /** 体温-上限 *℃* */
    tempHigh?: number | undefined;
    /** 体温-下限 *℃* */
    tempLower?: number | undefined;

    constructor(data?: IPatientThresholdSettingEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.sbpHigh = _data["sbpHigh"];
            this.sbpLower = _data["sbpLower"];
            this.dbpHigh = _data["dbpHigh"];
            this.dbpLower = _data["dbpLower"];
            this.pulseHigh = _data["pulseHigh"];
            this.pulseLower = _data["pulseLower"];
            this.ufgPercentage = _data["ufgPercentage"];
            this.tempHigh = _data["tempHigh"];
            this.tempLower = _data["tempLower"];
        }
    }

    static fromJS(data: any): PatientThresholdSettingEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientThresholdSettingEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["sbpHigh"] = this.sbpHigh;
        data["sbpLower"] = this.sbpLower;
        data["dbpHigh"] = this.dbpHigh;
        data["dbpLower"] = this.dbpLower;
        data["pulseHigh"] = this.pulseHigh;
        data["pulseLower"] = this.pulseLower;
        data["ufgPercentage"] = this.ufgPercentage;
        data["tempHigh"] = this.tempHigh;
        data["tempLower"] = this.tempLower;
        return data;
    }
}

/** 患者门限配置表 */
export interface IPatientThresholdSettingEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 收缩压-上限 *mmHg* */
    sbpHigh?: number | undefined;
    /** 收缩压-下限 *mmHg* */
    sbpLower?: number | undefined;
    /** 舒张压-上限 *mmHg* */
    dbpHigh?: number | undefined;
    /** 舒张压-下限 *mmHg* */
    dbpLower?: number | undefined;
    /** 脉搏-上限 *次/分* */
    pulseHigh?: number | undefined;
    /** 脉搏-下限 *次/分* */
    pulseLower?: number | undefined;
    /** 预脱百分比 */
    ufgPercentage?: number | undefined;
    /** 体温-上限 *℃* */
    tempHigh?: number | undefined;
    /** 体温-下限 *℃* */
    tempLower?: number | undefined;
}

/** 患者门限配置表 */
export class PatientThresholdSettingView implements IPatientThresholdSettingView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 收缩压-上限 *mmHg* */
    sbpHigh?: number | undefined;
    /** 收缩压-下限 *mmHg* */
    sbpLower?: number | undefined;
    /** 舒张压-上限 *mmHg* */
    dbpHigh?: number | undefined;
    /** 舒张压-下限 *mmHg* */
    dbpLower?: number | undefined;
    /** 脉搏-上限 *次/分* */
    pulseHigh?: number | undefined;
    /** 脉搏-下限 *次/分* */
    pulseLower?: number | undefined;
    /** 预脱百分比 */
    ufgPercentage?: number | undefined;
    /** 体温-上限 *℃* */
    tempHigh?: number | undefined;
    /** 体温-下限 *℃* */
    tempLower?: number | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientThresholdSettingView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.sbpHigh = _data["sbpHigh"];
            this.sbpLower = _data["sbpLower"];
            this.dbpHigh = _data["dbpHigh"];
            this.dbpLower = _data["dbpLower"];
            this.pulseHigh = _data["pulseHigh"];
            this.pulseLower = _data["pulseLower"];
            this.ufgPercentage = _data["ufgPercentage"];
            this.tempHigh = _data["tempHigh"];
            this.tempLower = _data["tempLower"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientThresholdSettingView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientThresholdSettingView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["sbpHigh"] = this.sbpHigh;
        data["sbpLower"] = this.sbpLower;
        data["dbpHigh"] = this.dbpHigh;
        data["dbpLower"] = this.dbpLower;
        data["pulseHigh"] = this.pulseHigh;
        data["pulseLower"] = this.pulseLower;
        data["ufgPercentage"] = this.ufgPercentage;
        data["tempHigh"] = this.tempHigh;
        data["tempLower"] = this.tempLower;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 患者门限配置表 */
export interface IPatientThresholdSettingView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 收缩压-上限 *mmHg* */
    sbpHigh?: number | undefined;
    /** 收缩压-下限 *mmHg* */
    sbpLower?: number | undefined;
    /** 舒张压-上限 *mmHg* */
    dbpHigh?: number | undefined;
    /** 舒张压-下限 *mmHg* */
    dbpLower?: number | undefined;
    /** 脉搏-上限 *次/分* */
    pulseHigh?: number | undefined;
    /** 脉搏-下限 *次/分* */
    pulseLower?: number | undefined;
    /** 预脱百分比 */
    ufgPercentage?: number | undefined;
    /** 体温-上限 *℃* */
    tempHigh?: number | undefined;
    /** 体温-下限 *℃* */
    tempLower?: number | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientThresholdSettingViewResult implements IPatientThresholdSettingViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientThresholdSettingView[] | undefined;

    constructor(data?: IPatientThresholdSettingViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientThresholdSettingView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientThresholdSettingViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientThresholdSettingViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientThresholdSettingViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientThresholdSettingView[] | undefined;
}

/** Reponse */
export class PatientThresholdSettingViewResultEntry implements IPatientThresholdSettingViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientThresholdSettingView;

    constructor(data?: IPatientThresholdSettingViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientThresholdSettingView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientThresholdSettingViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientThresholdSettingViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientThresholdSettingViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientThresholdSettingView;
}

/** 患者档案文件模板 */
export class PatientTmplArchive implements IPatientTmplArchive {
    /** 标识 */
    id?: string | undefined;
    /** 分类 `DIC.SYS.ARCHIVE.TYPE` *血液净化治疗知情同意书,知情同意委托书* */
    type?: string | undefined;
    /** 版本 */
    version?: string | undefined;
    /** 患者id */
    patientid?: string | undefined;
    /** 医生签名 *data:image/jpeg;base64,...* */
    doctorSignature?: string | undefined;
    /** 护士签名 *data:image/jpeg;base64,...* */
    nurseSignature?: string | undefined;
    /** 内容 */
    content?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientTmplArchive) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"];
            this.version = _data["version"];
            this.patientid = _data["patientid"];
            this.doctorSignature = _data["doctorSignature"];
            this.nurseSignature = _data["nurseSignature"];
            this.content = _data["content"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientTmplArchive {
        data = typeof data === 'object' ? data : {};
        let result = new PatientTmplArchive();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["version"] = this.version;
        data["patientid"] = this.patientid;
        data["doctorSignature"] = this.doctorSignature;
        data["nurseSignature"] = this.nurseSignature;
        data["content"] = this.content;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 患者档案文件模板 */
export interface IPatientTmplArchive {
    /** 标识 */
    id?: string | undefined;
    /** 分类 `DIC.SYS.ARCHIVE.TYPE` *血液净化治疗知情同意书,知情同意委托书* */
    type?: string | undefined;
    /** 版本 */
    version?: string | undefined;
    /** 患者id */
    patientid?: string | undefined;
    /** 医生签名 *data:image/jpeg;base64,...* */
    doctorSignature?: string | undefined;
    /** 护士签名 *data:image/jpeg;base64,...* */
    nurseSignature?: string | undefined;
    /** 内容 */
    content?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 患者档案文件模板 */
export class PatientTmplArchiveEditModel implements IPatientTmplArchiveEditModel {
    /** 分类 `DIC.SYS.ARCHIVE.TYPE` *血液净化治疗知情同意书,知情同意委托书* */
    type!: string;
    /** 版本 */
    version!: string;
    /** 患者id */
    patientid!: string;
    /** 内容 */
    content?: string | undefined;
    /** 医生签名 *data:image/jpeg;base64,...* */
    doctorSignature?: string | undefined;
    /** 护士签名 *data:image/jpeg;base64,...* */
    nurseSignature?: string | undefined;

    constructor(data?: IPatientTmplArchiveEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.version = _data["version"];
            this.patientid = _data["patientid"];
            this.content = _data["content"];
            this.doctorSignature = _data["doctorSignature"];
            this.nurseSignature = _data["nurseSignature"];
        }
    }

    static fromJS(data: any): PatientTmplArchiveEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientTmplArchiveEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["version"] = this.version;
        data["patientid"] = this.patientid;
        data["content"] = this.content;
        data["doctorSignature"] = this.doctorSignature;
        data["nurseSignature"] = this.nurseSignature;
        return data;
    }
}

/** 患者档案文件模板 */
export interface IPatientTmplArchiveEditModel {
    /** 分类 `DIC.SYS.ARCHIVE.TYPE` *血液净化治疗知情同意书,知情同意委托书* */
    type: string;
    /** 版本 */
    version: string;
    /** 患者id */
    patientid: string;
    /** 内容 */
    content?: string | undefined;
    /** 医生签名 *data:image/jpeg;base64,...* */
    doctorSignature?: string | undefined;
    /** 护士签名 *data:image/jpeg;base64,...* */
    nurseSignature?: string | undefined;
}

/** Reponse */
export class PatientTmplArchiveResult implements IPatientTmplArchiveResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientTmplArchive[] | undefined;

    constructor(data?: IPatientTmplArchiveResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientTmplArchive.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientTmplArchiveResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientTmplArchiveResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientTmplArchiveResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientTmplArchive[] | undefined;
}

/** 患者档案文件模板 */
export class PatientTmplArchiveView implements IPatientTmplArchiveView {
    /** 分类 `DIC.SYS.ARCHIVE.TYPE` *血液净化治疗知情同意书,知情同意委托书* */
    type!: string;
    /** 版本 */
    version!: string;
    /** 患者id */
    patientid!: string;
    /** 内容 */
    content?: string | undefined;
    /** 医生签名 *data:image/jpeg;base64,...* */
    doctorSignature?: string | undefined;
    /** 护士签名 *data:image/jpeg;base64,...* */
    nurseSignature?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者签名 */
    signature?: string | undefined;
    /** 患者指纹 */
    finger?: string | undefined;

    constructor(data?: IPatientTmplArchiveView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.version = _data["version"];
            this.patientid = _data["patientid"];
            this.content = _data["content"];
            this.doctorSignature = _data["doctorSignature"];
            this.nurseSignature = _data["nurseSignature"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.signature = _data["signature"];
            this.finger = _data["finger"];
        }
    }

    static fromJS(data: any): PatientTmplArchiveView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientTmplArchiveView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["version"] = this.version;
        data["patientid"] = this.patientid;
        data["content"] = this.content;
        data["doctorSignature"] = this.doctorSignature;
        data["nurseSignature"] = this.nurseSignature;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["signature"] = this.signature;
        data["finger"] = this.finger;
        return data;
    }
}

/** 患者档案文件模板 */
export interface IPatientTmplArchiveView {
    /** 分类 `DIC.SYS.ARCHIVE.TYPE` *血液净化治疗知情同意书,知情同意委托书* */
    type: string;
    /** 版本 */
    version: string;
    /** 患者id */
    patientid: string;
    /** 内容 */
    content?: string | undefined;
    /** 医生签名 *data:image/jpeg;base64,...* */
    doctorSignature?: string | undefined;
    /** 护士签名 *data:image/jpeg;base64,...* */
    nurseSignature?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者签名 */
    signature?: string | undefined;
    /** 患者指纹 */
    finger?: string | undefined;
}

/** Reponse */
export class PatientTmplArchiveViewResult implements IPatientTmplArchiveViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientTmplArchiveView[] | undefined;

    constructor(data?: IPatientTmplArchiveViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientTmplArchiveView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientTmplArchiveViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientTmplArchiveViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientTmplArchiveViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientTmplArchiveView[] | undefined;
}

/** Reponse */
export class PatientTmplArchiveViewResultEntry implements IPatientTmplArchiveViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientTmplArchiveView;

    constructor(data?: IPatientTmplArchiveViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientTmplArchiveView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientTmplArchiveViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientTmplArchiveViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientTmplArchiveViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientTmplArchiveView;
}

/** 患者自定义表单记录 */
export class PatientTmplRecordEditModel implements IPatientTmplRecordEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 自定义表单类型 */
    type!: string;
    /** [表单模板标识](#表单模板) */
    tmplFormId!: string;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 日期 */
    recordDate?: dayjs.Dayjs | undefined;
    /** 记录人员标识 */
    recordUserId?: string | undefined;
    /** 记录人员 */
    recordUserName?: string | undefined;

    constructor(data?: IPatientTmplRecordEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.type = _data["type"];
            this.tmplFormId = _data["tmplFormId"];
            if (_data["dataValue"]) {
                this.dataValue = {} as any;
                for (let key in _data["dataValue"]) {
                    if (_data["dataValue"].hasOwnProperty(key))
                        (<any>this.dataValue)![key] = _data["dataValue"][key];
                }
            }
            this.recordDate = _data["recordDate"] ? dayjs(_data["recordDate"].toString()) : <any>undefined;
            this.recordUserId = _data["recordUserId"];
            this.recordUserName = _data["recordUserName"];
        }
    }

    static fromJS(data: any): PatientTmplRecordEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientTmplRecordEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["type"] = this.type;
        data["tmplFormId"] = this.tmplFormId;
        if (this.dataValue) {
            data["dataValue"] = {};
            for (let key in this.dataValue) {
                if (this.dataValue.hasOwnProperty(key))
                    (<any>data["dataValue"])[key] = (<any>this.dataValue)[key];
            }
        }
        data["recordDate"] = this.recordDate ? this.recordDate.toLocaleString() : <any>undefined;
        data["recordUserId"] = this.recordUserId;
        data["recordUserName"] = this.recordUserName;
        return data;
    }
}

/** 患者自定义表单记录 */
export interface IPatientTmplRecordEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 自定义表单类型 */
    type: string;
    /** [表单模板标识](#表单模板) */
    tmplFormId: string;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 日期 */
    recordDate?: dayjs.Dayjs | undefined;
    /** 记录人员标识 */
    recordUserId?: string | undefined;
    /** 记录人员 */
    recordUserName?: string | undefined;
}

/** 患者自定义表单记录 */
export class PatientTmplRecordView implements IPatientTmplRecordView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 自定义表单类型 */
    type!: string;
    /** [表单模板标识](#表单模板) */
    tmplFormId!: string;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 日期 */
    recordDate?: dayjs.Dayjs | undefined;
    /** 记录人员标识 */
    recordUserId?: string | undefined;
    /** 记录人员 */
    recordUserName?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 模板 */
    data?: { [key: string]: string; } | undefined;

    constructor(data?: IPatientTmplRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.type = _data["type"];
            this.tmplFormId = _data["tmplFormId"];
            if (_data["dataValue"]) {
                this.dataValue = {} as any;
                for (let key in _data["dataValue"]) {
                    if (_data["dataValue"].hasOwnProperty(key))
                        (<any>this.dataValue)![key] = _data["dataValue"][key];
                }
            }
            this.recordDate = _data["recordDate"] ? dayjs(_data["recordDate"].toString()) : <any>undefined;
            this.recordUserId = _data["recordUserId"];
            this.recordUserName = _data["recordUserName"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            if (_data["data"]) {
                this.data = {} as any;
                for (let key in _data["data"]) {
                    if (_data["data"].hasOwnProperty(key))
                        (<any>this.data)![key] = _data["data"][key];
                }
            }
        }
    }

    static fromJS(data: any): PatientTmplRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientTmplRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["type"] = this.type;
        data["tmplFormId"] = this.tmplFormId;
        if (this.dataValue) {
            data["dataValue"] = {};
            for (let key in this.dataValue) {
                if (this.dataValue.hasOwnProperty(key))
                    (<any>data["dataValue"])[key] = (<any>this.dataValue)[key];
            }
        }
        data["recordDate"] = this.recordDate ? this.recordDate.toLocaleString() : <any>undefined;
        data["recordUserId"] = this.recordUserId;
        data["recordUserName"] = this.recordUserName;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        if (this.data) {
            data["data"] = {};
            for (let key in this.data) {
                if (this.data.hasOwnProperty(key))
                    (<any>data["data"])[key] = (<any>this.data)[key];
            }
        }
        return data;
    }
}

/** 患者自定义表单记录 */
export interface IPatientTmplRecordView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 自定义表单类型 */
    type: string;
    /** [表单模板标识](#表单模板) */
    tmplFormId: string;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 日期 */
    recordDate?: dayjs.Dayjs | undefined;
    /** 记录人员标识 */
    recordUserId?: string | undefined;
    /** 记录人员 */
    recordUserName?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 模板 */
    data?: { [key: string]: string; } | undefined;
}

/** Reponse */
export class PatientTmplRecordViewResult implements IPatientTmplRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientTmplRecordView[] | undefined;

    constructor(data?: IPatientTmplRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientTmplRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientTmplRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientTmplRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientTmplRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientTmplRecordView[] | undefined;
}

/** Reponse */
export class PatientTmplRecordViewResultEntry implements IPatientTmplRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientTmplRecordView;

    constructor(data?: IPatientTmplRecordViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientTmplRecordView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientTmplRecordViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientTmplRecordViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientTmplRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientTmplRecordView;
}

/** 患者血管通路 */
export class PatientVascularAccess implements IPatientVascularAccess {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 是否改变通路0,1 */
    change?: number | undefined;
    /** 改变日期 */
    changeDate?: dayjs.Dayjs | undefined;
    /** 改变原因 `DIC.VASCULAR.ACCESS.CHANGECAUSE` *可以多选,使用`;`分隔* */
    changeCause?: string | undefined;
    /** 其它改变原因 */
    changeCauseOther?: string | undefined;
    /** 位置(左-右) `DIC.VASCULAR.ACCESS.LOCATION` *左侧,右侧* */
    location?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type?: string | undefined;
    /** 位置 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 中心静脉置管方法 `DIC.VASCULAR.ACCESS.WAY.CVC` */
    way?: string | undefined;
    /** 其他描述 */
    remarkOther?: string | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 默认在处方应用0,1 */
    default?: number | undefined;
    /** 停用时间 */
    disableDate?: dayjs.Dayjs | undefined;
    /** 停用原因 */
    disableReason?: string | undefined;
    /** 已用天数 */
    lifetime?: number | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;

    constructor(data?: IPatientVascularAccess) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.change = _data["change"];
            this.changeDate = _data["changeDate"] ? dayjs(_data["changeDate"].toString()) : <any>undefined;
            this.changeCause = _data["changeCause"];
            this.changeCauseOther = _data["changeCauseOther"];
            this.location = _data["location"];
            this.type = _data["type"];
            this.position = _data["position"];
            this.way = _data["way"];
            this.remarkOther = _data["remarkOther"];
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.default = _data["default"];
            this.disableDate = _data["disableDate"] ? dayjs(_data["disableDate"].toString()) : <any>undefined;
            this.disableReason = _data["disableReason"];
            this.lifetime = _data["lifetime"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientVascularAccess {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccess();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["createDate"] = this.createDate ? this.createDate.toLocaleString() : <any>undefined;
        data["change"] = this.change;
        data["changeDate"] = this.changeDate ? this.changeDate.toLocaleString() : <any>undefined;
        data["changeCause"] = this.changeCause;
        data["changeCauseOther"] = this.changeCauseOther;
        data["location"] = this.location;
        data["type"] = this.type;
        data["position"] = this.position;
        data["way"] = this.way;
        data["remarkOther"] = this.remarkOther;
        data["firstDate"] = this.firstDate ? this.firstDate.toLocaleString() : <any>undefined;
        data["default"] = this.default;
        data["disableDate"] = this.disableDate ? this.disableDate.toLocaleString() : <any>undefined;
        data["disableReason"] = this.disableReason;
        data["lifetime"] = this.lifetime;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        return data;
    }
}

/** 患者血管通路 */
export interface IPatientVascularAccess {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 是否改变通路0,1 */
    change?: number | undefined;
    /** 改变日期 */
    changeDate?: dayjs.Dayjs | undefined;
    /** 改变原因 `DIC.VASCULAR.ACCESS.CHANGECAUSE` *可以多选,使用`;`分隔* */
    changeCause?: string | undefined;
    /** 其它改变原因 */
    changeCauseOther?: string | undefined;
    /** 位置(左-右) `DIC.VASCULAR.ACCESS.LOCATION` *左侧,右侧* */
    location?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type?: string | undefined;
    /** 位置 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 中心静脉置管方法 `DIC.VASCULAR.ACCESS.WAY.CVC` */
    way?: string | undefined;
    /** 其他描述 */
    remarkOther?: string | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 默认在处方应用0,1 */
    default?: number | undefined;
    /** 停用时间 */
    disableDate?: dayjs.Dayjs | undefined;
    /** 停用原因 */
    disableReason?: string | undefined;
    /** 已用天数 */
    lifetime?: number | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
}

/** 患者血管通路评估 */
export class PatientVascularAccessAssessmentEditModel implements IPatientVascularAccessAssessmentEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [血管通路标识](#患者血管通路) */
    patientVascularAccessId!: string;
    /** 评估类型 */
    type!: string;
    /** 评估日期 */
    date!: dayjs.Dayjs;
    /** 评估人 */
    operator?: string | undefined;
    /** 评估人标识 */
    operatorId?: string | undefined;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IPatientVascularAccessAssessmentEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.type = _data["type"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.operator = _data["operator"];
            this.operatorId = _data["operatorId"];
            if (_data["dataValue"]) {
                this.dataValue = {} as any;
                for (let key in _data["dataValue"]) {
                    if (_data["dataValue"].hasOwnProperty(key))
                        (<any>this.dataValue)![key] = _data["dataValue"][key];
                }
            }
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): PatientVascularAccessAssessmentEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessAssessmentEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["type"] = this.type;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["operator"] = this.operator;
        data["operatorId"] = this.operatorId;
        if (this.dataValue) {
            data["dataValue"] = {};
            for (let key in this.dataValue) {
                if (this.dataValue.hasOwnProperty(key))
                    (<any>data["dataValue"])[key] = (<any>this.dataValue)[key];
            }
        }
        data["remark"] = this.remark;
        return data;
    }
}

/** 患者血管通路评估 */
export interface IPatientVascularAccessAssessmentEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [血管通路标识](#患者血管通路) */
    patientVascularAccessId: string;
    /** 评估类型 */
    type: string;
    /** 评估日期 */
    date: dayjs.Dayjs;
    /** 评估人 */
    operator?: string | undefined;
    /** 评估人标识 */
    operatorId?: string | undefined;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 患者血管通路评估 */
export class PatientVascularAccessAssessmentView implements IPatientVascularAccessAssessmentView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [血管通路标识](#患者血管通路) */
    patientVascularAccessId!: string;
    /** 评估类型 */
    type!: string;
    /** 评估日期 */
    date!: dayjs.Dayjs;
    /** 评估人 */
    operator?: string | undefined;
    /** 评估人标识 */
    operatorId?: string | undefined;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientVascularAccessAssessmentView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.type = _data["type"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.operator = _data["operator"];
            this.operatorId = _data["operatorId"];
            if (_data["dataValue"]) {
                this.dataValue = {} as any;
                for (let key in _data["dataValue"]) {
                    if (_data["dataValue"].hasOwnProperty(key))
                        (<any>this.dataValue)![key] = _data["dataValue"][key];
                }
            }
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientVascularAccessAssessmentView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessAssessmentView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["type"] = this.type;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["operator"] = this.operator;
        data["operatorId"] = this.operatorId;
        if (this.dataValue) {
            data["dataValue"] = {};
            for (let key in this.dataValue) {
                if (this.dataValue.hasOwnProperty(key))
                    (<any>data["dataValue"])[key] = (<any>this.dataValue)[key];
            }
        }
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 患者血管通路评估 */
export interface IPatientVascularAccessAssessmentView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [血管通路标识](#患者血管通路) */
    patientVascularAccessId: string;
    /** 评估类型 */
    type: string;
    /** 评估日期 */
    date: dayjs.Dayjs;
    /** 评估人 */
    operator?: string | undefined;
    /** 评估人标识 */
    operatorId?: string | undefined;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientVascularAccessAssessmentViewResult implements IPatientVascularAccessAssessmentViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientVascularAccessAssessmentView[] | undefined;

    constructor(data?: IPatientVascularAccessAssessmentViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientVascularAccessAssessmentView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientVascularAccessAssessmentViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessAssessmentViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientVascularAccessAssessmentViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientVascularAccessAssessmentView[] | undefined;
}

/** Reponse */
export class PatientVascularAccessAssessmentViewResultEntry implements IPatientVascularAccessAssessmentViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientVascularAccessAssessmentView;

    constructor(data?: IPatientVascularAccessAssessmentViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientVascularAccessAssessmentView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientVascularAccessAssessmentViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessAssessmentViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientVascularAccessAssessmentViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientVascularAccessAssessmentView;
}

/** 患者血管通路改变 */
export class PatientVascularAccessChangeEditModel implements IPatientVascularAccessChangeEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [血管通路标识](#患者血管通路) */
    patientVascularAccessId!: string;
    /** 是否改变通路0,1 */
    change?: number;
    /** 改变日期 */
    changeDate?: dayjs.Dayjs;
    /** 改变原因 `DIC.VASCULAR.ACCESS.CHANGECAUSE` *可以多选,使用`;`分隔* */
    changeCause!: string;
    /** 处理方式 `DIC.VASCULAR.ACCESS.PROCESS.MODE` */
    processMode!: string;
    /** 位置(左-右) `DIC.VASCULAR.ACCESS.LOCATION` *左侧,右侧* */
    location!: string;
    /** 部位 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 中心静脉置管方法 `DIC.VASCULAR.ACCESS.WAY.CVC` */
    way?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;

    constructor(data?: IPatientVascularAccessChangeEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.change = _data["change"];
            this.changeDate = _data["changeDate"] ? dayjs(_data["changeDate"].toString()) : <any>undefined;
            this.changeCause = _data["changeCause"];
            this.processMode = _data["processMode"];
            this.location = _data["location"];
            this.position = _data["position"];
            this.way = _data["way"];
            this.parentId = _data["parentId"];
            this.remark = _data["remark"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): PatientVascularAccessChangeEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessChangeEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["change"] = this.change;
        data["changeDate"] = this.changeDate ? this.changeDate.toLocaleString() : <any>undefined;
        data["changeCause"] = this.changeCause;
        data["processMode"] = this.processMode;
        data["location"] = this.location;
        data["position"] = this.position;
        data["way"] = this.way;
        data["parentId"] = this.parentId;
        data["remark"] = this.remark;
        data["id"] = this.id;
        return data;
    }
}

/** 患者血管通路改变 */
export interface IPatientVascularAccessChangeEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [血管通路标识](#患者血管通路) */
    patientVascularAccessId: string;
    /** 是否改变通路0,1 */
    change?: number;
    /** 改变日期 */
    changeDate?: dayjs.Dayjs;
    /** 改变原因 `DIC.VASCULAR.ACCESS.CHANGECAUSE` *可以多选,使用`;`分隔* */
    changeCause: string;
    /** 处理方式 `DIC.VASCULAR.ACCESS.PROCESS.MODE` */
    processMode: string;
    /** 位置(左-右) `DIC.VASCULAR.ACCESS.LOCATION` *左侧,右侧* */
    location: string;
    /** 部位 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 中心静脉置管方法 `DIC.VASCULAR.ACCESS.WAY.CVC` */
    way?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId: string;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
}

/** 患者血管通路改变 */
export class PatientVascularAccessChangeView implements IPatientVascularAccessChangeView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [血管通路标识](#患者血管通路) */
    patientVascularAccessId!: string;
    /** 是否改变通路0,1 */
    change?: number;
    /** 改变日期 */
    changeDate?: dayjs.Dayjs;
    /** 改变原因 `DIC.VASCULAR.ACCESS.CHANGECAUSE` *可以多选,使用`;`分隔* */
    changeCause!: string;
    /** 处理方式 `DIC.VASCULAR.ACCESS.PROCESS.MODE` */
    processMode!: string;
    /** 位置(左-右) `DIC.VASCULAR.ACCESS.LOCATION` *左侧,右侧* */
    location!: string;
    /** 部位 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 中心静脉置管方法 `DIC.VASCULAR.ACCESS.WAY.CVC` */
    way?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 处理方式 */
    processModeLabel?: string | undefined;
    /** 位置(左-右) */
    locationLabel?: string | undefined;
    /** 中心静脉置管方法 */
    wayLabel?: string | undefined;
    /** 改变原因 */
    changeCauseLabel?: string | undefined;
    /** 已用天数 */
    lifetime?: number | undefined;

    constructor(data?: IPatientVascularAccessChangeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.change = _data["change"];
            this.changeDate = _data["changeDate"] ? dayjs(_data["changeDate"].toString()) : <any>undefined;
            this.changeCause = _data["changeCause"];
            this.processMode = _data["processMode"];
            this.location = _data["location"];
            this.position = _data["position"];
            this.way = _data["way"];
            this.parentId = _data["parentId"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.processModeLabel = _data["processModeLabel"];
            this.locationLabel = _data["locationLabel"];
            this.wayLabel = _data["wayLabel"];
            this.changeCauseLabel = _data["changeCauseLabel"];
            this.lifetime = _data["lifetime"];
        }
    }

    static fromJS(data: any): PatientVascularAccessChangeView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessChangeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["change"] = this.change;
        data["changeDate"] = this.changeDate ? this.changeDate.toLocaleString() : <any>undefined;
        data["changeCause"] = this.changeCause;
        data["processMode"] = this.processMode;
        data["location"] = this.location;
        data["position"] = this.position;
        data["way"] = this.way;
        data["parentId"] = this.parentId;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["processModeLabel"] = this.processModeLabel;
        data["locationLabel"] = this.locationLabel;
        data["wayLabel"] = this.wayLabel;
        data["changeCauseLabel"] = this.changeCauseLabel;
        data["lifetime"] = this.lifetime;
        return data;
    }
}

/** 患者血管通路改变 */
export interface IPatientVascularAccessChangeView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [血管通路标识](#患者血管通路) */
    patientVascularAccessId: string;
    /** 是否改变通路0,1 */
    change?: number;
    /** 改变日期 */
    changeDate?: dayjs.Dayjs;
    /** 改变原因 `DIC.VASCULAR.ACCESS.CHANGECAUSE` *可以多选,使用`;`分隔* */
    changeCause: string;
    /** 处理方式 `DIC.VASCULAR.ACCESS.PROCESS.MODE` */
    processMode: string;
    /** 位置(左-右) `DIC.VASCULAR.ACCESS.LOCATION` *左侧,右侧* */
    location: string;
    /** 部位 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 中心静脉置管方法 `DIC.VASCULAR.ACCESS.WAY.CVC` */
    way?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId: string;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 处理方式 */
    processModeLabel?: string | undefined;
    /** 位置(左-右) */
    locationLabel?: string | undefined;
    /** 中心静脉置管方法 */
    wayLabel?: string | undefined;
    /** 改变原因 */
    changeCauseLabel?: string | undefined;
    /** 已用天数 */
    lifetime?: number | undefined;
}

/** Reponse */
export class PatientVascularAccessChangeViewResult implements IPatientVascularAccessChangeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientVascularAccessChangeView[] | undefined;

    constructor(data?: IPatientVascularAccessChangeViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientVascularAccessChangeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientVascularAccessChangeViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessChangeViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientVascularAccessChangeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientVascularAccessChangeView[] | undefined;
}

/** Reponse */
export class PatientVascularAccessChangeViewResultEntry implements IPatientVascularAccessChangeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientVascularAccessChangeView;

    constructor(data?: IPatientVascularAccessChangeViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientVascularAccessChangeView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientVascularAccessChangeViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessChangeViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientVascularAccessChangeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientVascularAccessChangeView;
}

/** 患者血管通路诊断结果 */
export class PatientVascularAccessDiagnosisResultEditModel implements IPatientVascularAccessDiagnosisResultEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [血管通路标识](#患者血管通路) */
    patientVascularAccessId!: string;
    /** 诊断日期 */
    date!: dayjs.Dayjs;
    /** 诊断结果 */
    result?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IPatientVascularAccessDiagnosisResultEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.result = _data["result"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): PatientVascularAccessDiagnosisResultEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessDiagnosisResultEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["result"] = this.result;
        data["remark"] = this.remark;
        return data;
    }
}

/** 患者血管通路诊断结果 */
export interface IPatientVascularAccessDiagnosisResultEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [血管通路标识](#患者血管通路) */
    patientVascularAccessId: string;
    /** 诊断日期 */
    date: dayjs.Dayjs;
    /** 诊断结果 */
    result?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 患者血管通路诊断结果 */
export class PatientVascularAccessDiagnosisResultView implements IPatientVascularAccessDiagnosisResultView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [血管通路标识](#患者血管通路) */
    patientVascularAccessId!: string;
    /** 诊断日期 */
    date!: dayjs.Dayjs;
    /** 诊断结果 */
    result?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientVascularAccessDiagnosisResultView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.result = _data["result"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientVascularAccessDiagnosisResultView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessDiagnosisResultView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["result"] = this.result;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 患者血管通路诊断结果 */
export interface IPatientVascularAccessDiagnosisResultView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [血管通路标识](#患者血管通路) */
    patientVascularAccessId: string;
    /** 诊断日期 */
    date: dayjs.Dayjs;
    /** 诊断结果 */
    result?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientVascularAccessDiagnosisResultViewResult implements IPatientVascularAccessDiagnosisResultViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientVascularAccessDiagnosisResultView[] | undefined;

    constructor(data?: IPatientVascularAccessDiagnosisResultViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientVascularAccessDiagnosisResultView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientVascularAccessDiagnosisResultViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessDiagnosisResultViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientVascularAccessDiagnosisResultViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientVascularAccessDiagnosisResultView[] | undefined;
}

/** Reponse */
export class PatientVascularAccessDiagnosisResultViewResultEntry implements IPatientVascularAccessDiagnosisResultViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientVascularAccessDiagnosisResultView;

    constructor(data?: IPatientVascularAccessDiagnosisResultViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientVascularAccessDiagnosisResultView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientVascularAccessDiagnosisResultViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessDiagnosisResultViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientVascularAccessDiagnosisResultViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientVascularAccessDiagnosisResultView;
}

/** 患者血管通路 */
export class PatientVascularAccessEditModel implements IPatientVascularAccessEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 是否改变通路0,1 */
    change?: number | undefined;
    /** 改变日期 */
    changeDate?: dayjs.Dayjs | undefined;
    /** 改变原因 `DIC.VASCULAR.ACCESS.CHANGECAUSE` *可以多选,使用`;`分隔* */
    changeCause?: string | undefined;
    /** 其它改变原因 */
    changeCauseOther?: string | undefined;
    /** 位置(左-右) `DIC.VASCULAR.ACCESS.LOCATION` *左侧,右侧* */
    location?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type!: string;
    /** 位置 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 中心静脉置管方法 `DIC.VASCULAR.ACCESS.WAY.CVC` */
    way?: string | undefined;
    /** 其他描述 */
    remarkOther?: string | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 默认在处方应用0,1 */
    default?: number | undefined;
    /** 停用时间 */
    disableDate?: dayjs.Dayjs | undefined;
    /** 停用原因 */
    disableReason?: string | undefined;
    /** 已用天数 */
    lifetime?: number | undefined;
    /** 启用状态0,1 */
    enabled!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 血管通路改变 */
    patientVascularAccessChanges?: PatientVascularAccessChangeEditModel[] | undefined;

    constructor(data?: IPatientVascularAccessEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.change = _data["change"];
            this.changeDate = _data["changeDate"] ? dayjs(_data["changeDate"].toString()) : <any>undefined;
            this.changeCause = _data["changeCause"];
            this.changeCauseOther = _data["changeCauseOther"];
            this.location = _data["location"];
            this.type = _data["type"];
            this.position = _data["position"];
            this.way = _data["way"];
            this.remarkOther = _data["remarkOther"];
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.default = _data["default"];
            this.disableDate = _data["disableDate"] ? dayjs(_data["disableDate"].toString()) : <any>undefined;
            this.disableReason = _data["disableReason"];
            this.lifetime = _data["lifetime"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
            if (Array.isArray(_data["patientVascularAccessChanges"])) {
                this.patientVascularAccessChanges = [] as any;
                for (let item of _data["patientVascularAccessChanges"])
                    this.patientVascularAccessChanges!.push(PatientVascularAccessChangeEditModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientVascularAccessEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["createDate"] = this.createDate ? this.createDate.toLocaleString() : <any>undefined;
        data["change"] = this.change;
        data["changeDate"] = this.changeDate ? this.changeDate.toLocaleString() : <any>undefined;
        data["changeCause"] = this.changeCause;
        data["changeCauseOther"] = this.changeCauseOther;
        data["location"] = this.location;
        data["type"] = this.type;
        data["position"] = this.position;
        data["way"] = this.way;
        data["remarkOther"] = this.remarkOther;
        data["firstDate"] = this.firstDate ? this.firstDate.toLocaleString() : <any>undefined;
        data["default"] = this.default;
        data["disableDate"] = this.disableDate ? this.disableDate.toLocaleString() : <any>undefined;
        data["disableReason"] = this.disableReason;
        data["lifetime"] = this.lifetime;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        if (Array.isArray(this.patientVascularAccessChanges)) {
            data["patientVascularAccessChanges"] = [];
            for (let item of this.patientVascularAccessChanges)
                data["patientVascularAccessChanges"].push(item.toJSON());
        }
        return data;
    }
}

/** 患者血管通路 */
export interface IPatientVascularAccessEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 是否改变通路0,1 */
    change?: number | undefined;
    /** 改变日期 */
    changeDate?: dayjs.Dayjs | undefined;
    /** 改变原因 `DIC.VASCULAR.ACCESS.CHANGECAUSE` *可以多选,使用`;`分隔* */
    changeCause?: string | undefined;
    /** 其它改变原因 */
    changeCauseOther?: string | undefined;
    /** 位置(左-右) `DIC.VASCULAR.ACCESS.LOCATION` *左侧,右侧* */
    location?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type: string;
    /** 位置 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 中心静脉置管方法 `DIC.VASCULAR.ACCESS.WAY.CVC` */
    way?: string | undefined;
    /** 其他描述 */
    remarkOther?: string | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 默认在处方应用0,1 */
    default?: number | undefined;
    /** 停用时间 */
    disableDate?: dayjs.Dayjs | undefined;
    /** 停用原因 */
    disableReason?: string | undefined;
    /** 已用天数 */
    lifetime?: number | undefined;
    /** 启用状态0,1 */
    enabled: number;
    /** 备注 */
    remark?: string | undefined;
    /** 血管通路改变 */
    patientVascularAccessChanges?: PatientVascularAccessChangeEditModel[] | undefined;
}

/** 患者血管通路检查信息 */
export class PatientVascularAccessExamineEditModel implements IPatientVascularAccessExamineEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [血管通路标识](#患者血管通路) */
    patientVascularAccessId!: string;
    /** 物理检查视 */
    visualInspection?: { [key: string]: string; } | undefined;
    /** 物理检查听 */
    voiceInspection?: { [key: string]: string; } | undefined;
    /** 物理检查触 */
    touchInspection?: { [key: string]: string; } | undefined;
    /** 举臂实验 */
    armRaiseTest?: string | undefined;
    /** 搏动增强实验 */
    pulsationIncreaseTrial?: string | undefined;
    /** 超声结果 */
    ultrasonicResult?: { [key: string]: string; } | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IPatientVascularAccessExamineEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            if (_data["visualInspection"]) {
                this.visualInspection = {} as any;
                for (let key in _data["visualInspection"]) {
                    if (_data["visualInspection"].hasOwnProperty(key))
                        (<any>this.visualInspection)![key] = _data["visualInspection"][key];
                }
            }
            if (_data["voiceInspection"]) {
                this.voiceInspection = {} as any;
                for (let key in _data["voiceInspection"]) {
                    if (_data["voiceInspection"].hasOwnProperty(key))
                        (<any>this.voiceInspection)![key] = _data["voiceInspection"][key];
                }
            }
            if (_data["touchInspection"]) {
                this.touchInspection = {} as any;
                for (let key in _data["touchInspection"]) {
                    if (_data["touchInspection"].hasOwnProperty(key))
                        (<any>this.touchInspection)![key] = _data["touchInspection"][key];
                }
            }
            this.armRaiseTest = _data["armRaiseTest"];
            this.pulsationIncreaseTrial = _data["pulsationIncreaseTrial"];
            if (_data["ultrasonicResult"]) {
                this.ultrasonicResult = {} as any;
                for (let key in _data["ultrasonicResult"]) {
                    if (_data["ultrasonicResult"].hasOwnProperty(key))
                        (<any>this.ultrasonicResult)![key] = _data["ultrasonicResult"][key];
                }
            }
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): PatientVascularAccessExamineEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessExamineEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        if (this.visualInspection) {
            data["visualInspection"] = {};
            for (let key in this.visualInspection) {
                if (this.visualInspection.hasOwnProperty(key))
                    (<any>data["visualInspection"])[key] = (<any>this.visualInspection)[key];
            }
        }
        if (this.voiceInspection) {
            data["voiceInspection"] = {};
            for (let key in this.voiceInspection) {
                if (this.voiceInspection.hasOwnProperty(key))
                    (<any>data["voiceInspection"])[key] = (<any>this.voiceInspection)[key];
            }
        }
        if (this.touchInspection) {
            data["touchInspection"] = {};
            for (let key in this.touchInspection) {
                if (this.touchInspection.hasOwnProperty(key))
                    (<any>data["touchInspection"])[key] = (<any>this.touchInspection)[key];
            }
        }
        data["armRaiseTest"] = this.armRaiseTest;
        data["pulsationIncreaseTrial"] = this.pulsationIncreaseTrial;
        if (this.ultrasonicResult) {
            data["ultrasonicResult"] = {};
            for (let key in this.ultrasonicResult) {
                if (this.ultrasonicResult.hasOwnProperty(key))
                    (<any>data["ultrasonicResult"])[key] = (<any>this.ultrasonicResult)[key];
            }
        }
        data["remark"] = this.remark;
        return data;
    }
}

/** 患者血管通路检查信息 */
export interface IPatientVascularAccessExamineEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [血管通路标识](#患者血管通路) */
    patientVascularAccessId: string;
    /** 物理检查视 */
    visualInspection?: { [key: string]: string; } | undefined;
    /** 物理检查听 */
    voiceInspection?: { [key: string]: string; } | undefined;
    /** 物理检查触 */
    touchInspection?: { [key: string]: string; } | undefined;
    /** 举臂实验 */
    armRaiseTest?: string | undefined;
    /** 搏动增强实验 */
    pulsationIncreaseTrial?: string | undefined;
    /** 超声结果 */
    ultrasonicResult?: { [key: string]: string; } | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 患者血管通路检查信息 */
export class PatientVascularAccessExamineView implements IPatientVascularAccessExamineView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [血管通路标识](#患者血管通路) */
    patientVascularAccessId!: string;
    /** 物理检查视 */
    visualInspection?: { [key: string]: string; } | undefined;
    /** 物理检查听 */
    voiceInspection?: { [key: string]: string; } | undefined;
    /** 物理检查触 */
    touchInspection?: { [key: string]: string; } | undefined;
    /** 举臂实验 */
    armRaiseTest?: string | undefined;
    /** 搏动增强实验 */
    pulsationIncreaseTrial?: string | undefined;
    /** 超声结果 */
    ultrasonicResult?: { [key: string]: string; } | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientVascularAccessExamineView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            if (_data["visualInspection"]) {
                this.visualInspection = {} as any;
                for (let key in _data["visualInspection"]) {
                    if (_data["visualInspection"].hasOwnProperty(key))
                        (<any>this.visualInspection)![key] = _data["visualInspection"][key];
                }
            }
            if (_data["voiceInspection"]) {
                this.voiceInspection = {} as any;
                for (let key in _data["voiceInspection"]) {
                    if (_data["voiceInspection"].hasOwnProperty(key))
                        (<any>this.voiceInspection)![key] = _data["voiceInspection"][key];
                }
            }
            if (_data["touchInspection"]) {
                this.touchInspection = {} as any;
                for (let key in _data["touchInspection"]) {
                    if (_data["touchInspection"].hasOwnProperty(key))
                        (<any>this.touchInspection)![key] = _data["touchInspection"][key];
                }
            }
            this.armRaiseTest = _data["armRaiseTest"];
            this.pulsationIncreaseTrial = _data["pulsationIncreaseTrial"];
            if (_data["ultrasonicResult"]) {
                this.ultrasonicResult = {} as any;
                for (let key in _data["ultrasonicResult"]) {
                    if (_data["ultrasonicResult"].hasOwnProperty(key))
                        (<any>this.ultrasonicResult)![key] = _data["ultrasonicResult"][key];
                }
            }
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientVascularAccessExamineView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessExamineView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        if (this.visualInspection) {
            data["visualInspection"] = {};
            for (let key in this.visualInspection) {
                if (this.visualInspection.hasOwnProperty(key))
                    (<any>data["visualInspection"])[key] = (<any>this.visualInspection)[key];
            }
        }
        if (this.voiceInspection) {
            data["voiceInspection"] = {};
            for (let key in this.voiceInspection) {
                if (this.voiceInspection.hasOwnProperty(key))
                    (<any>data["voiceInspection"])[key] = (<any>this.voiceInspection)[key];
            }
        }
        if (this.touchInspection) {
            data["touchInspection"] = {};
            for (let key in this.touchInspection) {
                if (this.touchInspection.hasOwnProperty(key))
                    (<any>data["touchInspection"])[key] = (<any>this.touchInspection)[key];
            }
        }
        data["armRaiseTest"] = this.armRaiseTest;
        data["pulsationIncreaseTrial"] = this.pulsationIncreaseTrial;
        if (this.ultrasonicResult) {
            data["ultrasonicResult"] = {};
            for (let key in this.ultrasonicResult) {
                if (this.ultrasonicResult.hasOwnProperty(key))
                    (<any>data["ultrasonicResult"])[key] = (<any>this.ultrasonicResult)[key];
            }
        }
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 患者血管通路检查信息 */
export interface IPatientVascularAccessExamineView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [血管通路标识](#患者血管通路) */
    patientVascularAccessId: string;
    /** 物理检查视 */
    visualInspection?: { [key: string]: string; } | undefined;
    /** 物理检查听 */
    voiceInspection?: { [key: string]: string; } | undefined;
    /** 物理检查触 */
    touchInspection?: { [key: string]: string; } | undefined;
    /** 举臂实验 */
    armRaiseTest?: string | undefined;
    /** 搏动增强实验 */
    pulsationIncreaseTrial?: string | undefined;
    /** 超声结果 */
    ultrasonicResult?: { [key: string]: string; } | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientVascularAccessExamineViewResult implements IPatientVascularAccessExamineViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientVascularAccessExamineView[] | undefined;

    constructor(data?: IPatientVascularAccessExamineViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientVascularAccessExamineView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientVascularAccessExamineViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessExamineViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientVascularAccessExamineViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientVascularAccessExamineView[] | undefined;
}

/** Reponse */
export class PatientVascularAccessExamineViewResultEntry implements IPatientVascularAccessExamineViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientVascularAccessExamineView;

    constructor(data?: IPatientVascularAccessExamineViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientVascularAccessExamineView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientVascularAccessExamineViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessExamineViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientVascularAccessExamineViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientVascularAccessExamineView;
}

/** 患者血管通路照片 */
export class PatientVascularAccessFile implements IPatientVascularAccessFile {
    /** 标识 */
    id?: string | undefined;
    /** [血管通路标识](患者血管通路) */
    patientVascularAccessId?: string | undefined;
    /** [文件标识](文件列表) */
    hfsFilesId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    patientVascularAccesss?: PatientVascularAccess;
    hfsFiless?: HfsFiles;

    constructor(data?: IPatientVascularAccessFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.hfsFilesId = _data["hfsFilesId"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.patientVascularAccesss = _data["patientVascularAccesss"] ? PatientVascularAccess.fromJS(_data["patientVascularAccesss"]) : <any>undefined;
            this.hfsFiless = _data["hfsFiless"] ? HfsFiles.fromJS(_data["hfsFiless"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientVascularAccessFile {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["hfsFilesId"] = this.hfsFilesId;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["patientVascularAccesss"] = this.patientVascularAccesss ? this.patientVascularAccesss.toJSON() : <any>undefined;
        data["hfsFiless"] = this.hfsFiless ? this.hfsFiless.toJSON() : <any>undefined;
        return data;
    }
}

/** 患者血管通路照片 */
export interface IPatientVascularAccessFile {
    /** 标识 */
    id?: string | undefined;
    /** [血管通路标识](患者血管通路) */
    patientVascularAccessId?: string | undefined;
    /** [文件标识](文件列表) */
    hfsFilesId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    patientVascularAccesss?: PatientVascularAccess;
    hfsFiless?: HfsFiles;
}

/** Reponse */
export class PatientVascularAccessFileResult implements IPatientVascularAccessFileResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientVascularAccessFile[] | undefined;

    constructor(data?: IPatientVascularAccessFileResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientVascularAccessFile.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientVascularAccessFileResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessFileResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientVascularAccessFileResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientVascularAccessFile[] | undefined;
}

/** Reponse */
export class PatientVascularAccessFileResultEntry implements IPatientVascularAccessFileResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientVascularAccessFile;

    constructor(data?: IPatientVascularAccessFileResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientVascularAccessFile.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientVascularAccessFileResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessFileResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientVascularAccessFileResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientVascularAccessFile;
}

/** 患者血管通路照片 (ViewModel) */
export class PatientVascularAccessFileView implements IPatientVascularAccessFileView {
    /** [血管路标识](患者血管通路Id) */
    patientVascularAccessId!: string;
    /** 文件标识列表 */
    hfsFilesIds!: string[];
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IPatientVascularAccessFileView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.hfsFilesIds = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            if (Array.isArray(_data["hfsFilesIds"])) {
                this.hfsFilesIds = [] as any;
                for (let item of _data["hfsFilesIds"])
                    this.hfsFilesIds!.push(item);
            }
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): PatientVascularAccessFileView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessFileView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        if (Array.isArray(this.hfsFilesIds)) {
            data["hfsFilesIds"] = [];
            for (let item of this.hfsFilesIds)
                data["hfsFilesIds"].push(item);
        }
        data["remark"] = this.remark;
        return data;
    }
}

/** 患者血管通路照片 (ViewModel) */
export interface IPatientVascularAccessFileView {
    /** [血管路标识](患者血管通路Id) */
    patientVascularAccessId: string;
    /** 文件标识列表 */
    hfsFilesIds: string[];
    /** 备注 */
    remark?: string | undefined;
}

/** 患者血管通路干预 */
export class PatientVascularAccessInterveneEditModel implements IPatientVascularAccessInterveneEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [血管通路标识](#患者血管通路) */
    patientVascularAccessId!: string;
    /** 干预日期 */
    date!: dayjs.Dayjs;
    /** 干预原因 */
    cause!: string;
    /** 处理方式 `DIC.VASCULAR.ACCESS.PROCESS.MODE` */
    processMode?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type?: string | undefined;
    /** 位置(左-右) `DIC.VASCULAR.ACCESS.LOCATION` *左侧,右侧* */
    location!: string;
    /** 部位 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 中心静脉置管方法 `DIC.VASCULAR.ACCESS.WAY.CVC` */
    way?: string | undefined;
    /** 是否干预 */
    isIntervene!: number;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IPatientVascularAccessInterveneEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.cause = _data["cause"];
            this.processMode = _data["processMode"];
            this.type = _data["type"];
            this.location = _data["location"];
            this.position = _data["position"];
            this.way = _data["way"];
            this.isIntervene = _data["isIntervene"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): PatientVascularAccessInterveneEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessInterveneEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["cause"] = this.cause;
        data["processMode"] = this.processMode;
        data["type"] = this.type;
        data["location"] = this.location;
        data["position"] = this.position;
        data["way"] = this.way;
        data["isIntervene"] = this.isIntervene;
        data["remark"] = this.remark;
        return data;
    }
}

/** 患者血管通路干预 */
export interface IPatientVascularAccessInterveneEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [血管通路标识](#患者血管通路) */
    patientVascularAccessId: string;
    /** 干预日期 */
    date: dayjs.Dayjs;
    /** 干预原因 */
    cause: string;
    /** 处理方式 `DIC.VASCULAR.ACCESS.PROCESS.MODE` */
    processMode?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type?: string | undefined;
    /** 位置(左-右) `DIC.VASCULAR.ACCESS.LOCATION` *左侧,右侧* */
    location: string;
    /** 部位 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 中心静脉置管方法 `DIC.VASCULAR.ACCESS.WAY.CVC` */
    way?: string | undefined;
    /** 是否干预 */
    isIntervene: number;
    /** 备注 */
    remark?: string | undefined;
}

/** 患者血管通路干预 */
export class PatientVascularAccessInterveneView implements IPatientVascularAccessInterveneView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [血管通路标识](#患者血管通路) */
    patientVascularAccessId!: string;
    /** 干预日期 */
    date!: dayjs.Dayjs;
    /** 干预原因 */
    cause!: string;
    /** 处理方式 `DIC.VASCULAR.ACCESS.PROCESS.MODE` */
    processMode?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type?: string | undefined;
    /** 位置(左-右) `DIC.VASCULAR.ACCESS.LOCATION` *左侧,右侧* */
    location!: string;
    /** 部位 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 中心静脉置管方法 `DIC.VASCULAR.ACCESS.WAY.CVC` */
    way?: string | undefined;
    /** 是否干预 */
    isIntervene!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 处理方式 */
    processModeLabel?: string | undefined;
    /** 通路类型 */
    typeLabel?: string | undefined;
    /** 位置(左-右) */
    locationLabel?: string | undefined;
    /** 中心静脉置管方法 */
    wayLabel?: string | undefined;

    constructor(data?: IPatientVascularAccessInterveneView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.cause = _data["cause"];
            this.processMode = _data["processMode"];
            this.type = _data["type"];
            this.location = _data["location"];
            this.position = _data["position"];
            this.way = _data["way"];
            this.isIntervene = _data["isIntervene"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.processModeLabel = _data["processModeLabel"];
            this.typeLabel = _data["typeLabel"];
            this.locationLabel = _data["locationLabel"];
            this.wayLabel = _data["wayLabel"];
        }
    }

    static fromJS(data: any): PatientVascularAccessInterveneView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessInterveneView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["cause"] = this.cause;
        data["processMode"] = this.processMode;
        data["type"] = this.type;
        data["location"] = this.location;
        data["position"] = this.position;
        data["way"] = this.way;
        data["isIntervene"] = this.isIntervene;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["processModeLabel"] = this.processModeLabel;
        data["typeLabel"] = this.typeLabel;
        data["locationLabel"] = this.locationLabel;
        data["wayLabel"] = this.wayLabel;
        return data;
    }
}

/** 患者血管通路干预 */
export interface IPatientVascularAccessInterveneView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [血管通路标识](#患者血管通路) */
    patientVascularAccessId: string;
    /** 干预日期 */
    date: dayjs.Dayjs;
    /** 干预原因 */
    cause: string;
    /** 处理方式 `DIC.VASCULAR.ACCESS.PROCESS.MODE` */
    processMode?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type?: string | undefined;
    /** 位置(左-右) `DIC.VASCULAR.ACCESS.LOCATION` *左侧,右侧* */
    location: string;
    /** 部位 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 中心静脉置管方法 `DIC.VASCULAR.ACCESS.WAY.CVC` */
    way?: string | undefined;
    /** 是否干预 */
    isIntervene: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 处理方式 */
    processModeLabel?: string | undefined;
    /** 通路类型 */
    typeLabel?: string | undefined;
    /** 位置(左-右) */
    locationLabel?: string | undefined;
    /** 中心静脉置管方法 */
    wayLabel?: string | undefined;
}

/** Reponse */
export class PatientVascularAccessInterveneViewResult implements IPatientVascularAccessInterveneViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientVascularAccessInterveneView[] | undefined;

    constructor(data?: IPatientVascularAccessInterveneViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientVascularAccessInterveneView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientVascularAccessInterveneViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessInterveneViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientVascularAccessInterveneViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientVascularAccessInterveneView[] | undefined;
}

/** Reponse */
export class PatientVascularAccessInterveneViewResultEntry implements IPatientVascularAccessInterveneViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientVascularAccessInterveneView;

    constructor(data?: IPatientVascularAccessInterveneViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientVascularAccessInterveneView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientVascularAccessInterveneViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessInterveneViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientVascularAccessInterveneViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientVascularAccessInterveneView;
}

/** 患者血管通路计划 */
export class PatientVascularAccessPlanEditModel implements IPatientVascularAccessPlanEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [血管通路标识](#患者血管通路) */
    patientVascularAccessId!: string;
    /** 手术名称 */
    surgeryName!: string;
    /** 手术时间 */
    surgeryDate!: dayjs.Dayjs;
    /** 术式 */
    surgeryMode?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type?: string | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 吻合口方式 */
    anastomoticMode?: string | undefined;
    /** 距吻合口（cm） */
    anastomoticDistance?: string | undefined;
    /** A穿刺方式 */
    punctureModeA?: string | undefined;
    /** v穿刺方式 */
    punctureModeB?: string | undefined;
    /** 动脉穿刺点 */
    punctureArterialSite?: string | undefined;
    /** 静脉穿刺点 */
    punctureVenousSite?: string | undefined;
    /** 绘图人标识 */
    draftsmanId?: string | undefined;
    /** 绘图人名称 */
    draftsman?: string | undefined;
    /** 绘图时间 */
    draftsmanDate?: dayjs.Dayjs | undefined;
    /** 计划建议 */
    proposal?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IPatientVascularAccessPlanEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.surgeryName = _data["surgeryName"];
            this.surgeryDate = _data["surgeryDate"] ? dayjs(_data["surgeryDate"].toString()) : <any>undefined;
            this.surgeryMode = _data["surgeryMode"];
            this.type = _data["type"];
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.anastomoticMode = _data["anastomoticMode"];
            this.anastomoticDistance = _data["anastomoticDistance"];
            this.punctureModeA = _data["punctureModeA"];
            this.punctureModeB = _data["punctureModeB"];
            this.punctureArterialSite = _data["punctureArterialSite"];
            this.punctureVenousSite = _data["punctureVenousSite"];
            this.draftsmanId = _data["draftsmanId"];
            this.draftsman = _data["draftsman"];
            this.draftsmanDate = _data["draftsmanDate"] ? dayjs(_data["draftsmanDate"].toString()) : <any>undefined;
            this.proposal = _data["proposal"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): PatientVascularAccessPlanEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessPlanEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["surgeryName"] = this.surgeryName;
        data["surgeryDate"] = this.surgeryDate ? this.surgeryDate.toLocaleString() : <any>undefined;
        data["surgeryMode"] = this.surgeryMode;
        data["type"] = this.type;
        data["firstDate"] = this.firstDate ? this.firstDate.toLocaleString() : <any>undefined;
        data["anastomoticMode"] = this.anastomoticMode;
        data["anastomoticDistance"] = this.anastomoticDistance;
        data["punctureModeA"] = this.punctureModeA;
        data["punctureModeB"] = this.punctureModeB;
        data["punctureArterialSite"] = this.punctureArterialSite;
        data["punctureVenousSite"] = this.punctureVenousSite;
        data["draftsmanId"] = this.draftsmanId;
        data["draftsman"] = this.draftsman;
        data["draftsmanDate"] = this.draftsmanDate ? this.draftsmanDate.toLocaleString() : <any>undefined;
        data["proposal"] = this.proposal;
        data["remark"] = this.remark;
        return data;
    }
}

/** 患者血管通路计划 */
export interface IPatientVascularAccessPlanEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [血管通路标识](#患者血管通路) */
    patientVascularAccessId: string;
    /** 手术名称 */
    surgeryName: string;
    /** 手术时间 */
    surgeryDate: dayjs.Dayjs;
    /** 术式 */
    surgeryMode?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type?: string | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 吻合口方式 */
    anastomoticMode?: string | undefined;
    /** 距吻合口（cm） */
    anastomoticDistance?: string | undefined;
    /** A穿刺方式 */
    punctureModeA?: string | undefined;
    /** v穿刺方式 */
    punctureModeB?: string | undefined;
    /** 动脉穿刺点 */
    punctureArterialSite?: string | undefined;
    /** 静脉穿刺点 */
    punctureVenousSite?: string | undefined;
    /** 绘图人标识 */
    draftsmanId?: string | undefined;
    /** 绘图人名称 */
    draftsman?: string | undefined;
    /** 绘图时间 */
    draftsmanDate?: dayjs.Dayjs | undefined;
    /** 计划建议 */
    proposal?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 患者血管通路计划 */
export class PatientVascularAccessPlanView implements IPatientVascularAccessPlanView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [血管通路标识](#患者血管通路) */
    patientVascularAccessId!: string;
    /** 手术名称 */
    surgeryName!: string;
    /** 手术时间 */
    surgeryDate!: dayjs.Dayjs;
    /** 术式 */
    surgeryMode?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type?: string | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 吻合口方式 */
    anastomoticMode?: string | undefined;
    /** 距吻合口（cm） */
    anastomoticDistance?: string | undefined;
    /** A穿刺方式 */
    punctureModeA?: string | undefined;
    /** v穿刺方式 */
    punctureModeB?: string | undefined;
    /** 动脉穿刺点 */
    punctureArterialSite?: string | undefined;
    /** 静脉穿刺点 */
    punctureVenousSite?: string | undefined;
    /** 绘图人标识 */
    draftsmanId?: string | undefined;
    /** 绘图人名称 */
    draftsman?: string | undefined;
    /** 绘图时间 */
    draftsmanDate?: dayjs.Dayjs | undefined;
    /** 计划建议 */
    proposal?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 通路类型 */
    typeLabel?: string | undefined;
    /** 术式 */
    surgeryModeLabel?: string | undefined;
    /** 吻合口方式 */
    anastomoticModeLabel?: string | undefined;
    /** A穿刺方式 */
    punctureModeALabel?: string | undefined;
    /** v穿刺方式 */
    punctureModeBLabel?: string | undefined;
    /** 动脉穿刺点 */
    punctureArterialSiteLabel?: string | undefined;
    /** 静脉穿刺点 */
    punctureVenousSiteLabel?: string | undefined;
    /** 计划建议 */
    proposalLabel?: string | undefined;

    constructor(data?: IPatientVascularAccessPlanView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.surgeryName = _data["surgeryName"];
            this.surgeryDate = _data["surgeryDate"] ? dayjs(_data["surgeryDate"].toString()) : <any>undefined;
            this.surgeryMode = _data["surgeryMode"];
            this.type = _data["type"];
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.anastomoticMode = _data["anastomoticMode"];
            this.anastomoticDistance = _data["anastomoticDistance"];
            this.punctureModeA = _data["punctureModeA"];
            this.punctureModeB = _data["punctureModeB"];
            this.punctureArterialSite = _data["punctureArterialSite"];
            this.punctureVenousSite = _data["punctureVenousSite"];
            this.draftsmanId = _data["draftsmanId"];
            this.draftsman = _data["draftsman"];
            this.draftsmanDate = _data["draftsmanDate"] ? dayjs(_data["draftsmanDate"].toString()) : <any>undefined;
            this.proposal = _data["proposal"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.typeLabel = _data["typeLabel"];
            this.surgeryModeLabel = _data["surgeryModeLabel"];
            this.anastomoticModeLabel = _data["anastomoticModeLabel"];
            this.punctureModeALabel = _data["punctureModeALabel"];
            this.punctureModeBLabel = _data["punctureModeBLabel"];
            this.punctureArterialSiteLabel = _data["punctureArterialSiteLabel"];
            this.punctureVenousSiteLabel = _data["punctureVenousSiteLabel"];
            this.proposalLabel = _data["proposalLabel"];
        }
    }

    static fromJS(data: any): PatientVascularAccessPlanView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessPlanView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["surgeryName"] = this.surgeryName;
        data["surgeryDate"] = this.surgeryDate ? this.surgeryDate.toLocaleString() : <any>undefined;
        data["surgeryMode"] = this.surgeryMode;
        data["type"] = this.type;
        data["firstDate"] = this.firstDate ? this.firstDate.toLocaleString() : <any>undefined;
        data["anastomoticMode"] = this.anastomoticMode;
        data["anastomoticDistance"] = this.anastomoticDistance;
        data["punctureModeA"] = this.punctureModeA;
        data["punctureModeB"] = this.punctureModeB;
        data["punctureArterialSite"] = this.punctureArterialSite;
        data["punctureVenousSite"] = this.punctureVenousSite;
        data["draftsmanId"] = this.draftsmanId;
        data["draftsman"] = this.draftsman;
        data["draftsmanDate"] = this.draftsmanDate ? this.draftsmanDate.toLocaleString() : <any>undefined;
        data["proposal"] = this.proposal;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["typeLabel"] = this.typeLabel;
        data["surgeryModeLabel"] = this.surgeryModeLabel;
        data["anastomoticModeLabel"] = this.anastomoticModeLabel;
        data["punctureModeALabel"] = this.punctureModeALabel;
        data["punctureModeBLabel"] = this.punctureModeBLabel;
        data["punctureArterialSiteLabel"] = this.punctureArterialSiteLabel;
        data["punctureVenousSiteLabel"] = this.punctureVenousSiteLabel;
        data["proposalLabel"] = this.proposalLabel;
        return data;
    }
}

/** 患者血管通路计划 */
export interface IPatientVascularAccessPlanView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [血管通路标识](#患者血管通路) */
    patientVascularAccessId: string;
    /** 手术名称 */
    surgeryName: string;
    /** 手术时间 */
    surgeryDate: dayjs.Dayjs;
    /** 术式 */
    surgeryMode?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type?: string | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 吻合口方式 */
    anastomoticMode?: string | undefined;
    /** 距吻合口（cm） */
    anastomoticDistance?: string | undefined;
    /** A穿刺方式 */
    punctureModeA?: string | undefined;
    /** v穿刺方式 */
    punctureModeB?: string | undefined;
    /** 动脉穿刺点 */
    punctureArterialSite?: string | undefined;
    /** 静脉穿刺点 */
    punctureVenousSite?: string | undefined;
    /** 绘图人标识 */
    draftsmanId?: string | undefined;
    /** 绘图人名称 */
    draftsman?: string | undefined;
    /** 绘图时间 */
    draftsmanDate?: dayjs.Dayjs | undefined;
    /** 计划建议 */
    proposal?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 通路类型 */
    typeLabel?: string | undefined;
    /** 术式 */
    surgeryModeLabel?: string | undefined;
    /** 吻合口方式 */
    anastomoticModeLabel?: string | undefined;
    /** A穿刺方式 */
    punctureModeALabel?: string | undefined;
    /** v穿刺方式 */
    punctureModeBLabel?: string | undefined;
    /** 动脉穿刺点 */
    punctureArterialSiteLabel?: string | undefined;
    /** 静脉穿刺点 */
    punctureVenousSiteLabel?: string | undefined;
    /** 计划建议 */
    proposalLabel?: string | undefined;
}

/** Reponse */
export class PatientVascularAccessPlanViewResult implements IPatientVascularAccessPlanViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientVascularAccessPlanView[] | undefined;

    constructor(data?: IPatientVascularAccessPlanViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientVascularAccessPlanView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientVascularAccessPlanViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessPlanViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientVascularAccessPlanViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientVascularAccessPlanView[] | undefined;
}

/** Reponse */
export class PatientVascularAccessPlanViewResultEntry implements IPatientVascularAccessPlanViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientVascularAccessPlanView;

    constructor(data?: IPatientVascularAccessPlanViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientVascularAccessPlanView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientVascularAccessPlanViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessPlanViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientVascularAccessPlanViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientVascularAccessPlanView;
}

/** 患者血管通路穿刺标记 */
export class PatientVascularAccessPunctureEditModel implements IPatientVascularAccessPunctureEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 类型 *A端,V端* */
    type!: string;
    /** 穿刺方式 *打点,扣眼* */
    method!: string;
    /** 点位数 */
    siteCount!: number;
    /** 图片路径 */
    imgUrl?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 患者血管通路穿刺标记点 */
    patientVascularAccessPunctureSites?: PatientVascularAccessPunctureSiteEditModel[] | undefined;

    constructor(data?: IPatientVascularAccessPunctureEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.type = _data["type"];
            this.method = _data["method"];
            this.siteCount = _data["siteCount"];
            this.imgUrl = _data["imgUrl"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            if (Array.isArray(_data["patientVascularAccessPunctureSites"])) {
                this.patientVascularAccessPunctureSites = [] as any;
                for (let item of _data["patientVascularAccessPunctureSites"])
                    this.patientVascularAccessPunctureSites!.push(PatientVascularAccessPunctureSiteEditModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientVascularAccessPunctureEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessPunctureEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["type"] = this.type;
        data["method"] = this.method;
        data["siteCount"] = this.siteCount;
        data["imgUrl"] = this.imgUrl;
        data["remark"] = this.remark;
        data["id"] = this.id;
        if (Array.isArray(this.patientVascularAccessPunctureSites)) {
            data["patientVascularAccessPunctureSites"] = [];
            for (let item of this.patientVascularAccessPunctureSites)
                data["patientVascularAccessPunctureSites"].push(item.toJSON());
        }
        return data;
    }
}

/** 患者血管通路穿刺标记 */
export interface IPatientVascularAccessPunctureEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 类型 *A端,V端* */
    type: string;
    /** 穿刺方式 *打点,扣眼* */
    method: string;
    /** 点位数 */
    siteCount: number;
    /** 图片路径 */
    imgUrl?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 患者血管通路穿刺标记点 */
    patientVascularAccessPunctureSites?: PatientVascularAccessPunctureSiteEditModel[] | undefined;
}

/** 患者血管通路穿刺标记点位 */
export class PatientVascularAccessPunctureSiteEditModel implements IPatientVascularAccessPunctureSiteEditModel {
    /** [通路穿刺标记](#通路穿刺标记) */
    patientVascularAccessPunctureId!: string;
    /** 穿刺方法 `DIC.DIALYSIS.PUNCTURE.METHOD` */
    punctureMethod?: string | undefined;
    /** 穿刺时间 */
    punctureDate?: dayjs.Dayjs | undefined;
    /** 穿刺次数 */
    punctureCount!: number;
    /** 穿刺损伤 */
    punctureInjury?: string | undefined;
    /** 失败原因 */
    failCause?: string | undefined;
    /** 穿刺人 */
    piercer?: string | undefined;
    /** 穿刺人标识 */
    piercerId?: string | undefined;
    /** 拔针人 */
    needleExtractor?: string | undefined;
    /** 拔针人标识 */
    needleExtractorId?: string | undefined;
    /** 方向 */
    direction?: string | undefined;
    /** 通路并发症 */
    complication?: string | undefined;
    /** 疼痛评分 */
    painScore?: number | undefined;
    /** x 轴坐标 */
    xPosition!: number;
    /** y 轴坐标 */
    yPosition!: number;
    /** 旋转角度 */
    rotate!: number;
    /** 缩放倍数 */
    scale!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 序号 */
    no!: number;

    constructor(data?: IPatientVascularAccessPunctureSiteEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientVascularAccessPunctureId = _data["patientVascularAccessPunctureId"];
            this.punctureMethod = _data["punctureMethod"];
            this.punctureDate = _data["punctureDate"] ? dayjs(_data["punctureDate"].toString()) : <any>undefined;
            this.punctureCount = _data["punctureCount"];
            this.punctureInjury = _data["punctureInjury"];
            this.failCause = _data["failCause"];
            this.piercer = _data["piercer"];
            this.piercerId = _data["piercerId"];
            this.needleExtractor = _data["needleExtractor"];
            this.needleExtractorId = _data["needleExtractorId"];
            this.direction = _data["direction"];
            this.complication = _data["complication"];
            this.painScore = _data["painScore"];
            this.xPosition = _data["xPosition"];
            this.yPosition = _data["yPosition"];
            this.rotate = _data["rotate"];
            this.scale = _data["scale"];
            this.remark = _data["remark"];
            this.no = _data["no"];
        }
    }

    static fromJS(data: any): PatientVascularAccessPunctureSiteEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessPunctureSiteEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientVascularAccessPunctureId"] = this.patientVascularAccessPunctureId;
        data["punctureMethod"] = this.punctureMethod;
        data["punctureDate"] = this.punctureDate ? this.punctureDate.toLocaleString() : <any>undefined;
        data["punctureCount"] = this.punctureCount;
        data["punctureInjury"] = this.punctureInjury;
        data["failCause"] = this.failCause;
        data["piercer"] = this.piercer;
        data["piercerId"] = this.piercerId;
        data["needleExtractor"] = this.needleExtractor;
        data["needleExtractorId"] = this.needleExtractorId;
        data["direction"] = this.direction;
        data["complication"] = this.complication;
        data["painScore"] = this.painScore;
        data["xPosition"] = this.xPosition;
        data["yPosition"] = this.yPosition;
        data["rotate"] = this.rotate;
        data["scale"] = this.scale;
        data["remark"] = this.remark;
        data["no"] = this.no;
        return data;
    }
}

/** 患者血管通路穿刺标记点位 */
export interface IPatientVascularAccessPunctureSiteEditModel {
    /** [通路穿刺标记](#通路穿刺标记) */
    patientVascularAccessPunctureId: string;
    /** 穿刺方法 `DIC.DIALYSIS.PUNCTURE.METHOD` */
    punctureMethod?: string | undefined;
    /** 穿刺时间 */
    punctureDate?: dayjs.Dayjs | undefined;
    /** 穿刺次数 */
    punctureCount: number;
    /** 穿刺损伤 */
    punctureInjury?: string | undefined;
    /** 失败原因 */
    failCause?: string | undefined;
    /** 穿刺人 */
    piercer?: string | undefined;
    /** 穿刺人标识 */
    piercerId?: string | undefined;
    /** 拔针人 */
    needleExtractor?: string | undefined;
    /** 拔针人标识 */
    needleExtractorId?: string | undefined;
    /** 方向 */
    direction?: string | undefined;
    /** 通路并发症 */
    complication?: string | undefined;
    /** 疼痛评分 */
    painScore?: number | undefined;
    /** x 轴坐标 */
    xPosition: number;
    /** y 轴坐标 */
    yPosition: number;
    /** 旋转角度 */
    rotate: number;
    /** 缩放倍数 */
    scale: number;
    /** 备注 */
    remark?: string | undefined;
    /** 序号 */
    no: number;
}

/** 患者血管通路穿刺标记点位 */
export class PatientVascularAccessPunctureSiteView implements IPatientVascularAccessPunctureSiteView {
    /** [通路穿刺标记](#通路穿刺标记) */
    patientVascularAccessPunctureId!: string;
    /** 穿刺方法 `DIC.DIALYSIS.PUNCTURE.METHOD` */
    punctureMethod?: string | undefined;
    /** 穿刺时间 */
    punctureDate?: dayjs.Dayjs | undefined;
    /** 穿刺次数 */
    punctureCount!: number;
    /** 穿刺损伤 */
    punctureInjury?: string | undefined;
    /** 失败原因 */
    failCause?: string | undefined;
    /** 穿刺人 */
    piercer?: string | undefined;
    /** 穿刺人标识 */
    piercerId?: string | undefined;
    /** 拔针人 */
    needleExtractor?: string | undefined;
    /** 拔针人标识 */
    needleExtractorId?: string | undefined;
    /** 方向 */
    direction?: string | undefined;
    /** 通路并发症 */
    complication?: string | undefined;
    /** 疼痛评分 */
    painScore?: number | undefined;
    /** x 轴坐标 */
    xPosition!: number;
    /** y 轴坐标 */
    yPosition!: number;
    /** 旋转角度 */
    rotate!: number;
    /** 缩放倍数 */
    scale!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 序号 */
    no!: number;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientVascularAccessPunctureSiteView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientVascularAccessPunctureId = _data["patientVascularAccessPunctureId"];
            this.punctureMethod = _data["punctureMethod"];
            this.punctureDate = _data["punctureDate"] ? dayjs(_data["punctureDate"].toString()) : <any>undefined;
            this.punctureCount = _data["punctureCount"];
            this.punctureInjury = _data["punctureInjury"];
            this.failCause = _data["failCause"];
            this.piercer = _data["piercer"];
            this.piercerId = _data["piercerId"];
            this.needleExtractor = _data["needleExtractor"];
            this.needleExtractorId = _data["needleExtractorId"];
            this.direction = _data["direction"];
            this.complication = _data["complication"];
            this.painScore = _data["painScore"];
            this.xPosition = _data["xPosition"];
            this.yPosition = _data["yPosition"];
            this.rotate = _data["rotate"];
            this.scale = _data["scale"];
            this.remark = _data["remark"];
            this.no = _data["no"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientVascularAccessPunctureSiteView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessPunctureSiteView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientVascularAccessPunctureId"] = this.patientVascularAccessPunctureId;
        data["punctureMethod"] = this.punctureMethod;
        data["punctureDate"] = this.punctureDate ? this.punctureDate.toLocaleString() : <any>undefined;
        data["punctureCount"] = this.punctureCount;
        data["punctureInjury"] = this.punctureInjury;
        data["failCause"] = this.failCause;
        data["piercer"] = this.piercer;
        data["piercerId"] = this.piercerId;
        data["needleExtractor"] = this.needleExtractor;
        data["needleExtractorId"] = this.needleExtractorId;
        data["direction"] = this.direction;
        data["complication"] = this.complication;
        data["painScore"] = this.painScore;
        data["xPosition"] = this.xPosition;
        data["yPosition"] = this.yPosition;
        data["rotate"] = this.rotate;
        data["scale"] = this.scale;
        data["remark"] = this.remark;
        data["no"] = this.no;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 患者血管通路穿刺标记点位 */
export interface IPatientVascularAccessPunctureSiteView {
    /** [通路穿刺标记](#通路穿刺标记) */
    patientVascularAccessPunctureId: string;
    /** 穿刺方法 `DIC.DIALYSIS.PUNCTURE.METHOD` */
    punctureMethod?: string | undefined;
    /** 穿刺时间 */
    punctureDate?: dayjs.Dayjs | undefined;
    /** 穿刺次数 */
    punctureCount: number;
    /** 穿刺损伤 */
    punctureInjury?: string | undefined;
    /** 失败原因 */
    failCause?: string | undefined;
    /** 穿刺人 */
    piercer?: string | undefined;
    /** 穿刺人标识 */
    piercerId?: string | undefined;
    /** 拔针人 */
    needleExtractor?: string | undefined;
    /** 拔针人标识 */
    needleExtractorId?: string | undefined;
    /** 方向 */
    direction?: string | undefined;
    /** 通路并发症 */
    complication?: string | undefined;
    /** 疼痛评分 */
    painScore?: number | undefined;
    /** x 轴坐标 */
    xPosition: number;
    /** y 轴坐标 */
    yPosition: number;
    /** 旋转角度 */
    rotate: number;
    /** 缩放倍数 */
    scale: number;
    /** 备注 */
    remark?: string | undefined;
    /** 序号 */
    no: number;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientVascularAccessPunctureSiteViewResult implements IPatientVascularAccessPunctureSiteViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientVascularAccessPunctureSiteView[] | undefined;

    constructor(data?: IPatientVascularAccessPunctureSiteViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientVascularAccessPunctureSiteView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientVascularAccessPunctureSiteViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessPunctureSiteViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientVascularAccessPunctureSiteViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientVascularAccessPunctureSiteView[] | undefined;
}

/** Reponse */
export class PatientVascularAccessPunctureSiteViewResultEntry implements IPatientVascularAccessPunctureSiteViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientVascularAccessPunctureSiteView;

    constructor(data?: IPatientVascularAccessPunctureSiteViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientVascularAccessPunctureSiteView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientVascularAccessPunctureSiteViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessPunctureSiteViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientVascularAccessPunctureSiteViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientVascularAccessPunctureSiteView;
}

/** 患者血管通路穿刺标记 */
export class PatientVascularAccessPunctureView implements IPatientVascularAccessPunctureView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 类型 *A端,V端* */
    type!: string;
    /** 穿刺方式 *打点,扣眼* */
    method!: string;
    /** 点位数 */
    siteCount!: number;
    /** 图片路径 */
    imgUrl?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 图片完整路径 */
    imgUrlStr?: string | undefined;
    /** 点位 */
    sites?: PatientVascularAccessPunctureSiteView[] | undefined;

    constructor(data?: IPatientVascularAccessPunctureView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.type = _data["type"];
            this.method = _data["method"];
            this.siteCount = _data["siteCount"];
            this.imgUrl = _data["imgUrl"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.imgUrlStr = _data["imgUrlStr"];
            if (Array.isArray(_data["sites"])) {
                this.sites = [] as any;
                for (let item of _data["sites"])
                    this.sites!.push(PatientVascularAccessPunctureSiteView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientVascularAccessPunctureView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessPunctureView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["type"] = this.type;
        data["method"] = this.method;
        data["siteCount"] = this.siteCount;
        data["imgUrl"] = this.imgUrl;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["imgUrlStr"] = this.imgUrlStr;
        if (Array.isArray(this.sites)) {
            data["sites"] = [];
            for (let item of this.sites)
                data["sites"].push(item.toJSON());
        }
        return data;
    }
}

/** 患者血管通路穿刺标记 */
export interface IPatientVascularAccessPunctureView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 类型 *A端,V端* */
    type: string;
    /** 穿刺方式 *打点,扣眼* */
    method: string;
    /** 点位数 */
    siteCount: number;
    /** 图片路径 */
    imgUrl?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 图片完整路径 */
    imgUrlStr?: string | undefined;
    /** 点位 */
    sites?: PatientVascularAccessPunctureSiteView[] | undefined;
}

/** Reponse */
export class PatientVascularAccessPunctureViewResult implements IPatientVascularAccessPunctureViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientVascularAccessPunctureView[] | undefined;

    constructor(data?: IPatientVascularAccessPunctureViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientVascularAccessPunctureView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientVascularAccessPunctureViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessPunctureViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientVascularAccessPunctureViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientVascularAccessPunctureView[] | undefined;
}

/** Reponse */
export class PatientVascularAccessPunctureViewResultEntry implements IPatientVascularAccessPunctureViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientVascularAccessPunctureView;

    constructor(data?: IPatientVascularAccessPunctureViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientVascularAccessPunctureView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientVascularAccessPunctureViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessPunctureViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientVascularAccessPunctureViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientVascularAccessPunctureView;
}

/** 患者血管通路手术 */
export class PatientVascularAccessSurgeryEditModel implements IPatientVascularAccessSurgeryEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 手术登记日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 是否在本科室手术0,1 */
    issurgery?: number | undefined;
    /** 通路类型`DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type?: string | undefined;

    constructor(data?: IPatientVascularAccessSurgeryEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.issurgery = _data["issurgery"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): PatientVascularAccessSurgeryEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessSurgeryEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["createDate"] = this.createDate ? this.createDate.toLocaleString() : <any>undefined;
        data["issurgery"] = this.issurgery;
        data["type"] = this.type;
        return data;
    }
}

/** 患者血管通路手术 */
export interface IPatientVascularAccessSurgeryEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 手术登记日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 是否在本科室手术0,1 */
    issurgery?: number | undefined;
    /** 通路类型`DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type?: string | undefined;
}

/** 患者血管通路手术 */
export class PatientVascularAccessSurgeryView implements IPatientVascularAccessSurgeryView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 手术登记日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 是否在本科室手术0,1 */
    issurgery?: number | undefined;
    /** 通路类型`DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 通路类型值 */
    typeName?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientVascularAccessSurgeryView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.issurgery = _data["issurgery"];
            this.type = _data["type"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.typeName = _data["typeName"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientVascularAccessSurgeryView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessSurgeryView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["createDate"] = this.createDate ? this.createDate.toLocaleString() : <any>undefined;
        data["issurgery"] = this.issurgery;
        data["type"] = this.type;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["typeName"] = this.typeName;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 患者血管通路手术 */
export interface IPatientVascularAccessSurgeryView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 手术登记日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 是否在本科室手术0,1 */
    issurgery?: number | undefined;
    /** 通路类型`DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 通路类型值 */
    typeName?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PatientVascularAccessSurgeryViewResult implements IPatientVascularAccessSurgeryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientVascularAccessSurgeryView[] | undefined;

    constructor(data?: IPatientVascularAccessSurgeryViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientVascularAccessSurgeryView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientVascularAccessSurgeryViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessSurgeryViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientVascularAccessSurgeryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientVascularAccessSurgeryView[] | undefined;
}

/** Reponse */
export class PatientVascularAccessSurgeryViewResultEntry implements IPatientVascularAccessSurgeryViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientVascularAccessSurgeryView;

    constructor(data?: IPatientVascularAccessSurgeryViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientVascularAccessSurgeryView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientVascularAccessSurgeryViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessSurgeryViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientVascularAccessSurgeryViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientVascularAccessSurgeryView;
}

/** 患者血管通路 */
export class PatientVascularAccessView implements IPatientVascularAccessView {
    /** 标识 */
    id?: string | undefined;
    /** 照片列表 */
    files?: PatientVascularAccessFile[] | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 患者别称 */
    patientName2?: string | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 部位 `DIC.VASCULAR.ACCESS.LOCATION` *左侧,右侧* */
    location?: string | undefined;
    /** 部位值 */
    locationName?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *静脉直穿,动脉直穿* */
    type?: string | undefined;
    /** 通路类型值 */
    typeName?: string | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 默认在处方应用0,1 */
    default?: number | undefined;
    /** 停用时间 */
    disableDate?: dayjs.Dayjs | undefined;
    /** 停用原因 */
    disableReason?: string | undefined;
    /** 已用天数 */
    lifetime?: number | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 是否改变通路0,1 */
    change?: number | undefined;
    /** 改变原因 `DIC.VASCULAR.ACCESS.CHANGECAUSE` *可以多选,使用`;`分隔* */
    changeCause?: string | undefined;
    /** 改变原因名称 */
    changeCauseName?: string | undefined;
    /** 其它改变原因 */
    changeCauseOther?: string | undefined;
    /** 位置 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 位置名称 */
    positionName?: string | undefined;
    /** 中心静脉置管方法 `DIC.VASCULAR.ACCESS.WAY.CVC` */
    way?: string | undefined;
    /** 中心静脉置管方法名称 */
    wayName?: string | undefined;
    /** 其他描述 */
    remarkOther?: string | undefined;
    /** 血管通路变动 */
    patientVascularAccessChanges?: PatientVascularAccessChangeView[] | undefined;

    constructor(data?: IPatientVascularAccessView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["files"])) {
                this.files = [] as any;
                for (let item of _data["files"])
                    this.files!.push(PatientVascularAccessFile.fromJS(item));
            }
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.location = _data["location"];
            this.locationName = _data["locationName"];
            this.type = _data["type"];
            this.typeName = _data["typeName"];
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.default = _data["default"];
            this.disableDate = _data["disableDate"] ? dayjs(_data["disableDate"].toString()) : <any>undefined;
            this.disableReason = _data["disableReason"];
            this.lifetime = _data["lifetime"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.change = _data["change"];
            this.changeCause = _data["changeCause"];
            this.changeCauseName = _data["changeCauseName"];
            this.changeCauseOther = _data["changeCauseOther"];
            this.position = _data["position"];
            this.positionName = _data["positionName"];
            this.way = _data["way"];
            this.wayName = _data["wayName"];
            this.remarkOther = _data["remarkOther"];
            if (Array.isArray(_data["patientVascularAccessChanges"])) {
                this.patientVascularAccessChanges = [] as any;
                for (let item of _data["patientVascularAccessChanges"])
                    this.patientVascularAccessChanges!.push(PatientVascularAccessChangeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientVascularAccessView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.files)) {
            data["files"] = [];
            for (let item of this.files)
                data["files"].push(item.toJSON());
        }
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["createDate"] = this.createDate ? this.createDate.toLocaleString() : <any>undefined;
        data["location"] = this.location;
        data["locationName"] = this.locationName;
        data["type"] = this.type;
        data["typeName"] = this.typeName;
        data["firstDate"] = this.firstDate ? this.firstDate.toLocaleString() : <any>undefined;
        data["default"] = this.default;
        data["disableDate"] = this.disableDate ? this.disableDate.toLocaleString() : <any>undefined;
        data["disableReason"] = this.disableReason;
        data["lifetime"] = this.lifetime;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["change"] = this.change;
        data["changeCause"] = this.changeCause;
        data["changeCauseName"] = this.changeCauseName;
        data["changeCauseOther"] = this.changeCauseOther;
        data["position"] = this.position;
        data["positionName"] = this.positionName;
        data["way"] = this.way;
        data["wayName"] = this.wayName;
        data["remarkOther"] = this.remarkOther;
        if (Array.isArray(this.patientVascularAccessChanges)) {
            data["patientVascularAccessChanges"] = [];
            for (let item of this.patientVascularAccessChanges)
                data["patientVascularAccessChanges"].push(item.toJSON());
        }
        return data;
    }
}

/** 患者血管通路 */
export interface IPatientVascularAccessView {
    /** 标识 */
    id?: string | undefined;
    /** 照片列表 */
    files?: PatientVascularAccessFile[] | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 患者别称 */
    patientName2?: string | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 部位 `DIC.VASCULAR.ACCESS.LOCATION` *左侧,右侧* */
    location?: string | undefined;
    /** 部位值 */
    locationName?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *静脉直穿,动脉直穿* */
    type?: string | undefined;
    /** 通路类型值 */
    typeName?: string | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 默认在处方应用0,1 */
    default?: number | undefined;
    /** 停用时间 */
    disableDate?: dayjs.Dayjs | undefined;
    /** 停用原因 */
    disableReason?: string | undefined;
    /** 已用天数 */
    lifetime?: number | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 是否改变通路0,1 */
    change?: number | undefined;
    /** 改变原因 `DIC.VASCULAR.ACCESS.CHANGECAUSE` *可以多选,使用`;`分隔* */
    changeCause?: string | undefined;
    /** 改变原因名称 */
    changeCauseName?: string | undefined;
    /** 其它改变原因 */
    changeCauseOther?: string | undefined;
    /** 位置 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 位置名称 */
    positionName?: string | undefined;
    /** 中心静脉置管方法 `DIC.VASCULAR.ACCESS.WAY.CVC` */
    way?: string | undefined;
    /** 中心静脉置管方法名称 */
    wayName?: string | undefined;
    /** 其他描述 */
    remarkOther?: string | undefined;
    /** 血管通路变动 */
    patientVascularAccessChanges?: PatientVascularAccessChangeView[] | undefined;
}

/** 患者血管通路 (ViewModel) */
export class PatientVascularAccessViewModel implements IPatientVascularAccessViewModel {
    /** [患者标识](患者信息Id) */
    patientId!: string;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 是否改变通路0,1 */
    change?: number | undefined;
    /** 改变日期 */
    changeDate?: dayjs.Dayjs | undefined;
    /** 改变原因 `DIC.VASCULAR.ACCESS.CHANGECAUSE` *可以多选,使用`;`分隔* */
    changeCause?: string | undefined;
    /** 其它改变原因 */
    changeCauseOther?: string | undefined;
    /** 位置(左-右Id) `DIC.VASCULAR.ACCESS.LOCATION` *左侧,右侧* */
    location?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type!: string;
    /** 位置 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 中心静脉置管方法 `DIC.VASCULAR.ACCESS.WAY.CVC` */
    way?: string | undefined;
    /** 其他描述 */
    remarkOther?: string | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 默认在处方应用0,1 */
    default?: number | undefined;
    /** 停用时间 */
    disableDate?: dayjs.Dayjs | undefined;
    /** 停用原因 */
    disableReason?: string | undefined;
    /** 已用天数 */
    lifetime?: number | undefined;
    /** 启用状态0,1 */
    enabled!: number;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IPatientVascularAccessViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.change = _data["change"];
            this.changeDate = _data["changeDate"] ? dayjs(_data["changeDate"].toString()) : <any>undefined;
            this.changeCause = _data["changeCause"];
            this.changeCauseOther = _data["changeCauseOther"];
            this.location = _data["location"];
            this.type = _data["type"];
            this.position = _data["position"];
            this.way = _data["way"];
            this.remarkOther = _data["remarkOther"];
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.default = _data["default"];
            this.disableDate = _data["disableDate"] ? dayjs(_data["disableDate"].toString()) : <any>undefined;
            this.disableReason = _data["disableReason"];
            this.lifetime = _data["lifetime"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): PatientVascularAccessViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["createDate"] = this.createDate ? this.createDate.toLocaleString() : <any>undefined;
        data["change"] = this.change;
        data["changeDate"] = this.changeDate ? this.changeDate.toLocaleString() : <any>undefined;
        data["changeCause"] = this.changeCause;
        data["changeCauseOther"] = this.changeCauseOther;
        data["location"] = this.location;
        data["type"] = this.type;
        data["position"] = this.position;
        data["way"] = this.way;
        data["remarkOther"] = this.remarkOther;
        data["firstDate"] = this.firstDate ? this.firstDate.toLocaleString() : <any>undefined;
        data["default"] = this.default;
        data["disableDate"] = this.disableDate ? this.disableDate.toLocaleString() : <any>undefined;
        data["disableReason"] = this.disableReason;
        data["lifetime"] = this.lifetime;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        return data;
    }
}

/** 患者血管通路 (ViewModel) */
export interface IPatientVascularAccessViewModel {
    /** [患者标识](患者信息Id) */
    patientId: string;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 是否改变通路0,1 */
    change?: number | undefined;
    /** 改变日期 */
    changeDate?: dayjs.Dayjs | undefined;
    /** 改变原因 `DIC.VASCULAR.ACCESS.CHANGECAUSE` *可以多选,使用`;`分隔* */
    changeCause?: string | undefined;
    /** 其它改变原因 */
    changeCauseOther?: string | undefined;
    /** 位置(左-右Id) `DIC.VASCULAR.ACCESS.LOCATION` *左侧,右侧* */
    location?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type: string;
    /** 位置 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 中心静脉置管方法 `DIC.VASCULAR.ACCESS.WAY.CVC` */
    way?: string | undefined;
    /** 其他描述 */
    remarkOther?: string | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 默认在处方应用0,1 */
    default?: number | undefined;
    /** 停用时间 */
    disableDate?: dayjs.Dayjs | undefined;
    /** 停用原因 */
    disableReason?: string | undefined;
    /** 已用天数 */
    lifetime?: number | undefined;
    /** 启用状态0,1 */
    enabled: number;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class PatientVascularAccessViewResult implements IPatientVascularAccessViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientVascularAccessView[] | undefined;

    constructor(data?: IPatientVascularAccessViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientVascularAccessView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientVascularAccessViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientVascularAccessViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientVascularAccessView[] | undefined;
}

/** 血管通路 */
export class PatientVascularAccessVo implements IPatientVascularAccessVo {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 是否改变通路0,1 */
    change?: number | undefined;
    /** 改变日期 */
    changeDate?: dayjs.Dayjs | undefined;
    /** 改变原因 `DIC.VASCULAR.ACCESS.CHANGECAUSE` *可以多选,使用`;`分隔* */
    changeCause?: string | undefined;
    /** 其它改变原因 */
    changeCauseOther?: string | undefined;
    /** 位置(左-右) `DIC.VASCULAR.ACCESS.LOCATION` *左侧,右侧* */
    location?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type?: string | undefined;
    /** 位置 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 中心静脉置管方法 `DIC.VASCULAR.ACCESS.WAY.CVC` */
    way?: string | undefined;
    /** 其他描述 */
    remarkOther?: string | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 默认在处方应用0,1 */
    default?: number | undefined;
    /** 停用时间 */
    disableDate?: dayjs.Dayjs | undefined;
    /** 停用原因 */
    disableReason?: string | undefined;
    /** 已用天数 */
    lifetime?: number | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
    /** 血管通路改变 */
    patientVascularAccessChangeView?: PatientVascularAccessChangeView[] | undefined;

    constructor(data?: IPatientVascularAccessVo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.change = _data["change"];
            this.changeDate = _data["changeDate"] ? dayjs(_data["changeDate"].toString()) : <any>undefined;
            this.changeCause = _data["changeCause"];
            this.changeCauseOther = _data["changeCauseOther"];
            this.location = _data["location"];
            this.type = _data["type"];
            this.position = _data["position"];
            this.way = _data["way"];
            this.remarkOther = _data["remarkOther"];
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.default = _data["default"];
            this.disableDate = _data["disableDate"] ? dayjs(_data["disableDate"].toString()) : <any>undefined;
            this.disableReason = _data["disableReason"];
            this.lifetime = _data["lifetime"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
            if (Array.isArray(_data["patientVascularAccessChangeView"])) {
                this.patientVascularAccessChangeView = [] as any;
                for (let item of _data["patientVascularAccessChangeView"])
                    this.patientVascularAccessChangeView!.push(PatientVascularAccessChangeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientVascularAccessVo {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessVo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["createDate"] = this.createDate ? this.createDate.toLocaleString() : <any>undefined;
        data["change"] = this.change;
        data["changeDate"] = this.changeDate ? this.changeDate.toLocaleString() : <any>undefined;
        data["changeCause"] = this.changeCause;
        data["changeCauseOther"] = this.changeCauseOther;
        data["location"] = this.location;
        data["type"] = this.type;
        data["position"] = this.position;
        data["way"] = this.way;
        data["remarkOther"] = this.remarkOther;
        data["firstDate"] = this.firstDate ? this.firstDate.toLocaleString() : <any>undefined;
        data["default"] = this.default;
        data["disableDate"] = this.disableDate ? this.disableDate.toLocaleString() : <any>undefined;
        data["disableReason"] = this.disableReason;
        data["lifetime"] = this.lifetime;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        if (Array.isArray(this.patientVascularAccessChangeView)) {
            data["patientVascularAccessChangeView"] = [];
            for (let item of this.patientVascularAccessChangeView)
                data["patientVascularAccessChangeView"].push(item.toJSON());
        }
        return data;
    }
}

/** 血管通路 */
export interface IPatientVascularAccessVo {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 是否改变通路0,1 */
    change?: number | undefined;
    /** 改变日期 */
    changeDate?: dayjs.Dayjs | undefined;
    /** 改变原因 `DIC.VASCULAR.ACCESS.CHANGECAUSE` *可以多选,使用`;`分隔* */
    changeCause?: string | undefined;
    /** 其它改变原因 */
    changeCauseOther?: string | undefined;
    /** 位置(左-右) `DIC.VASCULAR.ACCESS.LOCATION` *左侧,右侧* */
    location?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type?: string | undefined;
    /** 位置 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 中心静脉置管方法 `DIC.VASCULAR.ACCESS.WAY.CVC` */
    way?: string | undefined;
    /** 其他描述 */
    remarkOther?: string | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 默认在处方应用0,1 */
    default?: number | undefined;
    /** 停用时间 */
    disableDate?: dayjs.Dayjs | undefined;
    /** 停用原因 */
    disableReason?: string | undefined;
    /** 已用天数 */
    lifetime?: number | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
    /** 血管通路改变 */
    patientVascularAccessChangeView?: PatientVascularAccessChangeView[] | undefined;
}

/** Reponse */
export class PatientVascularAccessVoResultEntry implements IPatientVascularAccessVoResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientVascularAccessVo;

    constructor(data?: IPatientVascularAccessVoResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientVascularAccessVo.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientVascularAccessVoResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccessVoResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientVascularAccessVoResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientVascularAccessVo;
}

/** 患者列表信息 (ViewModel) */
export class PatientView implements IPatientView {
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name!: string;
    /** 别名 *用于患者重名,默认填姓名,系统内默认显示别名,打印单据使用姓名* */
    name2?: string | undefined;
    /** 照片路径 */
    photo?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender!: string;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source!: string;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 医保类型 `DIC.PEOPLE.MEDICARETYPE` *城镇职工,城镇居民* */
    medicareType?: string | undefined;
    /** 医保号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 血型 `DIC.PEOPLE.BLOODTYPE` *字典:A,B,O,未知* */
    bloodType?: string | undefined;
    /** RH `DIC.PEOPLE.RH` */
    rh?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 本人电话 */
    telephone?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 职业 `DIC.PEOPLE.PROFESSION` *个体,工人,农民,学生* */
    profession?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 家庭住址 */
    address?: string | undefined;
    /** 工作单位 */
    workUnit?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: dayjs.Dayjs | undefined;
    /** 透析状态 `DIC.PATIENT.DIALYSIS.STATE` *长期,临时* */
    dialysisState?: string | undefined;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 主治医生 */
    doctor?: string | undefined;
    /** 主管护士 */
    nurse?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 传染病 `DIC.PATIENT.POSITIVE` *0:阴性,1:阳性 编辑诊断-传染病时管理这个状态* */
    positive!: number;
    /** 透析状态是否转换 `DIC.PATIENT.DIALYSIS.STATE.TRANSITION` *0:未转换,1:已转换 编辑诊断-状态自动转换时管理这个状态* */
    dialysisStateTransition!: number;
    /** 档案号 *XT{Year}{Month}{Sequence}* */
    archiveNumber?: string | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 病历夹号 `DIC.PATIENT.CONDITION` *一般,病重,病危* */
    medicareCondition?: string | undefined;
    /** 并发症 `DIC.PATIENT.COMPLICATION` *多选* */
    complication?: string | undefined;
    /** 下次感筛检验日期 */
    nextDate?: dayjs.Dayjs | undefined;
    /** 首次透析时采用的通路类型 */
    firstDialysisVascularAccess?: string | undefined;
    /** 首次透析时采取的方式 */
    firstDialysisMode?: string | undefined;
    /** 首次肾脏代替治疗时肾功能 */
    firstGfr?: string | undefined;
    /** 首次肾脏代替治疗时血肌酐水平 */
    firstScr?: string | undefined;
    /** 附加照片路径 */
    photoAuxiliary?: string | undefined;
    /** 传染病显示值 */
    positiveLabel?: string | undefined;
    /** 排班模板数量 */
    count?: string | undefined;
    /** 病理诊断 *0:无,1:有* */
    diagnosisPathological?: string | undefined;
    /** 并发症诊断 *0:无,1:有* */
    diagnosisComplication?: string | undefined;
    /** 传染病诊断 *0:无,1:有* */
    diagnosisInfectiousDiseases?: string | undefined;
    /** 肿瘤诊断 *0:无,1:有* */
    diagnosisTumor?: string | undefined;
    /** 过敏诊断 *0:无,1:有* */
    diagnosisAllergy?: string | undefined;
    /** 原发病诊断 *0:无,1:有* */
    poc?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** [归属透析室标识](透析室Id) */
    sysHospitalAreaId?: string | undefined;
    /** 医生姓名 */
    doctorName?: string | undefined;
    /** 护士姓名 */
    nurseName?: string | undefined;
    /** 全名:姓名(别名) */
    nameFull?: string | undefined;
    /** 性别名称 */
    genderName?: string | undefined;
    /** 病情名称 */
    medicareConditionName?: string | undefined;
    /** 患者年龄 */
    age?: string | undefined;
    /** RH显示值 */
    rhLabel?: string | undefined;
    /** 来源 */
    sourceName?: string | undefined;
    /** 转归日期 */
    prognosisDate?: string | undefined;
    /** 来源 */
    prognosisCause?: string | undefined;
    /** 最新转入日期 */
    prognosisInDate?: dayjs.Dayjs | undefined;
    /** 医保类型名称 */
    medicareTypeName?: string | undefined;
    /** 民族名称 */
    nationalityName?: string | undefined;
    /** 血型名称 */
    bloodTypeName?: string | undefined;
    /** 证件类型名称 */
    idTypeName?: string | undefined;
    /** 婚否名称 */
    maritalName?: string | undefined;
    /** 文化程度名称 */
    educationalLevelName?: string | undefined;
    /** 职业名称 */
    professionName?: string | undefined;
    /** 透析状态名称 */
    dialysisStateName?: string | undefined;
    /** 透析卡号 */
    cardNumber?: string | undefined;
    /** 转归状态 */
    prognosisState?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 照片文件Url */
    url?: string | undefined;
    /** 附加照片文件Url */
    urlAuxiliary?: string | undefined;
    /** 最近一次排床日期 */
    lastScheduleDate?: string | undefined;
    /** 最近一次透析方式 */
    lastDialysisMode?: string | undefined;
    /** 是否有首透日期 */
    firstDateIsNull?: number | undefined;
    /** 人脸图像 */
    face?: string | undefined;
    /** 最近一次透析日期 */
    lastDialysisDate?: dayjs.Dayjs | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 患者标签 */
    tags?: PatientTagsBase[] | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    infectious?: PatientDiagnosisInfectiousDiseasesView;
    infectiousLabel?: string | undefined;
    /** 传染病标签 */
    infectioustags?: CureTodayPatientTagsView[] | undefined;
    /** 院区 */
    sysHospitalAreaIds?: string[] | undefined;
    /** 异常提醒 */
    abnormas?: PatientLisAbnormaView[] | undefined;
    /** 检验项提醒 */
    reminds?: PatientLisRemindView[] | undefined;
    /** 排序 */
    defaultSort?: number;
    /** 360地址 */
    fullViewUrls?: string[] | undefined;
    /** 指纹 */
    finger?: string | undefined;
    /** 门诊住院号 */
    readonly hospitalNumber?: string | undefined;

    constructor(data?: IPatientView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.photo = _data["photo"];
            this.gender = _data["gender"];
            this.source = _data["source"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.ward = _data["ward"];
            this.bed = _data["bed"];
            this.medicareType = _data["medicareType"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.nationality = _data["nationality"];
            this.idType = _data["idType"];
            this.idNumber = _data["idNumber"];
            this.birthdate = _data["birthdate"] ? dayjs(_data["birthdate"].toString()) : <any>undefined;
            this.bloodType = _data["bloodType"];
            this.rh = _data["rh"];
            this.height = _data["height"];
            this.telephone = _data["telephone"];
            this.marital = _data["marital"];
            this.educationalLevel = _data["educationalLevel"];
            this.profession = _data["profession"];
            this.province = _data["province"];
            this.city = _data["city"];
            this.area = _data["area"];
            this.address = _data["address"];
            this.workUnit = _data["workUnit"];
            this.receiptDate = _data["receiptDate"] ? dayjs(_data["receiptDate"].toString()) : <any>undefined;
            this.dialysisState = _data["dialysisState"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.dialysisCountInit = _data["dialysisCountInit"];
            this.doctor = _data["doctor"];
            this.nurse = _data["nurse"];
            this.diagnosis = _data["diagnosis"];
            this.remark = _data["remark"];
            this.positive = _data["positive"];
            this.dialysisStateTransition = _data["dialysisStateTransition"];
            this.archiveNumber = _data["archiveNumber"];
            this.department = _data["department"];
            this.dossierNumber = _data["dossierNumber"];
            this.medicareCondition = _data["medicareCondition"];
            this.complication = _data["complication"];
            this.nextDate = _data["nextDate"] ? dayjs(_data["nextDate"].toString()) : <any>undefined;
            this.firstDialysisVascularAccess = _data["firstDialysisVascularAccess"];
            this.firstDialysisMode = _data["firstDialysisMode"];
            this.firstGfr = _data["firstGfr"];
            this.firstScr = _data["firstScr"];
            this.photoAuxiliary = _data["photoAuxiliary"];
            this.positiveLabel = _data["positiveLabel"];
            this.count = _data["count"];
            this.diagnosisPathological = _data["diagnosisPathological"];
            this.diagnosisComplication = _data["diagnosisComplication"];
            this.diagnosisInfectiousDiseases = _data["diagnosisInfectiousDiseases"];
            this.diagnosisTumor = _data["diagnosisTumor"];
            this.diagnosisAllergy = _data["diagnosisAllergy"];
            this.poc = _data["poc"];
            this.dialysisAge = _data["dialysisAge"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.doctorName = _data["doctorName"];
            this.nurseName = _data["nurseName"];
            this.nameFull = _data["nameFull"];
            this.genderName = _data["genderName"];
            this.medicareConditionName = _data["medicareConditionName"];
            this.age = _data["age"];
            this.rhLabel = _data["rhLabel"];
            this.sourceName = _data["sourceName"];
            this.prognosisDate = _data["prognosisDate"];
            this.prognosisCause = _data["prognosisCause"];
            this.prognosisInDate = _data["prognosisInDate"] ? dayjs(_data["prognosisInDate"].toString()) : <any>undefined;
            this.medicareTypeName = _data["medicareTypeName"];
            this.nationalityName = _data["nationalityName"];
            this.bloodTypeName = _data["bloodTypeName"];
            this.idTypeName = _data["idTypeName"];
            this.maritalName = _data["maritalName"];
            this.educationalLevelName = _data["educationalLevelName"];
            this.professionName = _data["professionName"];
            this.dialysisStateName = _data["dialysisStateName"];
            this.cardNumber = _data["cardNumber"];
            this.prognosisState = _data["prognosisState"];
            this.prognosisStateName = _data["prognosisStateName"];
            this.url = _data["url"];
            this.urlAuxiliary = _data["urlAuxiliary"];
            this.lastScheduleDate = _data["lastScheduleDate"];
            this.lastDialysisMode = _data["lastDialysisMode"];
            this.firstDateIsNull = _data["firstDateIsNull"];
            this.face = _data["face"];
            this.lastDialysisDate = _data["lastDialysisDate"] ? dayjs(_data["lastDialysisDate"].toString()) : <any>undefined;
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(PatientTagsBase.fromJS(item));
            }
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.infectious = _data["infectious"] ? PatientDiagnosisInfectiousDiseasesView.fromJS(_data["infectious"]) : <any>undefined;
            this.infectiousLabel = _data["infectiousLabel"];
            if (Array.isArray(_data["infectioustags"])) {
                this.infectioustags = [] as any;
                for (let item of _data["infectioustags"])
                    this.infectioustags!.push(CureTodayPatientTagsView.fromJS(item));
            }
            if (Array.isArray(_data["sysHospitalAreaIds"])) {
                this.sysHospitalAreaIds = [] as any;
                for (let item of _data["sysHospitalAreaIds"])
                    this.sysHospitalAreaIds!.push(item);
            }
            if (Array.isArray(_data["abnormas"])) {
                this.abnormas = [] as any;
                for (let item of _data["abnormas"])
                    this.abnormas!.push(PatientLisAbnormaView.fromJS(item));
            }
            if (Array.isArray(_data["reminds"])) {
                this.reminds = [] as any;
                for (let item of _data["reminds"])
                    this.reminds!.push(PatientLisRemindView.fromJS(item));
            }
            this.defaultSort = _data["defaultSort"];
            if (Array.isArray(_data["fullViewUrls"])) {
                this.fullViewUrls = [] as any;
                for (let item of _data["fullViewUrls"])
                    this.fullViewUrls!.push(item);
            }
            this.finger = _data["finger"];
            (<any>this).hospitalNumber = _data["hospitalNumber"];
        }
    }

    static fromJS(data: any): PatientView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["photo"] = this.photo;
        data["gender"] = this.gender;
        data["source"] = this.source;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["ward"] = this.ward;
        data["bed"] = this.bed;
        data["medicareType"] = this.medicareType;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["dialysisNumber"] = this.dialysisNumber;
        data["nationality"] = this.nationality;
        data["idType"] = this.idType;
        data["idNumber"] = this.idNumber;
        data["birthdate"] = this.birthdate ? this.birthdate.toLocaleString() : <any>undefined;
        data["bloodType"] = this.bloodType;
        data["rh"] = this.rh;
        data["height"] = this.height;
        data["telephone"] = this.telephone;
        data["marital"] = this.marital;
        data["educationalLevel"] = this.educationalLevel;
        data["profession"] = this.profession;
        data["province"] = this.province;
        data["city"] = this.city;
        data["area"] = this.area;
        data["address"] = this.address;
        data["workUnit"] = this.workUnit;
        data["receiptDate"] = this.receiptDate ? this.receiptDate.toLocaleString() : <any>undefined;
        data["dialysisState"] = this.dialysisState;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toLocaleString() : <any>undefined;
        data["dialysisCountInit"] = this.dialysisCountInit;
        data["doctor"] = this.doctor;
        data["nurse"] = this.nurse;
        data["diagnosis"] = this.diagnosis;
        data["remark"] = this.remark;
        data["positive"] = this.positive;
        data["dialysisStateTransition"] = this.dialysisStateTransition;
        data["archiveNumber"] = this.archiveNumber;
        data["department"] = this.department;
        data["dossierNumber"] = this.dossierNumber;
        data["medicareCondition"] = this.medicareCondition;
        data["complication"] = this.complication;
        data["nextDate"] = this.nextDate ? this.nextDate.toLocaleString() : <any>undefined;
        data["firstDialysisVascularAccess"] = this.firstDialysisVascularAccess;
        data["firstDialysisMode"] = this.firstDialysisMode;
        data["firstGfr"] = this.firstGfr;
        data["firstScr"] = this.firstScr;
        data["photoAuxiliary"] = this.photoAuxiliary;
        data["positiveLabel"] = this.positiveLabel;
        data["count"] = this.count;
        data["diagnosisPathological"] = this.diagnosisPathological;
        data["diagnosisComplication"] = this.diagnosisComplication;
        data["diagnosisInfectiousDiseases"] = this.diagnosisInfectiousDiseases;
        data["diagnosisTumor"] = this.diagnosisTumor;
        data["diagnosisAllergy"] = this.diagnosisAllergy;
        data["poc"] = this.poc;
        data["dialysisAge"] = this.dialysisAge;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["doctorName"] = this.doctorName;
        data["nurseName"] = this.nurseName;
        data["nameFull"] = this.nameFull;
        data["genderName"] = this.genderName;
        data["medicareConditionName"] = this.medicareConditionName;
        data["age"] = this.age;
        data["rhLabel"] = this.rhLabel;
        data["sourceName"] = this.sourceName;
        data["prognosisDate"] = this.prognosisDate;
        data["prognosisCause"] = this.prognosisCause;
        data["prognosisInDate"] = this.prognosisInDate ? this.prognosisInDate.toLocaleString() : <any>undefined;
        data["medicareTypeName"] = this.medicareTypeName;
        data["nationalityName"] = this.nationalityName;
        data["bloodTypeName"] = this.bloodTypeName;
        data["idTypeName"] = this.idTypeName;
        data["maritalName"] = this.maritalName;
        data["educationalLevelName"] = this.educationalLevelName;
        data["professionName"] = this.professionName;
        data["dialysisStateName"] = this.dialysisStateName;
        data["cardNumber"] = this.cardNumber;
        data["prognosisState"] = this.prognosisState;
        data["prognosisStateName"] = this.prognosisStateName;
        data["url"] = this.url;
        data["urlAuxiliary"] = this.urlAuxiliary;
        data["lastScheduleDate"] = this.lastScheduleDate;
        data["lastDialysisMode"] = this.lastDialysisMode;
        data["firstDateIsNull"] = this.firstDateIsNull;
        data["face"] = this.face;
        data["lastDialysisDate"] = this.lastDialysisDate ? this.lastDialysisDate.toLocaleString() : <any>undefined;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item.toJSON());
        }
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["infectious"] = this.infectious ? this.infectious.toJSON() : <any>undefined;
        data["infectiousLabel"] = this.infectiousLabel;
        if (Array.isArray(this.infectioustags)) {
            data["infectioustags"] = [];
            for (let item of this.infectioustags)
                data["infectioustags"].push(item.toJSON());
        }
        if (Array.isArray(this.sysHospitalAreaIds)) {
            data["sysHospitalAreaIds"] = [];
            for (let item of this.sysHospitalAreaIds)
                data["sysHospitalAreaIds"].push(item);
        }
        if (Array.isArray(this.abnormas)) {
            data["abnormas"] = [];
            for (let item of this.abnormas)
                data["abnormas"].push(item.toJSON());
        }
        if (Array.isArray(this.reminds)) {
            data["reminds"] = [];
            for (let item of this.reminds)
                data["reminds"].push(item.toJSON());
        }
        data["defaultSort"] = this.defaultSort;
        if (Array.isArray(this.fullViewUrls)) {
            data["fullViewUrls"] = [];
            for (let item of this.fullViewUrls)
                data["fullViewUrls"].push(item);
        }
        data["finger"] = this.finger;
        data["hospitalNumber"] = this.hospitalNumber;
        return data;
    }
}

/** 患者列表信息 (ViewModel) */
export interface IPatientView {
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name: string;
    /** 别名 *用于患者重名,默认填姓名,系统内默认显示别名,打印单据使用姓名* */
    name2?: string | undefined;
    /** 照片路径 */
    photo?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender: string;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source: string;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 医保类型 `DIC.PEOPLE.MEDICARETYPE` *城镇职工,城镇居民* */
    medicareType?: string | undefined;
    /** 医保号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 血型 `DIC.PEOPLE.BLOODTYPE` *字典:A,B,O,未知* */
    bloodType?: string | undefined;
    /** RH `DIC.PEOPLE.RH` */
    rh?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 本人电话 */
    telephone?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 职业 `DIC.PEOPLE.PROFESSION` *个体,工人,农民,学生* */
    profession?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 家庭住址 */
    address?: string | undefined;
    /** 工作单位 */
    workUnit?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: dayjs.Dayjs | undefined;
    /** 透析状态 `DIC.PATIENT.DIALYSIS.STATE` *长期,临时* */
    dialysisState?: string | undefined;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 主治医生 */
    doctor?: string | undefined;
    /** 主管护士 */
    nurse?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 传染病 `DIC.PATIENT.POSITIVE` *0:阴性,1:阳性 编辑诊断-传染病时管理这个状态* */
    positive: number;
    /** 透析状态是否转换 `DIC.PATIENT.DIALYSIS.STATE.TRANSITION` *0:未转换,1:已转换 编辑诊断-状态自动转换时管理这个状态* */
    dialysisStateTransition: number;
    /** 档案号 *XT{Year}{Month}{Sequence}* */
    archiveNumber?: string | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 病历夹号 `DIC.PATIENT.CONDITION` *一般,病重,病危* */
    medicareCondition?: string | undefined;
    /** 并发症 `DIC.PATIENT.COMPLICATION` *多选* */
    complication?: string | undefined;
    /** 下次感筛检验日期 */
    nextDate?: dayjs.Dayjs | undefined;
    /** 首次透析时采用的通路类型 */
    firstDialysisVascularAccess?: string | undefined;
    /** 首次透析时采取的方式 */
    firstDialysisMode?: string | undefined;
    /** 首次肾脏代替治疗时肾功能 */
    firstGfr?: string | undefined;
    /** 首次肾脏代替治疗时血肌酐水平 */
    firstScr?: string | undefined;
    /** 附加照片路径 */
    photoAuxiliary?: string | undefined;
    /** 传染病显示值 */
    positiveLabel?: string | undefined;
    /** 排班模板数量 */
    count?: string | undefined;
    /** 病理诊断 *0:无,1:有* */
    diagnosisPathological?: string | undefined;
    /** 并发症诊断 *0:无,1:有* */
    diagnosisComplication?: string | undefined;
    /** 传染病诊断 *0:无,1:有* */
    diagnosisInfectiousDiseases?: string | undefined;
    /** 肿瘤诊断 *0:无,1:有* */
    diagnosisTumor?: string | undefined;
    /** 过敏诊断 *0:无,1:有* */
    diagnosisAllergy?: string | undefined;
    /** 原发病诊断 *0:无,1:有* */
    poc?: string | undefined;
    /** 透析龄(月) */
    dialysisAge?: string | undefined;
    /** [归属透析室标识](透析室Id) */
    sysHospitalAreaId?: string | undefined;
    /** 医生姓名 */
    doctorName?: string | undefined;
    /** 护士姓名 */
    nurseName?: string | undefined;
    /** 全名:姓名(别名) */
    nameFull?: string | undefined;
    /** 性别名称 */
    genderName?: string | undefined;
    /** 病情名称 */
    medicareConditionName?: string | undefined;
    /** 患者年龄 */
    age?: string | undefined;
    /** RH显示值 */
    rhLabel?: string | undefined;
    /** 来源 */
    sourceName?: string | undefined;
    /** 转归日期 */
    prognosisDate?: string | undefined;
    /** 来源 */
    prognosisCause?: string | undefined;
    /** 最新转入日期 */
    prognosisInDate?: dayjs.Dayjs | undefined;
    /** 医保类型名称 */
    medicareTypeName?: string | undefined;
    /** 民族名称 */
    nationalityName?: string | undefined;
    /** 血型名称 */
    bloodTypeName?: string | undefined;
    /** 证件类型名称 */
    idTypeName?: string | undefined;
    /** 婚否名称 */
    maritalName?: string | undefined;
    /** 文化程度名称 */
    educationalLevelName?: string | undefined;
    /** 职业名称 */
    professionName?: string | undefined;
    /** 透析状态名称 */
    dialysisStateName?: string | undefined;
    /** 透析卡号 */
    cardNumber?: string | undefined;
    /** 转归状态 */
    prognosisState?: string | undefined;
    /** 转归状态名称 */
    prognosisStateName?: string | undefined;
    /** 照片文件Url */
    url?: string | undefined;
    /** 附加照片文件Url */
    urlAuxiliary?: string | undefined;
    /** 最近一次排床日期 */
    lastScheduleDate?: string | undefined;
    /** 最近一次透析方式 */
    lastDialysisMode?: string | undefined;
    /** 是否有首透日期 */
    firstDateIsNull?: number | undefined;
    /** 人脸图像 */
    face?: string | undefined;
    /** 最近一次透析日期 */
    lastDialysisDate?: dayjs.Dayjs | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 患者标签 */
    tags?: PatientTagsBase[] | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    infectious?: PatientDiagnosisInfectiousDiseasesView;
    infectiousLabel?: string | undefined;
    /** 传染病标签 */
    infectioustags?: CureTodayPatientTagsView[] | undefined;
    /** 院区 */
    sysHospitalAreaIds?: string[] | undefined;
    /** 异常提醒 */
    abnormas?: PatientLisAbnormaView[] | undefined;
    /** 检验项提醒 */
    reminds?: PatientLisRemindView[] | undefined;
    /** 排序 */
    defaultSort?: number;
    /** 360地址 */
    fullViewUrls?: string[] | undefined;
    /** 指纹 */
    finger?: string | undefined;
    /** 门诊住院号 */
    hospitalNumber?: string | undefined;
}

/** Reponse */
export class PatientViewResult implements IPatientViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientView[] | undefined;

    constructor(data?: IPatientViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientView[] | undefined;
}

/** 干体重记录 */
export class PatientWeightBest implements IPatientWeightBest {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 干体重 *kg* */
    bestWeight?: number;
    /** 测量时间 */
    measureTime?: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;

    constructor(data?: IPatientWeightBest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.bestWeight = _data["bestWeight"];
            this.measureTime = _data["measureTime"] ? dayjs(_data["measureTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientWeightBest {
        data = typeof data === 'object' ? data : {};
        let result = new PatientWeightBest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["bestWeight"] = this.bestWeight;
        data["measureTime"] = this.measureTime ? this.measureTime.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        return data;
    }
}

/** 干体重记录 */
export interface IPatientWeightBest {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 干体重 *kg* */
    bestWeight?: number;
    /** 测量时间 */
    measureTime?: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
}

/** Reponse */
export class PatientWeightBestResult implements IPatientWeightBestResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientWeightBest[] | undefined;

    constructor(data?: IPatientWeightBestResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientWeightBest.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientWeightBestResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientWeightBestResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientWeightBestResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientWeightBest[] | undefined;
}

/** Reponse */
export class PatientWeightBestResultEntry implements IPatientWeightBestResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientWeightBest;

    constructor(data?: IPatientWeightBestResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientWeightBest.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientWeightBestResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientWeightBestResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientWeightBestResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientWeightBest;
}

/** 干体重记录 (ViewModel) */
export class PatientWeightBestViewModel implements IPatientWeightBestViewModel {
    /** [患者标识](患者信息Id) */
    patientId!: string;
    /** 干体重 *kg* */
    bestWeight!: number;
    /** 测量时间 */
    measureTime!: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IPatientWeightBestViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.bestWeight = _data["bestWeight"];
            this.measureTime = _data["measureTime"] ? dayjs(_data["measureTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): PatientWeightBestViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientWeightBestViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["bestWeight"] = this.bestWeight;
        data["measureTime"] = this.measureTime ? this.measureTime.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        return data;
    }
}

/** 干体重记录 (ViewModel) */
export interface IPatientWeightBestViewModel {
    /** [患者标识](患者信息Id) */
    patientId: string;
    /** 干体重 *kg* */
    bestWeight: number;
    /** 测量时间 */
    measureTime: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
}

export class PatientWeightView implements IPatientWeightView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 体重 *kg* */
    weight!: number;
    /** 测量时间 */
    measureTime!: dayjs.Dayjs;
    /** 方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    mode?: string | undefined;
    /** 称重标签 `DIC.PATIENT.MEASURE.TAG` *透前,透后,非透析日* */
    tag?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 方式显示值 */
    modeLabel?: string | undefined;
    /** 称重标签显示值 */
    tagLabel?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPatientWeightView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.weight = _data["weight"];
            this.measureTime = _data["measureTime"] ? dayjs(_data["measureTime"].toString()) : <any>undefined;
            this.mode = _data["mode"];
            this.tag = _data["tag"];
            this.remark = _data["remark"];
            this.modeLabel = _data["modeLabel"];
            this.tagLabel = _data["tagLabel"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientWeightView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientWeightView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["weight"] = this.weight;
        data["measureTime"] = this.measureTime ? this.measureTime.toLocaleString() : <any>undefined;
        data["mode"] = this.mode;
        data["tag"] = this.tag;
        data["remark"] = this.remark;
        data["modeLabel"] = this.modeLabel;
        data["tagLabel"] = this.tagLabel;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface IPatientWeightView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 体重 *kg* */
    weight: number;
    /** 测量时间 */
    measureTime: dayjs.Dayjs;
    /** 方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    mode?: string | undefined;
    /** 称重标签 `DIC.PATIENT.MEASURE.TAG` *透前,透后,非透析日* */
    tag?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 方式显示值 */
    modeLabel?: string | undefined;
    /** 称重标签显示值 */
    tagLabel?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 体重记录 (ViewModel) */
export class PatientWeightViewModel implements IPatientWeightViewModel {
    /** [患者标识](患者信息Id) */
    patientId!: string;
    /** 体重 *kg* */
    weight!: number;
    /** 测量时间 */
    measureTime!: dayjs.Dayjs;
    /** 方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    mode?: string | undefined;
    /** 称重标签 `DIC.PATIENT.MEASURE.TAG` *透前,透后,非透析日* */
    tag?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IPatientWeightViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.weight = _data["weight"];
            this.measureTime = _data["measureTime"] ? dayjs(_data["measureTime"].toString()) : <any>undefined;
            this.mode = _data["mode"];
            this.tag = _data["tag"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): PatientWeightViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new PatientWeightViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["weight"] = this.weight;
        data["measureTime"] = this.measureTime ? this.measureTime.toLocaleString() : <any>undefined;
        data["mode"] = this.mode;
        data["tag"] = this.tag;
        data["remark"] = this.remark;
        return data;
    }
}

/** 体重记录 (ViewModel) */
export interface IPatientWeightViewModel {
    /** [患者标识](患者信息Id) */
    patientId: string;
    /** 体重 *kg* */
    weight: number;
    /** 测量时间 */
    measureTime: dayjs.Dayjs;
    /** 方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    mode?: string | undefined;
    /** 称重标签 `DIC.PATIENT.MEASURE.TAG` *透前,透后,非透析日* */
    tag?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class PatientWeightViewResult implements IPatientWeightViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientWeightView[] | undefined;

    constructor(data?: IPatientWeightViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientWeightView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientWeightViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientWeightViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientWeightViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientWeightView[] | undefined;
}

/** Reponse */
export class PatientWeightViewResultEntry implements IPatientWeightViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientWeightView;

    constructor(data?: IPatientWeightViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientWeightView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientWeightViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientWeightViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientWeightViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientWeightView;
}

/** 治疗方式调整 */
export class PrescriptionPlan implements IPrescriptionPlan {
    /** 频次 */
    frequency?: string | undefined;
    /** 频次调整时间 */
    frequencyAdjustDate?: string | undefined;
    /** 透析方式 */
    dialysisMode?: string | undefined;
    /** 透析方式 调整时间 */
    modeAdjustDate?: string | undefined;
    /** 钙浓度 */
    ca?: number | undefined;
    /** 钙浓度 调整时间 */
    caAdjustDate?: string | undefined;

    constructor(data?: IPrescriptionPlan) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.frequency = _data["frequency"];
            this.frequencyAdjustDate = _data["frequencyAdjustDate"];
            this.dialysisMode = _data["dialysisMode"];
            this.modeAdjustDate = _data["modeAdjustDate"];
            this.ca = _data["ca"];
            this.caAdjustDate = _data["caAdjustDate"];
        }
    }

    static fromJS(data: any): PrescriptionPlan {
        data = typeof data === 'object' ? data : {};
        let result = new PrescriptionPlan();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["frequency"] = this.frequency;
        data["frequencyAdjustDate"] = this.frequencyAdjustDate;
        data["dialysisMode"] = this.dialysisMode;
        data["modeAdjustDate"] = this.modeAdjustDate;
        data["ca"] = this.ca;
        data["caAdjustDate"] = this.caAdjustDate;
        return data;
    }
}

/** 治疗方式调整 */
export interface IPrescriptionPlan {
    /** 频次 */
    frequency?: string | undefined;
    /** 频次调整时间 */
    frequencyAdjustDate?: string | undefined;
    /** 透析方式 */
    dialysisMode?: string | undefined;
    /** 透析方式 调整时间 */
    modeAdjustDate?: string | undefined;
    /** 钙浓度 */
    ca?: number | undefined;
    /** 钙浓度 调整时间 */
    caAdjustDate?: string | undefined;
}

export class RepositoryHealtheducationDetailView implements IRepositoryHealtheducationDetailView {
    /** [分类标识](#宣教内容分类) */
    repositoryHealtheducationTypeId!: string;
    /** 名称 *○同一个`repository_healtheducation_type_id`下不允许重复* */
    name!: string;
    /** 封面 *文件路径* */
    cover?: string | undefined;
    /** 类型 *视频,音频,PDF,图片,文本* */
    type!: string;
    /** 内容 *文本类型是时使用* */
    content?: string | undefined;
    /** 时长 *单位：秒，视频/音频类型是时使用* */
    duration?: number | undefined;
    /** 来源 */
    source?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 宣教类型名称 */
    repositoryHealtheducationTypeName?: string | undefined;
    /** 宣教类型序列 */
    repositoryHealtheducationTypeSequence?: number;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 附件信息 */
    files?: RepositoryHealtheducationDetailViewItem[] | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRepositoryHealtheducationDetailView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.repositoryHealtheducationTypeId = _data["repositoryHealtheducationTypeId"];
            this.name = _data["name"];
            this.cover = _data["cover"];
            this.type = _data["type"];
            this.content = _data["content"];
            this.duration = _data["duration"];
            this.source = _data["source"];
            this.remark = _data["remark"];
            this.repositoryHealtheducationTypeName = _data["repositoryHealtheducationTypeName"];
            this.repositoryHealtheducationTypeSequence = _data["repositoryHealtheducationTypeSequence"];
            this.id = _data["id"];
            this.sequence = _data["sequence"];
            if (Array.isArray(_data["files"])) {
                this.files = [] as any;
                for (let item of _data["files"])
                    this.files!.push(RepositoryHealtheducationDetailViewItem.fromJS(item));
            }
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RepositoryHealtheducationDetailView {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationDetailView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["repositoryHealtheducationTypeId"] = this.repositoryHealtheducationTypeId;
        data["name"] = this.name;
        data["cover"] = this.cover;
        data["type"] = this.type;
        data["content"] = this.content;
        data["duration"] = this.duration;
        data["source"] = this.source;
        data["remark"] = this.remark;
        data["repositoryHealtheducationTypeName"] = this.repositoryHealtheducationTypeName;
        data["repositoryHealtheducationTypeSequence"] = this.repositoryHealtheducationTypeSequence;
        data["id"] = this.id;
        data["sequence"] = this.sequence;
        if (Array.isArray(this.files)) {
            data["files"] = [];
            for (let item of this.files)
                data["files"].push(item.toJSON());
        }
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface IRepositoryHealtheducationDetailView {
    /** [分类标识](#宣教内容分类) */
    repositoryHealtheducationTypeId: string;
    /** 名称 *○同一个`repository_healtheducation_type_id`下不允许重复* */
    name: string;
    /** 封面 *文件路径* */
    cover?: string | undefined;
    /** 类型 *视频,音频,PDF,图片,文本* */
    type: string;
    /** 内容 *文本类型是时使用* */
    content?: string | undefined;
    /** 时长 *单位：秒，视频/音频类型是时使用* */
    duration?: number | undefined;
    /** 来源 */
    source?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 宣教类型名称 */
    repositoryHealtheducationTypeName?: string | undefined;
    /** 宣教类型序列 */
    repositoryHealtheducationTypeSequence?: number;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 附件信息 */
    files?: RepositoryHealtheducationDetailViewItem[] | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

export class RepositoryHealtheducationDetailViewItem implements IRepositoryHealtheducationDetailViewItem {
    /** 标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
    /** 文件路径 */
    path?: string | undefined;
    /** url */
    url?: string | undefined;
    /** 序列 */
    sequence?: number;

    constructor(data?: IRepositoryHealtheducationDetailViewItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.extension = _data["extension"];
            this.length = _data["length"];
            this.path = _data["path"];
            this.url = _data["url"];
            this.sequence = _data["sequence"];
        }
    }

    static fromJS(data: any): RepositoryHealtheducationDetailViewItem {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationDetailViewItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["extension"] = this.extension;
        data["length"] = this.length;
        data["path"] = this.path;
        data["url"] = this.url;
        data["sequence"] = this.sequence;
        return data;
    }
}

export interface IRepositoryHealtheducationDetailViewItem {
    /** 标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
    /** 文件路径 */
    path?: string | undefined;
    /** url */
    url?: string | undefined;
    /** 序列 */
    sequence?: number;
}

/** Reponse */
export class Result implements IResult {
    /** 返回结果(true,false) */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 相关的链接地址 */
    url?: string | undefined;
    count?: number;
    /** 数据 */
    data?: any | undefined;

    constructor(data?: IResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.url = _data["url"];
            this.count = _data["count"];
            this.data = _data["data"];
        }
    }

    static fromJS(data: any): Result {
        data = typeof data === 'object' ? data : {};
        let result = new Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["url"] = this.url;
        data["count"] = this.count;
        data["data"] = this.data;
        return data;
    }
}

/** Reponse */
export interface IResult {
    /** 返回结果(true,false) */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 相关的链接地址 */
    url?: string | undefined;
    count?: number;
    /** 数据 */
    data?: any | undefined;
}

/** 项目清单 */
export class RoomItemList implements IRoomItemList {
    /** 标识 */
    id?: string | undefined;
    /** 种类 *[项目分类标识](项目分类)* */
    roomItemTypeId?: string | undefined;
    /** 项目名称 *○同一个`room_item_type_id`下不允许重复* */
    name?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** 过期预警提醒(天) *0:不预警,离过期日期还有多少天* */
    warningDay?: number;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位，值>0* */
    conversionRate?: number;
    /** 售价 */
    sellingPrice?: number;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;
    /** 是否后收费 *0:否,1:是* */
    afterCharge?: number | undefined;
    /** 是否进行收费 *0:否,1:是* */
    inCharge?: number | undefined;
    /** 收费统计分类 `DIC.COST.TYPE` */
    costType?: string | undefined;
    /** 扣减来源 *0:科室库存,1:个人药库* */
    deductionSource?: number;
    /** 库存上限预警阈值 */
    maximum?: number | undefined;
    /** 库存下限预警阈值 *0:不预警* */
    minimum?: number | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商 `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 是否库存扣减0,1 */
    inventory?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    roomItemTypes?: RoomItemType;

    constructor(data?: IRoomItemList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.roomItemTypeId = _data["roomItemTypeId"];
            this.name = _data["name"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.shortName = _data["shortName"];
            this.nameGoods = _data["nameGoods"];
            this.model = _data["model"];
            this.spec = _data["spec"];
            this.origin = _data["origin"];
            this.dealer = _data["dealer"];
            this.warningDay = _data["warningDay"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitBase = _data["unitBase"];
            this.conversionRate = _data["conversionRate"];
            this.sellingPrice = _data["sellingPrice"];
            this.batchManage = _data["batchManage"];
            this.afterCharge = _data["afterCharge"];
            this.inCharge = _data["inCharge"];
            this.costType = _data["costType"];
            this.deductionSource = _data["deductionSource"];
            this.maximum = _data["maximum"];
            this.minimum = _data["minimum"];
            this.usageMode = _data["usageMode"];
            this.manufacturer = _data["manufacturer"];
            this.suppler = _data["suppler"];
            this.inventory = _data["inventory"];
            this.enabled = _data["enabled"];
            this.commonTerms = _data["commonTerms"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.roomItemTypes = _data["roomItemTypes"] ? RoomItemType.fromJS(_data["roomItemTypes"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomItemList {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["roomItemTypeId"] = this.roomItemTypeId;
        data["name"] = this.name;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["shortName"] = this.shortName;
        data["nameGoods"] = this.nameGoods;
        data["model"] = this.model;
        data["spec"] = this.spec;
        data["origin"] = this.origin;
        data["dealer"] = this.dealer;
        data["warningDay"] = this.warningDay;
        data["unitLevel1"] = this.unitLevel1;
        data["unitBase"] = this.unitBase;
        data["conversionRate"] = this.conversionRate;
        data["sellingPrice"] = this.sellingPrice;
        data["batchManage"] = this.batchManage;
        data["afterCharge"] = this.afterCharge;
        data["inCharge"] = this.inCharge;
        data["costType"] = this.costType;
        data["deductionSource"] = this.deductionSource;
        data["maximum"] = this.maximum;
        data["minimum"] = this.minimum;
        data["usageMode"] = this.usageMode;
        data["manufacturer"] = this.manufacturer;
        data["suppler"] = this.suppler;
        data["inventory"] = this.inventory;
        data["enabled"] = this.enabled;
        data["commonTerms"] = this.commonTerms;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["roomItemTypes"] = this.roomItemTypes ? this.roomItemTypes.toJSON() : <any>undefined;
        return data;
    }
}

/** 项目清单 */
export interface IRoomItemList {
    /** 标识 */
    id?: string | undefined;
    /** 种类 *[项目分类标识](项目分类)* */
    roomItemTypeId?: string | undefined;
    /** 项目名称 *○同一个`room_item_type_id`下不允许重复* */
    name?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** 过期预警提醒(天) *0:不预警,离过期日期还有多少天* */
    warningDay?: number;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位，值>0* */
    conversionRate?: number;
    /** 售价 */
    sellingPrice?: number;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;
    /** 是否后收费 *0:否,1:是* */
    afterCharge?: number | undefined;
    /** 是否进行收费 *0:否,1:是* */
    inCharge?: number | undefined;
    /** 收费统计分类 `DIC.COST.TYPE` */
    costType?: string | undefined;
    /** 扣减来源 *0:科室库存,1:个人药库* */
    deductionSource?: number;
    /** 库存上限预警阈值 */
    maximum?: number | undefined;
    /** 库存下限预警阈值 *0:不预警* */
    minimum?: number | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商 `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 是否库存扣减0,1 */
    inventory?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    roomItemTypes?: RoomItemType;
}

/** 项目分类 */
export class RoomItemType implements IRoomItemType {
    /** 标识 */
    id?: string | undefined;
    /** 项目名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 项目编码 *示例：consumable,consumable.dialyzer* *○同一个`parent_id`下不允许重复,前缀继承父节点以点隔开* */
    code?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 *说明* */
    remark?: string | undefined;
    /** 系统内置0,1 */
    system?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRoomItemType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.parentId = _data["parentId"];
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.system = _data["system"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomItemType {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["parentId"] = this.parentId;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["system"] = this.system;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 项目分类 */
export interface IRoomItemType {
    /** 标识 */
    id?: string | undefined;
    /** 项目名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 项目编码 *示例：consumable,consumable.dialyzer* *○同一个`parent_id`下不允许重复,前缀继承父节点以点隔开* */
    code?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 *说明* */
    remark?: string | undefined;
    /** 系统内置0,1 */
    system?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 问卷调查模板 */
export class TmplQuestionnaire implements ITmplQuestionnaire {
    /** 标识 */
    id?: string | undefined;
    /** 模板类型 *评估,问卷* */
    type?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 版本 */
    version?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ITmplQuestionnaire) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"];
            this.name = _data["name"];
            this.version = _data["version"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): TmplQuestionnaire {
        data = typeof data === 'object' ? data : {};
        let result = new TmplQuestionnaire();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["name"] = this.name;
        data["version"] = this.version;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 问卷调查模板 */
export interface ITmplQuestionnaire {
    /** 标识 */
    id?: string | undefined;
    /** 模板类型 *评估,问卷* */
    type?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 版本 */
    version?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 问卷调查条目模板 */
export class TmplQuestionnaireItem implements ITmplQuestionnaireItem {
    /** 标识 */
    id?: string | undefined;
    /** [问卷调查模板标识](问卷调查模板) */
    tmplQuestionnaireId?: string | undefined;
    /** 题型 *单选题,多选题,填空题,问答题 即分组* */
    type?: string | undefined;
    /** 名称(题目) */
    name?: string | undefined;
    /** 图片路径 */
    imgUrl?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 必填0,1 */
    required?: number;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    tmplQuestionnaires?: TmplQuestionnaire;

    constructor(data?: ITmplQuestionnaireItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.tmplQuestionnaireId = _data["tmplQuestionnaireId"];
            this.type = _data["type"];
            this.name = _data["name"];
            this.imgUrl = _data["imgUrl"];
            this.unit = _data["unit"];
            this.required = _data["required"];
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.tmplQuestionnaires = _data["tmplQuestionnaires"] ? TmplQuestionnaire.fromJS(_data["tmplQuestionnaires"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TmplQuestionnaireItem {
        data = typeof data === 'object' ? data : {};
        let result = new TmplQuestionnaireItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tmplQuestionnaireId"] = this.tmplQuestionnaireId;
        data["type"] = this.type;
        data["name"] = this.name;
        data["imgUrl"] = this.imgUrl;
        data["unit"] = this.unit;
        data["required"] = this.required;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["tmplQuestionnaires"] = this.tmplQuestionnaires ? this.tmplQuestionnaires.toJSON() : <any>undefined;
        return data;
    }
}

/** 问卷调查条目模板 */
export interface ITmplQuestionnaireItem {
    /** 标识 */
    id?: string | undefined;
    /** [问卷调查模板标识](问卷调查模板) */
    tmplQuestionnaireId?: string | undefined;
    /** 题型 *单选题,多选题,填空题,问答题 即分组* */
    type?: string | undefined;
    /** 名称(题目) */
    name?: string | undefined;
    /** 图片路径 */
    imgUrl?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 必填0,1 */
    required?: number;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    tmplQuestionnaires?: TmplQuestionnaire;
}

/** 问卷调查条目详情模板 */
export class TmplQuestionnaireItemDetail implements ITmplQuestionnaireItemDetail {
    /** 标识 */
    id?: string | undefined;
    /** [问卷调查条目模板标识](问卷调查条目模板) */
    tmplQuestionnaireItemId?: string | undefined;
    /** 选项 */
    option?: string | undefined;
    /** 分数 */
    score?: number | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    tmplQuestionnaireItems?: TmplQuestionnaireItem;

    constructor(data?: ITmplQuestionnaireItemDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.tmplQuestionnaireItemId = _data["tmplQuestionnaireItemId"];
            this.option = _data["option"];
            this.score = _data["score"];
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.tmplQuestionnaireItems = _data["tmplQuestionnaireItems"] ? TmplQuestionnaireItem.fromJS(_data["tmplQuestionnaireItems"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TmplQuestionnaireItemDetail {
        data = typeof data === 'object' ? data : {};
        let result = new TmplQuestionnaireItemDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tmplQuestionnaireItemId"] = this.tmplQuestionnaireItemId;
        data["option"] = this.option;
        data["score"] = this.score;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["tmplQuestionnaireItems"] = this.tmplQuestionnaireItems ? this.tmplQuestionnaireItems.toJSON() : <any>undefined;
        return data;
    }
}

/** 问卷调查条目详情模板 */
export interface ITmplQuestionnaireItemDetail {
    /** 标识 */
    id?: string | undefined;
    /** [问卷调查条目模板标识](问卷调查条目模板) */
    tmplQuestionnaireItemId?: string | undefined;
    /** 选项 */
    option?: string | undefined;
    /** 分数 */
    score?: number | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    tmplQuestionnaireItems?: TmplQuestionnaireItem;
}

export class TmplQuestionnaireItemEditModel implements ITmplQuestionnaireItemEditModel {
    /** 标识 */
    id?: string | undefined;
    /** [问卷调查模板标识](问卷调查模板) */
    tmplQuestionnaireId?: string | undefined;
    /** 题型 *单选题,多选题,填空题,问答题 即分组* */
    type?: string | undefined;
    /** 名称(题目) */
    name?: string | undefined;
    /** 图片路径 */
    imgUrl?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 必填0,1 */
    required?: number;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 问卷调查条目选项 */
    tmplQuestionnaireItemDetails?: TmplQuestionnaireItemDetail[] | undefined;

    constructor(data?: ITmplQuestionnaireItemEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.tmplQuestionnaireId = _data["tmplQuestionnaireId"];
            this.type = _data["type"];
            this.name = _data["name"];
            this.imgUrl = _data["imgUrl"];
            this.unit = _data["unit"];
            this.required = _data["required"];
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["tmplQuestionnaireItemDetails"])) {
                this.tmplQuestionnaireItemDetails = [] as any;
                for (let item of _data["tmplQuestionnaireItemDetails"])
                    this.tmplQuestionnaireItemDetails!.push(TmplQuestionnaireItemDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TmplQuestionnaireItemEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new TmplQuestionnaireItemEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tmplQuestionnaireId"] = this.tmplQuestionnaireId;
        data["type"] = this.type;
        data["name"] = this.name;
        data["imgUrl"] = this.imgUrl;
        data["unit"] = this.unit;
        data["required"] = this.required;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        if (Array.isArray(this.tmplQuestionnaireItemDetails)) {
            data["tmplQuestionnaireItemDetails"] = [];
            for (let item of this.tmplQuestionnaireItemDetails)
                data["tmplQuestionnaireItemDetails"].push(item.toJSON());
        }
        return data;
    }
}

export interface ITmplQuestionnaireItemEditModel {
    /** 标识 */
    id?: string | undefined;
    /** [问卷调查模板标识](问卷调查模板) */
    tmplQuestionnaireId?: string | undefined;
    /** 题型 *单选题,多选题,填空题,问答题 即分组* */
    type?: string | undefined;
    /** 名称(题目) */
    name?: string | undefined;
    /** 图片路径 */
    imgUrl?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 必填0,1 */
    required?: number;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 问卷调查条目选项 */
    tmplQuestionnaireItemDetails?: TmplQuestionnaireItemDetail[] | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}
