/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import {ServiceProxyBase} from './ServiceProxyBase'
import axios, { AxiosError, type AxiosInstance, type AxiosRequestConfig, type AxiosResponse, type CancelToken } from 'axios';

import dayjs from 'dayjs';

export class CureChangeBedServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 换床记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureChangeBedResult> {
        let url_ = this.baseUrl + "/api/CureChangeBed/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter(_response));
        });
    }

    protected processFilter(response: AxiosResponse): Promise<CureChangeBedResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureChangeBedResult.fromJS(resultData200);
            return Promise.resolve<CureChangeBedResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureChangeBedResult>(null as any);
    }

    /**
     * 换床记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureChangeBed(body: CureChangeBedViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureChangeBed";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureChangeBed(_response));
        });
    }

    protected processCureChangeBed(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 换床记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureChangeBed2(id: string, body: CureChangeBedViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureChangeBed/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureChangeBed2(_response));
        });
    }

    protected processCureChangeBed2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 换床记录 -- 根据Id删除数据
     * @return Success
     */
    delete(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureChangeBed/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete(_response));
        });
    }

    protected processDelete(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureComplicationServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析并发症 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureComplicationGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureComplicationResultEntry> {
        let url_ = this.baseUrl + "/api/CureComplication/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureComplicationGET(_response));
        });
    }

    protected processCureComplicationGET(response: AxiosResponse): Promise<CureComplicationResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureComplicationResultEntry.fromJS(resultData200);
            return Promise.resolve<CureComplicationResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureComplicationResultEntry>(null as any);
    }

    /**
     * 透析并发症 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureComplicationPOST(id: string, body: CureComplicationViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureComplication/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureComplicationPOST(_response));
        });
    }

    protected processCureComplicationPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析并发症 -- 根据患者Id查询数据
     * @param patientId 患者Id
     * @return Success
     */
    byPatientId(patientId: string , cancelToken?: CancelToken | undefined): Promise<ComplicationCureMiddleViewResult> {
        let url_ = this.baseUrl + "/api/CureComplication/ByPatientId/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processByPatientId(_response));
        });
    }

    protected processByPatientId(response: AxiosResponse): Promise<ComplicationCureMiddleViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ComplicationCureMiddleViewResult.fromJS(resultData200);
            return Promise.resolve<ComplicationCureMiddleViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ComplicationCureMiddleViewResult>(null as any);
    }

    /**
     * 透析并发症 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureComplicationPOST2(body: CureComplicationViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureComplication";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureComplicationPOST2(_response));
        });
    }

    protected processCureComplicationPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析并发症 -- 根据Id删除数据
     * @return Success
     */
    delete2(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureComplication/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete2(_response));
        });
    }

    protected processDelete2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureComplicationCauseServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析并发症原因 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureComplicationCauseGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureComplicationCauseResultEntry> {
        let url_ = this.baseUrl + "/api/CureComplicationCause/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureComplicationCauseGET(_response));
        });
    }

    protected processCureComplicationCauseGET(response: AxiosResponse): Promise<CureComplicationCauseResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureComplicationCauseResultEntry.fromJS(resultData200);
            return Promise.resolve<CureComplicationCauseResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureComplicationCauseResultEntry>(null as any);
    }

    /**
     * 透析并发症原因 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureComplicationCausePOST(id: string, body: CureComplicationCauseViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureComplicationCause/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureComplicationCausePOST(_response));
        });
    }

    protected processCureComplicationCausePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析并发症原因 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter2(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureComplicationCauseResult> {
        let url_ = this.baseUrl + "/api/CureComplicationCause/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter2(_response));
        });
    }

    protected processFilter2(response: AxiosResponse): Promise<CureComplicationCauseResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureComplicationCauseResult.fromJS(resultData200);
            return Promise.resolve<CureComplicationCauseResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureComplicationCauseResult>(null as any);
    }

    /**
     * 透析并发症原因 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureComplicationCausePOST2(body: CureComplicationCauseViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureComplicationCause";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureComplicationCausePOST2(_response));
        });
    }

    protected processCureComplicationCausePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析并发症原因 -- 根据Id删除数据
     * @return Success
     */
    delete3(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureComplicationCause/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete3(_response));
        });
    }

    protected processDelete3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureComplicationDisposeServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析并发症处理 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureComplicationDisposeGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureComplicationDisposeResultEntry> {
        let url_ = this.baseUrl + "/api/CureComplicationDispose/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureComplicationDisposeGET(_response));
        });
    }

    protected processCureComplicationDisposeGET(response: AxiosResponse): Promise<CureComplicationDisposeResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureComplicationDisposeResultEntry.fromJS(resultData200);
            return Promise.resolve<CureComplicationDisposeResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureComplicationDisposeResultEntry>(null as any);
    }

    /**
     * 透析并发症处理 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureComplicationDisposePOST(id: string, body: CureComplicationDisposeViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureComplicationDispose/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureComplicationDisposePOST(_response));
        });
    }

    protected processCureComplicationDisposePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析并发症处理 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter3(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureComplicationDisposeResult> {
        let url_ = this.baseUrl + "/api/CureComplicationDispose/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter3(_response));
        });
    }

    protected processFilter3(response: AxiosResponse): Promise<CureComplicationDisposeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureComplicationDisposeResult.fromJS(resultData200);
            return Promise.resolve<CureComplicationDisposeResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureComplicationDisposeResult>(null as any);
    }

    /**
     * 透析并发症处理 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureComplicationDisposePOST2(body: CureComplicationDisposeViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureComplicationDispose";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureComplicationDisposePOST2(_response));
        });
    }

    protected processCureComplicationDisposePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析并发症处理 -- 根据Id删除数据
     * @return Success
     */
    delete4(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureComplicationDispose/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete4(_response));
        });
    }

    protected processDelete4(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureComplicationFileServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析并发症照片 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter4(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureComplicationFileResult> {
        let url_ = this.baseUrl + "/api/CureComplicationFile/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter4(_response));
        });
    }

    protected processFilter4(response: AxiosResponse): Promise<CureComplicationFileResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureComplicationFileResult.fromJS(resultData200);
            return Promise.resolve<CureComplicationFileResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureComplicationFileResult>(null as any);
    }

    /**
     * 透析并发症照片 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureComplicationFile(body: CureComplicationFileViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureComplicationFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureComplicationFile(_response));
        });
    }

    protected processCureComplicationFile(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析并发症照片 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureComplicationFile2(id: string, body: CureComplicationFileViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureComplicationFile/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureComplicationFile2(_response));
        });
    }

    protected processCureComplicationFile2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析并发症照片 -- 根据Id删除数据
     * @return Success
     */
    delete5(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureComplicationFile/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete5(_response));
        });
    }

    protected processDelete5(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class ComplicationCureMiddleView implements IComplicationCureMiddleView {
    /** 发生时间 */
    occurredTime!: dayjs.Dayjs;
    /** 透析记录标识 */
    cureRecordId!: string;
    /** 并发症 */
    name!: string;
    /** 处理 */
    dispose!: ComplicationItem[];
    /** 原因 */
    cause!: ComplicationItem[];
    /** 备注 */
    remark?: string | undefined;
    /** 文件列表 */
    complicationFiles?: ComplicationFileItem[] | undefined;
    /** 透中事件记录标识 */
    cureComplicationId?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 操作者标识 */
    operatorId?: string | undefined;
    /** 操作者姓名 */
    operatorName?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IComplicationCureMiddleView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.dispose = [];
            this.cause = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.occurredTime = _data["occurredTime"] ? dayjs(_data["occurredTime"].toString()) : <any>undefined;
            this.cureRecordId = _data["cureRecordId"];
            this.name = _data["name"];
            if (Array.isArray(_data["dispose"])) {
                this.dispose = [] as any;
                for (let item of _data["dispose"])
                    this.dispose!.push(ComplicationItem.fromJS(item));
            }
            if (Array.isArray(_data["cause"])) {
                this.cause = [] as any;
                for (let item of _data["cause"])
                    this.cause!.push(ComplicationItem.fromJS(item));
            }
            this.remark = _data["remark"];
            if (Array.isArray(_data["complicationFiles"])) {
                this.complicationFiles = [] as any;
                for (let item of _data["complicationFiles"])
                    this.complicationFiles!.push(ComplicationFileItem.fromJS(item));
            }
            this.cureComplicationId = _data["cureComplicationId"];
            this.sn = _data["sn"];
            this.patientId = _data["patientId"];
            this.surnameCode = _data["surnameCode"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.operatorId = _data["operatorId"];
            this.operatorName = _data["operatorName"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ComplicationCureMiddleView {
        data = typeof data === 'object' ? data : {};
        let result = new ComplicationCureMiddleView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["occurredTime"] = this.occurredTime ? this.occurredTime.toISOString() : <any>undefined;
        data["cureRecordId"] = this.cureRecordId;
        data["name"] = this.name;
        if (Array.isArray(this.dispose)) {
            data["dispose"] = [];
            for (let item of this.dispose)
                data["dispose"].push(item.toJSON());
        }
        if (Array.isArray(this.cause)) {
            data["cause"] = [];
            for (let item of this.cause)
                data["cause"].push(item.toJSON());
        }
        data["remark"] = this.remark;
        if (Array.isArray(this.complicationFiles)) {
            data["complicationFiles"] = [];
            for (let item of this.complicationFiles)
                data["complicationFiles"].push(item.toJSON());
        }
        data["cureComplicationId"] = this.cureComplicationId;
        data["sn"] = this.sn;
        data["patientId"] = this.patientId;
        data["surnameCode"] = this.surnameCode;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["operatorId"] = this.operatorId;
        data["operatorName"] = this.operatorName;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IComplicationCureMiddleView {
    /** 发生时间 */
    occurredTime: dayjs.Dayjs;
    /** 透析记录标识 */
    cureRecordId: string;
    /** 并发症 */
    name: string;
    /** 处理 */
    dispose: ComplicationItem[];
    /** 原因 */
    cause: ComplicationItem[];
    /** 备注 */
    remark?: string | undefined;
    /** 文件列表 */
    complicationFiles?: ComplicationFileItem[] | undefined;
    /** 透中事件记录标识 */
    cureComplicationId?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 操作者标识 */
    operatorId?: string | undefined;
    /** 操作者姓名 */
    operatorName?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class ComplicationCureMiddleViewResult implements IComplicationCureMiddleViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ComplicationCureMiddleView[] | undefined;

    constructor(data?: IComplicationCureMiddleViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ComplicationCureMiddleView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ComplicationCureMiddleViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new ComplicationCureMiddleViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IComplicationCureMiddleViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ComplicationCureMiddleView[] | undefined;
}

export class ComplicationFileItem implements IComplicationFileItem {
    /** 文件标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 文件路径 */
    url?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;

    constructor(data?: IComplicationFileItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.url = _data["url"];
            this.extension = _data["extension"];
            this.length = _data["length"];
        }
    }

    static fromJS(data: any): ComplicationFileItem {
        data = typeof data === 'object' ? data : {};
        let result = new ComplicationFileItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["url"] = this.url;
        data["extension"] = this.extension;
        data["length"] = this.length;
        return data;
    }
}

export interface IComplicationFileItem {
    /** 文件标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 文件路径 */
    url?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
}

export class ComplicationItem implements IComplicationItem {
    /** 名称 */
    name?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IComplicationItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): ComplicationItem {
        data = typeof data === 'object' ? data : {};
        let result = new ComplicationItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["remark"] = this.remark;
        return data;
    }
}

export interface IComplicationItem {
    /** 名称 */
    name?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 换床记录 */
export class CureChangeBed implements ICureChangeBed {
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 原床位 */
    fromBedId?: string | undefined;
    /** 原床位 */
    fromBedName?: string | undefined;
    /** 现床位 */
    toBedId?: string | undefined;
    /** 现床位 */
    toBedName?: string | undefined;
    /** 原因 *如果是因为故障，反写到设备上* */
    cause?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    cureRecords?: CureRecord;

    constructor(data?: ICureChangeBed) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cureRecordId = _data["cureRecordId"];
            this.fromBedId = _data["fromBedId"];
            this.fromBedName = _data["fromBedName"];
            this.toBedId = _data["toBedId"];
            this.toBedName = _data["toBedName"];
            this.cause = _data["cause"];
            this.remark = _data["remark"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.cureRecords = _data["cureRecords"] ? CureRecord.fromJS(_data["cureRecords"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureChangeBed {
        data = typeof data === 'object' ? data : {};
        let result = new CureChangeBed();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cureRecordId"] = this.cureRecordId;
        data["fromBedId"] = this.fromBedId;
        data["fromBedName"] = this.fromBedName;
        data["toBedId"] = this.toBedId;
        data["toBedName"] = this.toBedName;
        data["cause"] = this.cause;
        data["remark"] = this.remark;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["cureRecords"] = this.cureRecords ? this.cureRecords.toJSON() : <any>undefined;
        return data;
    }
}

/** 换床记录 */
export interface ICureChangeBed {
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 原床位 */
    fromBedId?: string | undefined;
    /** 原床位 */
    fromBedName?: string | undefined;
    /** 现床位 */
    toBedId?: string | undefined;
    /** 现床位 */
    toBedName?: string | undefined;
    /** 原因 *如果是因为故障，反写到设备上* */
    cause?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    cureRecords?: CureRecord;
}

/** Reponse */
export class CureChangeBedResult implements ICureChangeBedResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureChangeBed[] | undefined;

    constructor(data?: ICureChangeBedResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureChangeBed.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureChangeBedResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureChangeBedResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureChangeBedResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureChangeBed[] | undefined;
}

/** 换床记录 (ViewModel) */
export class CureChangeBedViewModel implements ICureChangeBedViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId!: string;
    /** 原床位 */
    fromBedId!: string;
    /** 原床位 */
    fromBedName!: string;
    /** 现床位 */
    toBedId!: string;
    /** 现床位 */
    toBedName!: string;
    /** 原因 *如果是因为故障，反写到设备上* */
    cause!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureChangeBedViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.fromBedId = _data["fromBedId"];
            this.fromBedName = _data["fromBedName"];
            this.toBedId = _data["toBedId"];
            this.toBedName = _data["toBedName"];
            this.cause = _data["cause"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureChangeBedViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureChangeBedViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["fromBedId"] = this.fromBedId;
        data["fromBedName"] = this.fromBedName;
        data["toBedId"] = this.toBedId;
        data["toBedName"] = this.toBedName;
        data["cause"] = this.cause;
        data["remark"] = this.remark;
        return data;
    }
}

/** 换床记录 (ViewModel) */
export interface ICureChangeBedViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId: string;
    /** 原床位 */
    fromBedId: string;
    /** 原床位 */
    fromBedName: string;
    /** 现床位 */
    toBedId: string;
    /** 现床位 */
    toBedName: string;
    /** 原因 *如果是因为故障，反写到设备上* */
    cause: string;
    /** 备注 */
    remark?: string | undefined;
}

/** 透析并发症 */
export class CureComplication implements ICureComplication {
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 发生时间 */
    occurredTime?: dayjs.Dayjs;
    /** 操作者标识 */
    operatorId?: string | undefined;
    /** 操作者姓名 */
    operatorName?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    cureRecords?: CureRecord;

    constructor(data?: ICureComplication) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cureRecordId = _data["cureRecordId"];
            this.occurredTime = _data["occurredTime"] ? dayjs(_data["occurredTime"].toString()) : <any>undefined;
            this.operatorId = _data["operatorId"];
            this.operatorName = _data["operatorName"];
            this.name = _data["name"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.cureRecords = _data["cureRecords"] ? CureRecord.fromJS(_data["cureRecords"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureComplication {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplication();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cureRecordId"] = this.cureRecordId;
        data["occurredTime"] = this.occurredTime ? this.occurredTime.toISOString() : <any>undefined;
        data["operatorId"] = this.operatorId;
        data["operatorName"] = this.operatorName;
        data["name"] = this.name;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["cureRecords"] = this.cureRecords ? this.cureRecords.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析并发症 */
export interface ICureComplication {
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 发生时间 */
    occurredTime?: dayjs.Dayjs;
    /** 操作者标识 */
    operatorId?: string | undefined;
    /** 操作者姓名 */
    operatorName?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    cureRecords?: CureRecord;
}

/** 透析并发症原因 */
export class CureComplicationCause implements ICureComplicationCause {
    /** 标识 */
    id?: string | undefined;
    /** [透析并发症标识](透析并发症) */
    cureComplicationId?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    cureComplications?: CureComplication;

    constructor(data?: ICureComplicationCause) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cureComplicationId = _data["cureComplicationId"];
            this.name = _data["name"];
            this.remark = _data["remark"];
            this.cureComplications = _data["cureComplications"] ? CureComplication.fromJS(_data["cureComplications"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureComplicationCause {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationCause();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cureComplicationId"] = this.cureComplicationId;
        data["name"] = this.name;
        data["remark"] = this.remark;
        data["cureComplications"] = this.cureComplications ? this.cureComplications.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析并发症原因 */
export interface ICureComplicationCause {
    /** 标识 */
    id?: string | undefined;
    /** [透析并发症标识](透析并发症) */
    cureComplicationId?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    cureComplications?: CureComplication;
}

/** Reponse */
export class CureComplicationCauseResult implements ICureComplicationCauseResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureComplicationCause[] | undefined;

    constructor(data?: ICureComplicationCauseResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureComplicationCause.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureComplicationCauseResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationCauseResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureComplicationCauseResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureComplicationCause[] | undefined;
}

/** Reponse */
export class CureComplicationCauseResultEntry implements ICureComplicationCauseResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureComplicationCause;

    constructor(data?: ICureComplicationCauseResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureComplicationCause.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureComplicationCauseResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationCauseResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureComplicationCauseResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureComplicationCause;
}

/** 透析并发症原因 (ViewModel) */
export class CureComplicationCauseViewModel implements ICureComplicationCauseViewModel {
    /** [透析并发症标识](透析并发症Id) */
    cureComplicationId!: string;
    /** 名称 */
    name!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureComplicationCauseViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureComplicationId = _data["cureComplicationId"];
            this.name = _data["name"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureComplicationCauseViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationCauseViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureComplicationId"] = this.cureComplicationId;
        data["name"] = this.name;
        data["remark"] = this.remark;
        return data;
    }
}

/** 透析并发症原因 (ViewModel) */
export interface ICureComplicationCauseViewModel {
    /** [透析并发症标识](透析并发症Id) */
    cureComplicationId: string;
    /** 名称 */
    name: string;
    /** 备注 */
    remark?: string | undefined;
}

/** 透析并发症处理 */
export class CureComplicationDispose implements ICureComplicationDispose {
    /** 标识 */
    id?: string | undefined;
    /** [透析并发症标识](透析并发症) */
    cureComplicationId?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    cureComplications?: CureComplication;

    constructor(data?: ICureComplicationDispose) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cureComplicationId = _data["cureComplicationId"];
            this.name = _data["name"];
            this.remark = _data["remark"];
            this.cureComplications = _data["cureComplications"] ? CureComplication.fromJS(_data["cureComplications"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureComplicationDispose {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationDispose();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cureComplicationId"] = this.cureComplicationId;
        data["name"] = this.name;
        data["remark"] = this.remark;
        data["cureComplications"] = this.cureComplications ? this.cureComplications.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析并发症处理 */
export interface ICureComplicationDispose {
    /** 标识 */
    id?: string | undefined;
    /** [透析并发症标识](透析并发症) */
    cureComplicationId?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    cureComplications?: CureComplication;
}

/** Reponse */
export class CureComplicationDisposeResult implements ICureComplicationDisposeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureComplicationDispose[] | undefined;

    constructor(data?: ICureComplicationDisposeResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureComplicationDispose.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureComplicationDisposeResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationDisposeResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureComplicationDisposeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureComplicationDispose[] | undefined;
}

/** Reponse */
export class CureComplicationDisposeResultEntry implements ICureComplicationDisposeResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureComplicationDispose;

    constructor(data?: ICureComplicationDisposeResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureComplicationDispose.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureComplicationDisposeResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationDisposeResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureComplicationDisposeResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureComplicationDispose;
}

/** 透析并发症处理 (ViewModel) */
export class CureComplicationDisposeViewModel implements ICureComplicationDisposeViewModel {
    /** [透析并发症标识](透析并发症Id) */
    cureComplicationId!: string;
    /** 名称 */
    name!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureComplicationDisposeViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureComplicationId = _data["cureComplicationId"];
            this.name = _data["name"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureComplicationDisposeViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationDisposeViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureComplicationId"] = this.cureComplicationId;
        data["name"] = this.name;
        data["remark"] = this.remark;
        return data;
    }
}

/** 透析并发症处理 (ViewModel) */
export interface ICureComplicationDisposeViewModel {
    /** [透析并发症标识](透析并发症Id) */
    cureComplicationId: string;
    /** 名称 */
    name: string;
    /** 备注 */
    remark?: string | undefined;
}

/** 透析并发症照片 */
export class CureComplicationFile implements ICureComplicationFile {
    /** 标识 */
    id?: string | undefined;
    /** [透析并发症标识](透析并发症) */
    cureComplicationId?: string | undefined;
    /** [文件标识](文件列表) */
    hfsFilesId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    cureComplications?: CureComplication;
    hfsFiless?: HfsFiles;

    constructor(data?: ICureComplicationFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cureComplicationId = _data["cureComplicationId"];
            this.hfsFilesId = _data["hfsFilesId"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.cureComplications = _data["cureComplications"] ? CureComplication.fromJS(_data["cureComplications"]) : <any>undefined;
            this.hfsFiless = _data["hfsFiless"] ? HfsFiles.fromJS(_data["hfsFiless"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureComplicationFile {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cureComplicationId"] = this.cureComplicationId;
        data["hfsFilesId"] = this.hfsFilesId;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["cureComplications"] = this.cureComplications ? this.cureComplications.toJSON() : <any>undefined;
        data["hfsFiless"] = this.hfsFiless ? this.hfsFiless.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析并发症照片 */
export interface ICureComplicationFile {
    /** 标识 */
    id?: string | undefined;
    /** [透析并发症标识](透析并发症) */
    cureComplicationId?: string | undefined;
    /** [文件标识](文件列表) */
    hfsFilesId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    cureComplications?: CureComplication;
    hfsFiless?: HfsFiles;
}

/** Reponse */
export class CureComplicationFileResult implements ICureComplicationFileResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureComplicationFile[] | undefined;

    constructor(data?: ICureComplicationFileResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureComplicationFile.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureComplicationFileResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationFileResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureComplicationFileResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureComplicationFile[] | undefined;
}

/** 透析并发症照片 (ViewModel) */
export class CureComplicationFileViewModel implements ICureComplicationFileViewModel {
    /** [透析并发症标识](透析并发症Id) */
    cureComplicationId!: string;
    /** [文件标识](文件列表Id) */
    hfsFilesId!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureComplicationFileViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureComplicationId = _data["cureComplicationId"];
            this.hfsFilesId = _data["hfsFilesId"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureComplicationFileViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationFileViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureComplicationId"] = this.cureComplicationId;
        data["hfsFilesId"] = this.hfsFilesId;
        data["remark"] = this.remark;
        return data;
    }
}

/** 透析并发症照片 (ViewModel) */
export interface ICureComplicationFileViewModel {
    /** [透析并发症标识](透析并发症Id) */
    cureComplicationId: string;
    /** [文件标识](文件列表Id) */
    hfsFilesId: string;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class CureComplicationResultEntry implements ICureComplicationResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureComplication;

    constructor(data?: ICureComplicationResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureComplication.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureComplicationResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureComplicationResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureComplication;
}

/** 透析并发症 (ViewModel) */
export class CureComplicationViewModel implements ICureComplicationViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId!: string;
    /** 发生时间 */
    occurredTime!: dayjs.Dayjs;
    /** 操作者标识 */
    operatorId!: string;
    /** 操作者姓名 */
    operatorName!: string;
    /** 名称 */
    name!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureComplicationViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.occurredTime = _data["occurredTime"] ? dayjs(_data["occurredTime"].toString()) : <any>undefined;
            this.operatorId = _data["operatorId"];
            this.operatorName = _data["operatorName"];
            this.name = _data["name"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureComplicationViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["occurredTime"] = this.occurredTime ? this.occurredTime.toISOString() : <any>undefined;
        data["operatorId"] = this.operatorId;
        data["operatorName"] = this.operatorName;
        data["name"] = this.name;
        data["remark"] = this.remark;
        return data;
    }
}

/** 透析并发症 (ViewModel) */
export interface ICureComplicationViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId: string;
    /** 发生时间 */
    occurredTime: dayjs.Dayjs;
    /** 操作者标识 */
    operatorId: string;
    /** 操作者姓名 */
    operatorName: string;
    /** 名称 */
    name: string;
    /** 备注 */
    remark?: string | undefined;
}

/** 透析记录 */
export class CureRecord implements ICureRecord {
    /** 标识 */
    id?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 透析机标识 */
    dialysisMachineId?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineType?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineTypeLabel?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel?: string | undefined;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet?: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路) */
    patientVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientVascularAccessType?: string | undefined;
    /** [血管通路](患者血管通路) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessType?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换方式 */
    rfmLabel?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 治疗流程状态 `DIC.DIALYSIS.STATUS` *已签到,上机准备,治疗中,已下机,已结束* */
    status?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前体重方式 */
    beforeWeightModeLabel?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 净脱水量 *ml Ultrafiltration Complete* */
    ufc?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后体重方式 */
    afterWeightModeLabel?: string | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 称重脱水量 *ml* */
    ufvWeight?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢* */
    beforeBpPosition?: string | undefined;
    /** 透前血压测量位置 */
    beforeBpPositionLabel?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透后血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢* */
    afterBpPosition?: string | undefined;
    /** 透后血压测量位置 */
    afterBpPositionLabel?: string | undefined;
    /** 透后收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 透后舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 透后脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 透前体重时间 */
    timeBeforeWeight?: dayjs.Dayjs | undefined;
    /** 透前血压时间 */
    timeBeforeBp?: dayjs.Dayjs | undefined;
    /** 医生制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 方案是否制定0,1 */
    enact?: number | undefined;
    /** 护士确认方案时间 */
    timeCheckNurse?: dayjs.Dayjs | undefined;
    /** 方案是否通过0,1 */
    check?: number | undefined;
    /** 透前评估时间 */
    timeAssementBefore?: dayjs.Dayjs | undefined;
    /** 穿刺时间 */
    timeOn?: dayjs.Dayjs | undefined;
    /** 交叉核对时间 */
    timeVerify?: dayjs.Dayjs | undefined;
    /** 首次监测时间 */
    timeFirstMonitor?: dayjs.Dayjs | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 消毒时间 */
    timeDisinfect?: dayjs.Dayjs | undefined;
    /** 透后评估时间 */
    timeAssementAfter?: dayjs.Dayjs | undefined;
    /** 透后体重时间 */
    timeAfterWeight?: dayjs.Dayjs | undefined;
    /** 透后血压时间 */
    timeAfterBp?: dayjs.Dayjs | undefined;
    /** 透后小结时间 */
    timeAfterSummary?: dayjs.Dayjs | undefined;
    /** 透析评估时间 */
    timeAssement?: dayjs.Dayjs | undefined;
    /** 透析评估医护标识 */
    assementUserId?: string | undefined;
    /** 透析评估医护姓名 */
    assementUserName?: string | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 制定方案医生标识 */
    enactDoctorId?: string | undefined;
    /** 制定方案医生姓名 */
    enactDoctorName?: string | undefined;
    /** 确认方案护士标识 */
    checkNurseId?: string | undefined;
    /** 确认方案护士姓名 */
    checkNurseName?: string | undefined;
    /** 透前评估护士标识 */
    assementBeforeNurseId?: string | undefined;
    /** 透前评估护士姓名 */
    assementBeforeNurseName?: string | undefined;
    /** 穿刺方法 `DIC.DIALYSIS.PUNCTURE.METHOD` */
    punctureMethod?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 上机体温 */
    onTemp?: number | undefined;
    /** 穿刺护士标识 */
    punctureNurseId?: string | undefined;
    /** 穿刺护士姓名 */
    punctureNurseName?: string | undefined;
    /** 核对护士标识 */
    verifyNurseId?: string | undefined;
    /** 核对护士姓名 */
    verifyNurseName?: string | undefined;
    /** 核对是否通过0,1 */
    verify?: number | undefined;
    /** 下机护士标识 */
    offNurseId?: string | undefined;
    /** 下机护士姓名 */
    offNurseName?: string | undefined;
    /** 下机体温 */
    offTemp?: number | undefined;
    /** 下机呼吸 */
    offBreathe?: number | undefined;
    /** 透后评估护士标识 */
    assementAfterNurseId?: string | undefined;
    /** 透后评估护士姓名 */
    assementAfterNurseName?: string | undefined;
    /** 透后小结护士标识 */
    summaryAfterNurseId?: string | undefined;
    /** 透后小结护士姓名 */
    summaryAfterNurseName?: string | undefined;
    /** 是否提前下机0,1 *判断标准：提前半个小时以上下机* */
    offEarly?: number | undefined;
    /** 提前下机原因 *字典模板* `DIC.DIALYSIS.OFFEARLY.TMPL` */
    offEarlyCause?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    source?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 病区 *住院的* */
    ward?: string | undefined;
    /** 床位 *住院的* */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 下次透析建议 */
    suggestionNext?: string | undefined;
    /** 取消透析原因 *在交叉核对之前都可以取消透析* */
    cancelReason?: string | undefined;
    /** 管床护士标识 */
    bedNurseId?: string | undefined;
    /** 管床护士姓名 */
    bedNurseName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 是否单超0,1 */
    iuf?: number;
    /** 单超方式 */
    iufMode?: string | undefined;
    /** 单超时间 *h* */
    iufHour?: number | undefined;
    /** 单超量 */
    iufValue?: number | undefined;
    /** 单超开始时间 */
    iufStartTime?: dayjs.Dayjs | undefined;
    /** 患者处方id */
    patientPrescriptionId?: string | undefined;
    /** 置管护士标识 */
    placementNurseId?: string | undefined;
    /** 置管护士姓名 */
    placementNurseName?: string | undefined;
    /** 质控护士标识 */
    qualityNurseId?: string | undefined;
    /** 质控护士姓名 */
    qualityNurseName?: string | undefined;
    /** 是否补录 */
    isReplenish?: number;
    /** 是否归档 */
    isArchive?: number;
    patients?: Patient;
    patientVascularAccesss?: PatientVascularAccess;
    patientOtherVascularAccesss?: PatientVascularAccess;

    constructor(data?: ICureRecord) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sn = _data["sn"];
            this.patientId = _data["patientId"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisMachineId = _data["dialysisMachineId"];
            this.dialysisMachineType = _data["dialysisMachineType"];
            this.dialysisMachineTypeLabel = _data["dialysisMachineTypeLabel"];
            this.dialysisMachineModel = _data["dialysisMachineModel"];
            this.dialysisMachineNo = _data["dialysisMachineNo"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.dialysisDurationSet = _data["dialysisDurationSet"];
            this.bestWeight = _data["bestWeight"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.patientVascularAccessType = _data["patientVascularAccessType"];
            this.patientOtherVascularAccessId = _data["patientOtherVascularAccessId"];
            this.patientOtherVascularAccessType = _data["patientOtherVascularAccessType"];
            this.rfm = _data["rfm"];
            this.rfmLabel = _data["rfmLabel"];
            this.rfr = _data["rfr"];
            this.rfv = _data["rfv"];
            this.status = _data["status"];
            this.beforeWeight = _data["beforeWeight"];
            this.beforeWeightMode = _data["beforeWeightMode"];
            this.beforeWeightModeLabel = _data["beforeWeightModeLabel"];
            this.deductionWeight = _data["deductionWeight"];
            this.ufg = _data["ufg"];
            this.ufc = _data["ufc"];
            this.afterWeight = _data["afterWeight"];
            this.afterWeightMode = _data["afterWeightMode"];
            this.afterWeightModeLabel = _data["afterWeightModeLabel"];
            this.ufv = _data["ufv"];
            this.ufvWeight = _data["ufvWeight"];
            this.beforeBpPosition = _data["beforeBpPosition"];
            this.beforeBpPositionLabel = _data["beforeBpPositionLabel"];
            this.beforeSbp = _data["beforeSbp"];
            this.beforeDbp = _data["beforeDbp"];
            this.beforePulse = _data["beforePulse"];
            this.afterBpPosition = _data["afterBpPosition"];
            this.afterBpPositionLabel = _data["afterBpPositionLabel"];
            this.afterSbp = _data["afterSbp"];
            this.afterDbp = _data["afterDbp"];
            this.afterPulse = _data["afterPulse"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeBeforeWeight = _data["timeBeforeWeight"] ? dayjs(_data["timeBeforeWeight"].toString()) : <any>undefined;
            this.timeBeforeBp = _data["timeBeforeBp"] ? dayjs(_data["timeBeforeBp"].toString()) : <any>undefined;
            this.timeEnactDoctor = _data["timeEnactDoctor"] ? dayjs(_data["timeEnactDoctor"].toString()) : <any>undefined;
            this.enact = _data["enact"];
            this.timeCheckNurse = _data["timeCheckNurse"] ? dayjs(_data["timeCheckNurse"].toString()) : <any>undefined;
            this.check = _data["check"];
            this.timeAssementBefore = _data["timeAssementBefore"] ? dayjs(_data["timeAssementBefore"].toString()) : <any>undefined;
            this.timeOn = _data["timeOn"] ? dayjs(_data["timeOn"].toString()) : <any>undefined;
            this.timeVerify = _data["timeVerify"] ? dayjs(_data["timeVerify"].toString()) : <any>undefined;
            this.timeFirstMonitor = _data["timeFirstMonitor"] ? dayjs(_data["timeFirstMonitor"].toString()) : <any>undefined;
            this.timeOff = _data["timeOff"] ? dayjs(_data["timeOff"].toString()) : <any>undefined;
            this.timeDisinfect = _data["timeDisinfect"] ? dayjs(_data["timeDisinfect"].toString()) : <any>undefined;
            this.timeAssementAfter = _data["timeAssementAfter"] ? dayjs(_data["timeAssementAfter"].toString()) : <any>undefined;
            this.timeAfterWeight = _data["timeAfterWeight"] ? dayjs(_data["timeAfterWeight"].toString()) : <any>undefined;
            this.timeAfterBp = _data["timeAfterBp"] ? dayjs(_data["timeAfterBp"].toString()) : <any>undefined;
            this.timeAfterSummary = _data["timeAfterSummary"] ? dayjs(_data["timeAfterSummary"].toString()) : <any>undefined;
            this.timeAssement = _data["timeAssement"] ? dayjs(_data["timeAssement"].toString()) : <any>undefined;
            this.assementUserId = _data["assementUserId"];
            this.assementUserName = _data["assementUserName"];
            this.dialysisDurationFact = _data["dialysisDurationFact"];
            this.enactDoctorId = _data["enactDoctorId"];
            this.enactDoctorName = _data["enactDoctorName"];
            this.checkNurseId = _data["checkNurseId"];
            this.checkNurseName = _data["checkNurseName"];
            this.assementBeforeNurseId = _data["assementBeforeNurseId"];
            this.assementBeforeNurseName = _data["assementBeforeNurseName"];
            this.punctureMethod = _data["punctureMethod"];
            this.onNurseId = _data["onNurseId"];
            this.onNurseName = _data["onNurseName"];
            this.onTemp = _data["onTemp"];
            this.punctureNurseId = _data["punctureNurseId"];
            this.punctureNurseName = _data["punctureNurseName"];
            this.verifyNurseId = _data["verifyNurseId"];
            this.verifyNurseName = _data["verifyNurseName"];
            this.verify = _data["verify"];
            this.offNurseId = _data["offNurseId"];
            this.offNurseName = _data["offNurseName"];
            this.offTemp = _data["offTemp"];
            this.offBreathe = _data["offBreathe"];
            this.assementAfterNurseId = _data["assementAfterNurseId"];
            this.assementAfterNurseName = _data["assementAfterNurseName"];
            this.summaryAfterNurseId = _data["summaryAfterNurseId"];
            this.summaryAfterNurseName = _data["summaryAfterNurseName"];
            this.offEarly = _data["offEarly"];
            this.offEarlyCause = _data["offEarlyCause"];
            this.age = _data["age"];
            this.source = _data["source"];
            this.sourceLabel = _data["sourceLabel"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.ward = _data["ward"];
            this.bed = _data["bed"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            this.suggestion = _data["suggestion"];
            this.suggestionNext = _data["suggestionNext"];
            this.cancelReason = _data["cancelReason"];
            this.bedNurseId = _data["bedNurseId"];
            this.bedNurseName = _data["bedNurseName"];
            this.remark = _data["remark"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.iuf = _data["iuf"];
            this.iufMode = _data["iufMode"];
            this.iufHour = _data["iufHour"];
            this.iufValue = _data["iufValue"];
            this.iufStartTime = _data["iufStartTime"] ? dayjs(_data["iufStartTime"].toString()) : <any>undefined;
            this.patientPrescriptionId = _data["patientPrescriptionId"];
            this.placementNurseId = _data["placementNurseId"];
            this.placementNurseName = _data["placementNurseName"];
            this.qualityNurseId = _data["qualityNurseId"];
            this.qualityNurseName = _data["qualityNurseName"];
            this.isReplenish = _data["isReplenish"];
            this.isArchive = _data["isArchive"];
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
            this.patientVascularAccesss = _data["patientVascularAccesss"] ? PatientVascularAccess.fromJS(_data["patientVascularAccesss"]) : <any>undefined;
            this.patientOtherVascularAccesss = _data["patientOtherVascularAccesss"] ? PatientVascularAccess.fromJS(_data["patientOtherVascularAccesss"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecord {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sn"] = this.sn;
        data["patientId"] = this.patientId;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisMachineId"] = this.dialysisMachineId;
        data["dialysisMachineType"] = this.dialysisMachineType;
        data["dialysisMachineTypeLabel"] = this.dialysisMachineTypeLabel;
        data["dialysisMachineModel"] = this.dialysisMachineModel;
        data["dialysisMachineNo"] = this.dialysisMachineNo;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["dialysisDurationSet"] = this.dialysisDurationSet;
        data["bestWeight"] = this.bestWeight;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["patientVascularAccessType"] = this.patientVascularAccessType;
        data["patientOtherVascularAccessId"] = this.patientOtherVascularAccessId;
        data["patientOtherVascularAccessType"] = this.patientOtherVascularAccessType;
        data["rfm"] = this.rfm;
        data["rfmLabel"] = this.rfmLabel;
        data["rfr"] = this.rfr;
        data["rfv"] = this.rfv;
        data["status"] = this.status;
        data["beforeWeight"] = this.beforeWeight;
        data["beforeWeightMode"] = this.beforeWeightMode;
        data["beforeWeightModeLabel"] = this.beforeWeightModeLabel;
        data["deductionWeight"] = this.deductionWeight;
        data["ufg"] = this.ufg;
        data["ufc"] = this.ufc;
        data["afterWeight"] = this.afterWeight;
        data["afterWeightMode"] = this.afterWeightMode;
        data["afterWeightModeLabel"] = this.afterWeightModeLabel;
        data["ufv"] = this.ufv;
        data["ufvWeight"] = this.ufvWeight;
        data["beforeBpPosition"] = this.beforeBpPosition;
        data["beforeBpPositionLabel"] = this.beforeBpPositionLabel;
        data["beforeSbp"] = this.beforeSbp;
        data["beforeDbp"] = this.beforeDbp;
        data["beforePulse"] = this.beforePulse;
        data["afterBpPosition"] = this.afterBpPosition;
        data["afterBpPositionLabel"] = this.afterBpPositionLabel;
        data["afterSbp"] = this.afterSbp;
        data["afterDbp"] = this.afterDbp;
        data["afterPulse"] = this.afterPulse;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toISOString() : <any>undefined;
        data["timeBeforeWeight"] = this.timeBeforeWeight ? this.timeBeforeWeight.toISOString() : <any>undefined;
        data["timeBeforeBp"] = this.timeBeforeBp ? this.timeBeforeBp.toISOString() : <any>undefined;
        data["timeEnactDoctor"] = this.timeEnactDoctor ? this.timeEnactDoctor.toISOString() : <any>undefined;
        data["enact"] = this.enact;
        data["timeCheckNurse"] = this.timeCheckNurse ? this.timeCheckNurse.toISOString() : <any>undefined;
        data["check"] = this.check;
        data["timeAssementBefore"] = this.timeAssementBefore ? this.timeAssementBefore.toISOString() : <any>undefined;
        data["timeOn"] = this.timeOn ? this.timeOn.toISOString() : <any>undefined;
        data["timeVerify"] = this.timeVerify ? this.timeVerify.toISOString() : <any>undefined;
        data["timeFirstMonitor"] = this.timeFirstMonitor ? this.timeFirstMonitor.toISOString() : <any>undefined;
        data["timeOff"] = this.timeOff ? this.timeOff.toISOString() : <any>undefined;
        data["timeDisinfect"] = this.timeDisinfect ? this.timeDisinfect.toISOString() : <any>undefined;
        data["timeAssementAfter"] = this.timeAssementAfter ? this.timeAssementAfter.toISOString() : <any>undefined;
        data["timeAfterWeight"] = this.timeAfterWeight ? this.timeAfterWeight.toISOString() : <any>undefined;
        data["timeAfterBp"] = this.timeAfterBp ? this.timeAfterBp.toISOString() : <any>undefined;
        data["timeAfterSummary"] = this.timeAfterSummary ? this.timeAfterSummary.toISOString() : <any>undefined;
        data["timeAssement"] = this.timeAssement ? this.timeAssement.toISOString() : <any>undefined;
        data["assementUserId"] = this.assementUserId;
        data["assementUserName"] = this.assementUserName;
        data["dialysisDurationFact"] = this.dialysisDurationFact;
        data["enactDoctorId"] = this.enactDoctorId;
        data["enactDoctorName"] = this.enactDoctorName;
        data["checkNurseId"] = this.checkNurseId;
        data["checkNurseName"] = this.checkNurseName;
        data["assementBeforeNurseId"] = this.assementBeforeNurseId;
        data["assementBeforeNurseName"] = this.assementBeforeNurseName;
        data["punctureMethod"] = this.punctureMethod;
        data["onNurseId"] = this.onNurseId;
        data["onNurseName"] = this.onNurseName;
        data["onTemp"] = this.onTemp;
        data["punctureNurseId"] = this.punctureNurseId;
        data["punctureNurseName"] = this.punctureNurseName;
        data["verifyNurseId"] = this.verifyNurseId;
        data["verifyNurseName"] = this.verifyNurseName;
        data["verify"] = this.verify;
        data["offNurseId"] = this.offNurseId;
        data["offNurseName"] = this.offNurseName;
        data["offTemp"] = this.offTemp;
        data["offBreathe"] = this.offBreathe;
        data["assementAfterNurseId"] = this.assementAfterNurseId;
        data["assementAfterNurseName"] = this.assementAfterNurseName;
        data["summaryAfterNurseId"] = this.summaryAfterNurseId;
        data["summaryAfterNurseName"] = this.summaryAfterNurseName;
        data["offEarly"] = this.offEarly;
        data["offEarlyCause"] = this.offEarlyCause;
        data["age"] = this.age;
        data["source"] = this.source;
        data["sourceLabel"] = this.sourceLabel;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["ward"] = this.ward;
        data["bed"] = this.bed;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        data["suggestion"] = this.suggestion;
        data["suggestionNext"] = this.suggestionNext;
        data["cancelReason"] = this.cancelReason;
        data["bedNurseId"] = this.bedNurseId;
        data["bedNurseName"] = this.bedNurseName;
        data["remark"] = this.remark;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["iuf"] = this.iuf;
        data["iufMode"] = this.iufMode;
        data["iufHour"] = this.iufHour;
        data["iufValue"] = this.iufValue;
        data["iufStartTime"] = this.iufStartTime ? this.iufStartTime.toISOString() : <any>undefined;
        data["patientPrescriptionId"] = this.patientPrescriptionId;
        data["placementNurseId"] = this.placementNurseId;
        data["placementNurseName"] = this.placementNurseName;
        data["qualityNurseId"] = this.qualityNurseId;
        data["qualityNurseName"] = this.qualityNurseName;
        data["isReplenish"] = this.isReplenish;
        data["isArchive"] = this.isArchive;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        data["patientVascularAccesss"] = this.patientVascularAccesss ? this.patientVascularAccesss.toJSON() : <any>undefined;
        data["patientOtherVascularAccesss"] = this.patientOtherVascularAccesss ? this.patientOtherVascularAccesss.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析记录 */
export interface ICureRecord {
    /** 标识 */
    id?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 透析机标识 */
    dialysisMachineId?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineType?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineTypeLabel?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel?: string | undefined;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet?: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路) */
    patientVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientVascularAccessType?: string | undefined;
    /** [血管通路](患者血管通路) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessType?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换方式 */
    rfmLabel?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 治疗流程状态 `DIC.DIALYSIS.STATUS` *已签到,上机准备,治疗中,已下机,已结束* */
    status?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前体重方式 */
    beforeWeightModeLabel?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 净脱水量 *ml Ultrafiltration Complete* */
    ufc?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后体重方式 */
    afterWeightModeLabel?: string | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 称重脱水量 *ml* */
    ufvWeight?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢* */
    beforeBpPosition?: string | undefined;
    /** 透前血压测量位置 */
    beforeBpPositionLabel?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透后血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢* */
    afterBpPosition?: string | undefined;
    /** 透后血压测量位置 */
    afterBpPositionLabel?: string | undefined;
    /** 透后收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 透后舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 透后脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 透前体重时间 */
    timeBeforeWeight?: dayjs.Dayjs | undefined;
    /** 透前血压时间 */
    timeBeforeBp?: dayjs.Dayjs | undefined;
    /** 医生制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 方案是否制定0,1 */
    enact?: number | undefined;
    /** 护士确认方案时间 */
    timeCheckNurse?: dayjs.Dayjs | undefined;
    /** 方案是否通过0,1 */
    check?: number | undefined;
    /** 透前评估时间 */
    timeAssementBefore?: dayjs.Dayjs | undefined;
    /** 穿刺时间 */
    timeOn?: dayjs.Dayjs | undefined;
    /** 交叉核对时间 */
    timeVerify?: dayjs.Dayjs | undefined;
    /** 首次监测时间 */
    timeFirstMonitor?: dayjs.Dayjs | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 消毒时间 */
    timeDisinfect?: dayjs.Dayjs | undefined;
    /** 透后评估时间 */
    timeAssementAfter?: dayjs.Dayjs | undefined;
    /** 透后体重时间 */
    timeAfterWeight?: dayjs.Dayjs | undefined;
    /** 透后血压时间 */
    timeAfterBp?: dayjs.Dayjs | undefined;
    /** 透后小结时间 */
    timeAfterSummary?: dayjs.Dayjs | undefined;
    /** 透析评估时间 */
    timeAssement?: dayjs.Dayjs | undefined;
    /** 透析评估医护标识 */
    assementUserId?: string | undefined;
    /** 透析评估医护姓名 */
    assementUserName?: string | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 制定方案医生标识 */
    enactDoctorId?: string | undefined;
    /** 制定方案医生姓名 */
    enactDoctorName?: string | undefined;
    /** 确认方案护士标识 */
    checkNurseId?: string | undefined;
    /** 确认方案护士姓名 */
    checkNurseName?: string | undefined;
    /** 透前评估护士标识 */
    assementBeforeNurseId?: string | undefined;
    /** 透前评估护士姓名 */
    assementBeforeNurseName?: string | undefined;
    /** 穿刺方法 `DIC.DIALYSIS.PUNCTURE.METHOD` */
    punctureMethod?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 上机体温 */
    onTemp?: number | undefined;
    /** 穿刺护士标识 */
    punctureNurseId?: string | undefined;
    /** 穿刺护士姓名 */
    punctureNurseName?: string | undefined;
    /** 核对护士标识 */
    verifyNurseId?: string | undefined;
    /** 核对护士姓名 */
    verifyNurseName?: string | undefined;
    /** 核对是否通过0,1 */
    verify?: number | undefined;
    /** 下机护士标识 */
    offNurseId?: string | undefined;
    /** 下机护士姓名 */
    offNurseName?: string | undefined;
    /** 下机体温 */
    offTemp?: number | undefined;
    /** 下机呼吸 */
    offBreathe?: number | undefined;
    /** 透后评估护士标识 */
    assementAfterNurseId?: string | undefined;
    /** 透后评估护士姓名 */
    assementAfterNurseName?: string | undefined;
    /** 透后小结护士标识 */
    summaryAfterNurseId?: string | undefined;
    /** 透后小结护士姓名 */
    summaryAfterNurseName?: string | undefined;
    /** 是否提前下机0,1 *判断标准：提前半个小时以上下机* */
    offEarly?: number | undefined;
    /** 提前下机原因 *字典模板* `DIC.DIALYSIS.OFFEARLY.TMPL` */
    offEarlyCause?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    source?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 病区 *住院的* */
    ward?: string | undefined;
    /** 床位 *住院的* */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 下次透析建议 */
    suggestionNext?: string | undefined;
    /** 取消透析原因 *在交叉核对之前都可以取消透析* */
    cancelReason?: string | undefined;
    /** 管床护士标识 */
    bedNurseId?: string | undefined;
    /** 管床护士姓名 */
    bedNurseName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 是否单超0,1 */
    iuf?: number;
    /** 单超方式 */
    iufMode?: string | undefined;
    /** 单超时间 *h* */
    iufHour?: number | undefined;
    /** 单超量 */
    iufValue?: number | undefined;
    /** 单超开始时间 */
    iufStartTime?: dayjs.Dayjs | undefined;
    /** 患者处方id */
    patientPrescriptionId?: string | undefined;
    /** 置管护士标识 */
    placementNurseId?: string | undefined;
    /** 置管护士姓名 */
    placementNurseName?: string | undefined;
    /** 质控护士标识 */
    qualityNurseId?: string | undefined;
    /** 质控护士姓名 */
    qualityNurseName?: string | undefined;
    /** 是否补录 */
    isReplenish?: number;
    /** 是否归档 */
    isArchive?: number;
    patients?: Patient;
    patientVascularAccesss?: PatientVascularAccess;
    patientOtherVascularAccesss?: PatientVascularAccess;
}

/** 文件列表 */
export class HfsFiles implements IHfsFiles {
    /** 标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
    /** 文件路径 */
    path?: string | undefined;
    /** url */
    url?: string | undefined;
    /** 状态0,1 *0：临时 1：正式* */
    status?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IHfsFiles) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.extension = _data["extension"];
            this.length = _data["length"];
            this.path = _data["path"];
            this.url = _data["url"];
            this.status = _data["status"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HfsFiles {
        data = typeof data === 'object' ? data : {};
        let result = new HfsFiles();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["extension"] = this.extension;
        data["length"] = this.length;
        data["path"] = this.path;
        data["url"] = this.url;
        data["status"] = this.status;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 文件列表 */
export interface IHfsFiles {
    /** 标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
    /** 文件路径 */
    path?: string | undefined;
    /** url */
    url?: string | undefined;
    /** 状态0,1 *0：临时 1：正式* */
    status?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 患者信息 */
export class Patient implements IPatient {
    /** 标识 */
    id?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 姓首字母 */
    surnameCode?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 *用于患者重名,默认填姓名,系统内默认显示别名,打印单据使用姓名* */
    name2?: string | undefined;
    /** 照片路径 */
    photo?: string | undefined;
    /** 人脸识别图像 */
    face?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 档案号 *XT{Year}{Month}{Sequence}* */
    archiveNumber?: string | undefined;
    /** 医保类型 `DIC.PEOPLE.MEDICARETYPE` *城镇职工,城镇居民* */
    medicareType?: string | undefined;
    /** 医保号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 血型 `DIC.PEOPLE.BLOODTYPE` *字典:A,B,O,未知* */
    bloodType?: string | undefined;
    /** RH `DIC.PEOPLE.RH` */
    rh?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 本人电话 */
    telephone?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 职业 `DIC.PEOPLE.PROFESSION` *个体,工人,农民,学生* */
    profession?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 家庭住址 */
    address?: string | undefined;
    /** 工作单位 */
    workUnit?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: dayjs.Dayjs | undefined;
    /** 透析状态 `DIC.PATIENT.DIALYSIS.STATE` *长期,临时* */
    dialysisState?: string | undefined;
    /** 透析状态是否转换 `DIC.PATIENT.DIALYSIS.STATE.TRANSITION` *0:未转换,1:已转换 编辑诊断-状态自动转换时管理这个状态* */
    dialysisStateTransition?: number;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 转归状态 `DIC.PROGNOSIS.TYPE` *患者编辑界面不做维护,自动管理* */
    prognosisState?: string | undefined;
    /** 传染病 `DIC.PATIENT.POSITIVE` *0:阴性,1:阳性 编辑诊断-传染病时管理这个状态* */
    positive?: number;
    /** 并发症 `DIC.PATIENT.COMPLICATION` *多选* */
    complication?: string | undefined;
    /** 主治医生 */
    doctor?: string | undefined;
    /** 主管护士 */
    nurse?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 病理诊断 *0:无,1:有* */
    diagnosisPathological?: number | undefined;
    /** 并发症诊断 *0:无,1:有* */
    diagnosisComplication?: number | undefined;
    /** 传染病诊断 *0:无,1:有* */
    diagnosisInfectiousDiseases?: number | undefined;
    /** 肿瘤诊断 *0:无,1:有* */
    diagnosisTumor?: number | undefined;
    /** 过敏诊断 *0:无,1:有* */
    diagnosisAllergy?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 患者数据初始化来源 *ihdis,his* */
    initialSource?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 指纹 */
    finger?: string | undefined;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 病历夹号 `DIC.PATIENT.CONDITION` *一般,病重,病危* */
    medicareCondition?: string | undefined;
    /** 下次感筛检验日期 */
    nextDate?: dayjs.Dayjs | undefined;
    /** 首次透析时采用的通路类型 */
    firstDialysisVascularAccess?: string | undefined;
    /** 首次透析时采取的方式 */
    firstDialysisMode?: string | undefined;
    /** 首次肾脏代替治疗时肾功能 */
    firstGfr?: string | undefined;
    /** 首次肾脏代替治疗时血肌酐水平 */
    firstScr?: string | undefined;

    constructor(data?: IPatient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.surnameCode = _data["surnameCode"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.photo = _data["photo"];
            this.face = _data["face"];
            this.gender = _data["gender"];
            this.source = _data["source"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.department = _data["department"];
            this.ward = _data["ward"];
            this.bed = _data["bed"];
            this.archiveNumber = _data["archiveNumber"];
            this.medicareType = _data["medicareType"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.nationality = _data["nationality"];
            this.idType = _data["idType"];
            this.idNumber = _data["idNumber"];
            this.birthdate = _data["birthdate"] ? dayjs(_data["birthdate"].toString()) : <any>undefined;
            this.bloodType = _data["bloodType"];
            this.rh = _data["rh"];
            this.height = _data["height"];
            this.telephone = _data["telephone"];
            this.marital = _data["marital"];
            this.educationalLevel = _data["educationalLevel"];
            this.profession = _data["profession"];
            this.province = _data["province"];
            this.city = _data["city"];
            this.area = _data["area"];
            this.address = _data["address"];
            this.workUnit = _data["workUnit"];
            this.receiptDate = _data["receiptDate"] ? dayjs(_data["receiptDate"].toString()) : <any>undefined;
            this.dialysisState = _data["dialysisState"];
            this.dialysisStateTransition = _data["dialysisStateTransition"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.dialysisCountInit = _data["dialysisCountInit"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            this.prognosisState = _data["prognosisState"];
            this.positive = _data["positive"];
            this.complication = _data["complication"];
            this.doctor = _data["doctor"];
            this.nurse = _data["nurse"];
            this.diagnosis = _data["diagnosis"];
            this.diagnosisPathological = _data["diagnosisPathological"];
            this.diagnosisComplication = _data["diagnosisComplication"];
            this.diagnosisInfectiousDiseases = _data["diagnosisInfectiousDiseases"];
            this.diagnosisTumor = _data["diagnosisTumor"];
            this.diagnosisAllergy = _data["diagnosisAllergy"];
            this.remark = _data["remark"];
            this.initialSource = _data["initialSource"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.finger = _data["finger"];
            this.dossierNumber = _data["dossierNumber"];
            this.medicareCondition = _data["medicareCondition"];
            this.nextDate = _data["nextDate"] ? dayjs(_data["nextDate"].toString()) : <any>undefined;
            this.firstDialysisVascularAccess = _data["firstDialysisVascularAccess"];
            this.firstDialysisMode = _data["firstDialysisMode"];
            this.firstGfr = _data["firstGfr"];
            this.firstScr = _data["firstScr"];
        }
    }

    static fromJS(data: any): Patient {
        data = typeof data === 'object' ? data : {};
        let result = new Patient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["surnameCode"] = this.surnameCode;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["photo"] = this.photo;
        data["face"] = this.face;
        data["gender"] = this.gender;
        data["source"] = this.source;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["department"] = this.department;
        data["ward"] = this.ward;
        data["bed"] = this.bed;
        data["archiveNumber"] = this.archiveNumber;
        data["medicareType"] = this.medicareType;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["dialysisNumber"] = this.dialysisNumber;
        data["nationality"] = this.nationality;
        data["idType"] = this.idType;
        data["idNumber"] = this.idNumber;
        data["birthdate"] = this.birthdate ? this.birthdate.toISOString() : <any>undefined;
        data["bloodType"] = this.bloodType;
        data["rh"] = this.rh;
        data["height"] = this.height;
        data["telephone"] = this.telephone;
        data["marital"] = this.marital;
        data["educationalLevel"] = this.educationalLevel;
        data["profession"] = this.profession;
        data["province"] = this.province;
        data["city"] = this.city;
        data["area"] = this.area;
        data["address"] = this.address;
        data["workUnit"] = this.workUnit;
        data["receiptDate"] = this.receiptDate ? this.receiptDate.toISOString() : <any>undefined;
        data["dialysisState"] = this.dialysisState;
        data["dialysisStateTransition"] = this.dialysisStateTransition;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["dialysisCountInit"] = this.dialysisCountInit;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        data["prognosisState"] = this.prognosisState;
        data["positive"] = this.positive;
        data["complication"] = this.complication;
        data["doctor"] = this.doctor;
        data["nurse"] = this.nurse;
        data["diagnosis"] = this.diagnosis;
        data["diagnosisPathological"] = this.diagnosisPathological;
        data["diagnosisComplication"] = this.diagnosisComplication;
        data["diagnosisInfectiousDiseases"] = this.diagnosisInfectiousDiseases;
        data["diagnosisTumor"] = this.diagnosisTumor;
        data["diagnosisAllergy"] = this.diagnosisAllergy;
        data["remark"] = this.remark;
        data["initialSource"] = this.initialSource;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["finger"] = this.finger;
        data["dossierNumber"] = this.dossierNumber;
        data["medicareCondition"] = this.medicareCondition;
        data["nextDate"] = this.nextDate ? this.nextDate.toISOString() : <any>undefined;
        data["firstDialysisVascularAccess"] = this.firstDialysisVascularAccess;
        data["firstDialysisMode"] = this.firstDialysisMode;
        data["firstGfr"] = this.firstGfr;
        data["firstScr"] = this.firstScr;
        return data;
    }
}

/** 患者信息 */
export interface IPatient {
    /** 标识 */
    id?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 姓首字母 */
    surnameCode?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 *用于患者重名,默认填姓名,系统内默认显示别名,打印单据使用姓名* */
    name2?: string | undefined;
    /** 照片路径 */
    photo?: string | undefined;
    /** 人脸识别图像 */
    face?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 档案号 *XT{Year}{Month}{Sequence}* */
    archiveNumber?: string | undefined;
    /** 医保类型 `DIC.PEOPLE.MEDICARETYPE` *城镇职工,城镇居民* */
    medicareType?: string | undefined;
    /** 医保号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 血型 `DIC.PEOPLE.BLOODTYPE` *字典:A,B,O,未知* */
    bloodType?: string | undefined;
    /** RH `DIC.PEOPLE.RH` */
    rh?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 本人电话 */
    telephone?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 职业 `DIC.PEOPLE.PROFESSION` *个体,工人,农民,学生* */
    profession?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 家庭住址 */
    address?: string | undefined;
    /** 工作单位 */
    workUnit?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: dayjs.Dayjs | undefined;
    /** 透析状态 `DIC.PATIENT.DIALYSIS.STATE` *长期,临时* */
    dialysisState?: string | undefined;
    /** 透析状态是否转换 `DIC.PATIENT.DIALYSIS.STATE.TRANSITION` *0:未转换,1:已转换 编辑诊断-状态自动转换时管理这个状态* */
    dialysisStateTransition?: number;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 转归状态 `DIC.PROGNOSIS.TYPE` *患者编辑界面不做维护,自动管理* */
    prognosisState?: string | undefined;
    /** 传染病 `DIC.PATIENT.POSITIVE` *0:阴性,1:阳性 编辑诊断-传染病时管理这个状态* */
    positive?: number;
    /** 并发症 `DIC.PATIENT.COMPLICATION` *多选* */
    complication?: string | undefined;
    /** 主治医生 */
    doctor?: string | undefined;
    /** 主管护士 */
    nurse?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 病理诊断 *0:无,1:有* */
    diagnosisPathological?: number | undefined;
    /** 并发症诊断 *0:无,1:有* */
    diagnosisComplication?: number | undefined;
    /** 传染病诊断 *0:无,1:有* */
    diagnosisInfectiousDiseases?: number | undefined;
    /** 肿瘤诊断 *0:无,1:有* */
    diagnosisTumor?: number | undefined;
    /** 过敏诊断 *0:无,1:有* */
    diagnosisAllergy?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 患者数据初始化来源 *ihdis,his* */
    initialSource?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 指纹 */
    finger?: string | undefined;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 病历夹号 `DIC.PATIENT.CONDITION` *一般,病重,病危* */
    medicareCondition?: string | undefined;
    /** 下次感筛检验日期 */
    nextDate?: dayjs.Dayjs | undefined;
    /** 首次透析时采用的通路类型 */
    firstDialysisVascularAccess?: string | undefined;
    /** 首次透析时采取的方式 */
    firstDialysisMode?: string | undefined;
    /** 首次肾脏代替治疗时肾功能 */
    firstGfr?: string | undefined;
    /** 首次肾脏代替治疗时血肌酐水平 */
    firstScr?: string | undefined;
}

/** 患者血管通路 */
export class PatientVascularAccess implements IPatientVascularAccess {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 是否改变通路0,1 */
    change?: number | undefined;
    /** 改变日期 */
    changeDate?: dayjs.Dayjs | undefined;
    /** 改变原因 `DIC.VASCULAR.ACCESS.CHANGECAUSE` *可以多选,使用`;`分隔* */
    changeCause?: string | undefined;
    /** 其它改变原因 */
    changeCauseOther?: string | undefined;
    /** 位置(左-右) `DIC.VASCULAR.ACCESS.LOCATION` *左侧,右侧* */
    location?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type?: string | undefined;
    /** 位置 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 中心静脉置管方法 `DIC.VASCULAR.ACCESS.WAY.CVC` */
    way?: string | undefined;
    /** 其他描述 */
    remarkOther?: string | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 默认在处方应用0,1 */
    default?: number | undefined;
    /** 停用时间 */
    disableDate?: dayjs.Dayjs | undefined;
    /** 停用原因 */
    disableReason?: string | undefined;
    /** 已用天数 */
    lifetime?: number | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;

    constructor(data?: IPatientVascularAccess) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.change = _data["change"];
            this.changeDate = _data["changeDate"] ? dayjs(_data["changeDate"].toString()) : <any>undefined;
            this.changeCause = _data["changeCause"];
            this.changeCauseOther = _data["changeCauseOther"];
            this.location = _data["location"];
            this.type = _data["type"];
            this.position = _data["position"];
            this.way = _data["way"];
            this.remarkOther = _data["remarkOther"];
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.default = _data["default"];
            this.disableDate = _data["disableDate"] ? dayjs(_data["disableDate"].toString()) : <any>undefined;
            this.disableReason = _data["disableReason"];
            this.lifetime = _data["lifetime"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientVascularAccess {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccess();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["change"] = this.change;
        data["changeDate"] = this.changeDate ? this.changeDate.toISOString() : <any>undefined;
        data["changeCause"] = this.changeCause;
        data["changeCauseOther"] = this.changeCauseOther;
        data["location"] = this.location;
        data["type"] = this.type;
        data["position"] = this.position;
        data["way"] = this.way;
        data["remarkOther"] = this.remarkOther;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["default"] = this.default;
        data["disableDate"] = this.disableDate ? this.disableDate.toISOString() : <any>undefined;
        data["disableReason"] = this.disableReason;
        data["lifetime"] = this.lifetime;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        return data;
    }
}

/** 患者血管通路 */
export interface IPatientVascularAccess {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 是否改变通路0,1 */
    change?: number | undefined;
    /** 改变日期 */
    changeDate?: dayjs.Dayjs | undefined;
    /** 改变原因 `DIC.VASCULAR.ACCESS.CHANGECAUSE` *可以多选,使用`;`分隔* */
    changeCause?: string | undefined;
    /** 其它改变原因 */
    changeCauseOther?: string | undefined;
    /** 位置(左-右) `DIC.VASCULAR.ACCESS.LOCATION` *左侧,右侧* */
    location?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type?: string | undefined;
    /** 位置 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 中心静脉置管方法 `DIC.VASCULAR.ACCESS.WAY.CVC` */
    way?: string | undefined;
    /** 其他描述 */
    remarkOther?: string | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 默认在处方应用0,1 */
    default?: number | undefined;
    /** 停用时间 */
    disableDate?: dayjs.Dayjs | undefined;
    /** 停用原因 */
    disableReason?: string | undefined;
    /** 已用天数 */
    lifetime?: number | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
}

/** Reponse */
export class Result implements IResult {
    /** 返回结果(true,false) */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 相关的链接地址 */
    url?: string | undefined;
    count?: number;
    /** 数据 */
    data?: any | undefined;

    constructor(data?: IResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.url = _data["url"];
            this.count = _data["count"];
            this.data = _data["data"];
        }
    }

    static fromJS(data: any): Result {
        data = typeof data === 'object' ? data : {};
        let result = new Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["url"] = this.url;
        data["count"] = this.count;
        data["data"] = this.data;
        return data;
    }
}

/** Reponse */
export interface IResult {
    /** 返回结果(true,false) */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 相关的链接地址 */
    url?: string | undefined;
    count?: number;
    /** 数据 */
    data?: any | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}